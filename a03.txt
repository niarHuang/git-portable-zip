          }
          get _pdfFunctionFactory() {
            const pdfFunctionFactory = new _function.PDFFunctionFactory({
              xref: this.xref,
              isEvalSupported: this.evaluatorOptions.isEvalSupported,
            });
            return (0, _util.shadow)(
              this,
              "_pdfFunctionFactory",
              pdfFunctionFactory
            );
          }
        }
        function parseAppearanceStream(stream, evaluatorOptions, xref) {
          return new AppearanceStreamEvaluator(
            stream,
            evaluatorOptions,
            xref
          ).parse();
        }
        function getPdfColor(color, isFill) {
          if (color[0] === color[1] && color[1] === color[2]) {
            const gray = color[0] / 255;
            return `${(0, _core_utils.numberToString)(gray)} ${
              isFill ? "g" : "G"
            }`;
          }
          return (
            Array.from(color, (c) =>
              (0, _core_utils.numberToString)(c / 255)
            ).join(" ") + ` ${isFill ? "rg" : "RG"}`
          );
        }
        function createDefaultAppearance({ fontSize, fontName, fontColor }) {
          return `/${(0, _core_utils.escapePDFName)(
            fontName
          )} ${fontSize} Tf ${getPdfColor(fontColor, true)}`;
        }
        class FakeUnicodeFont {
          constructor(xref, fontFamily) {
            this.xref = xref;
            this.widths = null;
            this.firstChar = Infinity;
            this.lastChar = -Infinity;
            this.fontFamily = fontFamily;
            const canvas = new OffscreenCanvas(1, 1);
            this.ctxMeasure = canvas.getContext("2d");
            if (!FakeUnicodeFont._fontNameId) {
              FakeUnicodeFont._fontNameId = 1;
            }
            this.fontName = _primitives.Name.get(
              `InvalidPDFjsFont_${fontFamily}_${FakeUnicodeFont._fontNameId++}`
            );
          }
          get toUnicodeRef() {
            if (!FakeUnicodeFont._toUnicodeRef) {
              const toUnicode = `/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo
<< /Registry (Adobe)
/Ordering (UCS) /Supplement 0 >> def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000> <FFFF>
endcodespacerange
1 beginbfrange
<0000> <FFFF> <0000>
endbfrange
endcmap CMapName currentdict /CMap defineresource pop end end`;
              const toUnicodeStream = (FakeUnicodeFont.toUnicodeStream =
                new _stream.StringStream(toUnicode));
              const toUnicodeDict = new _primitives.Dict(this.xref);
              toUnicodeStream.dict = toUnicodeDict;
              toUnicodeDict.set("Length", toUnicode.length);
              FakeUnicodeFont._toUnicodeRef =
                this.xref.getNewPersistentRef(toUnicodeStream);
            }
            return FakeUnicodeFont._toUnicodeRef;
          }
          get fontDescriptorRef() {
            if (!FakeUnicodeFont._fontDescriptorRef) {
              const fontDescriptor = new _primitives.Dict(this.xref);
              fontDescriptor.set(
                "Type",
                _primitives.Name.get("FontDescriptor")
              );
              fontDescriptor.set("FontName", this.fontName);
              fontDescriptor.set("FontFamily", "MyriadPro Regular");
              fontDescriptor.set("FontBBox", [0, 0, 0, 0]);
              fontDescriptor.set("FontStretch", _primitives.Name.get("Normal"));
              fontDescriptor.set("FontWeight", 400);
              fontDescriptor.set("ItalicAngle", 0);
              FakeUnicodeFont._fontDescriptorRef =
                this.xref.getNewPersistentRef(fontDescriptor);
            }
            return FakeUnicodeFont._fontDescriptorRef;
          }
          get descendantFontRef() {
            const descendantFont = new _primitives.Dict(this.xref);
            descendantFont.set("BaseFont", this.fontName);
            descendantFont.set("Type", _primitives.Name.get("Font"));
            descendantFont.set("Subtype", _primitives.Name.get("CIDFontType0"));
            descendantFont.set("CIDToGIDMap", _primitives.Name.get("Identity"));
            descendantFont.set("FirstChar", this.firstChar);
            descendantFont.set("LastChar", this.lastChar);
            descendantFont.set("FontDescriptor", this.fontDescriptorRef);
            descendantFont.set("DW", 1000);
            const widths = [];
            const chars = [...this.widths.entries()].sort();
            let currentChar = null;
            let currentWidths = null;
            for (const [char, width] of chars) {
              if (!currentChar) {
                currentChar = char;
                currentWidths = [width];
                continue;
              }
              if (char === currentChar + currentWidths.length) {
                currentWidths.push(width);
              } else {
                widths.push(currentChar, currentWidths);
                currentChar = char;
                currentWidths = [width];
              }
            }
            if (currentChar) {
              widths.push(currentChar, currentWidths);
            }
            descendantFont.set("W", widths);
            const cidSystemInfo = new _primitives.Dict(this.xref);
            cidSystemInfo.set("Ordering", "Identity");
            cidSystemInfo.set("Registry", "Adobe");
            cidSystemInfo.set("Supplement", 0);
            descendantFont.set("CIDSystemInfo", cidSystemInfo);
            return this.xref.getNewPersistentRef(descendantFont);
          }
          get baseFontRef() {
            const baseFont = new _primitives.Dict(this.xref);
            baseFont.set("BaseFont", this.fontName);
            baseFont.set("Type", _primitives.Name.get("Font"));
            baseFont.set("Subtype", _primitives.Name.get("Type0"));
            baseFont.set("Encoding", _primitives.Name.get("Identity-H"));
            baseFont.set("DescendantFonts", [this.descendantFontRef]);
            baseFont.set("ToUnicode", this.toUnicodeRef);
            return this.xref.getNewPersistentRef(baseFont);
          }
          get resources() {
            const resources = new _primitives.Dict(this.xref);
            const font = new _primitives.Dict(this.xref);
            font.set(this.fontName.name, this.baseFontRef);
            resources.set("Font", font);
            return resources;
          }
          _createContext() {
            this.widths = new Map();
            this.ctxMeasure.font = `1000px ${this.fontFamily}`;
            return this.ctxMeasure;
          }
          createFontResources(text) {
            const ctx = this._createContext();
            for (const line of text.split(/\r\n?|\n/)) {
              for (const char of line.split("")) {
                const code = char.charCodeAt(0);
                if (this.widths.has(code)) {
                  continue;
                }
                const metrics = ctx.measureText(char);
                const width = Math.ceil(metrics.width);
                this.widths.set(code, width);
                this.firstChar = Math.min(code, this.firstChar);
                this.lastChar = Math.max(code, this.lastChar);
              }
            }
            return this.resources;
          }
          createAppearance(
            text,
            rect,
            rotation,
            fontSize,
            bgColor,
            strokeAlpha
          ) {
            const ctx = this._createContext();
            const lines = [];
            let maxWidth = -Infinity;
            for (const line of text.split(/\r\n?|\n/)) {
              lines.push(line);
              const lineWidth = ctx.measureText(line).width;
              maxWidth = Math.max(maxWidth, lineWidth);
              for (const char of line.split("")) {
                const code = char.charCodeAt(0);
                let width = this.widths.get(code);
                if (width === undefined) {
                  const metrics = ctx.measureText(char);
                  width = Math.ceil(metrics.width);
                  this.widths.set(code, width);
                  this.firstChar = Math.min(code, this.firstChar);
                  this.lastChar = Math.max(code, this.lastChar);
                }
              }
            }
            maxWidth *= fontSize / 1000;
            const [x1, y1, x2, y2] = rect;
            let w = x2 - x1;
            let h = y2 - y1;
            if (rotation % 180 !== 0) {
              [w, h] = [h, w];
            }
            let hscale = 1;
            if (maxWidth > w) {
              hscale = w / maxWidth;
            }
            let vscale = 1;
            const lineHeight = _util.LINE_FACTOR * fontSize;
            const lineDescent = _util.LINE_DESCENT_FACTOR * fontSize;
            const maxHeight = lineHeight * lines.length;
            if (maxHeight > h) {
              vscale = h / maxHeight;
            }
            const fscale = Math.min(hscale, vscale);
            const newFontSize = fontSize * fscale;
            const buffer = [
              "q",
              `0 0 ${(0, _core_utils.numberToString)(w)} ${(0,
              _core_utils.numberToString)(h)} re W n`,
              `BT`,
              `1 0 0 1 0 ${(0, _core_utils.numberToString)(
                h + lineDescent
              )} Tm 0 Tc ${getPdfColor(bgColor, true)}`,
              `/${this.fontName.name} ${(0, _core_utils.numberToString)(
                newFontSize
              )} Tf`,
            ];
            const { resources } = this;
            strokeAlpha =
              typeof strokeAlpha === "number" &&
              strokeAlpha >= 0 &&
              strokeAlpha <= 1
                ? strokeAlpha
                : 1;
            if (strokeAlpha !== 1) {
              buffer.push("/R0 gs");
              const extGState = new _primitives.Dict(this.xref);
              const r0 = new _primitives.Dict(this.xref);
              r0.set("ca", strokeAlpha);
              r0.set("CA", strokeAlpha);
              r0.set("Type", _primitives.Name.get("ExtGState"));
              extGState.set("R0", r0);
              resources.set("ExtGState", extGState);
            }
            const vShift = (0, _core_utils.numberToString)(lineHeight);
            for (const line of lines) {
              buffer.push(
                `0 -${vShift} Td <${(0, _core_utils.stringToUTF16HexString)(
                  line
                )}> Tj`
              );
            }
            buffer.push("ET", "Q");
            const appearance = buffer.join("\n");
            const appearanceStreamDict = new _primitives.Dict(this.xref);
            appearanceStreamDict.set("Subtype", _primitives.Name.get("Form"));
            appearanceStreamDict.set("Type", _primitives.Name.get("XObject"));
            appearanceStreamDict.set("BBox", [0, 0, w, h]);
            appearanceStreamDict.set("Length", appearance.length);
            appearanceStreamDict.set("Resources", resources);
            if (rotation) {
              const matrix = (0, _core_utils.getRotationMatrix)(rotation, w, h);
              appearanceStreamDict.set("Matrix", matrix);
            }
            const ap = new _stream.StringStream(appearance);
            ap.dict = appearanceStreamDict;
            return ap;
          }
        }
        exports.FakeUnicodeFont = FakeUnicodeFont;

        /***/
      },
      /* 12 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.ColorSpace = void 0;
        var _util = __w_pdfjs_require__(2);
        var _primitives = __w_pdfjs_require__(4);
        var _base_stream = __w_pdfjs_require__(5);
        var _core_utils = __w_pdfjs_require__(3);
        function resizeRgbImage(src, dest, w1, h1, w2, h2, alpha01) {
          const COMPONENTS = 3;
          alpha01 = alpha01 !== 1 ? 0 : alpha01;
          const xRatio = w1 / w2;
          const yRatio = h1 / h2;
          let newIndex = 0,
            oldIndex;
          const xScaled = new Uint16Array(w2);
          const w1Scanline = w1 * COMPONENTS;
          for (let i = 0; i < w2; i++) {
            xScaled[i] = Math.floor(i * xRatio) * COMPONENTS;
          }
          for (let i = 0; i < h2; i++) {
            const py = Math.floor(i * yRatio) * w1Scanline;
            for (let j = 0; j < w2; j++) {
              oldIndex = py + xScaled[j];
              dest[newIndex++] = src[oldIndex++];
              dest[newIndex++] = src[oldIndex++];
              dest[newIndex++] = src[oldIndex++];
              newIndex += alpha01;
            }
          }
        }
        class ColorSpace {
          constructor(name, numComps) {
            if (this.constructor === ColorSpace) {
              (0, _util.unreachable)("Cannot initialize ColorSpace.");
            }
            this.name = name;
            this.numComps = numComps;
          }
          getRgb(src, srcOffset) {
            const rgb = new Uint8ClampedArray(3);
            this.getRgbItem(src, srcOffset, rgb, 0);
            return rgb;
          }
          getRgbItem(src, srcOffset, dest, destOffset) {
            (0, _util.unreachable)("Should not call ColorSpace.getRgbItem");
          }
          getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
            (0, _util.unreachable)("Should not call ColorSpace.getRgbBuffer");
          }
          getOutputLength(inputLength, alpha01) {
            (0, _util.unreachable)(
              "Should not call ColorSpace.getOutputLength"
            );
          }
          isPassthrough(bits) {
            return false;
          }
          isDefaultDecode(decodeMap, bpc) {
            return ColorSpace.isDefaultDecode(decodeMap, this.numComps);
          }
          fillRgb(
            dest,
            originalWidth,
            originalHeight,
            width,
            height,
            actualHeight,
            bpc,
            comps,
            alpha01
          ) {
            const count = originalWidth * originalHeight;
            let rgbBuf = null;
            const numComponentColors = 1 << bpc;
            const needsResizing =
              originalHeight !== height || originalWidth !== width;
            if (this.isPassthrough(bpc)) {
              rgbBuf = comps;
            } else if (
              this.numComps === 1 &&
              count > numComponentColors &&
              this.name !== "DeviceGray" &&
              this.name !== "DeviceRGB"
            ) {
              const allColors =
                bpc <= 8
                  ? new Uint8Array(numComponentColors)
                  : new Uint16Array(numComponentColors);
              for (let i = 0; i < numComponentColors; i++) {
                allColors[i] = i;
              }
              const colorMap = new Uint8ClampedArray(numComponentColors * 3);
              this.getRgbBuffer(
                allColors,
                0,
                numComponentColors,
                colorMap,
                0,
                bpc,
                0
              );
              if (!needsResizing) {
                let destPos = 0;
                for (let i = 0; i < count; ++i) {
                  const key = comps[i] * 3;
                  dest[destPos++] = colorMap[key];
                  dest[destPos++] = colorMap[key + 1];
                  dest[destPos++] = colorMap[key + 2];
                  destPos += alpha01;
                }
              } else {
                rgbBuf = new Uint8Array(count * 3);
                let rgbPos = 0;
                for (let i = 0; i < count; ++i) {
                  const key = comps[i] * 3;
                  rgbBuf[rgbPos++] = colorMap[key];
                  rgbBuf[rgbPos++] = colorMap[key + 1];
                  rgbBuf[rgbPos++] = colorMap[key + 2];
                }
              }
            } else if (!needsResizing) {
              this.getRgbBuffer(
                comps,
                0,
                width * actualHeight,
                dest,
                0,
                bpc,
                alpha01
              );
            } else {
              rgbBuf = new Uint8ClampedArray(count * 3);
              this.getRgbBuffer(comps, 0, count, rgbBuf, 0, bpc, 0);
            }
            if (rgbBuf) {
              if (needsResizing) {
                resizeRgbImage(
                  rgbBuf,
                  dest,
                  originalWidth,
                  originalHeight,
                  width,
                  height,
                  alpha01
                );
              } else {
                let destPos = 0,
                  rgbPos = 0;
                for (let i = 0, ii = width * actualHeight; i < ii; i++) {
                  dest[destPos++] = rgbBuf[rgbPos++];
                  dest[destPos++] = rgbBuf[rgbPos++];
                  dest[destPos++] = rgbBuf[rgbPos++];
                  destPos += alpha01;
                }
              }
            }
          }
          get usesZeroToOneRange() {
            return (0, _util.shadow)(this, "usesZeroToOneRange", true);
          }
          static _cache(
            cacheKey,
            xref,
            localColorSpaceCache,
            parsedColorSpace
          ) {
            if (!localColorSpaceCache) {
              throw new Error(
                'ColorSpace._cache - expected "localColorSpaceCache" argument.'
              );
            }
            if (!parsedColorSpace) {
              throw new Error(
                'ColorSpace._cache - expected "parsedColorSpace" argument.'
              );
            }
            let csName, csRef;
            if (cacheKey instanceof _primitives.Ref) {
              csRef = cacheKey;
              cacheKey = xref.fetch(cacheKey);
            }
            if (cacheKey instanceof _primitives.Name) {
              csName = cacheKey.name;
            }
            if (csName || csRef) {
              localColorSpaceCache.set(csName, csRef, parsedColorSpace);
            }
          }
          static getCached(cacheKey, xref, localColorSpaceCache) {
            if (!localColorSpaceCache) {
              throw new Error(
                'ColorSpace.getCached - expected "localColorSpaceCache" argument.'
              );
            }
            if (cacheKey instanceof _primitives.Ref) {
              const localColorSpace = localColorSpaceCache.getByRef(cacheKey);
              if (localColorSpace) {
                return localColorSpace;
              }
              try {
                cacheKey = xref.fetch(cacheKey);
              } catch (ex) {
                if (ex instanceof _core_utils.MissingDataException) {
                  throw ex;
                }
              }
            }
            if (cacheKey instanceof _primitives.Name) {
              const localColorSpace = localColorSpaceCache.getByName(
                cacheKey.name
              );
              if (localColorSpace) {
                return localColorSpace;
              }
            }
            return null;
          }
          static async parseAsync({
            cs,
            xref,
            resources = null,
            pdfFunctionFactory,
            localColorSpaceCache,
          }) {
            const parsedColorSpace = this._parse(
              cs,
              xref,
              resources,
              pdfFunctionFactory
            );
            this._cache(cs, xref, localColorSpaceCache, parsedColorSpace);
            return parsedColorSpace;
          }
          static parse({
            cs,
            xref,
            resources = null,
            pdfFunctionFactory,
            localColorSpaceCache,
          }) {
            const cachedColorSpace = this.getCached(
              cs,
              xref,
              localColorSpaceCache
            );
            if (cachedColorSpace) {
              return cachedColorSpace;
            }
            const parsedColorSpace = this._parse(
              cs,
              xref,
              resources,
              pdfFunctionFactory
            );
            this._cache(cs, xref, localColorSpaceCache, parsedColorSpace);
            return parsedColorSpace;
          }
          static _parse(cs, xref, resources = null, pdfFunctionFactory) {
            cs = xref.fetchIfRef(cs);
            if (cs instanceof _primitives.Name) {
              switch (cs.name) {
                case "G":
                case "DeviceGray":
                  return this.singletons.gray;
                case "RGB":
                case "DeviceRGB":
                  return this.singletons.rgb;
                case "CMYK":
                case "DeviceCMYK":
                  return this.singletons.cmyk;
                case "Pattern":
                  return new PatternCS(null);
                default:
                  if (resources instanceof _primitives.Dict) {
                    const colorSpaces = resources.get("ColorSpace");
                    if (colorSpaces instanceof _primitives.Dict) {
                      const resourcesCS = colorSpaces.get(cs.name);
                      if (resourcesCS) {
                        if (resourcesCS instanceof _primitives.Name) {
                          return this._parse(
                            resourcesCS,
                            xref,
                            resources,
                            pdfFunctionFactory
                          );
                        }
                        cs = resourcesCS;
                        break;
                      }
                    }
                  }
                  throw new _util.FormatError(
                    `Unrecognized ColorSpace: ${cs.name}`
                  );
              }
            }
            if (Array.isArray(cs)) {
              const mode = xref.fetchIfRef(cs[0]).name;
              let params, numComps, baseCS, whitePoint, blackPoint, gamma;
              switch (mode) {
                case "G":
                case "DeviceGray":
                  return this.singletons.gray;
                case "RGB":
                case "DeviceRGB":
                  return this.singletons.rgb;
                case "CMYK":
                case "DeviceCMYK":
                  return this.singletons.cmyk;
                case "CalGray":
                  params = xref.fetchIfRef(cs[1]);
                  whitePoint = params.getArray("WhitePoint");
                  blackPoint = params.getArray("BlackPoint");
                  gamma = params.get("Gamma");
                  return new CalGrayCS(whitePoint, blackPoint, gamma);
                case "CalRGB":
                  params = xref.fetchIfRef(cs[1]);
                  whitePoint = params.getArray("WhitePoint");
                  blackPoint = params.getArray("BlackPoint");
                  gamma = params.getArray("Gamma");
                  const matrix = params.getArray("Matrix");
                  return new CalRGBCS(whitePoint, blackPoint, gamma, matrix);
                case "ICCBased":
                  const stream = xref.fetchIfRef(cs[1]);
                  const dict = stream.dict;
                  numComps = dict.get("N");
                  const alt = dict.get("Alternate");
                  if (alt) {
                    const altCS = this._parse(
                      alt,
                      xref,
                      resources,
                      pdfFunctionFactory
                    );
                    if (altCS.numComps === numComps) {
                      return altCS;
                    }
                    (0, _util.warn)(
                      "ICCBased color space: Ignoring incorrect /Alternate entry."
                    );
                  }
                  if (numComps === 1) {
                    return this.singletons.gray;
                  } else if (numComps === 3) {
                    return this.singletons.rgb;
                  } else if (numComps === 4) {
                    return this.singletons.cmyk;
                  }
                  break;
                case "Pattern":
                  baseCS = cs[1] || null;
                  if (baseCS) {
                    baseCS = this._parse(
                      baseCS,
                      xref,
                      resources,
                      pdfFunctionFactory
                    );
                  }
                  return new PatternCS(baseCS);
                case "I":
                case "Indexed":
                  baseCS = this._parse(
                    cs[1],
                    xref,
                    resources,
                    pdfFunctionFactory
                  );
                  const hiVal = xref.fetchIfRef(cs[2]) + 1;
                  const lookup = xref.fetchIfRef(cs[3]);
                  return new IndexedCS(baseCS, hiVal, lookup);
                case "Separation":
                case "DeviceN":
                  const name = xref.fetchIfRef(cs[1]);
                  numComps = Array.isArray(name) ? name.length : 1;
                  baseCS = this._parse(
                    cs[2],
                    xref,
                    resources,
                    pdfFunctionFactory
                  );
                  const tintFn = pdfFunctionFactory.create(cs[3]);
                  return new AlternateCS(numComps, baseCS, tintFn);
                case "Lab":
                  params = xref.fetchIfRef(cs[1]);
                  whitePoint = params.getArray("WhitePoint");
                  blackPoint = params.getArray("BlackPoint");
                  const range = params.getArray("Range");
                  return new LabCS(whitePoint, blackPoint, range);
                default:
                  throw new _util.FormatError(
                    `Unimplemented ColorSpace object: ${mode}`
                  );
              }
            }
            throw new _util.FormatError(
              `Unrecognized ColorSpace object: ${cs}`
            );
          }
          static isDefaultDecode(decode, numComps) {
            if (!Array.isArray(decode)) {
              return true;
            }
            if (numComps * 2 !== decode.length) {
              (0, _util.warn)("The decode map is not the correct length");
              return true;
            }
            for (let i = 0, ii = decode.length; i < ii; i += 2) {
              if (decode[i] !== 0 || decode[i + 1] !== 1) {
                return false;
              }
            }
            return true;
          }
          static get singletons() {
            return (0, _util.shadow)(this, "singletons", {
              get gray() {
                return (0, _util.shadow)(this, "gray", new DeviceGrayCS());
              },
              get rgb() {
                return (0, _util.shadow)(this, "rgb", new DeviceRgbCS());
              },
              get cmyk() {
                return (0, _util.shadow)(this, "cmyk", new DeviceCmykCS());
              },
            });
          }
        }
        exports.ColorSpace = ColorSpace;
        class AlternateCS extends ColorSpace {
          constructor(numComps, base, tintFn) {
            super("Alternate", numComps);
            this.base = base;
            this.tintFn = tintFn;
            this.tmpBuf = new Float32Array(base.numComps);
          }
          getRgbItem(src, srcOffset, dest, destOffset) {
            const tmpBuf = this.tmpBuf;
            this.tintFn(src, srcOffset, tmpBuf, 0);
            this.base.getRgbItem(tmpBuf, 0, dest, destOffset);
          }
          getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
            const tintFn = this.tintFn;
            const base = this.base;
            const scale = 1 / ((1 << bits) - 1);
            const baseNumComps = base.numComps;
            const usesZeroToOneRange = base.usesZeroToOneRange;
            const isPassthrough =
              (base.isPassthrough(8) || !usesZeroToOneRange) && alpha01 === 0;
            let pos = isPassthrough ? destOffset : 0;
            const baseBuf = isPassthrough
              ? dest
              : new Uint8ClampedArray(baseNumComps * count);
            const numComps = this.numComps;
            const scaled = new Float32Array(numComps);
            const tinted = new Float32Array(baseNumComps);
            let i, j;
            for (i = 0; i < count; i++) {
              for (j = 0; j < numComps; j++) {
                scaled[j] = src[srcOffset++] * scale;
              }
              tintFn(scaled, 0, tinted, 0);
              if (usesZeroToOneRange) {
                for (j = 0; j < baseNumComps; j++) {
                  baseBuf[pos++] = tinted[j] * 255;
                }
              } else {
                base.getRgbItem(tinted, 0, baseBuf, pos);
                pos += baseNumComps;
              }
            }
            if (!isPassthrough) {
              base.getRgbBuffer(
                baseBuf,
                0,
                count,
                dest,
                destOffset,
                8,
                alpha01
              );
            }
          }
          getOutputLength(inputLength, alpha01) {
            return this.base.getOutputLength(
              (inputLength * this.base.numComps) / this.numComps,
              alpha01
            );
          }
        }
        class PatternCS extends ColorSpace {
          constructor(baseCS) {
            super("Pattern", null);
            this.base = baseCS;
          }
          isDefaultDecode(decodeMap, bpc) {
            (0, _util.unreachable)("Should not call PatternCS.isDefaultDecode");
          }
        }
        class IndexedCS extends ColorSpace {
          constructor(base, highVal, lookup) {
            super("Indexed", 1);
            this.base = base;
            this.highVal = highVal;
            const length = base.numComps * highVal;
            this.lookup = new Uint8Array(length);
            if (lookup instanceof _base_stream.BaseStream) {
              const bytes = lookup.getBytes(length);
              this.lookup.set(bytes);
            } else if (typeof lookup === "string") {
              for (let i = 0; i < length; ++i) {
                this.lookup[i] = lookup.charCodeAt(i) & 0xff;
              }
            } else {
              throw new _util.FormatError(
                `IndexedCS - unrecognized lookup table: ${lookup}`
              );
            }
          }
          getRgbItem(src, srcOffset, dest, destOffset) {
            const numComps = this.base.numComps;
            const start = src[srcOffset] * numComps;
            this.base.getRgbBuffer(
              this.lookup,
              start,
              1,
              dest,
              destOffset,
              8,
              0
            );
          }
          getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
            const base = this.base;
            const numComps = base.numComps;
            const outputDelta = base.getOutputLength(numComps, alpha01);
            const lookup = this.lookup;
            for (let i = 0; i < count; ++i) {
              const lookupPos = src[srcOffset++] * numComps;
              base.getRgbBuffer(
                lookup,
                lookupPos,
                1,
                dest,
                destOffset,
                8,
                alpha01
              );
              destOffset += outputDelta;
            }
          }
          getOutputLength(inputLength, alpha01) {
            return this.base.getOutputLength(
              inputLength * this.base.numComps,
              alpha01
            );
          }
          isDefaultDecode(decodeMap, bpc) {
            if (!Array.isArray(decodeMap)) {
              return true;
            }
            if (decodeMap.length !== 2) {
              (0, _util.warn)("Decode map length is not correct");
              return true;
            }
            if (!Number.isInteger(bpc) || bpc < 1) {
              (0, _util.warn)("Bits per component is not correct");
              return true;
            }
            return decodeMap[0] === 0 && decodeMap[1] === (1 << bpc) - 1;
          }
        }
        class DeviceGrayCS extends ColorSpace {
          constructor() {
            super("DeviceGray", 1);
          }
          getRgbItem(src, srcOffset, dest, destOffset) {
            const c = src[srcOffset] * 255;
            dest[destOffset] = dest[destOffset + 1] = dest[destOffset + 2] = c;
          }
          getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
            const scale = 255 / ((1 << bits) - 1);
            let j = srcOffset,
              q = destOffset;
            for (let i = 0; i < count; ++i) {
              const c = scale * src[j++];
              dest[q++] = c;
              dest[q++] = c;
              dest[q++] = c;
              q += alpha01;
            }
          }
          getOutputLength(inputLength, alpha01) {
            return inputLength * (3 + alpha01);
          }
        }
        class DeviceRgbCS extends ColorSpace {
          constructor() {
            super("DeviceRGB", 3);
          }
          getRgbItem(src, srcOffset, dest, destOffset) {
            dest[destOffset] = src[srcOffset] * 255;
            dest[destOffset + 1] = src[srcOffset + 1] * 255;
            dest[destOffset + 2] = src[srcOffset + 2] * 255;
          }
          getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
            if (bits === 8 && alpha01 === 0) {
              dest.set(
                src.subarray(srcOffset, srcOffset + count * 3),
                destOffset
              );
              return;
            }
            const scale = 255 / ((1 << bits) - 1);
            let j = srcOffset,
              q = destOffset;
            for (let i = 0; i < count; ++i) {
              dest[q++] = scale * src[j++];
              dest[q++] = scale * src[j++];
              dest[q++] = scale * src[j++];
              q += alpha01;
            }
          }
          getOutputLength(inputLength, alpha01) {
            return ((inputLength * (3 + alpha01)) / 3) | 0;
          }
          isPassthrough(bits) {
            return bits === 8;
          }
        }
        class DeviceCmykCS extends ColorSpace {
          constructor() {
            super("DeviceCMYK", 4);
          }
          #toRgb(src, srcOffset, srcScale, dest, destOffset) {
            const c = src[srcOffset] * srcScale;
            const m = src[srcOffset + 1] * srcScale;
            const y = src[srcOffset + 2] * srcScale;
            const k = src[srcOffset + 3] * srcScale;
            dest[destOffset] =
              255 +
              c *
                (-4.387332384609988 * c +
                  54.48615194189176 * m +
                  18.82290502165302 * y +
                  212.25662451639585 * k +
                  -285.2331026137004) +
              m *
                (1.7149763477362134 * m -
                  5.6096736904047315 * y +
                  -17.873870861415444 * k -
                  5.497006427196366) +
              y *
                (-2.5217340131683033 * y -
                  21.248923337353073 * k +
                  17.5119270841813) +
              k * (-21.86122147463605 * k - 189.48180835922747);
            dest[destOffset + 1] =
              255 +
              c *
                (8.841041422036149 * c +
                  60.118027045597366 * m +
                  6.871425592049007 * y +
                  31.159100130055922 * k +
                  -79.2970844816548) +
              m *
                (-15.310361306967817 * m +
                  17.575251261109482 * y +
                  131.35250912493976 * k -
                  190.9453302588951) +
              y *
                (4.444339102852739 * y +
                  9.8632861493405 * k -
                  24.86741582555878) +
              k * (-20.737325471181034 * k - 187.80453709719578);
            dest[destOffset + 2] =
              255 +
              c *
                (0.8842522430003296 * c +
                  8.078677503112928 * m +
                  30.89978309703729 * y -
                  0.23883238689178934 * k +
                  -14.183576799673286) +
              m *
                (10.49593273432072 * m +
                  63.02378494754052 * y +
                  50.606957656360734 * k -
                  112.23884253719248) +
              y *
                (0.03296041114873217 * y +
                  115.60384449646641 * k +
                  -193.58209356861505) +
              k * (-22.33816807309886 * k - 180.12613974708367);
          }
          getRgbItem(src, srcOffset, dest, destOffset) {
            this.#toRgb(src, srcOffset, 1, dest, destOffset);
          }
          getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
            const scale = 1 / ((1 << bits) - 1);
            for (let i = 0; i < count; i++) {
              this.#toRgb(src, srcOffset, scale, dest, destOffset);
              srcOffset += 4;
              destOffset += 3 + alpha01;
            }
          }
          getOutputLength(inputLength, alpha01) {
            return ((inputLength / 4) * (3 + alpha01)) | 0;
          }
        }
        class CalGrayCS extends ColorSpace {
          constructor(whitePoint, blackPoint, gamma) {
            super("CalGray", 1);
            if (!whitePoint) {
              throw new _util.FormatError(
                "WhitePoint missing - required for color space CalGray"
              );
            }
            [this.XW, this.YW, this.ZW] = whitePoint;
            [this.XB, this.YB, this.ZB] = blackPoint || [0, 0, 0];
            this.G = gamma || 1;
            if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {
              throw new _util.FormatError(
                `Invalid WhitePoint components for ${this.name}, no fallback available`
              );
            }
            if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {
              (0, _util.info)(
                `Invalid BlackPoint for ${this.name}, falling back to default.`
              );
              this.XB = this.YB = this.ZB = 0;
            }
            if (this.XB !== 0 || this.YB !== 0 || this.ZB !== 0) {
              (0, _util.warn)(
                `${this.name}, BlackPoint: XB: ${this.XB}, YB: ${this.YB}, ` +
                  `ZB: ${this.ZB}, only default values are supported.`
              );
            }
            if (this.G < 1) {
              (0, _util.info)(
                `Invalid Gamma: ${this.G} for ${this.name}, falling back to default.`
              );
              this.G = 1;
            }
          }
          #toRgb(src, srcOffset, dest, destOffset, scale) {
            const A = src[srcOffset] * scale;
            const AG = A ** this.G;
            const L = this.YW * AG;
            const val = Math.max(295.8 * L ** 0.3333333333333333 - 40.8, 0);
            dest[destOffset] = val;
            dest[destOffset + 1] = val;
            dest[destOffset + 2] = val;
          }
          getRgbItem(src, srcOffset, dest, destOffset) {
            this.#toRgb(src, srcOffset, dest, destOffset, 1);
          }
          getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
            const scale = 1 / ((1 << bits) - 1);
            for (let i = 0; i < count; ++i) {
              this.#toRgb(src, srcOffset, dest, destOffset, scale);
              srcOffset += 1;
              destOffset += 3 + alpha01;
            }
          }
          getOutputLength(inputLength, alpha01) {
            return inputLength * (3 + alpha01);
          }
        }
        class CalRGBCS extends ColorSpace {
          static #BRADFORD_SCALE_MATRIX = new Float32Array([
            0.8951, 0.2664, -0.1614, -0.7502, 1.7135, 0.0367, 0.0389, -0.0685,
            1.0296,
          ]);
          static #BRADFORD_SCALE_INVERSE_MATRIX = new Float32Array([
            0.9869929, -0.1470543, 0.1599627, 0.4323053, 0.5183603, 0.0492912,
            -0.0085287, 0.0400428, 0.9684867,
          ]);
          static #SRGB_D65_XYZ_TO_RGB_MATRIX = new Float32Array([
            3.2404542, -1.5371385, -0.4985314, -0.969266, 1.8760108, 0.041556,
            0.0556434, -0.2040259, 1.0572252,
          ]);
          static #FLAT_WHITEPOINT_MATRIX = new Float32Array([1, 1, 1]);
          static #tempNormalizeMatrix = new Float32Array(3);
          static #tempConvertMatrix1 = new Float32Array(3);
          static #tempConvertMatrix2 = new Float32Array(3);
          static #DECODE_L_CONSTANT = ((8 + 16) / 116) ** 3 / 8.0;
          constructor(whitePoint, blackPoint, gamma, matrix) {
            super("CalRGB", 3);
            if (!whitePoint) {
              throw new _util.FormatError(
                "WhitePoint missing - required for color space CalRGB"
              );
            }
            const [XW, YW, ZW] = (this.whitePoint = whitePoint);
            const [XB, YB, ZB] = (this.blackPoint =
              blackPoint || new Float32Array(3));
            [this.GR, this.GG, this.GB] = gamma || new Float32Array([1, 1, 1]);
            [
              this.MXA,
              this.MYA,
              this.MZA,
              this.MXB,
              this.MYB,
              this.MZB,
              this.MXC,
              this.MYC,
              this.MZC,
            ] = matrix || new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
            if (XW < 0 || ZW < 0 || YW !== 1) {
              throw new _util.FormatError(
                `Invalid WhitePoint components for ${this.name}, no fallback available`
              );
            }
            if (XB < 0 || YB < 0 || ZB < 0) {
              (0, _util.info)(
                `Invalid BlackPoint for ${this.name} [${XB}, ${YB}, ${ZB}], ` +
                  "falling back to default."
              );
              this.blackPoint = new Float32Array(3);
            }
            if (this.GR < 0 || this.GG < 0 || this.GB < 0) {
              (0, _util.info)(
                `Invalid Gamma [${this.GR}, ${this.GG}, ${this.GB}] for ` +
                  `${this.name}, falling back to default.`
              );
              this.GR = this.GG = this.GB = 1;
            }
          }
          #matrixProduct(a, b, result) {
            result[0] = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
            result[1] = a[3] * b[0] + a[4] * b[1] + a[5] * b[2];
            result[2] = a[6] * b[0] + a[7] * b[1] + a[8] * b[2];
          }
          #toFlat(sourceWhitePoint, LMS, result) {
            result[0] = (LMS[0] * 1) / sourceWhitePoint[0];
            result[1] = (LMS[1] * 1) / sourceWhitePoint[1];
            result[2] = (LMS[2] * 1) / sourceWhitePoint[2];
          }
          #toD65(sourceWhitePoint, LMS, result) {
            const D65X = 0.95047;
            const D65Y = 1;
            const D65Z = 1.08883;
            result[0] = (LMS[0] * D65X) / sourceWhitePoint[0];
            result[1] = (LMS[1] * D65Y) / sourceWhitePoint[1];
            result[2] = (LMS[2] * D65Z) / sourceWhitePoint[2];
          }
          #sRGBTransferFunction(color) {
            if (color <= 0.0031308) {
              return this.#adjustToRange(0, 1, 12.92 * color);
            }
            if (color >= 0.99554525) {
              return 1;
            }
            return this.#adjustToRange(
              0,
              1,
              (1 + 0.055) * color ** (1 / 2.4) - 0.055
            );
          }
          #adjustToRange(min, max, value) {
            return Math.max(min, Math.min(max, value));
          }
          #decodeL(L) {
            if (L < 0) {
              return -this.#decodeL(-L);
            }
            if (L > 8.0) {
              return ((L + 16) / 116) ** 3;
            }
            return L * CalRGBCS.#DECODE_L_CONSTANT;
          }
          #compensateBlackPoint(sourceBlackPoint, XYZ_Flat, result) {
            if (
              sourceBlackPoint[0] === 0 &&
              sourceBlackPoint[1] === 0 &&
              sourceBlackPoint[2] === 0
            ) {
              result[0] = XYZ_Flat[0];
              result[1] = XYZ_Flat[1];
              result[2] = XYZ_Flat[2];
              return;
            }
            const zeroDecodeL = this.#decodeL(0);
            const X_DST = zeroDecodeL;
            const X_SRC = this.#decodeL(sourceBlackPoint[0]);
            const Y_DST = zeroDecodeL;
            const Y_SRC = this.#decodeL(sourceBlackPoint[1]);
            const Z_DST = zeroDecodeL;
            const Z_SRC = this.#decodeL(sourceBlackPoint[2]);
            const X_Scale = (1 - X_DST) / (1 - X_SRC);
            const X_Offset = 1 - X_Scale;
            const Y_Scale = (1 - Y_DST) / (1 - Y_SRC);
            const Y_Offset = 1 - Y_Scale;
            const Z_Scale = (1 - Z_DST) / (1 - Z_SRC);
            const Z_Offset = 1 - Z_Scale;
            result[0] = XYZ_Flat[0] * X_Scale + X_Offset;
            result[1] = XYZ_Flat[1] * Y_Scale + Y_Offset;
            result[2] = XYZ_Flat[2] * Z_Scale + Z_Offset;
          }
          #normalizeWhitePointToFlat(sourceWhitePoint, XYZ_In, result) {
            if (sourceWhitePoint[0] === 1 && sourceWhitePoint[2] === 1) {
              result[0] = XYZ_In[0];
              result[1] = XYZ_In[1];
              result[2] = XYZ_In[2];
              return;
            }
            const LMS = result;
            this.#matrixProduct(CalRGBCS.#BRADFORD_SCALE_MATRIX, XYZ_In, LMS);
            const LMS_Flat = CalRGBCS.#tempNormalizeMatrix;
            this.#toFlat(sourceWhitePoint, LMS, LMS_Flat);
            this.#matrixProduct(
              CalRGBCS.#BRADFORD_SCALE_INVERSE_MATRIX,
              LMS_Flat,
              result
            );
          }
          #normalizeWhitePointToD65(sourceWhitePoint, XYZ_In, result) {
            const LMS = result;
            this.#matrixProduct(CalRGBCS.#BRADFORD_SCALE_MATRIX, XYZ_In, LMS);
            const LMS_D65 = CalRGBCS.#tempNormalizeMatrix;
            this.#toD65(sourceWhitePoint, LMS, LMS_D65);
            this.#matrixProduct(
              CalRGBCS.#BRADFORD_SCALE_INVERSE_MATRIX,
              LMS_D65,
              result
            );
          }
          #toRgb(src, srcOffset, dest, destOffset, scale) {
            const A = this.#adjustToRange(0, 1, src[srcOffset] * scale);
            const B = this.#adjustToRange(0, 1, src[srcOffset + 1] * scale);
            const C = this.#adjustToRange(0, 1, src[srcOffset + 2] * scale);
            const AGR = A === 1 ? 1 : A ** this.GR;
            const BGG = B === 1 ? 1 : B ** this.GG;
            const CGB = C === 1 ? 1 : C ** this.GB;
            const X = this.MXA * AGR + this.MXB * BGG + this.MXC * CGB;
            const Y = this.MYA * AGR + this.MYB * BGG + this.MYC * CGB;
            const Z = this.MZA * AGR + this.MZB * BGG + this.MZC * CGB;
            const XYZ = CalRGBCS.#tempConvertMatrix1;
            XYZ[0] = X;
            XYZ[1] = Y;
            XYZ[2] = Z;
            const XYZ_Flat = CalRGBCS.#tempConvertMatrix2;
            this.#normalizeWhitePointToFlat(this.whitePoint, XYZ, XYZ_Flat);
            const XYZ_Black = CalRGBCS.#tempConvertMatrix1;
            this.#compensateBlackPoint(this.blackPoint, XYZ_Flat, XYZ_Black);
            const XYZ_D65 = CalRGBCS.#tempConvertMatrix2;
            this.#normalizeWhitePointToD65(
              CalRGBCS.#FLAT_WHITEPOINT_MATRIX,
              XYZ_Black,
              XYZ_D65
            );
            const SRGB = CalRGBCS.#tempConvertMatrix1;
            this.#matrixProduct(
              CalRGBCS.#SRGB_D65_XYZ_TO_RGB_MATRIX,
              XYZ_D65,
              SRGB
            );
            dest[destOffset] = this.#sRGBTransferFunction(SRGB[0]) * 255;
            dest[destOffset + 1] = this.#sRGBTransferFunction(SRGB[1]) * 255;
            dest[destOffset + 2] = this.#sRGBTransferFunction(SRGB[2]) * 255;
          }
          getRgbItem(src, srcOffset, dest, destOffset) {
            this.#toRgb(src, srcOffset, dest, destOffset, 1);
          }
          getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
            const scale = 1 / ((1 << bits) - 1);
            for (let i = 0; i < count; ++i) {
              this.#toRgb(src, srcOffset, dest, destOffset, scale);
              srcOffset += 3;
              destOffset += 3 + alpha01;
            }
          }
          getOutputLength(inputLength, alpha01) {
            return ((inputLength * (3 + alpha01)) / 3) | 0;
          }
        }
        class LabCS extends ColorSpace {
          constructor(whitePoint, blackPoint, range) {
            super("Lab", 3);
            if (!whitePoint) {
              throw new _util.FormatError(
                "WhitePoint missing - required for color space Lab"
              );
            }
            [this.XW, this.YW, this.ZW] = whitePoint;
            [this.amin, this.amax, this.bmin, this.bmax] = range || [
              -100, 100, -100, 100,
            ];
            [this.XB, this.YB, this.ZB] = blackPoint || [0, 0, 0];
            if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {
              throw new _util.FormatError(
                "Invalid WhitePoint components, no fallback available"
              );
            }
            if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {
              (0, _util.info)("Invalid BlackPoint, falling back to default");
              this.XB = this.YB = this.ZB = 0;
            }
            if (this.amin > this.amax || this.bmin > this.bmax) {
              (0, _util.info)("Invalid Range, falling back to defaults");
              this.amin = -100;
              this.amax = 100;
              this.bmin = -100;
              this.bmax = 100;
            }
          }
          #fn_g(x) {
            return x >= 6 / 29 ? x ** 3 : (108 / 841) * (x - 4 / 29);
          }
          #decode(value, high1, low2, high2) {
            return low2 + (value * (high2 - low2)) / high1;
          }
          #toRgb(src, srcOffset, maxVal, dest, destOffset) {
            let Ls = src[srcOffset];
            let as = src[srcOffset + 1];
            let bs = src[srcOffset + 2];
            if (maxVal !== false) {
              Ls = this.#decode(Ls, maxVal, 0, 100);
              as = this.#decode(as, maxVal, this.amin, this.amax);
              bs = this.#decode(bs, maxVal, this.bmin, this.bmax);
            }
            if (as > this.amax) {
              as = this.amax;
            } else if (as < this.amin) {
              as = this.amin;
            }
            if (bs > this.bmax) {
              bs = this.bmax;
            } else if (bs < this.bmin) {
              bs = this.bmin;
            }
            const M = (Ls + 16) / 116;
            const L = M + as / 500;
            const N = M - bs / 200;
            const X = this.XW * this.#fn_g(L);
            const Y = this.YW * this.#fn_g(M);
            const Z = this.ZW * this.#fn_g(N);
            let r, g, b;
            if (this.ZW < 1) {
              r = X * 3.1339 + Y * -1.617 + Z * -0.4906;
              g = X * -0.9785 + Y * 1.916 + Z * 0.0333;
              b = X * 0.072 + Y * -0.229 + Z * 1.4057;
            } else {
              r = X * 3.2406 + Y * -1.5372 + Z * -0.4986;
              g = X * -0.9689 + Y * 1.8758 + Z * 0.0415;
              b = X * 0.0557 + Y * -0.204 + Z * 1.057;
            }
            dest[destOffset] = Math.sqrt(r) * 255;
            dest[destOffset + 1] = Math.sqrt(g) * 255;
            dest[destOffset + 2] = Math.sqrt(b) * 255;
          }
          getRgbItem(src, srcOffset, dest, destOffset) {
            this.#toRgb(src, srcOffset, false, dest, destOffset);
          }
          getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {
            const maxVal = (1 << bits) - 1;
            for (let i = 0; i < count; i++) {
              this.#toRgb(src, srcOffset, maxVal, dest, destOffset);
              srcOffset += 3;
              destOffset += 3 + alpha01;
            }
          }
          getOutputLength(inputLength, alpha01) {
            return ((inputLength * (3 + alpha01)) / 3) | 0;
          }
          isDefaultDecode(decodeMap, bpc) {
            return true;
          }
          get usesZeroToOneRange() {
            return (0, _util.shadow)(this, "usesZeroToOneRange", false);
          }
        }

        /***/
      },
      /* 13 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.PartialEvaluator = exports.EvaluatorPreprocessor = void 0;
        var _util = __w_pdfjs_require__(2);
        var _cmap = __w_pdfjs_require__(14);
        var _primitives = __w_pdfjs_require__(4);
        var _fonts = __w_pdfjs_require__(34);
        var _encodings = __w_pdfjs_require__(37);
        var _standard_fonts = __w_pdfjs_require__(41);
        var _pattern = __w_pdfjs_require__(50);
        var _xfa_fonts = __w_pdfjs_require__(51);
        var _to_unicode_map = __w_pdfjs_require__(42);
        var _function = __w_pdfjs_require__(57);
        var _parser = __w_pdfjs_require__(16);
        var _image_utils = __w_pdfjs_require__(59);
        var _stream = __w_pdfjs_require__(8);
        var _base_stream = __w_pdfjs_require__(5);
        var _bidi = __w_pdfjs_require__(60);
        var _colorspace = __w_pdfjs_require__(12);
        var _decode_stream = __w_pdfjs_require__(18);
        var _fonts_utils = __w_pdfjs_require__(38);
        var _font_substitutions = __w_pdfjs_require__(61);
        var _glyphlist = __w_pdfjs_require__(39);
        var _metrics = __w_pdfjs_require__(45);
        var _unicode = __w_pdfjs_require__(40);
        var _image_resizer = __w_pdfjs_require__(62);
        var _murmurhash = __w_pdfjs_require__(63);
        var _operator_list = __w_pdfjs_require__(64);
        var _image = __w_pdfjs_require__(65);
        const DefaultPartialEvaluatorOptions = Object.freeze({
          maxImageSize: -1,
          disableFontFace: false,
          ignoreErrors: false,
          isEvalSupported: true,
          isOffscreenCanvasSupported: false,
          canvasMaxAreaInBytes: -1,
          fontExtraProperties: false,
          useSystemFonts: true,
          cMapUrl: null,
          standardFontDataUrl: null,
        });
        const PatternType = {
          TILING: 1,
          SHADING: 2,
        };
        const TEXT_CHUNK_BATCH_SIZE = 10;
        const deferred = Promise.resolve();
        function normalizeBlendMode(value, parsingArray = false) {
          if (Array.isArray(value)) {
            for (const val of value) {
              const maybeBM = normalizeBlendMode(val, true);
              if (maybeBM) {
                return maybeBM;
              }
            }
            (0, _util.warn)(`Unsupported blend mode Array: ${value}`);
            return "source-over";
          }
          if (!(value instanceof _primitives.Name)) {
            if (parsingArray) {
              return null;
            }
            return "source-over";
          }
          switch (value.name) {
            case "Normal":
            case "Compatible":
              return "source-over";
            case "Multiply":
              return "multiply";
            case "Screen":
              return "screen";
            case "Overlay":
              return "overlay";
            case "Darken":
              return "darken";
            case "Lighten":
              return "lighten";
            case "ColorDodge":
              return "color-dodge";
            case "ColorBurn":
              return "color-burn";
            case "HardLight":
              return "hard-light";
            case "SoftLight":
              return "soft-light";
            case "Difference":
              return "difference";
            case "Exclusion":
              return "exclusion";
            case "Hue":
              return "hue";
            case "Saturation":
              return "saturation";
            case "Color":
              return "color";
            case "Luminosity":
              return "luminosity";
          }
          if (parsingArray) {
            return null;
          }
          (0, _util.warn)(`Unsupported blend mode: ${value.name}`);
          return "source-over";
        }
        function incrementCachedImageMaskCount(data) {
          if (
            data.fn === _util.OPS.paintImageMaskXObject &&
            data.args[0]?.count > 0
          ) {
            data.args[0].count++;
          }
        }
        class TimeSlotManager {
          static TIME_SLOT_DURATION_MS = 20;
          static CHECK_TIME_EVERY = 100;
          constructor() {
            this.reset();
          }
          check() {
            if (++this.checked < TimeSlotManager.CHECK_TIME_EVERY) {
              return false;
            }
            this.checked = 0;
            return this.endTime <= Date.now();
          }
          reset() {
            this.endTime = Date.now() + TimeSlotManager.TIME_SLOT_DURATION_MS;
            this.checked = 0;
          }
        }
        class PartialEvaluator {
          constructor({
            xref,
            handler,
            pageIndex,
            idFactory,
            fontCache,
            builtInCMapCache,
            standardFontDataCache,
            globalImageCache,
            systemFontCache,
            options = null,
          }) {
            this.xref = xref;
            this.handler = handler;
            this.pageIndex = pageIndex;
            this.idFactory = idFactory;
            this.fontCache = fontCache;
            this.builtInCMapCache = builtInCMapCache;
            this.standardFontDataCache = standardFontDataCache;
            this.globalImageCache = globalImageCache;
            this.systemFontCache = systemFontCache;
            this.options = options || DefaultPartialEvaluatorOptions;
            this.parsingType3Font = false;
            this._regionalImageCache = new _image_utils.RegionalImageCache();
            this._fetchBuiltInCMapBound = this.fetchBuiltInCMap.bind(this);
            _image_resizer.ImageResizer.setMaxArea(
              this.options.canvasMaxAreaInBytes
            );
          }
          get _pdfFunctionFactory() {
            const pdfFunctionFactory = new _function.PDFFunctionFactory({
              xref: this.xref,
              isEvalSupported: this.options.isEvalSupported,
            });
            return (0, _util.shadow)(
              this,
              "_pdfFunctionFactory",
              pdfFunctionFactory
            );
          }
          clone(newOptions = null) {
            const newEvaluator = Object.create(this);
            newEvaluator.options = Object.assign(
              Object.create(null),
              this.options,
              newOptions
            );
            return newEvaluator;
          }
          hasBlendModes(resources, nonBlendModesSet) {
            if (!(resources instanceof _primitives.Dict)) {
              return false;
            }
            if (resources.objId && nonBlendModesSet.has(resources.objId)) {
              return false;
            }
            const processed = new _primitives.RefSet(nonBlendModesSet);
            if (resources.objId) {
              processed.put(resources.objId);
            }
            const nodes = [resources],
              xref = this.xref;
            while (nodes.length) {
              const node = nodes.shift();
              const graphicStates = node.get("ExtGState");
              if (graphicStates instanceof _primitives.Dict) {
                for (let graphicState of graphicStates.getRawValues()) {
                  if (graphicState instanceof _primitives.Ref) {
                    if (processed.has(graphicState)) {
                      continue;
                    }
                    try {
                      graphicState = xref.fetch(graphicState);
                    } catch (ex) {
                      processed.put(graphicState);
                      (0, _util.info)(
                        `hasBlendModes - ignoring ExtGState: "${ex}".`
                      );
                      continue;
                    }
                  }
                  if (!(graphicState instanceof _primitives.Dict)) {
                    continue;
                  }
                  if (graphicState.objId) {
                    processed.put(graphicState.objId);
                  }
                  const bm = graphicState.get("BM");
                  if (bm instanceof _primitives.Name) {
                    if (bm.name !== "Normal") {
                      return true;
                    }
                    continue;
                  }
                  if (bm !== undefined && Array.isArray(bm)) {
                    for (const element of bm) {
                      if (
                        element instanceof _primitives.Name &&
                        element.name !== "Normal"
                      ) {
                        return true;
                      }
                    }
                  }
                }
              }
              const xObjects = node.get("XObject");
              if (!(xObjects instanceof _primitives.Dict)) {
                continue;
              }
              for (let xObject of xObjects.getRawValues()) {
                if (xObject instanceof _primitives.Ref) {
                  if (processed.has(xObject)) {
                    continue;
                  }
                  try {
                    xObject = xref.fetch(xObject);
                  } catch (ex) {
                    processed.put(xObject);
                    (0, _util.info)(
                      `hasBlendModes - ignoring XObject: "${ex}".`
                    );
                    continue;
                  }
                }
                if (!(xObject instanceof _base_stream.BaseStream)) {
                  continue;
                }
                if (xObject.dict.objId) {
                  processed.put(xObject.dict.objId);
                }
                const xResources = xObject.dict.get("Resources");
                if (!(xResources instanceof _primitives.Dict)) {
                  continue;
                }
                if (xResources.objId && processed.has(xResources.objId)) {
                  continue;
                }
                nodes.push(xResources);
                if (xResources.objId) {
                  processed.put(xResources.objId);
                }
              }
            }
            for (const ref of processed) {
              nonBlendModesSet.put(ref);
            }
            return false;
          }
          async fetchBuiltInCMap(name) {
            const cachedData = this.builtInCMapCache.get(name);
            if (cachedData) {
              return cachedData;
            }
            let data;
            if (this.options.cMapUrl !== null) {
              const url = `${this.options.cMapUrl}${name}.bcmap`;
              const response = await fetch(url);
              if (!response.ok) {
                throw new Error(
                  `fetchBuiltInCMap: failed to fetch file "${url}" with "${response.statusText}".`
                );
              }
              data = {
                cMapData: new Uint8Array(await response.arrayBuffer()),
                compressionType: _util.CMapCompressionType.BINARY,
              };
            } else {
              data = await this.handler.sendWithPromise("FetchBuiltInCMap", {
                name,
              });
            }
            if (data.compressionType !== _util.CMapCompressionType.NONE) {
              this.builtInCMapCache.set(name, data);
            }
            return data;
          }
          async fetchStandardFontData(name) {
            const cachedData = this.standardFontDataCache.get(name);
            if (cachedData) {
              return new _stream.Stream(cachedData);
            }
            if (
              this.options.useSystemFonts &&
              name !== "Symbol" &&
              name !== "ZapfDingbats"
            ) {
              return null;
            }
            const standardFontNameToFileName = (0,
              _standard_fonts.getFontNameToFileMap)(),
              filename = standardFontNameToFileName[name];
            let data;
            if (this.options.standardFontDataUrl !== null) {
              const url = `${this.options.standardFontDataUrl}${filename}`;
              const response = await fetch(url);
              if (!response.ok) {
                (0, _util.warn)(
                  `fetchStandardFontData: failed to fetch file "${url}" with "${response.statusText}".`
                );
              } else {
                data = await response.arrayBuffer();
              }
            } else {
              try {
                data = await this.handler.sendWithPromise(
                  "FetchStandardFontData",
                  {
                    filename,
                  }
                );
              } catch (e) {
                (0, _util.warn)(
                  `fetchStandardFontData: failed to fetch file "${filename}" with "${e}".`
                );
              }
            }
            if (!data) {
              return null;
            }
            this.standardFontDataCache.set(name, data);
            return new _stream.Stream(data);
          }
          async buildFormXObject(
            resources,
            xobj,
            smask,
            operatorList,
            task,
            initialState,
            localColorSpaceCache
          ) {
            const dict = xobj.dict;
            const matrix = dict.getArray("Matrix");
            let bbox = dict.getArray("BBox");
            bbox =
              Array.isArray(bbox) && bbox.length === 4
                ? _util.Util.normalizeRect(bbox)
                : null;
            let optionalContent, groupOptions;
            if (dict.has("OC")) {
              optionalContent = await this.parseMarkedContentProps(
                dict.get("OC"),
                resources
              );
            }
            if (optionalContent !== undefined) {
              operatorList.addOp(_util.OPS.beginMarkedContentProps, [
                "OC",
                optionalContent,
              ]);
            }
            const group = dict.get("Group");
            if (group) {
              groupOptions = {
                matrix,
                bbox,
                smask,
                isolated: false,
                knockout: false,
              };
              const groupSubtype = group.get("S");
              let colorSpace = null;
              if ((0, _primitives.isName)(groupSubtype, "Transparency")) {
                groupOptions.isolated = group.get("I") || false;
                groupOptions.knockout = group.get("K") || false;
                if (group.has("CS")) {
                  const cs = group.getRaw("CS");
                  const cachedColorSpace = _colorspace.ColorSpace.getCached(
                    cs,
                    this.xref,
                    localColorSpaceCache
                  );
                  if (cachedColorSpace) {
                    colorSpace = cachedColorSpace;
                  } else {
                    colorSpace = await this.parseColorSpace({
                      cs,
                      resources,
                      localColorSpaceCache,
                    });
                  }
                }
              }
              if (smask?.backdrop) {
                colorSpace ||= _colorspace.ColorSpace.singletons.rgb;
                smask.backdrop = colorSpace.getRgb(smask.backdrop, 0);
              }
              operatorList.addOp(_util.OPS.beginGroup, [groupOptions]);
            }
            const args = group ? [matrix, null] : [matrix, bbox];
            operatorList.addOp(_util.OPS.paintFormXObjectBegin, args);
            return this.getOperatorList({
              stream: xobj,
              task,
              resources: dict.get("Resources") || resources,
              operatorList,
              initialState,
            }).then(function () {
              operatorList.addOp(_util.OPS.paintFormXObjectEnd, []);
              if (group) {
                operatorList.addOp(_util.OPS.endGroup, [groupOptions]);
              }
              if (optionalContent !== undefined) {
                operatorList.addOp(_util.OPS.endMarkedContent, []);
              }
            });
          }
          _sendImgData(objId, imgData, cacheGlobally = false) {
            const transfers = imgData
              ? [imgData.bitmap || imgData.data.buffer]
              : null;
            if (this.parsingType3Font || cacheGlobally) {
              return this.handler.send(
                "commonobj",
                [objId, "Image", imgData],
                transfers
              );
            }
            return this.handler.send(
              "obj",
              [objId, this.pageIndex, "Image", imgData],
              transfers
            );
          }
          async buildPaintImageXObject({
            resources,
            image,
            isInline = false,
            operatorList,
            cacheKey,
            localImageCache,
            localColorSpaceCache,
          }) {
            const dict = image.dict;
            const imageRef = dict.objId;
            const w = dict.get("W", "Width");
            const h = dict.get("H", "Height");
            if (
              !(w && typeof w === "number") ||
              !(h && typeof h === "number")
            ) {
              (0, _util.warn)("Image dimensions are missing, or not numbers.");
              return;
            }
            const maxImageSize = this.options.maxImageSize;
            if (maxImageSize !== -1 && w * h > maxImageSize) {
              const msg =
                "Image exceeded maximum allowed size and was removed.";
              if (this.options.ignoreErrors) {
                (0, _util.warn)(msg);
                return;
              }
              throw new Error(msg);
            }
            let optionalContent;
            if (dict.has("OC")) {
              optionalContent = await this.parseMarkedContentProps(
                dict.get("OC"),
                resources
              );
            }
            const imageMask = dict.get("IM", "ImageMask") || false;
            let imgData, args;
            if (imageMask) {
              const interpolate = dict.get("I", "Interpolate");
              const bitStrideLength = (w + 7) >> 3;
              const imgArray = image.getBytes(bitStrideLength * h);
              const decode = dict.getArray("D", "Decode");
              if (this.parsingType3Font) {
                imgData = _image.PDFImage.createRawMask({
                  imgArray,
                  width: w,
                  height: h,
                  imageIsFromDecodeStream:
                    image instanceof _decode_stream.DecodeStream,
                  inverseDecode: decode?.[0] > 0,
                  interpolate,
                });
                imgData.cached = !!cacheKey;
                args = [imgData];
                operatorList.addImageOps(
                  _util.OPS.paintImageMaskXObject,
                  args,
                  optionalContent
                );
                if (cacheKey) {
                  const cacheData = {
                    fn: _util.OPS.paintImageMaskXObject,
                    args,
                    optionalContent,
                  };
                  localImageCache.set(cacheKey, imageRef, cacheData);
                  if (imageRef) {
                    this._regionalImageCache.set(null, imageRef, cacheData);
                  }
                }
                return;
              }
              imgData = await _image.PDFImage.createMask({
                imgArray,
                width: w,
                height: h,
                imageIsFromDecodeStream:
                  image instanceof _decode_stream.DecodeStream,
                inverseDecode: decode?.[0] > 0,
                interpolate,
                isOffscreenCanvasSupported:
                  this.options.isOffscreenCanvasSupported,
              });
              if (imgData.isSingleOpaquePixel) {
                operatorList.addImageOps(
                  _util.OPS.paintSolidColorImageMask,
                  [],
                  optionalContent
                );
                if (cacheKey) {
                  const cacheData = {
                    fn: _util.OPS.paintSolidColorImageMask,
                    args: [],
                    optionalContent,
                  };
                  localImageCache.set(cacheKey, imageRef, cacheData);
                  if (imageRef) {
                    this._regionalImageCache.set(null, imageRef, cacheData);
                  }
                }
                return;
              }
              const objId = `mask_${this.idFactory.createObjId()}`;
              operatorList.addDependency(objId);
              this._sendImgData(objId, imgData);
              args = [
                {
                  data: objId,
                  width: imgData.width,
                  height: imgData.height,
                  interpolate: imgData.interpolate,
                  count: 1,
                },
              ];
              operatorList.addImageOps(
                _util.OPS.paintImageMaskXObject,
                args,
                optionalContent
              );
              if (cacheKey) {
                const cacheData = {
                  fn: _util.OPS.paintImageMaskXObject,
                  args,
                  optionalContent,
                };
                localImageCache.set(cacheKey, imageRef, cacheData);
                if (imageRef) {
                  this._regionalImageCache.set(null, imageRef, cacheData);
                }
              }
              return;
            }
            const SMALL_IMAGE_DIMENSIONS = 200;
            if (
              isInline &&
              !dict.has("SMask") &&
              !dict.has("Mask") &&
              w + h < SMALL_IMAGE_DIMENSIONS
            ) {
              const imageObj = new _image.PDFImage({
                xref: this.xref,
                res: resources,
                image,
                isInline,
                pdfFunctionFactory: this._pdfFunctionFactory,
                localColorSpaceCache,
              });
              imgData = await imageObj.createImageData(true, false);
              operatorList.isOffscreenCanvasSupported =
                this.options.isOffscreenCanvasSupported;
              operatorList.addImageOps(
                _util.OPS.paintInlineImageXObject,
                [imgData],
                optionalContent
              );
              return;
            }
            let objId = `img_${this.idFactory.createObjId()}`,
              cacheGlobally = false;
            if (this.parsingType3Font) {
              objId = `${this.idFactory.getDocId()}_type3_${objId}`;
            } else if (imageRef) {
              cacheGlobally = this.globalImageCache.shouldCache(
                imageRef,
                this.pageIndex
              );
              if (cacheGlobally) {
                objId = `${this.idFactory.getDocId()}_${objId}`;
              }
            }
            operatorList.addDependency(objId);
            args = [objId, w, h];
            _image.PDFImage.buildImage({
              xref: this.xref,
              res: resources,
              image,
              isInline,
              pdfFunctionFactory: this._pdfFunctionFactory,
              localColorSpaceCache,
            })
              .then(async (imageObj) => {
                imgData = await imageObj.createImageData(
                  false,
                  this.options.isOffscreenCanvasSupported
                );
                if (cacheKey && imageRef && cacheGlobally) {
                  const length = imgData.bitmap
                    ? imgData.width * imgData.height * 4
                    : imgData.data.length;
                  this.globalImageCache.addByteSize(imageRef, length);
                }
                return this._sendImgData(objId, imgData, cacheGlobally);
              })
              .catch((reason) => {
                (0, _util.warn)(
                  `Unable to decode image "${objId}": "${reason}".`
                );
                return this._sendImgData(objId, null, cacheGlobally);
              });
            operatorList.addImageOps(
              _util.OPS.paintImageXObject,
              args,
              optionalContent
            );
            if (cacheKey) {
              const cacheData = {
                fn: _util.OPS.paintImageXObject,
                args,
                optionalContent,
              };
              localImageCache.set(cacheKey, imageRef, cacheData);
              if (imageRef) {
                this._regionalImageCache.set(null, imageRef, cacheData);
                if (cacheGlobally) {
                  (0, _util.assert)(
                    !isInline,
                    "Cannot cache an inline image globally."
                  );
                  this.globalImageCache.setData(imageRef, {
                    objId,
                    fn: _util.OPS.paintImageXObject,
                    args,
                    optionalContent,
                    byteSize: 0,
                  });
                }
              }
            }
          }
          handleSMask(
            smask,
            resources,
            operatorList,
            task,
            stateManager,
            localColorSpaceCache
          ) {
            const smaskContent = smask.get("G");
            const smaskOptions = {
              subtype: smask.get("S").name,
              backdrop: smask.get("BC"),
            };
            const transferObj = smask.get("TR");
            if ((0, _function.isPDFFunction)(transferObj)) {
              const transferFn = this._pdfFunctionFactory.create(transferObj);
              const transferMap = new Uint8Array(256);
              const tmp = new Float32Array(1);
              for (let i = 0; i < 256; i++) {
                tmp[0] = i / 255;
                transferFn(tmp, 0, tmp, 0);
                transferMap[i] = (tmp[0] * 255) | 0;
              }
              smaskOptions.transferMap = transferMap;
            }
            return this.buildFormXObject(
              resources,
              smaskContent,
              smaskOptions,
              operatorList,
              task,
              stateManager.state.clone(),
              localColorSpaceCache
            );
          }
          handleTransferFunction(tr) {
            let transferArray;
            if (Array.isArray(tr)) {
              transferArray = tr;
            } else if ((0, _function.isPDFFunction)(tr)) {
              transferArray = [tr];
            } else {
              return null;
            }
            const transferMaps = [];
            let numFns = 0,
              numEffectfulFns = 0;
            for (const entry of transferArray) {
              const transferObj = this.xref.fetchIfRef(entry);
              numFns++;
              if ((0, _primitives.isName)(transferObj, "Identity")) {
                transferMaps.push(null);
                continue;
              } else if (!(0, _function.isPDFFunction)(transferObj)) {
                return null;
              }
              const transferFn = this._pdfFunctionFactory.create(transferObj);
              const transferMap = new Uint8Array(256),
                tmp = new Float32Array(1);
              for (let j = 0; j < 256; j++) {
                tmp[0] = j / 255;
                transferFn(tmp, 0, tmp, 0);
                transferMap[j] = (tmp[0] * 255) | 0;
              }
              transferMaps.push(transferMap);
              numEffectfulFns++;
            }
            if (!(numFns === 1 || numFns === 4)) {
              return null;
            }
            if (numEffectfulFns === 0) {
              return null;
            }
            return transferMaps;
          }
          handleTilingType(
            fn,
            color,
            resources,
            pattern,
            patternDict,
            operatorList,
            task,
            localTilingPatternCache
          ) {
            const tilingOpList = new _operator_list.OperatorList();
            const patternResources = _primitives.Dict.merge({
              xref: this.xref,
              dictArray: [patternDict.get("Resources"), resources],
            });
            return this.getOperatorList({
              stream: pattern,
              task,
              resources: patternResources,
              operatorList: tilingOpList,
            })
              .then(function () {
                const operatorListIR = tilingOpList.getIR();
                const tilingPatternIR = (0, _pattern.getTilingPatternIR)(
                  operatorListIR,
                  patternDict,
                  color
                );
                operatorList.addDependencies(tilingOpList.dependencies);
                operatorList.addOp(fn, tilingPatternIR);
                if (patternDict.objId) {
                  localTilingPatternCache.set(null, patternDict.objId, {
                    operatorListIR,
                    dict: patternDict,
                  });
                }
              })
              .catch((reason) => {
                if (reason instanceof _util.AbortException) {
                  return;
                }
                if (this.options.ignoreErrors) {
                  (0, _util.warn)(
                    `handleTilingType - ignoring pattern: "${reason}".`
                  );
                  return;
                }
                throw reason;
              });
          }
          handleSetFont(
            resources,
            fontArgs,
            fontRef,
            operatorList,
            task,
            state,
            fallbackFontDict = null,
            cssFontInfo = null
          ) {
            const fontName =
              fontArgs?.[0] instanceof _primitives.Name
                ? fontArgs[0].name
                : null;
            return this.loadFont(
              fontName,
              fontRef,
              resources,
              fallbackFontDict,
              cssFontInfo
            )
              .then((translated) => {
                if (!translated.font.isType3Font) {
                  return translated;
                }
                return translated
                  .loadType3Data(this, resources, task)
                  .then(function () {
                    operatorList.addDependencies(translated.type3Dependencies);
                    return translated;
                  })
                  .catch((reason) => {
                    return new TranslatedFont({
                      loadedName: "g_font_error",
                      font: new _fonts.ErrorFont(
                        `Type3 font load error: ${reason}`
                      ),
                      dict: translated.font,
                      evaluatorOptions: this.options,
                    });
                  });
              })
              .then((translated) => {
                state.font = translated.font;
                translated.send(this.handler);
                return translated.loadedName;
              });
          }
          handleText(chars, state) {
            const font = state.font;
            const glyphs = font.charsToGlyphs(chars);
            if (font.data) {
              const isAddToPathSet = !!(
                state.textRenderingMode &
                _util.TextRenderingMode.ADD_TO_PATH_FLAG
              );
              if (
                isAddToPathSet ||
                state.fillColorSpace.name === "Pattern" ||
                font.disableFontFace ||
                this.options.disableFontFace
              ) {
                PartialEvaluator.buildFontPaths(
                  font,
                  glyphs,
                  this.handler,
                  this.options
                );
              }
            }
            return glyphs;
          }
          ensureStateFont(state) {
            if (state.font) {
              return;
            }
            const reason = new _util.FormatError(
              "Missing setFont (Tf) operator before text rendering operator."
            );
            if (this.options.ignoreErrors) {
              (0, _util.warn)(`ensureStateFont: "${reason}".`);
              return;
            }
            throw reason;
          }
          async setGState({
            resources,
            gState,
            operatorList,
            cacheKey,
            task,
            stateManager,
            localGStateCache,
            localColorSpaceCache,
          }) {
            const gStateRef = gState.objId;
            let isSimpleGState = true;
            const gStateObj = [];
            let promise = Promise.resolve();
            for (const key of gState.getKeys()) {
              const value = gState.get(key);
              switch (key) {
                case "Type":
                  break;
                case "LW":
                case "LC":
                case "LJ":
                case "ML":
                case "D":
                case "RI":
                case "FL":
                case "CA":
                case "ca":
                  gStateObj.push([key, value]);
                  break;
                case "Font":
                  isSimpleGState = false;
                  promise = promise.then(() => {
                    return this.handleSetFont(
                      resources,
                      null,
                      value[0],
                      operatorList,
                      task,
                      stateManager.state
                    ).then(function (loadedName) {
                      operatorList.addDependency(loadedName);
                      gStateObj.push([key, [loadedName, value[1]]]);
                    });
                  });
                  break;
                case "BM":
                  gStateObj.push([key, normalizeBlendMode(value)]);
                  break;
                case "SMask":
                  if ((0, _primitives.isName)(value, "None")) {
                    gStateObj.push([key, false]);
                    break;
                  }
                  if (value instanceof _primitives.Dict) {
                    isSimpleGState = false;
                    promise = promise.then(() => {
                      return this.handleSMask(
                        value,
                        resources,
                        operatorList,
                        task,
                        stateManager,
                        localColorSpaceCache
                      );
                    });
                    gStateObj.push([key, true]);
                  } else {
                    (0, _util.warn)("Unsupported SMask type");
                  }
                  break;
                case "TR":
                  const transferMaps = this.handleTransferFunction(value);
                  gStateObj.push([key, transferMaps]);
                  break;
                case "OP":
                case "op":
                case "OPM":
                case "BG":
                case "BG2":
                case "UCR":
                case "UCR2":
                case "TR2":
                case "HT":
                case "SM":
                case "SA":
                case "AIS":
                case "TK":
                  (0, _util.info)("graphic state operator " + key);
                  break;
                default:
                  (0, _util.info)("Unknown graphic state operator " + key);
                  break;
              }
            }
            return promise.then(function () {
              if (gStateObj.length > 0) {
                operatorList.addOp(_util.OPS.setGState, [gStateObj]);
              }
              if (isSimpleGState) {
                localGStateCache.set(cacheKey, gStateRef, gStateObj);
              }
            });
          }
          loadFont(
            fontName,
            font,
            resources,
            fallbackFontDict = null,
            cssFontInfo = null
          ) {
            const errorFont = async () => {
              return new TranslatedFont({
                loadedName: "g_font_error",
                font: new _fonts.ErrorFont(
                  `Font "${fontName}" is not available.`
                ),
                dict: font,
                evaluatorOptions: this.options,
              });
            };
            let fontRef;
            if (font) {
              if (font instanceof _primitives.Ref) {
                fontRef = font;
              }
            } else {
              const fontRes = resources.get("Font");
              if (fontRes) {
                fontRef = fontRes.getRaw(fontName);
              }
            }
            if (fontRef) {
              if (this.parsingType3Font && this.type3FontRefs.has(fontRef)) {
                return errorFont();
              }
              if (this.fontCache.has(fontRef)) {
                return this.fontCache.get(fontRef);
              }
              font = this.xref.fetchIfRef(fontRef);
            }
            if (!(font instanceof _primitives.Dict)) {
              if (!this.options.ignoreErrors && !this.parsingType3Font) {
                (0, _util.warn)(`Font "${fontName}" is not available.`);
                return errorFont();
              }
              (0, _util.warn)(
                `Font "${fontName}" is not available -- attempting to fallback to a default font.`
              );
              font = fallbackFontDict || PartialEvaluator.fallbackFontDict;
            }
            if (font.cacheKey && this.fontCache.has(font.cacheKey)) {
              return this.fontCache.get(font.cacheKey);
            }
            const fontCapability = new _util.PromiseCapability();
            let preEvaluatedFont;
            try {
              preEvaluatedFont = this.preEvaluateFont(font);
              preEvaluatedFont.cssFontInfo = cssFontInfo;
            } catch (reason) {
              (0, _util.warn)(
                `loadFont - preEvaluateFont failed: "${reason}".`
              );
              return errorFont();
            }
            const { descriptor, hash } = preEvaluatedFont;
            const fontRefIsRef = fontRef instanceof _primitives.Ref;
            let fontID;
            if (hash && descriptor instanceof _primitives.Dict) {
              const fontAliases = (descriptor.fontAliases ||=
                Object.create(null));
              if (fontAliases[hash]) {
                const aliasFontRef = fontAliases[hash].aliasRef;
                if (
                  fontRefIsRef &&
                  aliasFontRef &&
                  this.fontCache.has(aliasFontRef)
                ) {
                  this.fontCache.putAlias(fontRef, aliasFontRef);
                  return this.fontCache.get(fontRef);
                }
              } else {
                fontAliases[hash] = {
                  fontID: this.idFactory.createFontId(),
                };
              }
              if (fontRefIsRef) {
                fontAliases[hash].aliasRef = fontRef;
              }
              fontID = fontAliases[hash].fontID;
            } else {
              fontID = this.idFactory.createFontId();
            }
            (0, _util.assert)(
              fontID?.startsWith("f"),
              'The "fontID" must be (correctly) defined.'
            );
            if (fontRefIsRef) {
              this.fontCache.put(fontRef, fontCapability.promise);
            } else {
              font.cacheKey = `cacheKey_${fontID}`;
              this.fontCache.put(font.cacheKey, fontCapability.promise);
            }
            font.loadedName = `${this.idFactory.getDocId()}_${fontID}`;
            this.translateFont(preEvaluatedFont)
              .then((translatedFont) => {
                fontCapability.resolve(
                  new TranslatedFont({
                    loadedName: font.loadedName,
                    font: translatedFont,
                    dict: font,
                    evaluatorOptions: this.options,
                  })
                );
              })
              .catch((reason) => {
                (0, _util.warn)(
                  `loadFont - translateFont failed: "${reason}".`
                );
                fontCapability.resolve(
                  new TranslatedFont({
                    loadedName: font.loadedName,
                    font: new _fonts.ErrorFont(
                      reason instanceof Error ? reason.message : reason
                    ),
                    dict: font,
                    evaluatorOptions: this.options,
                  })
                );
              });
            return fontCapability.promise;
          }
          buildPath(operatorList, fn, args, parsingText = false) {
            const lastIndex = operatorList.length - 1;
            if (!args) {
              args = [];
            }
            if (
              lastIndex < 0 ||
              operatorList.fnArray[lastIndex] !== _util.OPS.constructPath
            ) {
              if (parsingText) {
                (0, _util.warn)(
                  `Encountered path operator "${fn}" inside of a text object.`
                );
                operatorList.addOp(_util.OPS.save, null);
              }
              let minMax;
              switch (fn) {
                case _util.OPS.rectangle:
                  const x = args[0] + args[2];
                  const y = args[1] + args[3];
                  minMax = [
                    Math.min(args[0], x),
                    Math.max(args[0], x),
                    Math.min(args[1], y),
                    Math.max(args[1], y),
                  ];
                  break;
                case _util.OPS.moveTo:
                case _util.OPS.lineTo:
                  minMax = [args[0], args[0], args[1], args[1]];
                  break;
                default:
                  minMax = [Infinity, -Infinity, Infinity, -Infinity];
                  break;
              }
              operatorList.addOp(_util.OPS.constructPath, [[fn], args, minMax]);
              if (parsingText) {
                operatorList.addOp(_util.OPS.restore, null);
              }
            } else {
              const opArgs = operatorList.argsArray[lastIndex];
              opArgs[0].push(fn);
              opArgs[1].push(...args);
              const minMax = opArgs[2];
              switch (fn) {
                case _util.OPS.rectangle:
                  const x = args[0] + args[2];
                  const y = args[1] + args[3];
                  minMax[0] = Math.min(minMax[0], args[0], x);
                  minMax[1] = Math.max(minMax[1], args[0], x);
                  minMax[2] = Math.min(minMax[2], args[1], y);
                  minMax[3] = Math.max(minMax[3], args[1], y);
                  break;
                case _util.OPS.moveTo:
                case _util.OPS.lineTo:
                  minMax[0] = Math.min(minMax[0], args[0]);
                  minMax[1] = Math.max(minMax[1], args[0]);
                  minMax[2] = Math.min(minMax[2], args[1]);
                  minMax[3] = Math.max(minMax[3], args[1]);
                  break;
              }
            }
          }
          parseColorSpace({ cs, resources, localColorSpaceCache }) {
            return _colorspace.ColorSpace.parseAsync({
              cs,
              xref: this.xref,
              resources,
              pdfFunctionFactory: this._pdfFunctionFactory,
              localColorSpaceCache,
            }).catch((reason) => {
              if (reason instanceof _util.AbortException) {
                return null;
              }
              if (this.options.ignoreErrors) {
                (0, _util.warn)(
                  `parseColorSpace - ignoring ColorSpace: "${reason}".`
                );
                return null;
              }
              throw reason;
            });
          }
          parseShading({
            shading,
            resources,
            localColorSpaceCache,
            localShadingPatternCache,
          }) {
            let id = localShadingPatternCache.get(shading);
            if (!id) {
              var shadingFill = _pattern.Pattern.parseShading(
                shading,
                this.xref,
                resources,
                this._pdfFunctionFactory,
                localColorSpaceCache
              );
              const patternIR = shadingFill.getIR();
              id = `pattern_${this.idFactory.createObjId()}`;
              if (this.parsingType3Font) {
                id = `${this.idFactory.getDocId()}_type3_${id}`;
              }
              localShadingPatternCache.set(shading, id);
              if (this.parsingType3Font) {
                this.handler.send("commonobj", [id, "Pattern", patternIR]);
              } else {
                this.handler.send("obj", [
                  id,
                  this.pageIndex,
                  "Pattern",
                  patternIR,
                ]);
              }
            }
            return id;
          }
          handleColorN(
            operatorList,
            fn,
            args,
            cs,
            patterns,
            resources,
            task,
            localColorSpaceCache,
            localTilingPatternCache,
            localShadingPatternCache
          ) {
            const patternName = args.pop();
            if (patternName instanceof _primitives.Name) {
              const rawPattern = patterns.getRaw(patternName.name);
              const localTilingPattern =
                rawPattern instanceof _primitives.Ref &&
                localTilingPatternCache.getByRef(rawPattern);
              if (localTilingPattern) {
                try {
                  const color = cs.base ? cs.base.getRgb(args, 0) : null;
                  const tilingPatternIR = (0, _pattern.getTilingPatternIR)(
                    localTilingPattern.operatorListIR,
                    localTilingPattern.dict,
                    color
                  );
                  operatorList.addOp(fn, tilingPatternIR);
                  return undefined;
                } catch {}
              }
              const pattern = this.xref.fetchIfRef(rawPattern);
              if (pattern) {
                const dict =
                  pattern instanceof _base_stream.BaseStream
                    ? pattern.dict
                    : pattern;
                const typeNum = dict.get("PatternType");
                if (typeNum === PatternType.TILING) {
                  const color = cs.base ? cs.base.getRgb(args, 0) : null;
                  return this.handleTilingType(
                    fn,
                    color,
                    resources,
                    pattern,
                    dict,
                    operatorList,
                    task,
                    localTilingPatternCache
                  );
                } else if (typeNum === PatternType.SHADING) {
                  const shading = dict.get("Shading");
                  const matrix = dict.getArray("Matrix");
                  const objId = this.parseShading({
                    shading,
                    resources,
                    localColorSpaceCache,
                    localShadingPatternCache,
                  });
                  operatorList.addOp(fn, ["Shading", objId, matrix]);
                  return undefined;
                }
                throw new _util.FormatError(`Unknown PatternType: ${typeNum}`);
              }
            }
            throw new _util.FormatError(`Unknown PatternName: ${patternName}`);
          }
          _parseVisibilityExpression(array, nestingCounter, currentResult) {
            const MAX_NESTING = 10;
            if (++nestingCounter > MAX_NESTING) {
              (0, _util.warn)("Visibility expression is too deeply nested");
              return;
            }
            const length = array.length;
            const operator = this.xref.fetchIfRef(array[0]);
            if (length < 2 || !(operator instanceof _primitives.Name)) {
              (0, _util.warn)("Invalid visibility expression");
              return;
            }
            switch (operator.name) {
              case "And":
              case "Or":
              case "Not":
                currentResult.push(operator.name);
                break;
              default:
                (0, _util.warn)(
                  `Invalid operator ${operator.name} in visibility expression`
                );
                return;
            }
            for (let i = 1; i < length; i++) {
              const raw = array[i];
              const object = this.xref.fetchIfRef(raw);
              if (Array.isArray(object)) {
                const nestedResult = [];
                currentResult.push(nestedResult);
                this._parseVisibilityExpression(
                  object,
                  nestingCounter,
                  nestedResult
                );
              } else if (raw instanceof _primitives.Ref) {
                currentResult.push(raw.toString());
              }
            }
          }
          async parseMarkedContentProps(contentProperties, resources) {
            let optionalContent;
            if (contentProperties instanceof _primitives.Name) {
              const properties = resources.get("Properties");
              optionalContent = properties.get(contentProperties.name);
            } else if (contentProperties instanceof _primitives.Dict) {
              optionalContent = contentProperties;
            } else {
              throw new _util.FormatError(
                "Optional content properties malformed."
              );
            }
            const optionalContentType = optionalContent.get("Type")?.name;
            if (optionalContentType === "OCG") {
              return {
                type: optionalContentType,
                id: optionalContent.objId,
              };
            } else if (optionalContentType === "OCMD") {
              const expression = optionalContent.get("VE");
              if (Array.isArray(expression)) {
                const result = [];
                this._parseVisibilityExpression(expression, 0, result);
                if (result.length > 0) {
                  return {
                    type: "OCMD",
                    expression: result,
                  };
                }
              }
              const optionalContentGroups = optionalContent.get("OCGs");
              if (
                Array.isArray(optionalContentGroups) ||
                optionalContentGroups instanceof _primitives.Dict
              ) {
                const groupIds = [];
                if (Array.isArray(optionalContentGroups)) {
                  for (const ocg of optionalContentGroups) {
                    groupIds.push(ocg.toString());
                  }
                } else {
                  groupIds.push(optionalContentGroups.objId);
                }
                return {
                  type: optionalContentType,
                  ids: groupIds,
                  policy:
                    optionalContent.get("P") instanceof _primitives.Name
                      ? optionalContent.get("P").name
                      : null,
                  expression: null,
                };
              } else if (optionalContentGroups instanceof _primitives.Ref) {
                return {
                  type: optionalContentType,
                  id: optionalContentGroups.toString(),
                };
              }
            }
            return null;
          }
          getOperatorList({
            stream,
            task,
            resources,
            operatorList,
            initialState = null,
            fallbackFontDict = null,
          }) {
            resources ||= _primitives.Dict.empty;
            initialState ||= new EvalState();
            if (!operatorList) {
              throw new Error(
                'getOperatorList: missing "operatorList" parameter'
              );
            }
            const self = this;
            const xref = this.xref;
            let parsingText = false;
            const localImageCache = new _image_utils.LocalImageCache();
            const localColorSpaceCache =
              new _image_utils.LocalColorSpaceCache();
            const localGStateCache = new _image_utils.LocalGStateCache();
            const localTilingPatternCache =
              new _image_utils.LocalTilingPatternCache();
            const localShadingPatternCache = new Map();
            const xobjs = resources.get("XObject") || _primitives.Dict.empty;
            const patterns = resources.get("Pattern") || _primitives.Dict.empty;
            const stateManager = new StateManager(initialState);
            const preprocessor = new EvaluatorPreprocessor(
              stream,
              xref,
              stateManager
            );
            const timeSlotManager = new TimeSlotManager();
            function closePendingRestoreOPS(argument) {
              for (let i = 0, ii = preprocessor.savedStatesDepth; i < ii; i++) {
                operatorList.addOp(_util.OPS.restore, []);
              }
            }
            return new Promise(function promiseBody(resolve, reject) {
              const next = function (promise) {
                Promise.all([promise, operatorList.ready]).then(function () {
                  try {
                    promiseBody(resolve, reject);
                  } catch (ex) {
                    reject(ex);
                  }
                }, reject);
              };
              task.ensureNotTerminated();
              timeSlotManager.reset();
              const operation = {};
              let stop, i, ii, cs, name, isValidName;
              while (!(stop = timeSlotManager.check())) {
                operation.args = null;
                if (!preprocessor.read(operation)) {
                  break;
                }
                let args = operation.args;
                let fn = operation.fn;
                switch (fn | 0) {
                  case _util.OPS.paintXObject:
                    isValidName = args[0] instanceof _primitives.Name;
                    name = args[0].name;
                    if (isValidName) {
                      const localImage = localImageCache.getByName(name);
                      if (localImage) {
                        operatorList.addImageOps(
                          localImage.fn,
                          localImage.args,
                          localImage.optionalContent
                        );
                        incrementCachedImageMaskCount(localImage);
                        args = null;
                        continue;
                      }
                    }
                    next(
                      new Promise(function (resolveXObject, rejectXObject) {
                        if (!isValidName) {
                          throw new _util.FormatError(
                            "XObject must be referred to by name."
                          );
                        }
                        let xobj = xobjs.getRaw(name);
                        if (xobj instanceof _primitives.Ref) {
                          const localImage =
                            localImageCache.getByRef(xobj) ||
                            self._regionalImageCache.getByRef(xobj);
                          if (localImage) {
                            operatorList.addImageOps(
                              localImage.fn,
                              localImage.args,
                              localImage.optionalContent
                            );
                            incrementCachedImageMaskCount(localImage);
                            resolveXObject();
                            return;
                          }
                          const globalImage = self.globalImageCache.getData(
                            xobj,
                            self.pageIndex
                          );
                          if (globalImage) {
                            operatorList.addDependency(globalImage.objId);
                            operatorList.addImageOps(
                              globalImage.fn,
                              globalImage.args,
                              globalImage.optionalContent
                            );
                            resolveXObject();
                            return;
                          }
                          xobj = xref.fetch(xobj);
                        }
                        if (!(xobj instanceof _base_stream.BaseStream)) {
                          throw new _util.FormatError(
                            "XObject should be a stream"
                          );
                        }
                        const type = xobj.dict.get("Subtype");
                        if (!(type instanceof _primitives.Name)) {
                          throw new _util.FormatError(
                            "XObject should have a Name subtype"
                          );
                        }
                        if (type.name === "Form") {
                          stateManager.save();
                          self
                            .buildFormXObject(
                              resources,
                              xobj,
                              null,
                              operatorList,
                              task,
                              stateManager.state.clone(),
                              localColorSpaceCache
                            )
                            .then(function () {
                              stateManager.restore();
                              resolveXObject();
                            }, rejectXObject);
                          return;
                        } else if (type.name === "Image") {
                          self
                            .buildPaintImageXObject({
                              resources,
                              image: xobj,
                              operatorList,
                              cacheKey: name,
                              localImageCache,
                              localColorSpaceCache,
                            })
                            .then(resolveXObject, rejectXObject);
                          return;
                        } else if (type.name === "PS") {
                          (0, _util.info)("Ignored XObject subtype PS");
                        } else {
                          throw new _util.FormatError(
                            `Unhandled XObject subtype ${type.name}`
                          );
                        }
                        resolveXObject();
                      }).catch(function (reason) {
                        if (reason instanceof _util.AbortException) {
                          return;
                        }
                        if (self.options.ignoreErrors) {
                          (0, _util.warn)(
                            `getOperatorList - ignoring XObject: "${reason}".`
                          );
                          return;
                        }
                        throw reason;
                      })
                    );
                    return;
                  case _util.OPS.setFont:
                    var fontSize = args[1];
                    next(
                      self
                        .handleSetFont(
                          resources,
                          args,
                          null,
                          operatorList,
                          task,
                          stateManager.state,
                          fallbackFontDict
                        )
                        .then(function (loadedName) {
                          operatorList.addDependency(loadedName);
                          operatorList.addOp(_util.OPS.setFont, [
                            loadedName,
                            fontSize,
                          ]);
                        })
                    );
                    return;
                  case _util.OPS.beginText:
                    parsingText = true;
                    break;
                  case _util.OPS.endText:
                    parsingText = false;
                    break;
                  case _util.OPS.endInlineImage:
                    var cacheKey = args[0].cacheKey;
                    if (cacheKey) {
                      const localImage = localImageCache.getByName(cacheKey);
                      if (localImage) {
                        operatorList.addImageOps(
                          localImage.fn,
                          localImage.args,
                          localImage.optionalContent
                        );
                        incrementCachedImageMaskCount(localImage);
                        args = null;
                        continue;
                      }
                    }
                    next(
                      self.buildPaintImageXObject({
                        resources,
                        image: args[0],
                        isInline: true,
                        operatorList,
                        cacheKey,
                        localImageCache,
                        localColorSpaceCache,
                      })
                    );
                    return;
                  case _util.OPS.showText:
                    if (!stateManager.state.font) {
                      self.ensureStateFont(stateManager.state);
                      continue;
                    }
                    args[0] = self.handleText(args[0], stateManager.state);
                    break;
                  case _util.OPS.showSpacedText:
                    if (!stateManager.state.font) {
                      self.ensureStateFont(stateManager.state);
                      continue;
                    }
                    var combinedGlyphs = [];
                    var state = stateManager.state;
                    for (const arrItem of args[0]) {
                      if (typeof arrItem === "string") {
                        combinedGlyphs.push(...self.handleText(arrItem, state));
                      } else if (typeof arrItem === "number") {
                        combinedGlyphs.push(arrItem);
                      }
                    }
                    args[0] = combinedGlyphs;
                    fn = _util.OPS.showText;
                    break;
                  case _util.OPS.nextLineShowText:
                    if (!stateManager.state.font) {
                      self.ensureStateFont(stateManager.state);
                      continue;
                    }
                    operatorList.addOp(_util.OPS.nextLine);
                    args[0] = self.handleText(args[0], stateManager.state);
                    fn = _util.OPS.showText;
                    break;
                  case _util.OPS.nextLineSetSpacingShowText:
                    if (!stateManager.state.font) {
                      self.ensureStateFont(stateManager.state);
                      continue;
                    }
                    operatorList.addOp(_util.OPS.nextLine);
                    operatorList.addOp(_util.OPS.setWordSpacing, [
                      args.shift(),
                    ]);
                    operatorList.addOp(_util.OPS.setCharSpacing, [
                      args.shift(),
                    ]);
                    args[0] = self.handleText(args[0], stateManager.state);
                    fn = _util.OPS.showText;
                    break;
                  case _util.OPS.setTextRenderingMode:
                    stateManager.state.textRenderingMode = args[0];
                    break;
                  case _util.OPS.setFillColorSpace: {
                    const cachedColorSpace = _colorspace.ColorSpace.getCached(
                      args[0],
                      xref,
                      localColorSpaceCache
                    );
                    if (cachedColorSpace) {
                      stateManager.state.fillColorSpace = cachedColorSpace;
                      continue;
                    }
                    next(
                      self
                        .parseColorSpace({
                          cs: args[0],
                          resources,
                          localColorSpaceCache,
                        })
                        .then(function (colorSpace) {
                          if (colorSpace) {
                            stateManager.state.fillColorSpace = colorSpace;
                          }
                        })
                    );
                    return;
                  }
                  case _util.OPS.setStrokeColorSpace: {
                    const cachedColorSpace = _colorspace.ColorSpace.getCached(
                      args[0],
                      xref,
                      localColorSpaceCache
                    );
                    if (cachedColorSpace) {
                      stateManager.state.strokeColorSpace = cachedColorSpace;
                      continue;
                    }
                    next(
                      self
                        .parseColorSpace({
                          cs: args[0],
                          resources,
                          localColorSpaceCache,
                        })
                        .then(function (colorSpace) {
                          if (colorSpace) {
                            stateManager.state.strokeColorSpace = colorSpace;
                          }
                        })
                    );
                    return;
                  }
                  case _util.OPS.setFillColor:
                    cs = stateManager.state.fillColorSpace;
                    args = cs.getRgb(args, 0);
                    fn = _util.OPS.setFillRGBColor;
                    break;
                  case _util.OPS.setStrokeColor:
                    cs = stateManager.state.strokeColorSpace;
                    args = cs.getRgb(args, 0);
                    fn = _util.OPS.setStrokeRGBColor;
                    break;
                  case _util.OPS.setFillGray:
                    stateManager.state.fillColorSpace =
                      _colorspace.ColorSpace.singletons.gray;
                    args = _colorspace.ColorSpace.singletons.gray.getRgb(
                      args,
                      0
                    );
                    fn = _util.OPS.setFillRGBColor;
                    break;
                  case _util.OPS.setStrokeGray:
                    stateManager.state.strokeColorSpace =
                      _colorspace.ColorSpace.singletons.gray;
                    args = _colorspace.ColorSpace.singletons.gray.getRgb(
                      args,
                      0
                    );
                    fn = _util.OPS.setStrokeRGBColor;
                    break;
                  case _util.OPS.setFillCMYKColor:
                    stateManager.state.fillColorSpace =
                      _colorspace.ColorSpace.singletons.cmyk;
                    args = _colorspace.ColorSpace.singletons.cmyk.getRgb(
                      args,
                      0
                    );
                    fn = _util.OPS.setFillRGBColor;
                    break;
                  case _util.OPS.setStrokeCMYKColor:
                    stateManager.state.strokeColorSpace =
                      _colorspace.ColorSpace.singletons.cmyk;
                    args = _colorspace.ColorSpace.singletons.cmyk.getRgb(
                      args,
                      0
                    );
                    fn = _util.OPS.setStrokeRGBColor;
                    break;
                  case _util.OPS.setFillRGBColor:
                    stateManager.state.fillColorSpace =
                      _colorspace.ColorSpace.singletons.rgb;
                    args = _colorspace.ColorSpace.singletons.rgb.getRgb(
                      args,
                      0
                    );
                    break;
                  case _util.OPS.setStrokeRGBColor:
                    stateManager.state.strokeColorSpace =
                      _colorspace.ColorSpace.singletons.rgb;
                    args = _colorspace.ColorSpace.singletons.rgb.getRgb(
                      args,
                      0
                    );
                    break;
                  case _util.OPS.setFillColorN:
                    cs = stateManager.state.fillColorSpace;
                    if (cs.name === "Pattern") {
                      next(
                        self.handleColorN(
                          operatorList,
                          _util.OPS.setFillColorN,
                          args,
                          cs,
                          patterns,
                          resources,
                          task,
                          localColorSpaceCache,
                          localTilingPatternCache,
                          localShadingPatternCache
                        )
                      );
                      return;
                    }
                    args = cs.getRgb(args, 0);
                    fn = _util.OPS.setFillRGBColor;
                    break;
                  case _util.OPS.setStrokeColorN:
                    cs = stateManager.state.strokeColorSpace;
                    if (cs.name === "Pattern") {
                      next(
                        self.handleColorN(
                          operatorList,
                          _util.OPS.setStrokeColorN,
                          args,
                          cs,
                          patterns,
                          resources,
                          task,
                          localColorSpaceCache,
                          localTilingPatternCache,
                          localShadingPatternCache
                        )
                      );
                      return;
                    }
                    args = cs.getRgb(args, 0);
                    fn = _util.OPS.setStrokeRGBColor;
                    break;
                  case _util.OPS.shadingFill:
                    var shadingRes = resources.get("Shading");
                    if (!shadingRes) {
                      throw new _util.FormatError("No shading resource found");
                    }
                    var shading = shadingRes.get(args[0].name);
                    if (!shading) {
                      throw new _util.FormatError("No shading object found");
                    }
                    const patternId = self.parseShading({
                      shading,
                      resources,
                      localColorSpaceCache,
                      localShadingPatternCache,
                    });
                    args = [patternId];
                    fn = _util.OPS.shadingFill;
                    break;
                  case _util.OPS.setGState:
                    isValidName = args[0] instanceof _primitives.Name;
                    name = args[0].name;
                    if (isValidName) {
                      const localGStateObj = localGStateCache.getByName(name);
                      if (localGStateObj) {
                        if (localGStateObj.length > 0) {
                          operatorList.addOp(_util.OPS.setGState, [
                            localGStateObj,
                          ]);
                        }
                        args = null;
                        continue;
                      }
                    }
                    next(
                      new Promise(function (resolveGState, rejectGState) {
                        if (!isValidName) {
                          throw new _util.FormatError(
                            "GState must be referred to by name."
                          );
                        }
                        const extGState = resources.get("ExtGState");
                        if (!(extGState instanceof _primitives.Dict)) {
                          throw new _util.FormatError(
                            "ExtGState should be a dictionary."
                          );
                        }
                        const gState = extGState.get(name);
                        if (!(gState instanceof _primitives.Dict)) {
                          throw new _util.FormatError(
                            "GState should be a dictionary."
                          );
                        }
                        self
                          .setGState({
                            resources,
                            gState,
                            operatorList,
                            cacheKey: name,
                            task,
                            stateManager,
                            localGStateCache,
                            localColorSpaceCache,
                          })
                          .then(resolveGState, rejectGState);
                      }).catch(function (reason) {
                        if (reason instanceof _util.AbortException) {
                          return;
                        }
                        if (self.options.ignoreErrors) {
                          (0, _util.warn)(
                            `getOperatorList - ignoring ExtGState: "${reason}".`
                          );
                          return;
                        }
                        throw reason;
                      })
                    );
                    return;
                  case _util.OPS.moveTo:
                  case _util.OPS.lineTo:
                  case _util.OPS.curveTo:
                  case _util.OPS.curveTo2:
                  case _util.OPS.curveTo3:
                  case _util.OPS.closePath:
                  case _util.OPS.rectangle:
                    self.buildPath(operatorList, fn, args, parsingText);
                    continue;
                  case _util.OPS.markPoint:
                  case _util.OPS.markPointProps:
                  case _util.OPS.beginCompat:
                  case _util.OPS.endCompat:
                    continue;
                  case _util.OPS.beginMarkedContentProps:
                    if (!(args[0] instanceof _primitives.Name)) {
                      (0, _util.warn)(
                        `Expected name for beginMarkedContentProps arg0=${args[0]}`
                      );
                      continue;
                    }
                    if (args[0].name === "OC") {
                      next(
                        self
                          .parseMarkedContentProps(args[1], resources)
                          .then((data) => {
                            operatorList.addOp(
                              _util.OPS.beginMarkedContentProps,
                              ["OC", data]
                            );
                          })
                          .catch((reason) => {
                            if (reason instanceof _util.AbortException) {
                              return;
                            }
                            if (self.options.ignoreErrors) {
                              (0, _util.warn)(
                                `getOperatorList - ignoring beginMarkedContentProps: "${reason}".`
                              );
                              return;
                            }
                            throw reason;
                          })
                      );
                      return;
                    }
                    args = [
                      args[0].name,
                      args[1] instanceof _primitives.Dict
                        ? args[1].get("MCID")
                        : null,
                    ];
                    break;
                  case _util.OPS.beginMarkedContent:
                  case _util.OPS.endMarkedContent:
                  default:
                    if (args !== null) {
                      for (i = 0, ii = args.length; i < ii; i++) {
                        if (args[i] instanceof _primitives.Dict) {
                          break;
                        }
                      }
                      if (i < ii) {
                        (0, _util.warn)(
                          "getOperatorList - ignoring operator: " + fn
                        );
                        continue;
                      }
                    }
                }
                operatorList.addOp(fn, args);
              }
              if (stop) {
                next(deferred);
                return;
              }
              closePendingRestoreOPS();
              resolve();
            }).catch((reason) => {
              if (reason instanceof _util.AbortException) {
                return;
              }
              if (this.options.ignoreErrors) {
                (0, _util.warn)(
                  `getOperatorList - ignoring errors during "${task.name}" ` +
                    `task: "${reason}".`
                );
                closePendingRestoreOPS();
                return;
              }
              throw reason;
            });
          }
          getTextContent({
            stream,
            task,
            resources,
            stateManager = null,
            includeMarkedContent = false,
            sink,
            seenStyles = new Set(),
            viewBox,
            markedContentData = null,
            disableNormalization = false,
          }) {
            resources ||= _primitives.Dict.empty;
            stateManager ||= new StateManager(new TextState());
            if (includeMarkedContent) {
              markedContentData ||= {
                level: 0,
              };
            }
            const textContent = {
              items: [],
              styles: Object.create(null),
            };
            const textContentItem = {
              initialized: false,
              str: [],
              totalWidth: 0,
              totalHeight: 0,
              width: 0,
              height: 0,
              vertical: false,
              prevTransform: null,
              textAdvanceScale: 0,
              spaceInFlowMin: 0,
              spaceInFlowMax: 0,
              trackingSpaceMin: Infinity,
              negativeSpaceMax: -Infinity,
              notASpace: -Infinity,
              transform: null,
              fontName: null,
              hasEOL: false,
            };
            const twoLastChars = [" ", " "];
            let twoLastCharsPos = 0;
            function saveLastChar(char) {
              const nextPos = (twoLastCharsPos + 1) % 2;
              const ret =
                twoLastChars[twoLastCharsPos] !== " " &&
                twoLastChars[nextPos] === " ";
              twoLastChars[twoLastCharsPos] = char;
              twoLastCharsPos = nextPos;
              return ret;
            }
            function shouldAddWhitepsace() {
              return (
                twoLastChars[twoLastCharsPos] !== " " &&
                twoLastChars[(twoLastCharsPos + 1) % 2] === " "
              );
            }
            function resetLastChars() {
              twoLastChars[0] = twoLastChars[1] = " ";
              twoLastCharsPos = 0;
            }
            const TRACKING_SPACE_FACTOR = 0.102;
            const NOT_A_SPACE_FACTOR = 0.03;
            const NEGATIVE_SPACE_FACTOR = -0.2;
            const SPACE_IN_FLOW_MIN_FACTOR = 0.102;
            const SPACE_IN_FLOW_MAX_FACTOR = 0.6;
            const VERTICAL_SHIFT_RATIO = 0.25;
            const self = this;
            const xref = this.xref;
            const showSpacedTextBuffer = [];
            let xobjs = null;
            const emptyXObjectCache = new _image_utils.LocalImageCache();
            const emptyGStateCache = new _image_utils.LocalGStateCache();
            const preprocessor = new EvaluatorPreprocessor(
              stream,
              xref,
              stateManager
            );
            let textState;
            function pushWhitespace({
              width = 0,
              height = 0,
              transform = textContentItem.prevTransform,
              fontName = textContentItem.fontName,
            }) {
              textContent.items.push({
                str: " ",
                dir: "ltr",
                width,
                height,
                transform,
                fontName,
                hasEOL: false,
              });
            }
            function getCurrentTextTransform() {
              const font = textState.font;
              const tsm = [
                textState.fontSize * textState.textHScale,
                0,
                0,
                textState.fontSize,
                0,
                textState.textRise,
              ];
              if (
                font.isType3Font &&
                (textState.fontSize <= 1 || font.isCharBBox) &&
                !(0, _util.isArrayEqual)(
                  textState.fontMatrix,
                  _util.FONT_IDENTITY_MATRIX
                )
              ) {
                const glyphHeight = font.bbox[3] - font.bbox[1];
                if (glyphHeight > 0) {
                  tsm[3] *= glyphHeight * textState.fontMatrix[3];
                }
              }
              return _util.Util.transform(
                textState.ctm,
                _util.Util.transform(textState.textMatrix, tsm)
              );
            }
            function ensureTextContentItem() {
              if (textContentItem.initialized) {
                return textContentItem;
              }
              const { font, loadedName } = textState;
              if (!seenStyles.has(loadedName)) {
                seenStyles.add(loadedName);
                textContent.styles[loadedName] = {
                  fontFamily: font.fallbackName,
                  ascent: font.ascent,
                  descent: font.descent,
                  vertical: font.vertical,
                };
              }
              textContentItem.fontName = loadedName;
              const trm = (textContentItem.transform =
                getCurrentTextTransform());
              if (!font.vertical) {
                textContentItem.width = textContentItem.totalWidth = 0;
                textContentItem.height = textContentItem.totalHeight =
                  Math.hypot(trm[2], trm[3]);
                textContentItem.vertical = false;
              } else {
                textContentItem.width = textContentItem.totalWidth = Math.hypot(
                  trm[0],
                  trm[1]
                );
                textContentItem.height = textContentItem.totalHeight = 0;
                textContentItem.vertical = true;
              }
              const scaleLineX = Math.hypot(
                textState.textLineMatrix[0],
                textState.textLineMatrix[1]
              );
              const scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);
              textContentItem.textAdvanceScale = scaleCtmX * scaleLineX;
              const { fontSize } = textState;
              textContentItem.trackingSpaceMin =
                fontSize * TRACKING_SPACE_FACTOR;
              textContentItem.notASpace = fontSize * NOT_A_SPACE_FACTOR;
              textContentItem.negativeSpaceMax =
                fontSize * NEGATIVE_SPACE_FACTOR;
              textContentItem.spaceInFlowMin =
                fontSize * SPACE_IN_FLOW_MIN_FACTOR;
              textContentItem.spaceInFlowMax =
                fontSize * SPACE_IN_FLOW_MAX_FACTOR;
              textContentItem.hasEOL = false;
              textContentItem.initialized = true;
              return textContentItem;
            }
            function updateAdvanceScale() {
              if (!textContentItem.initialized) {
                return;
              }
              const scaleLineX = Math.hypot(
                textState.textLineMatrix[0],
                textState.textLineMatrix[1]
              );
              const scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);
              const scaleFactor = scaleCtmX * scaleLineX;
              if (scaleFactor === textContentItem.textAdvanceScale) {
                return;
              }
              if (!textContentItem.vertical) {
                textContentItem.totalWidth +=
                  textContentItem.width * textContentItem.textAdvanceScale;
                textContentItem.width = 0;
              } else {
                textContentItem.totalHeight +=
                  textContentItem.height * textContentItem.textAdvanceScale;
                textContentItem.height = 0;
              }
              textContentItem.textAdvanceScale = scaleFactor;
            }
            function runBidiTransform(textChunk) {
              let text = textChunk.str.join("");
              if (!disableNormalization) {
                text = (0, _util.normalizeUnicode)(text);
              }
              const bidiResult = (0, _bidi.bidi)(text, -1, textChunk.vertical);
              return {
                str: bidiResult.str,
                dir: bidiResult.dir,
                width: Math.abs(textChunk.totalWidth),
                height: Math.abs(textChunk.totalHeight),
                transform: textChunk.transform,
                fontName: textChunk.fontName,
                hasEOL: textChunk.hasEOL,
              };
            }
            function handleSetFont(fontName, fontRef) {
              return self
                .loadFont(fontName, fontRef, resources)
                .then(function (translated) {
                  if (!translated.font.isType3Font) {
                    return translated;
                  }
                  return translated
                    .loadType3Data(self, resources, task)
                    .catch(function () {})
                    .then(function () {
                      return translated;
                    });
                })
                .then(function (translated) {
                  textState.loadedName = translated.loadedName;
                  textState.font = translated.font;
                  textState.fontMatrix =
                    translated.font.fontMatrix || _util.FONT_IDENTITY_MATRIX;
                });
            }
            function applyInverseRotation(x, y, matrix) {
              const scale = Math.hypot(matrix[0], matrix[1]);
              return [
                (matrix[0] * x + matrix[1] * y) / scale,
                (matrix[2] * x + matrix[3] * y) / scale,
              ];
            }
            function compareWithLastPosition(glyphWidth) {
              const currentTransform = getCurrentTextTransform();
              let posX = currentTransform[4];
              let posY = currentTransform[5];
              if (textState.font?.vertical) {
                if (
                  posX < viewBox[0] ||
                  posX > viewBox[2] ||
                  posY + glyphWidth < viewBox[1] ||
                  posY > viewBox[3]
                ) {
                  return false;
                }
              } else if (
                posX + glyphWidth < viewBox[0] ||
                posX > viewBox[2] ||
                posY < viewBox[1] ||
                posY > viewBox[3]
              ) {
                return false;
              }
              if (!textState.font || !textContentItem.prevTransform) {
                return true;
              }
              let lastPosX = textContentItem.prevTransform[4];
              let lastPosY = textContentItem.prevTransform[5];
              if (lastPosX === posX && lastPosY === posY) {
                return true;
              }
              let rotate = -1;
              if (
                currentTransform[0] &&
                currentTransform[1] === 0 &&
                currentTransform[2] === 0
              ) {
                rotate = currentTransform[0] > 0 ? 0 : 180;
              } else if (
                currentTransform[1] &&
                currentTransform[0] === 0 &&
                currentTransform[3] === 0
              ) {
                rotate = currentTransform[1] > 0 ? 90 : 270;
              }
              switch (rotate) {
                case 0:
                  break;
                case 90:
                  [posX, posY] = [posY, posX];
                  [lastPosX, lastPosY] = [lastPosY, lastPosX];
                  break;
                case 180:
                  [posX, posY, lastPosX, lastPosY] = [
                    -posX,
                    -posY,
                    -lastPosX,
                    -lastPosY,
                  ];
                  break;
                case 270:
                  [posX, posY] = [-posY, -posX];
                  [lastPosX, lastPosY] = [-lastPosY, -lastPosX];
                  break;
                default:
                  [posX, posY] = applyInverseRotation(
                    posX,
                    posY,
                    currentTransform
                  );
                  [lastPosX, lastPosY] = applyInverseRotation(
                    lastPosX,
                    lastPosY,
                    textContentItem.prevTransform
                  );
              }
              if (textState.font.vertical) {
                const advanceY =
                  (lastPosY - posY) / textContentItem.textAdvanceScale;
                const advanceX = posX - lastPosX;
                const textOrientation = Math.sign(textContentItem.height);
                if (
                  advanceY <
                  textOrientation * textContentItem.negativeSpaceMax
                ) {
                  if (Math.abs(advanceX) > 0.5 * textContentItem.width) {
                    appendEOL();
                    return true;
                  }
                  resetLastChars();
                  flushTextContentItem();
                  return true;
                }
                if (Math.abs(advanceX) > textContentItem.width) {
                  appendEOL();
                  return true;
                }
                if (advanceY <= textOrientation * textContentItem.notASpace) {
                  resetLastChars();
                }
                if (
                  advanceY <=
                  textOrientation * textContentItem.trackingSpaceMin
                ) {
                  if (shouldAddWhitepsace()) {
                    resetLastChars();
                    flushTextContentItem();
                    pushWhitespace({
                      height: Math.abs(advanceY),
                    });
                  } else {
                    textContentItem.height += advanceY;
                  }
                } else if (
                  !addFakeSpaces(
                    advanceY,
                    textContentItem.prevTransform,
                    textOrientation
                  )
                ) {
                  if (textContentItem.str.length === 0) {
                    resetLastChars();
                    pushWhitespace({
                      height: Math.abs(advanceY),
                    });
                  } else {
                    textContentItem.height += advanceY;
                  }
                }
                if (
                  Math.abs(advanceX) >
                  textContentItem.width * VERTICAL_SHIFT_RATIO
                ) {
                  flushTextContentItem();
                }
                return true;
              }
              const advanceX =
                (posX - lastPosX) / textContentItem.textAdvanceScale;
              const advanceY = posY - lastPosY;
              const textOrientation = Math.sign(textContentItem.width);
              if (
                advanceX <
                textOrientation * textContentItem.negativeSpaceMax
              ) {
                if (Math.abs(advanceY) > 0.5 * textContentItem.height) {
                  appendEOL();
                  return true;
                }
                resetLastChars();
                flushTextContentItem();
                return true;
              }
              if (Math.abs(advanceY) > textContentItem.height) {
                appendEOL();
                return true;
              }
              if (advanceX <= textOrientation * textContentItem.notASpace) {
                resetLastChars();
              }
              if (
                advanceX <=
                textOrientation * textContentItem.trackingSpaceMin
              ) {
                if (shouldAddWhitepsace()) {
                  resetLastChars();
                  flushTextContentItem();
                  pushWhitespace({
                    width: Math.abs(advanceX),
                  });
                } else {
                  textContentItem.width += advanceX;
                }
              } else if (
                !addFakeSpaces(
                  advanceX,
                  textContentItem.prevTransform,
                  textOrientation
                )
              ) {
                if (textContentItem.str.length === 0) {
                  resetLastChars();
                  pushWhitespace({
                    width: Math.abs(advanceX),
                  });
                } else {
                  textContentItem.width += advanceX;
                }
              }
              if (
                Math.abs(advanceY) >
                textContentItem.height * VERTICAL_SHIFT_RATIO
              ) {
                flushTextContentItem();
              }
              return true;
            }
            function buildTextContentItem({ chars, extraSpacing }) {
              const font = textState.font;
              if (!chars) {
                const charSpacing = textState.charSpacing + extraSpacing;
                if (charSpacing) {
                  if (!font.vertical) {
                    textState.translateTextMatrix(
                      charSpacing * textState.textHScale,
                      0
                    );
                  } else {
                    textState.translateTextMatrix(0, -charSpacing);
                  }
                }
                return;
              }
              const glyphs = font.charsToGlyphs(chars);
              const scale = textState.fontMatrix[0] * textState.fontSize;
              for (let i = 0, ii = glyphs.length; i < ii; i++) {
                const glyph = glyphs[i];
                const { category } = glyph;
                if (category.isInvisibleFormatMark) {
                  continue;
                }
                let charSpacing =
                  textState.charSpacing + (i + 1 === ii ? extraSpacing : 0);
                let glyphWidth = glyph.width;
                if (font.vertical) {
                  glyphWidth = glyph.vmetric ? glyph.vmetric[0] : -glyphWidth;
                }
                let scaledDim = glyphWidth * scale;
                if (category.isWhitespace) {
                  if (!font.vertical) {
                    charSpacing += scaledDim + textState.wordSpacing;
                    textState.translateTextMatrix(
                      charSpacing * textState.textHScale,
                      0
                    );
                  } else {
                    charSpacing += -scaledDim + textState.wordSpacing;
                    textState.translateTextMatrix(0, -charSpacing);
                  }
                  saveLastChar(" ");
                  continue;
                }
                if (
                  !category.isZeroWidthDiacritic &&
                  !compareWithLastPosition(scaledDim)
                ) {
                  if (!font.vertical) {
                    textState.translateTextMatrix(
                      scaledDim * textState.textHScale,
                      0
                    );
                  } else {
                    textState.translateTextMatrix(0, scaledDim);
                  }
                  continue;
                }
                const textChunk = ensureTextContentItem();
                if (category.isZeroWidthDiacritic) {
                  scaledDim = 0;
                }
                if (!font.vertical) {
                  scaledDim *= textState.textHScale;
                  textState.translateTextMatrix(scaledDim, 0);
                  textChunk.width += scaledDim;
                } else {
                  textState.translateTextMatrix(0, scaledDim);
                  scaledDim = Math.abs(scaledDim);
                  textChunk.height += scaledDim;
                }
                if (scaledDim) {
                  textChunk.prevTransform = getCurrentTextTransform();
                }
                const glyphUnicode = glyph.unicode;
                if (saveLastChar(glyphUnicode)) {
                  textChunk.str.push(" ");
                }
                textChunk.str.push(glyphUnicode);
                if (charSpacing) {
                  if (!font.vertical) {
                    textState.translateTextMatrix(
                      charSpacing * textState.textHScale,
                      0
                    );
                  } else {
                    textState.translateTextMatrix(0, -charSpacing);
                  }
                }
              }
            }
            function appendEOL() {
              resetLastChars();
              if (textContentItem.initialized) {
                textContentItem.hasEOL = true;
                flushTextContentItem();
              } else {
                textContent.items.push({
                  str: "",
                  dir: "ltr",
                  width: 0,
                  height: 0,
                  transform: getCurrentTextTransform(),
                  fontName: textState.loadedName,
                  hasEOL: true,
                });
              }
            }
            function addFakeSpaces(width, transf, textOrientation) {
              if (
                textOrientation * textContentItem.spaceInFlowMin <= width &&
                width <= textOrientation * textContentItem.spaceInFlowMax
              ) {
                if (textContentItem.initialized) {
                  resetLastChars();
                  textContentItem.str.push(" ");
                }
                return false;
              }
              const fontName = textContentItem.fontName;
              let height = 0;
              if (textContentItem.vertical) {
                height = width;
                width = 0;
              }
              flushTextContentItem();
              resetLastChars();
              pushWhitespace({
                width: Math.abs(width),
                height: Math.abs(height),
                transform: transf || getCurrentTextTransform(),
                fontName,
              });
              return true;
            }
            function flushTextContentItem() {
              if (!textContentItem.initialized || !textContentItem.str) {
                return;
              }
              if (!textContentItem.vertical) {
                textContentItem.totalWidth +=
                  textContentItem.width * textContentItem.textAdvanceScale;
              } else {
                textContentItem.totalHeight +=
                  textContentItem.height * textContentItem.textAdvanceScale;
              }
              textContent.items.push(runBidiTransform(textContentItem));
              textContentItem.initialized = false;
              textContentItem.str.length = 0;
            }
            function enqueueChunk(batch = false) {
              const length = textContent.items.length;
              if (length === 0) {
                return;
              }
              if (batch && length < TEXT_CHUNK_BATCH_SIZE) {
                return;
              }
              sink.enqueue(textContent, length);
              textContent.items = [];
              textContent.styles = Object.create(null);
            }
            const timeSlotManager = new TimeSlotManager();
            return new Promise(function promiseBody(resolve, reject) {
              const next = function (promise) {
                enqueueChunk(true);
                Promise.all([promise, sink.ready]).then(function () {
                  try {
                    promiseBody(resolve, reject);
                  } catch (ex) {
                    reject(ex);
                  }
                }, reject);
              };
              task.ensureNotTerminated();
              timeSlotManager.reset();
              const operation = {};
              let stop,
                args = [];
              while (!(stop = timeSlotManager.check())) {
                args.length = 0;
                operation.args = args;
                if (!preprocessor.read(operation)) {
                  break;
                }
                const previousState = textState;
                textState = stateManager.state;
                const fn = operation.fn;
                args = operation.args;
                switch (fn | 0) {
                  case _util.OPS.setFont:
                    var fontNameArg = args[0].name,
                      fontSizeArg = args[1];
                    if (
                      textState.font &&
                      fontNameArg === textState.fontName &&
                      fontSizeArg === textState.fontSize
                    ) {
                      break;
                    }
                    flushTextContentItem();
                    textState.fontName = fontNameArg;
                    textState.fontSize = fontSizeArg;
                    next(handleSetFont(fontNameArg, null));
                    return;
                  case _util.OPS.setTextRise:
                    textState.textRise = args[0];
                    break;
                  case _util.OPS.setHScale:
                    textState.textHScale = args[0] / 100;
                    break;
                  case _util.OPS.setLeading:
                    textState.leading = args[0];
                    break;
                  case _util.OPS.moveText:
                    textState.translateTextLineMatrix(args[0], args[1]);
                    textState.textMatrix = textState.textLineMatrix.slice();
                    break;
                  case _util.OPS.setLeadingMoveText:
                    textState.leading = -args[1];
                    textState.translateTextLineMatrix(args[0], args[1]);
                    textState.textMatrix = textState.textLineMatrix.slice();
                    break;
                  case _util.OPS.nextLine:
                    textState.carriageReturn();
                    break;
                  case _util.OPS.setTextMatrix:
                    textState.setTextMatrix(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4],
                      args[5]
                    );
                    textState.setTextLineMatrix(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4],
                      args[5]
                    );
                    updateAdvanceScale();
                    break;
                  case _util.OPS.setCharSpacing:
                    textState.charSpacing = args[0];
                    break;
                  case _util.OPS.setWordSpacing:
                    textState.wordSpacing = args[0];
                    break;
                  case _util.OPS.beginText:
                    textState.textMatrix = _util.IDENTITY_MATRIX.slice();
                    textState.textLineMatrix = _util.IDENTITY_MATRIX.slice();
                    break;
                  case _util.OPS.showSpacedText:
                    if (!stateManager.state.font) {
                      self.ensureStateFont(stateManager.state);
                      continue;
                    }
                    const spaceFactor =
                      ((textState.font.vertical ? 1 : -1) *
                        textState.fontSize) /
                      1000;
                    const elements = args[0];
                    for (let i = 0, ii = elements.length; i < ii; i++) {
                      const item = elements[i];
                      if (typeof item === "string") {
                        showSpacedTextBuffer.push(item);
                      } else if (typeof item === "number" && item !== 0) {
                        const str = showSpacedTextBuffer.join("");
                        showSpacedTextBuffer.length = 0;
                        buildTextContentItem({
                          chars: str,
                          extraSpacing: item * spaceFactor,
                        });
                      }
                    }
                    if (showSpacedTextBuffer.length > 0) {
                      const str = showSpacedTextBuffer.join("");
                      showSpacedTextBuffer.length = 0;
                      buildTextContentItem({
                        chars: str,
                        extraSpacing: 0,
                      });
                    }
                    break;
                  case _util.OPS.showText:
                    if (!stateManager.state.font) {
                      self.ensureStateFont(stateManager.state);
                      continue;
                    }
                    buildTextContentItem({
                      chars: args[0],
                      extraSpacing: 0,
                    });
                    break;
                  case _util.OPS.nextLineShowText:
                    if (!stateManager.state.font) {
                      self.ensureStateFont(stateManager.state);
                      continue;
                    }
                    textState.carriageReturn();
                    buildTextContentItem({
                      chars: args[0],
                      extraSpacing: 0,
                    });
                    break;
                  case _util.OPS.nextLineSetSpacingShowText:
                    if (!stateManager.state.font) {
                      self.ensureStateFont(stateManager.state);
                      continue;
                    }
                    textState.wordSpacing = args[0];
                    textState.charSpacing = args[1];
                    textState.carriageReturn();
                    buildTextContentItem({
                      chars: args[2],
                      extraSpacing: 0,
                    });
                    break;
                  case _util.OPS.paintXObject:
                    flushTextContentItem();
                    if (!xobjs) {
                      xobjs =
                        resources.get("XObject") || _primitives.Dict.empty;
                    }
                    var isValidName = args[0] instanceof _primitives.Name;
                    var name = args[0].name;
                    if (isValidName && emptyXObjectCache.getByName(name)) {
                      break;
                    }
                    next(
                      new Promise(function (resolveXObject, rejectXObject) {
                        if (!isValidName) {
                          throw new _util.FormatError(
                            "XObject must be referred to by name."
                          );
                        }
                        let xobj = xobjs.getRaw(name);
                        if (xobj instanceof _primitives.Ref) {
                          if (emptyXObjectCache.getByRef(xobj)) {
                            resolveXObject();
                            return;
                          }
                          const globalImage = self.globalImageCache.getData(
                            xobj,
                            self.pageIndex
                          );
                          if (globalImage) {
                            resolveXObject();
                            return;
                          }
                          xobj = xref.fetch(xobj);
                        }
                        if (!(xobj instanceof _base_stream.BaseStream)) {
                          throw new _util.FormatError(
                            "XObject should be a stream"
                          );
                        }
                        const type = xobj.dict.get("Subtype");
                        if (!(type instanceof _primitives.Name)) {
                          throw new _util.FormatError(
                            "XObject should have a Name subtype"
                          );
                        }
                        if (type.name !== "Form") {
                          emptyXObjectCache.set(name, xobj.dict.objId, true);
                          resolveXObject();
                          return;
                        }
                        const currentState = stateManager.state.clone();
                        const xObjStateManager = new StateManager(currentState);
                        const matrix = xobj.dict.getArray("Matrix");
                        if (Array.isArray(matrix) && matrix.length === 6) {
                          xObjStateManager.transform(matrix);
                        }
                        enqueueChunk();
                        const sinkWrapper = {
                          enqueueInvoked: false,
                          enqueue(chunk, size) {
                            this.enqueueInvoked = true;
                            sink.enqueue(chunk, size);
                          },
                          get desiredSize() {
                            return sink.desiredSize;
                          },
                          get ready() {
                            return sink.ready;
                          },
                        };
                        self
                          .getTextContent({
                            stream: xobj,
                            task,
                            resources: xobj.dict.get("Resources") || resources,
                            stateManager: xObjStateManager,
                            includeMarkedContent,
                            sink: sinkWrapper,
                            seenStyles,
                            viewBox,
                            markedContentData,
                            disableNormalization,
                          })
                          .then(function () {
                            if (!sinkWrapper.enqueueInvoked) {
                              emptyXObjectCache.set(
                                name,
                                xobj.dict.objId,
                                true
                              );
                            }
                            resolveXObject();
                          }, rejectXObject);
                      }).catch(function (reason) {
                        if (reason instanceof _util.AbortException) {
                          return;
                        }
                        if (self.options.ignoreErrors) {
                          (0, _util.warn)(
                            `getTextContent - ignoring XObject: "${reason}".`
                          );
                          return;
                        }
                        throw reason;
                      })
                    );
                    return;
                  case _util.OPS.setGState:
                    isValidName = args[0] instanceof _primitives.Name;
                    name = args[0].name;
                    if (isValidName && emptyGStateCache.getByName(name)) {
                      break;
                    }
                    next(
                      new Promise(function (resolveGState, rejectGState) {
                        if (!isValidName) {
                          throw new _util.FormatError(
                            "GState must be referred to by name."
                          );
                        }
                        const extGState = resources.get("ExtGState");
                        if (!(extGState instanceof _primitives.Dict)) {
                          throw new _util.FormatError(
                            "ExtGState should be a dictionary."
                          );
                        }
                        const gState = extGState.get(name);
                        if (!(gState instanceof _primitives.Dict)) {
                          throw new _util.FormatError(
                            "GState should be a dictionary."
                          );
                        }
                        const gStateFont = gState.get("Font");
                        if (!gStateFont) {
                          emptyGStateCache.set(name, gState.objId, true);
                          resolveGState();
                          return;
                        }
                        flushTextContentItem();
                        textState.fontName = null;
                        textState.fontSize = gStateFont[1];
                        handleSetFont(null, gStateFont[0]).then(
                          resolveGState,
                          rejectGState
                        );
                      }).catch(function (reason) {
                        if (reason instanceof _util.AbortException) {
                          return;
                        }
                        if (self.options.ignoreErrors) {
                          (0, _util.warn)(
                            `getTextContent - ignoring ExtGState: "${reason}".`
                          );
                          return;
                        }
                        throw reason;
                      })
                    );
                    return;
                  case _util.OPS.beginMarkedContent:
                    flushTextContentItem();
                    if (includeMarkedContent) {
                      markedContentData.level++;
                      textContent.items.push({
                        type: "beginMarkedContent",
                        tag:
                          args[0] instanceof _primitives.Name
                            ? args[0].name
                            : null,
                      });
                    }
                    break;
                  case _util.OPS.beginMarkedContentProps:
                    flushTextContentItem();
                    if (includeMarkedContent) {
                      markedContentData.level++;
                      let mcid = null;
                      if (args[1] instanceof _primitives.Dict) {
                        mcid = args[1].get("MCID");
                      }
                      textContent.items.push({
                        type: "beginMarkedContentProps",
                        id: Number.isInteger(mcid)
                          ? `${self.idFactory.getPageObjId()}_mc${mcid}`
                          : null,
                        tag:
                          args[0] instanceof _primitives.Name
                            ? args[0].name
                            : null,
                      });
                    }
                    break;
                  case _util.OPS.endMarkedContent:
                    flushTextContentItem();
                    if (includeMarkedContent) {
                      if (markedContentData.level === 0) {
                        break;
                      }
                      markedContentData.level--;
                      textContent.items.push({
                        type: "endMarkedContent",
                      });
                    }
                    break;
                  case _util.OPS.restore:
                    if (
                      previousState &&
                      (previousState.font !== textState.font ||
                        previousState.fontSize !== textState.fontSize ||
                        previousState.fontName !== textState.fontName)
                    ) {
                      flushTextContentItem();
                    }
                    break;
                }
                if (textContent.items.length >= sink.desiredSize) {
                  stop = true;
                  break;
                }
              }
              if (stop) {
                next(deferred);
                return;
              }
              flushTextContentItem();
              enqueueChunk();
              resolve();
            }).catch((reason) => {
              if (reason instanceof _util.AbortException) {
                return;
              }
              if (this.options.ignoreErrors) {
                (0, _util.warn)(
                  `getTextContent - ignoring errors during "${task.name}" ` +
                    `task: "${reason}".`
                );
                flushTextContentItem();
                enqueueChunk();
                return;
              }
              throw reason;
            });
          }
          extractDataStructures(dict, baseDict, properties) {
            const xref = this.xref;
            let cidToGidBytes;
            const toUnicodePromise = this.readToUnicode(
              properties.toUnicode ||
                dict.get("ToUnicode") ||
                baseDict.get("ToUnicode")
            );
            if (properties.composite) {
              const cidSystemInfo = dict.get("CIDSystemInfo");
              if (cidSystemInfo instanceof _primitives.Dict) {
                properties.cidSystemInfo = {
                  registry: (0, _util.stringToPDFString)(
                    cidSystemInfo.get("Registry")
                  ),
                  ordering: (0, _util.stringToPDFString)(
                    cidSystemInfo.get("Ordering")
                  ),
                  supplement: cidSystemInfo.get("Supplement"),
                };
              }
              try {
                const cidToGidMap = dict.get("CIDToGIDMap");
                if (cidToGidMap instanceof _base_stream.BaseStream) {
                  cidToGidBytes = cidToGidMap.getBytes();
                }
              } catch (ex) {
                if (!this.options.ignoreErrors) {
                  throw ex;
                }
                (0, _util.warn)(
                  `extractDataStructures - ignoring CIDToGIDMap data: "${ex}".`
                );
              }
            }
            const differences = [];
            let baseEncodingName = null;
            let encoding;
            if (dict.has("Encoding")) {
              encoding = dict.get("Encoding");
              if (encoding instanceof _primitives.Dict) {
                baseEncodingName = encoding.get("BaseEncoding");
                baseEncodingName =
                  baseEncodingName instanceof _primitives.Name
                    ? baseEncodingName.name
                    : null;
                if (encoding.has("Differences")) {
                  const diffEncoding = encoding.get("Differences");
                  let index = 0;
                  for (const entry of diffEncoding) {
                    const data = xref.fetchIfRef(entry);
                    if (typeof data === "number") {
                      index = data;
                    } else if (data instanceof _primitives.Name) {
                      differences[index++] = data.name;
                    } else {
                      throw new _util.FormatError(
                        `Invalid entry in 'Differences' array: ${data}`
                      );
                    }
                  }
                }
              } else if (encoding instanceof _primitives.Name) {
                baseEncodingName = encoding.name;
              } else {
                const msg = "Encoding is not a Name nor a Dict";
                if (!this.options.ignoreErrors) {
                  throw new _util.FormatError(msg);
                }
                (0, _util.warn)(msg);
              }
              if (
                baseEncodingName !== "MacRomanEncoding" &&
                baseEncodingName !== "MacExpertEncoding" &&
                baseEncodingName !== "WinAnsiEncoding"
              ) {
                baseEncodingName = null;
              }
            }
            const nonEmbeddedFont =
                !properties.file || properties.isInternalFont,
              isSymbolsFontName = (0, _standard_fonts.getSymbolsFonts)()[
                properties.name
              ];
            if (baseEncodingName && nonEmbeddedFont && isSymbolsFontName) {
              baseEncodingName = null;
            }
            if (baseEncodingName) {
              properties.defaultEncoding = (0, _encodings.getEncoding)(
                baseEncodingName
              );
            } else {
              const isSymbolicFont = !!(
                properties.flags & _fonts_utils.FontFlags.Symbolic
              );
              const isNonsymbolicFont = !!(
                properties.flags & _fonts_utils.FontFlags.Nonsymbolic
              );
              encoding = _encodings.StandardEncoding;
              if (properties.type === "TrueType" && !isNonsymbolicFont) {
                encoding = _encodings.WinAnsiEncoding;
              }
              if (isSymbolicFont || isSymbolsFontName) {
                encoding = _encodings.MacRomanEncoding;
                if (nonEmbeddedFont) {
                  if (/Symbol/i.test(properties.name)) {
                    encoding = _encodings.SymbolSetEncoding;
                  } else if (/Dingbats/i.test(properties.name)) {
                    encoding = _encodings.ZapfDingbatsEncoding;
                  } else if (/Wingdings/i.test(properties.name)) {
                    encoding = _encodings.WinAnsiEncoding;
                  }
                }
              }
              properties.defaultEncoding = encoding;
            }
            properties.differences = differences;
            properties.baseEncodingName = baseEncodingName;
            properties.hasEncoding =
              !!baseEncodingName || differences.length > 0;
            properties.dict = dict;
            return toUnicodePromise
              .then((readToUnicode) => {
                properties.toUnicode = readToUnicode;
                return this.buildToUnicode(properties);
              })
              .then((builtToUnicode) => {
                properties.toUnicode = builtToUnicode;
                if (cidToGidBytes) {
                  properties.cidToGidMap = this.readCidToGidMap(
                    cidToGidBytes,
                    builtToUnicode
                  );
                }
                return properties;
              });
          }
          _simpleFontToUnicode(properties, forceGlyphs = false) {
            (0, _util.assert)(!properties.composite, "Must be a simple font.");
            const toUnicode = [];
            const encoding = properties.defaultEncoding.slice();
            const baseEncodingName = properties.baseEncodingName;
            const differences = properties.differences;
            for (const charcode in differences) {
              const glyphName = differences[charcode];
              if (glyphName === ".notdef") {
                continue;
              }
              encoding[charcode] = glyphName;
            }
            const glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();
            for (const charcode in encoding) {
              let glyphName = encoding[charcode];
              if (glyphName === "") {
                continue;
              }
              let unicode = glyphsUnicodeMap[glyphName];
              if (unicode !== undefined) {
                toUnicode[charcode] = String.fromCharCode(unicode);
                continue;
              }
              let code = 0;
              switch (glyphName[0]) {
                case "G":
                  if (glyphName.length === 3) {
                    code = parseInt(glyphName.substring(1), 16);
                  }
                  break;
                case "g":
                  if (glyphName.length === 5) {
                    code = parseInt(glyphName.substring(1), 16);
                  }
                  break;
                case "C":
                case "c":
                  if (glyphName.length >= 3 && glyphName.length <= 4) {
                    const codeStr = glyphName.substring(1);
                    if (forceGlyphs) {
                      code = parseInt(codeStr, 16);
                      break;
                    }
                    code = +codeStr;
                    if (
                      Number.isNaN(code) &&
                      Number.isInteger(parseInt(codeStr, 16))
                    ) {
                      return this._simpleFontToUnicode(properties, true);
                    }
                  }
                  break;
                case "u":
                  unicode = (0, _unicode.getUnicodeForGlyph)(
                    glyphName,
                    glyphsUnicodeMap
                  );
                  if (unicode !== -1) {
                    code = unicode;
                  }
                  break;
                default:
                  switch (glyphName) {
                    case "f_h":
                    case "f_t":
                    case "T_h":
                      toUnicode[charcode] = glyphName.replaceAll("_", "");
                      continue;
                  }
                  break;
              }
              if (code > 0 && code <= 0x10ffff && Number.isInteger(code)) {
                if (baseEncodingName && code === +charcode) {
                  const baseEncoding = (0, _encodings.getEncoding)(
                    baseEncodingName
                  );
                  if (baseEncoding && (glyphName = baseEncoding[charcode])) {
                    toUnicode[charcode] = String.fromCharCode(
                      glyphsUnicodeMap[glyphName]
                    );
                    continue;
                  }
                }
                toUnicode[charcode] = String.fromCodePoint(code);
              }
            }
            return toUnicode;
          }
          async buildToUnicode(properties) {
            properties.hasIncludedToUnicodeMap =
              properties.toUnicode?.length > 0;
            if (properties.hasIncludedToUnicodeMap) {
              if (!properties.composite && properties.hasEncoding) {
                properties.fallbackToUnicode =
                  this._simpleFontToUnicode(properties);
              }
              return properties.toUnicode;
            }
            if (!properties.composite) {
              return new _to_unicode_map.ToUnicodeMap(
                this._simpleFontToUnicode(properties)
              );
            }
            if (
              properties.composite &&
              ((properties.cMap.builtInCMap &&
                !(properties.cMap instanceof _cmap.IdentityCMap)) ||
                (properties.cidSystemInfo.registry === "Adobe" &&
                  (properties.cidSystemInfo.ordering === "GB1" ||
                    properties.cidSystemInfo.ordering === "CNS1" ||
                    properties.cidSystemInfo.ordering === "Japan1" ||
                    properties.cidSystemInfo.ordering === "Korea1")))
            ) {
              const { registry, ordering } = properties.cidSystemInfo;
              const ucs2CMapName = _primitives.Name.get(
                `${registry}-${ordering}-UCS2`
              );
              const ucs2CMap = await _cmap.CMapFactory.create({
                encoding: ucs2CMapName,
                fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                useCMap: null,
              });
              const toUnicode = [],
                buf = [];
              properties.cMap.forEach(function (charcode, cid) {
                if (cid > 0xffff) {
                  throw new _util.FormatError("Max size of CID is 65,535");
                }
                const ucs2 = ucs2CMap.lookup(cid);
                if (ucs2) {
                  buf.length = 0;
                  for (let i = 0, ii = ucs2.length; i < ii; i += 2) {
                    buf.push(
                      (ucs2.charCodeAt(i) << 8) + ucs2.charCodeAt(i + 1)
                    );
                  }
                  toUnicode[charcode] = String.fromCharCode(...buf);
                }
              });
              return new _to_unicode_map.ToUnicodeMap(toUnicode);
            }
            return new _to_unicode_map.IdentityToUnicodeMap(
              properties.firstChar,
              properties.lastChar
            );
          }
          readToUnicode(cmapObj) {
            if (!cmapObj) {
              return Promise.resolve(null);
            }
            if (cmapObj instanceof _primitives.Name) {
              return _cmap.CMapFactory.create({
                encoding: cmapObj,
                fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                useCMap: null,
              }).then(function (cmap) {
                if (cmap instanceof _cmap.IdentityCMap) {
                  return new _to_unicode_map.IdentityToUnicodeMap(0, 0xffff);
                }
                return new _to_unicode_map.ToUnicodeMap(cmap.getMap());
              });
            } else if (cmapObj instanceof _base_stream.BaseStream) {
              return _cmap.CMapFactory.create({
                encoding: cmapObj,
                fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                useCMap: null,
              }).then(
                function (cmap) {
                  if (cmap instanceof _cmap.IdentityCMap) {
                    return new _to_unicode_map.IdentityToUnicodeMap(0, 0xffff);
                  }
                  const map = new Array(cmap.length);
                  cmap.forEach(function (charCode, token) {
                    if (typeof token === "number") {
                      map[charCode] = String.fromCodePoint(token);
                      return;
                    }
                    const str = [];
                    for (let k = 0; k < token.length; k += 2) {
                      const w1 =
                        (token.charCodeAt(k) << 8) | token.charCodeAt(k + 1);
                      if ((w1 & 0xf800) !== 0xd800) {
                        str.push(w1);
                        continue;
                      }
                      k += 2;
                      const w2 =
                        (token.charCodeAt(k) << 8) | token.charCodeAt(k + 1);
                      str.push(((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000);
                    }
                    map[charCode] = String.fromCodePoint(...str);
                  });
                  return new _to_unicode_map.ToUnicodeMap(map);
                },
                (reason) => {
                  if (reason instanceof _util.AbortException) {
                    return null;
                  }
                  if (this.options.ignoreErrors) {
                    (0, _util.warn)(
                      `readToUnicode - ignoring ToUnicode data: "${reason}".`
                    );
                    return null;
                  }
                  throw reason;
                }
              );
            }
            return Promise.resolve(null);
          }
          readCidToGidMap(glyphsData, toUnicode) {
            const result = [];
            for (let j = 0, jj = glyphsData.length; j < jj; j++) {
              const glyphID = (glyphsData[j++] << 8) | glyphsData[j];
              const code = j >> 1;
              if (glyphID === 0 && !toUnicode.has(code)) {
                continue;
              }
              result[code] = glyphID;
            }
            return result;
          }
          extractWidths(dict, descriptor, properties) {
            const xref = this.xref;
            let glyphsWidths = [];
            let defaultWidth = 0;
            const glyphsVMetrics = [];
            let defaultVMetrics;
            let i, ii, j, jj, start, code, widths;
            if (properties.composite) {
              defaultWidth = dict.has("DW") ? dict.get("DW") : 1000;
              widths = dict.get("W");
              if (widths) {
                for (i = 0, ii = widths.length; i < ii; i++) {
                  start = xref.fetchIfRef(widths[i++]);
                  code = xref.fetchIfRef(widths[i]);
                  if (Array.isArray(code)) {
                    for (j = 0, jj = code.length; j < jj; j++) {
                      glyphsWidths[start++] = xref.fetchIfRef(code[j]);
                    }
                  } else {
                    const width = xref.fetchIfRef(widths[++i]);
                    for (j = start; j <= code; j++) {
                      glyphsWidths[j] = width;
                    }
                  }
                }
              }
              if (properties.vertical) {
                let vmetrics = dict.getArray("DW2") || [880, -1000];
                defaultVMetrics = [
                  vmetrics[1],
                  defaultWidth * 0.5,
                  vmetrics[0],
                ];
                vmetrics = dict.get("W2");
                if (vmetrics) {
                  for (i = 0, ii = vmetrics.length; i < ii; i++) {
                    start = xref.fetchIfRef(vmetrics[i++]);
                    code = xref.fetchIfRef(vmetrics[i]);
                    if (Array.isArray(code)) {
                      for (j = 0, jj = code.length; j < jj; j++) {
                        glyphsVMetrics[start++] = [
                          xref.fetchIfRef(code[j++]),
                          xref.fetchIfRef(code[j++]),
                          xref.fetchIfRef(code[j]),
                        ];
                      }
                    } else {
                      const vmetric = [
                        xref.fetchIfRef(vmetrics[++i]),
                        xref.fetchIfRef(vmetrics[++i]),
                        xref.fetchIfRef(vmetrics[++i]),
                      ];
                      for (j = start; j <= code; j++) {
                        glyphsVMetrics[j] = vmetric;
                      }
                    }
                  }
                }
              }
            } else {
              const firstChar = properties.firstChar;
              widths = dict.get("Widths");
              if (widths) {
                j = firstChar;
                for (i = 0, ii = widths.length; i < ii; i++) {
                  glyphsWidths[j++] = xref.fetchIfRef(widths[i]);
                }
                defaultWidth = parseFloat(descriptor.get("MissingWidth")) || 0;
              } else {
                const baseFontName = dict.get("BaseFont");
                if (baseFontName instanceof _primitives.Name) {
                  const metrics = this.getBaseFontMetrics(baseFontName.name);
                  glyphsWidths = this.buildCharCodeToWidth(
                    metrics.widths,
                    properties
                  );
                  defaultWidth = metrics.defaultWidth;
                }
              }
            }
            let isMonospace = true;
            let firstWidth = defaultWidth;
            for (const glyph in glyphsWidths) {
              const glyphWidth = glyphsWidths[glyph];
              if (!glyphWidth) {
                continue;
              }
              if (!firstWidth) {
                firstWidth = glyphWidth;
                continue;
              }
              if (firstWidth !== glyphWidth) {
                isMonospace = false;
                break;
              }
            }
            if (isMonospace) {
              properties.flags |= _fonts_utils.FontFlags.FixedPitch;
            } else {
              properties.flags &= ~_fonts_utils.FontFlags.FixedPitch;
            }
            properties.defaultWidth = defaultWidth;
            properties.widths = glyphsWidths;
            properties.defaultVMetrics = defaultVMetrics;
            properties.vmetrics = glyphsVMetrics;
          }
          isSerifFont(baseFontName) {
            const fontNameWoStyle = baseFontName.split("-")[0];
            return (
              fontNameWoStyle in (0, _standard_fonts.getSerifFonts)() ||
              /serif/gi.test(fontNameWoStyle)
            );
          }
          getBaseFontMetrics(name) {
            let defaultWidth = 0;
            let widths = Object.create(null);
            let monospace = false;
            const stdFontMap = (0, _standard_fonts.getStdFontMap)();
            let lookupName = stdFontMap[name] || name;
            const Metrics = (0, _metrics.getMetrics)();
            if (!(lookupName in Metrics)) {
              lookupName = this.isSerifFont(name) ? "Times-Roman" : "Helvetica";
            }
            const glyphWidths = Metrics[lookupName];
            if (typeof glyphWidths === "number") {
              defaultWidth = glyphWidths;
              monospace = true;
            } else {
              widths = glyphWidths();
            }
            return {
              defaultWidth,
              monospace,
              widths,
            };
          }
          buildCharCodeToWidth(widthsByGlyphName, properties) {
            const widths = Object.create(null);
            const differences = properties.differences;
            const encoding = properties.defaultEncoding;
            for (let charCode = 0; charCode < 256; charCode++) {
              if (
                charCode in differences &&
                widthsByGlyphName[differences[charCode]]
              ) {
                widths[charCode] = widthsByGlyphName[differences[charCode]];
                continue;
              }
              if (
                charCode in encoding &&
                widthsByGlyphName[encoding[charCode]]
              ) {
                widths[charCode] = widthsByGlyphName[encoding[charCode]];
                continue;
              }
            }
            return widths;
          }
          preEvaluateFont(dict) {
            const baseDict = dict;
            let type = dict.get("Subtype");
            if (!(type instanceof _primitives.Name)) {
              throw new _util.FormatError("invalid font Subtype");
            }
            let composite = false;
            let hash, toUnicode;
            if (type.name === "Type0") {
              const df = dict.get("DescendantFonts");
              if (!df) {
                throw new _util.FormatError(
                  "Descendant fonts are not specified"
                );
              }
              dict = Array.isArray(df) ? this.xref.fetchIfRef(df[0]) : df;
              if (!(dict instanceof _primitives.Dict)) {
                throw new _util.FormatError(
                  "Descendant font is not a dictionary."
                );
              }
              type = dict.get("Subtype");
              if (!(type instanceof _primitives.Name)) {
                throw new _util.FormatError("invalid font Subtype");
              }
              composite = true;
            }
            const firstChar = dict.get("FirstChar") || 0,
              lastChar = dict.get("LastChar") || (composite ? 0xffff : 0xff);
            const descriptor = dict.get("FontDescriptor");
            if (descriptor) {
              hash = new _murmurhash.MurmurHash3_64();
              const encoding = baseDict.getRaw("Encoding");
              if (encoding instanceof _primitives.Name) {
                hash.update(encoding.name);
              } else if (encoding instanceof _primitives.Ref) {
                hash.update(encoding.toString());
              } else if (encoding instanceof _primitives.Dict) {
                for (const entry of encoding.getRawValues()) {
                  if (entry instanceof _primitives.Name) {
                    hash.update(entry.name);
                  } else if (entry instanceof _primitives.Ref) {
                    hash.update(entry.toString());
                  } else if (Array.isArray(entry)) {
                    const diffLength = entry.length,
                      diffBuf = new Array(diffLength);
                    for (let j = 0; j < diffLength; j++) {
                      const diffEntry = entry[j];
                      if (diffEntry instanceof _primitives.Name) {
                        diffBuf[j] = diffEntry.name;
                      } else if (
                        typeof diffEntry === "number" ||
                        diffEntry instanceof _primitives.Ref
                      ) {
                        diffBuf[j] = diffEntry.toString();
                      }
                    }
                    hash.update(diffBuf.join());
                  }
                }
              }
              hash.update(`${firstChar}-${lastChar}`);
              toUnicode = dict.get("ToUnicode") || baseDict.get("ToUnicode");
              if (toUnicode instanceof _base_stream.BaseStream) {
                const stream = toUnicode.str || toUnicode;
                const uint8array = stream.buffer
                  ? new Uint8Array(stream.buffer.buffer, 0, stream.bufferLength)
                  : new Uint8Array(
                      stream.bytes.buffer,
                      stream.start,
                      stream.end - stream.start
                    );
                hash.update(uint8array);
              } else if (toUnicode instanceof _primitives.Name) {
                hash.update(toUnicode.name);
              }
              const widths = dict.get("Widths") || baseDict.get("Widths");
              if (Array.isArray(widths)) {
                const widthsBuf = [];
                for (const entry of widths) {
                  if (
                    typeof entry === "number" ||
                    entry instanceof _primitives.Ref
                  ) {
                    widthsBuf.push(entry.toString());
                  }
                }
                hash.update(widthsBuf.join());
              }
              if (composite) {
                hash.update("compositeFont");
                const compositeWidths = dict.get("W") || baseDict.get("W");
                if (Array.isArray(compositeWidths)) {
                  const widthsBuf = [];
                  for (const entry of compositeWidths) {
                    if (
                      typeof entry === "number" ||
                      entry instanceof _primitives.Ref
                    ) {
                      widthsBuf.push(entry.toString());
                    } else if (Array.isArray(entry)) {
                      const subWidthsBuf = [];
                      for (const element of entry) {
                        if (
                          typeof element === "number" ||
                          element instanceof _primitives.Ref
                        ) {
                          subWidthsBuf.push(element.toString());
                        }
                      }
                      widthsBuf.push(`[${subWidthsBuf.join()}]`);
                    }
                  }
                  hash.update(widthsBuf.join());
                }
                const cidToGidMap =
                  dict.getRaw("CIDToGIDMap") || baseDict.getRaw("CIDToGIDMap");
                if (cidToGidMap instanceof _primitives.Name) {
                  hash.update(cidToGidMap.name);
                } else if (cidToGidMap instanceof _primitives.Ref) {
                  hash.update(cidToGidMap.toString());
                } else if (cidToGidMap instanceof _base_stream.BaseStream) {
                  hash.update(cidToGidMap.peekBytes());
                }
              }
            }
            return {
              descriptor,
              dict,
              baseDict,
              composite,
              type: type.name,
              firstChar,
              lastChar,
              toUnicode,
              hash: hash ? hash.hexdigest() : "",
            };
          }
          async translateFont({
            descriptor,
            dict,
            baseDict,
            composite,
            type,
            firstChar,
            lastChar,
            toUnicode,
            cssFontInfo,
          }) {
            const isType3Font = type === "Type3";
            let properties;
            if (!descriptor) {
              if (isType3Font) {
                descriptor = new _primitives.Dict(null);
                descriptor.set("FontName", _primitives.Name.get(type));
                descriptor.set(
                  "FontBBox",
                  dict.getArray("FontBBox") || [0, 0, 0, 0]
                );
              } else {
                let baseFontName = dict.get("BaseFont");
                if (!(baseFontName instanceof _primitives.Name)) {
                  throw new _util.FormatError("Base font is not specified");
                }
                baseFontName = baseFontName.name.replaceAll(/[,_]/g, "-");
                const metrics = this.getBaseFontMetrics(baseFontName);
                const fontNameWoStyle = baseFontName.split("-")[0];
                const flags =
                  (this.isSerifFont(fontNameWoStyle)
                    ? _fonts_utils.FontFlags.Serif
                    : 0) |
                  (metrics.monospace ? _fonts_utils.FontFlags.FixedPitch : 0) |
                  ((0, _standard_fonts.getSymbolsFonts)()[fontNameWoStyle]
                    ? _fonts_utils.FontFlags.Symbolic
                    : _fonts_utils.FontFlags.Nonsymbolic);
                properties = {
                  type,
                  name: baseFontName,
                  loadedName: baseDict.loadedName,
                  systemFontInfo: null,
                  widths: metrics.widths,
                  defaultWidth: metrics.defaultWidth,
                  isSimulatedFlags: true,
                  flags,
                  firstChar,
                  lastChar,
                  toUnicode,
                  xHeight: 0,
                  capHeight: 0,
                  italicAngle: 0,
                  isType3Font,
                };
                const widths = dict.get("Widths");
                const standardFontName = (0,
                _standard_fonts.getStandardFontName)(baseFontName);
                let file = null;
                if (standardFontName) {
                  file = await this.fetchStandardFontData(standardFontName);
                  properties.isInternalFont = !!file;
                }
                if (!properties.isInternalFont && this.options.useSystemFonts) {
                  properties.systemFontInfo = (0,
                  _font_substitutions.getFontSubstitution)(
                    this.systemFontCache,
                    this.idFactory,
                    this.options.standardFontDataUrl,
                    baseFontName,
                    standardFontName
                  );
                }
                return this.extractDataStructures(dict, dict, properties).then(
                  (newProperties) => {
                    if (widths) {
                      const glyphWidths = [];
                      let j = firstChar;
                      for (const width of widths) {
                        glyphWidths[j++] = this.xref.fetchIfRef(width);
                      }
                      newProperties.widths = glyphWidths;
                    } else {
                      newProperties.widths = this.buildCharCodeToWidth(
                        metrics.widths,
                        newProperties
                      );
                    }
                    return new _fonts.Font(baseFontName, file, newProperties);
                  }
                );
              }
            }
            let fontName = descriptor.get("FontName");
            let baseFont = dict.get("BaseFont");
            if (typeof fontName === "string") {
              fontName = _primitives.Name.get(fontName);
            }
            if (typeof baseFont === "string") {
              baseFont = _primitives.Name.get(baseFont);
            }
            const fontNameStr = fontName?.name;
            const baseFontStr = baseFont?.name;
            if (!isType3Font && fontNameStr !== baseFontStr) {
              (0, _util.info)(
                `The FontDescriptor's FontName is "${fontNameStr}" but ` +
                  `should be the same as the Font's BaseFont "${baseFontStr}".`
              );
              if (
                fontNameStr &&
                baseFontStr &&
                (baseFontStr.startsWith(fontNameStr) ||
                  (!(0, _standard_fonts.isKnownFontName)(fontNameStr) &&
                    (0, _standard_fonts.isKnownFontName)(baseFontStr)))
              ) {
                fontName = null;
              }
            }
            fontName ||= baseFont;
            if (!(fontName instanceof _primitives.Name)) {
              throw new _util.FormatError("invalid font name");
            }
            let fontFile, subtype, length1, length2, length3;
            try {
              fontFile = descriptor.get("FontFile", "FontFile2", "FontFile3");
            } catch (ex) {
              if (!this.options.ignoreErrors) {
                throw ex;
              }
              (0, _util.warn)(
                `translateFont - fetching "${fontName.name}" font file: "${ex}".`
              );
              fontFile = new _stream.NullStream();
            }
            let isInternalFont = false;
            let glyphScaleFactors = null;
            let systemFontInfo = null;
            if (fontFile) {
              if (fontFile.dict) {
                const subtypeEntry = fontFile.dict.get("Subtype");
                if (subtypeEntry instanceof _primitives.Name) {
                  subtype = subtypeEntry.name;
                }
                length1 = fontFile.dict.get("Length1");
                length2 = fontFile.dict.get("Length2");
                length3 = fontFile.dict.get("Length3");
              }
            } else if (cssFontInfo) {
              const standardFontName = (0, _xfa_fonts.getXfaFontName)(
                fontName.name
              );
              if (standardFontName) {
                cssFontInfo.fontFamily = `${cssFontInfo.fontFamily}-PdfJS-XFA`;
                cssFontInfo.metrics = standardFontName.metrics || null;
                glyphScaleFactors = standardFontName.factors || null;
                fontFile = await this.fetchStandardFontData(
                  standardFontName.name
                );
                isInternalFont = !!fontFile;
                baseDict = dict = (0, _xfa_fonts.getXfaFontDict)(fontName.name);
                composite = true;
              }
            } else if (!isType3Font) {
              const standardFontName = (0, _standard_fonts.getStandardFontName)(
                fontName.name
              );
              if (standardFontName) {
                fontFile = await this.fetchStandardFontData(standardFontName);
                isInternalFont = !!fontFile;
              }
              if (!isInternalFont && this.options.useSystemFonts) {
                systemFontInfo = (0, _font_substitutions.getFontSubstitution)(
                  this.systemFontCache,
                  this.idFactory,
                  this.options.standardFontDataUrl,
                  fontName.name,
                  standardFontName
                );
              }
            }
            properties = {
              type,
              name: fontName.name,
              subtype,
              file: fontFile,
              length1,
              length2,
              length3,
              isInternalFont,
              loadedName: baseDict.loadedName,
              composite,
              fixedPitch: false,
              fontMatrix:
                dict.getArray("FontMatrix") || _util.FONT_IDENTITY_MATRIX,
              firstChar,
              lastChar,
              toUnicode,
              bbox:
                descriptor.getArray("FontBBox") || dict.getArray("FontBBox"),
              ascent: descriptor.get("Ascent"),
              descent: descriptor.get("Descent"),
              xHeight: descriptor.get("XHeight") || 0,
              capHeight: descriptor.get("CapHeight") || 0,
              flags: descriptor.get("Flags"),
              italicAngle: descriptor.get("ItalicAngle") || 0,
              isType3Font,
              cssFontInfo,
              scaleFactors: glyphScaleFactors,
              systemFontInfo,
            };
            if (composite) {
              const cidEncoding = baseDict.get("Encoding");
              if (cidEncoding instanceof _primitives.Name) {
                properties.cidEncoding = cidEncoding.name;
              }
              const cMap = await _cmap.CMapFactory.create({
                encoding: cidEncoding,
                fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                useCMap: null,
              });
              properties.cMap = cMap;
              properties.vertical = properties.cMap.vertical;
            }
            return this.extractDataStructures(dict, baseDict, properties).then(
              (newProperties) => {
                this.extractWidths(dict, descriptor, newProperties);
                return new _fonts.Font(fontName.name, fontFile, newProperties);
              }
            );
          }
          static buildFontPaths(font, glyphs, handler, evaluatorOptions) {
            function buildPath(fontChar) {
              const glyphName = `${font.loadedName}_path_${fontChar}`;
              try {
                if (font.renderer.hasBuiltPath(fontChar)) {
                  return;
                }
                handler.send("commonobj", [
                  glyphName,
                  "FontPath",
                  font.renderer.getPathJs(fontChar),
                ]);
              } catch (reason) {
                if (evaluatorOptions.ignoreErrors) {
                  (0, _util.warn)(
                    `buildFontPaths - ignoring ${glyphName} glyph: "${reason}".`
                  );
                  return;
                }
                throw reason;
              }
            }
            for (const glyph of glyphs) {
              buildPath(glyph.fontChar);
              const accent = glyph.accent;
              if (accent?.fontChar) {
                buildPath(accent.fontChar);
              }
            }
          }
          static get fallbackFontDict() {
            const dict = new _primitives.Dict();
            dict.set("BaseFont", _primitives.Name.get("Helvetica"));
            dict.set("Type", _primitives.Name.get("FallbackType"));
            dict.set("Subtype", _primitives.Name.get("FallbackType"));
            dict.set("Encoding", _primitives.Name.get("WinAnsiEncoding"));
            return (0, _util.shadow)(this, "fallbackFontDict", dict);
          }
        }
        exports.PartialEvaluator = PartialEvaluator;
        class TranslatedFont {
          constructor({ loadedName, font, dict, evaluatorOptions }) {
            this.loadedName = loadedName;
            this.font = font;
            this.dict = dict;
            this._evaluatorOptions =
              evaluatorOptions || DefaultPartialEvaluatorOptions;
            this.type3Loaded = null;
            this.type3Dependencies = font.isType3Font ? new Set() : null;
            this.sent = false;
          }
          send(handler) {
            if (this.sent) {
              return;
            }
            this.sent = true;
            handler.send("commonobj", [
              this.loadedName,
              "Font",
              this.font.exportData(this._evaluatorOptions.fontExtraProperties),
            ]);
          }
          fallback(handler) {
            if (!this.font.data) {
              return;
            }
            this.font.disableFontFace = true;
            PartialEvaluator.buildFontPaths(
              this.font,
              this.font.glyphCacheValues,
              handler,
              this._evaluatorOptions
            );
          }
          loadType3Data(evaluator, resources, task) {
            if (this.type3Loaded) {
              return this.type3Loaded;
            }
            if (!this.font.isType3Font) {
              throw new Error("Must be a Type3 font.");
            }
            const type3Evaluator = evaluator.clone({
              ignoreErrors: false,
            });
            type3Evaluator.parsingType3Font = true;
            const type3FontRefs = new _primitives.RefSet(
              evaluator.type3FontRefs
            );
            if (this.dict.objId && !type3FontRefs.has(this.dict.objId)) {
              type3FontRefs.put(this.dict.objId);
            }
            type3Evaluator.type3FontRefs = type3FontRefs;
            const translatedFont = this.font,
              type3Dependencies = this.type3Dependencies;
            let loadCharProcsPromise = Promise.resolve();
            const charProcs = this.dict.get("CharProcs");
            const fontResources = this.dict.get("Resources") || resources;
            const charProcOperatorList = Object.create(null);
            const fontBBox = _util.Util.normalizeRect(
                translatedFont.bbox || [0, 0, 0, 0]
              ),
              width = fontBBox[2] - fontBBox[0],
              height = fontBBox[3] - fontBBox[1];
            const fontBBoxSize = Math.hypot(width, height);
            for (const key of charProcs.getKeys()) {
              loadCharProcsPromise = loadCharProcsPromise.then(() => {
                const glyphStream = charProcs.get(key);
                const operatorList = new _operator_list.OperatorList();
                return type3Evaluator
                  .getOperatorList({
                    stream: glyphStream,
                    task,
                    resources: fontResources,
                    operatorList,
                  })
                  .then(() => {
                    if (
                      operatorList.fnArray[0] ===
                      _util.OPS.setCharWidthAndBounds
                    ) {
                      this._removeType3ColorOperators(
                        operatorList,
                        fontBBoxSize
                      );
                    }
                    charProcOperatorList[key] = operatorList.getIR();
                    for (const dependency of operatorList.dependencies) {
                      type3Dependencies.add(dependency);
                    }
                  })
                  .catch(function (reason) {
                    (0,
                    _util.warn)(`Type3 font resource "${key}" is not available.`);
                    const dummyOperatorList = new _operator_list.OperatorList();
                    charProcOperatorList[key] = dummyOperatorList.getIR();
                  });
              });
            }
            this.type3Loaded = loadCharProcsPromise.then(() => {
              translatedFont.charProcOperatorList = charProcOperatorList;
              if (this._bbox) {
                translatedFont.isCharBBox = true;
                translatedFont.bbox = this._bbox;
              }
            });
            return this.type3Loaded;
          }
          _removeType3ColorOperators(operatorList, fontBBoxSize = NaN) {
            const charBBox = _util.Util.normalizeRect(
                operatorList.argsArray[0].slice(2)
              ),
              width = charBBox[2] - charBBox[0],
              height = charBBox[3] - charBBox[1];
            const charBBoxSize = Math.hypot(width, height);
            if (width === 0 || height === 0) {
              operatorList.fnArray.splice(0, 1);
              operatorList.argsArray.splice(0, 1);
            } else if (
              fontBBoxSize === 0 ||
              Math.round(charBBoxSize / fontBBoxSize) >= 10
            ) {
              if (!this._bbox) {
                this._bbox = [Infinity, Infinity, -Infinity, -Infinity];
              }
              this._bbox[0] = Math.min(this._bbox[0], charBBox[0]);
              this._bbox[1] = Math.min(this._bbox[1], charBBox[1]);
              this._bbox[2] = Math.max(this._bbox[2], charBBox[2]);
              this._bbox[3] = Math.max(this._bbox[3], charBBox[3]);
            }
            let i = 0,
              ii = operatorList.length;
            while (i < ii) {
              switch (operatorList.fnArray[i]) {
                case _util.OPS.setCharWidthAndBounds:
                  break;
                case _util.OPS.setStrokeColorSpace:
                case _util.OPS.setFillColorSpace:
                case _util.OPS.setStrokeColor:
                case _util.OPS.setStrokeColorN:
                case _util.OPS.setFillColor:
                case _util.OPS.setFillColorN:
                case _util.OPS.setStrokeGray:
                case _util.OPS.setFillGray:
                case _util.OPS.setStrokeRGBColor:
                case _util.OPS.setFillRGBColor:
                case _util.OPS.setStrokeCMYKColor:
                case _util.OPS.setFillCMYKColor:
                case _util.OPS.shadingFill:
                case _util.OPS.setRenderingIntent:
                  operatorList.fnArray.splice(i, 1);
                  operatorList.argsArray.splice(i, 1);
                  ii--;
                  continue;
                case _util.OPS.setGState:
                  const [gStateObj] = operatorList.argsArray[i];
                  let j = 0,
                    jj = gStateObj.length;
                  while (j < jj) {
                    const [gStateKey] = gStateObj[j];
                    switch (gStateKey) {
                      case "TR":
                      case "TR2":
                      case "HT":
                      case "BG":
                      case "BG2":
                      case "UCR":
                      case "UCR2":
                        gStateObj.splice(j, 1);
                        jj--;
                        continue;
                    }
                    j++;
                  }
                  break;
              }
              i++;
            }
          }
        }
        class StateManager {
          constructor(initialState = new EvalState()) {
            this.state = initialState;
            this.stateStack = [];
          }
          save() {
            const old = this.state;
            this.stateStack.push(this.state);
            this.state = old.clone();
          }
          restore() {
            const prev = this.stateStack.pop();
            if (prev) {
              this.state = prev;
            }
          }
          transform(args) {
            this.state.ctm = _util.Util.transform(this.state.ctm, args);
          }
        }
        class TextState {
          constructor() {
            this.ctm = new Float32Array(_util.IDENTITY_MATRIX);
            this.fontName = null;
            this.fontSize = 0;
            this.loadedName = null;
            this.font = null;
            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
            this.textMatrix = _util.IDENTITY_MATRIX.slice();
            this.textLineMatrix = _util.IDENTITY_MATRIX.slice();
            this.charSpacing = 0;
            this.wordSpacing = 0;
            this.leading = 0;
            this.textHScale = 1;
            this.textRise = 0;
          }
          setTextMatrix(a, b, c, d, e, f) {
            const m = this.textMatrix;
            m[0] = a;
            m[1] = b;
            m[2] = c;
            m[3] = d;
            m[4] = e;
            m[5] = f;
          }
          setTextLineMatrix(a, b, c, d, e, f) {
            const m = this.textLineMatrix;
            m[0] = a;
            m[1] = b;
            m[2] = c;
            m[3] = d;
            m[4] = e;
            m[5] = f;
          }
          translateTextMatrix(x, y) {
            const m = this.textMatrix;
            m[4] = m[0] * x + m[2] * y + m[4];
            m[5] = m[1] * x + m[3] * y + m[5];
          }
          translateTextLineMatrix(x, y) {
            const m = this.textLineMatrix;
            m[4] = m[0] * x + m[2] * y + m[4];
            m[5] = m[1] * x + m[3] * y + m[5];
          }
          carriageReturn() {
            this.translateTextLineMatrix(0, -this.leading);
            this.textMatrix = this.textLineMatrix.slice();
          }
          clone() {
            const clone = Object.create(this);
            clone.textMatrix = this.textMatrix.slice();
            clone.textLineMatrix = this.textLineMatrix.slice();
            clone.fontMatrix = this.fontMatrix.slice();
            return clone;
          }
        }
        class EvalState {
          constructor() {
            this.ctm = new Float32Array(_util.IDENTITY_MATRIX);
            this.font = null;
            this.textRenderingMode = _util.TextRenderingMode.FILL;
            this.fillColorSpace = _colorspace.ColorSpace.singletons.gray;
            this.strokeColorSpace = _colorspace.ColorSpace.singletons.gray;
          }
          clone() {
            return Object.create(this);
          }
        }
        class EvaluatorPreprocessor {
          static get opMap() {
            return (0, _util.shadow)(this, "opMap", {
              w: {
                id: _util.OPS.setLineWidth,
                numArgs: 1,
                variableArgs: false,
              },
              J: {
                id: _util.OPS.setLineCap,
                numArgs: 1,
                variableArgs: false,
              },
              j: {
                id: _util.OPS.setLineJoin,
                numArgs: 1,
                variableArgs: false,
              },
              M: {
                id: _util.OPS.setMiterLimit,
                numArgs: 1,
                variableArgs: false,
              },
              d: {
                id: _util.OPS.setDash,
                numArgs: 2,
                variableArgs: false,
              },
              ri: {
                id: _util.OPS.setRenderingIntent,
                numArgs: 1,
                variableArgs: false,
              },
              i: {
                id: _util.OPS.setFlatness,
                numArgs: 1,
                variableArgs: false,
              },
              gs: {
                id: _util.OPS.setGState,
                numArgs: 1,
                variableArgs: false,
              },
              q: {
                id: _util.OPS.save,
                numArgs: 0,
                variableArgs: false,
              },
              Q: {
                id: _util.OPS.restore,
                numArgs: 0,
                variableArgs: false,
              },
              cm: {
                id: _util.OPS.transform,
                numArgs: 6,
                variableArgs: false,
              },
              m: {
                id: _util.OPS.moveTo,
                numArgs: 2,
                variableArgs: false,
              },
              l: {
                id: _util.OPS.lineTo,
                numArgs: 2,
                variableArgs: false,
              },
              c: {
                id: _util.OPS.curveTo,
                numArgs: 6,
                variableArgs: false,
              },
              v: {
                id: _util.OPS.curveTo2,
                numArgs: 4,
                variableArgs: false,
              },
              y: {
                id: _util.OPS.curveTo3,
                numArgs: 4,
                variableArgs: false,
              },
              h: {
                id: _util.OPS.closePath,
                numArgs: 0,
                variableArgs: false,
              },
              re: {
                id: _util.OPS.rectangle,
                numArgs: 4,
                variableArgs: false,
              },
              S: {
                id: _util.OPS.stroke,
                numArgs: 0,
                variableArgs: false,
              },
              s: {
                id: _util.OPS.closeStroke,
                numArgs: 0,
                variableArgs: false,
              },
              f: {
                id: _util.OPS.fill,
                numArgs: 0,
                variableArgs: false,
              },
              F: {
                id: _util.OPS.fill,
                numArgs: 0,
                variableArgs: false,
              },
              "f*": {
                id: _util.OPS.eoFill,
                numArgs: 0,
                variableArgs: false,
              },
              B: {
                id: _util.OPS.fillStroke,
                numArgs: 0,
                variableArgs: false,
              },
              "B*": {
                id: _util.OPS.eoFillStroke,
                numArgs: 0,
                variableArgs: false,
              },
              b: {
                id: _util.OPS.closeFillStroke,
                numArgs: 0,
                variableArgs: false,
              },
              "b*": {
                id: _util.OPS.closeEOFillStroke,
                numArgs: 0,
                variableArgs: false,
              },
              n: {
                id: _util.OPS.endPath,
                numArgs: 0,
                variableArgs: false,
              },
              W: {
                id: _util.OPS.clip,
                numArgs: 0,
                variableArgs: false,
              },
              "W*": {
                id: _util.OPS.eoClip,
                numArgs: 0,
                variableArgs: false,
              },
              BT: {
                id: _util.OPS.beginText,
                numArgs: 0,
                variableArgs: false,
              },
              ET: {
                id: _util.OPS.endText,
                numArgs: 0,
                variableArgs: false,
              },
              Tc: {
                id: _util.OPS.setCharSpacing,
                numArgs: 1,
                variableArgs: false,
              },
              Tw: {
                id: _util.OPS.setWordSpacing,
                numArgs: 1,
                variableArgs: false,
              },
              Tz: {
                id: _util.OPS.setHScale,
                numArgs: 1,
                variableArgs: false,
              },
              TL: {
                id: _util.OPS.setLeading,
                numArgs: 1,
                variableArgs: false,
              },
              Tf: {
                id: _util.OPS.setFont,
                numArgs: 2,
                variableArgs: false,
              },
              Tr: {
                id: _util.OPS.setTextRenderingMode,
                numArgs: 1,
                variableArgs: false,
              },
              Ts: {
                id: _util.OPS.setTextRise,
                numArgs: 1,
                variableArgs: false,
              },
              Td: {
                id: _util.OPS.moveText,
                numArgs: 2,
                variableArgs: false,
              },
              TD: {
                id: _util.OPS.setLeadingMoveText,
                numArgs: 2,
                variableArgs: false,
              },
              Tm: {
                id: _util.OPS.setTextMatrix,
                numArgs: 6,
                variableArgs: false,
              },
              "T*": {
                id: _util.OPS.nextLine,
                numArgs: 0,
                variableArgs: false,
              },
              Tj: {
                id: _util.OPS.showText,
                numArgs: 1,
                variableArgs: false,
              },
              TJ: {
                id: _util.OPS.showSpacedText,
                numArgs: 1,
                variableArgs: false,
              },
              "'": {
                id: _util.OPS.nextLineShowText,
                numArgs: 1,
                variableArgs: false,
              },
              '"': {
                id: _util.OPS.nextLineSetSpacingShowText,
                numArgs: 3,
                variableArgs: false,
              },
              d0: {
                id: _util.OPS.setCharWidth,
                numArgs: 2,
                variableArgs: false,
              },
              d1: {
                id: _util.OPS.setCharWidthAndBounds,
                numArgs: 6,
                variableArgs: false,
              },
              CS: {
                id: _util.OPS.setStrokeColorSpace,
                numArgs: 1,
                variableArgs: false,
              },
              cs: {
                id: _util.OPS.setFillColorSpace,
                numArgs: 1,
                variableArgs: false,
              },
              SC: {
                id: _util.OPS.setStrokeColor,
                numArgs: 4,
                variableArgs: true,
              },
              SCN: {
                id: _util.OPS.setStrokeColorN,
                numArgs: 33,
                variableArgs: true,
              },
              sc: {
                id: _util.OPS.setFillColor,
                numArgs: 4,
                variableArgs: true,
              },
              scn: {
                id: _util.OPS.setFillColorN,
                numArgs: 33,
                variableArgs: true,
              },
              G: {
                id: _util.OPS.setStrokeGray,
                numArgs: 1,
                variableArgs: false,
              },
              g: {
                id: _util.OPS.setFillGray,
                numArgs: 1,
                variableArgs: false,
              },
              RG: {
                id: _util.OPS.setStrokeRGBColor,
                numArgs: 3,
                variableArgs: false,
              },
              rg: {
                id: _util.OPS.setFillRGBColor,
                numArgs: 3,
                variableArgs: false,
              },
              K: {
                id: _util.OPS.setStrokeCMYKColor,
                numArgs: 4,
                variableArgs: false,
              },
              k: {
                id: _util.OPS.setFillCMYKColor,
                numArgs: 4,
                variableArgs: false,
              },
              sh: {
                id: _util.OPS.shadingFill,
                numArgs: 1,
                variableArgs: false,
              },
              BI: {
                id: _util.OPS.beginInlineImage,
                numArgs: 0,
                variableArgs: false,
              },
              ID: {
                id: _util.OPS.beginImageData,
                numArgs: 0,
                variableArgs: false,
              },
              EI: {
                id: _util.OPS.endInlineImage,
                numArgs: 1,
                variableArgs: false,
              },
              Do: {
                id: _util.OPS.paintXObject,
                numArgs: 1,
                variableArgs: false,
              },
              MP: {
                id: _util.OPS.markPoint,
                numArgs: 1,
                variableArgs: false,
              },
              DP: {
                id: _util.OPS.markPointProps,
                numArgs: 2,
                variableArgs: false,
              },
              BMC: {
                id: _util.OPS.beginMarkedContent,
                numArgs: 1,
                variableArgs: false,
              },
              BDC: {
                id: _util.OPS.beginMarkedContentProps,
                numArgs: 2,
                variableArgs: false,
              },
              EMC: {
                id: _util.OPS.endMarkedContent,
                numArgs: 0,
                variableArgs: false,
              },
              BX: {
                id: _util.OPS.beginCompat,
                numArgs: 0,
                variableArgs: false,
              },
              EX: {
                id: _util.OPS.endCompat,
                numArgs: 0,
                variableArgs: false,
              },
              BM: null,
              BD: null,
              true: null,
              fa: null,
              fal: null,
              fals: null,
              false: null,
              nu: null,
              nul: null,
              null: null,
            });
          }
          static MAX_INVALID_PATH_OPS = 10;
          constructor(stream, xref, stateManager = new StateManager()) {
            this.parser = new _parser.Parser({
              lexer: new _parser.Lexer(stream, EvaluatorPreprocessor.opMap),
              xref,
            });
            this.stateManager = stateManager;
            this.nonProcessedArgs = [];
            this._isPathOp = false;
            this._numInvalidPathOPS = 0;
          }
          get savedStatesDepth() {
            return this.stateManager.stateStack.length;
          }
          read(operation) {
            let args = operation.args;
            while (true) {
              const obj = this.parser.getObj();
              if (obj instanceof _primitives.Cmd) {
                const cmd = obj.cmd;
                const opSpec = EvaluatorPreprocessor.opMap[cmd];
                if (!opSpec) {
                  (0, _util.warn)(`Unknown command "${cmd}".`);
                  continue;
                }
                const fn = opSpec.id;
                const numArgs = opSpec.numArgs;
                let argsLength = args !== null ? args.length : 0;
                if (!this._isPathOp) {
                  this._numInvalidPathOPS = 0;
                }
                this._isPathOp =
                  fn >= _util.OPS.moveTo && fn <= _util.OPS.endPath;
                if (!opSpec.variableArgs) {
                  if (argsLength !== numArgs) {
                    const nonProcessedArgs = this.nonProcessedArgs;
                    while (argsLength > numArgs) {
                      nonProcessedArgs.push(args.shift());
                      argsLength--;
                    }
                    while (
                      argsLength < numArgs &&
                      nonProcessedArgs.length !== 0
                    ) {
                      if (args === null) {
                        args = [];
                      }
                      args.unshift(nonProcessedArgs.pop());
                      argsLength++;
                    }
                  }
                  if (argsLength < numArgs) {
                    const partialMsg =
                      `command ${cmd}: expected ${numArgs} args, ` +
                      `but received ${argsLength} args.`;
                    if (
                      this._isPathOp &&
                      ++this._numInvalidPathOPS >
                        EvaluatorPreprocessor.MAX_INVALID_PATH_OPS
                    ) {
                      throw new _util.FormatError(`Invalid ${partialMsg}`);
                    }
                    (0, _util.warn)(`Skipping ${partialMsg}`);
                    if (args !== null) {
                      args.length = 0;
                    }
                    continue;
                  }
                } else if (argsLength > numArgs) {
                  (0, _util.info)(
                    `Command ${cmd}: expected [0, ${numArgs}] args, ` +
                      `but received ${argsLength} args.`
                  );
                }
                this.preprocessCommand(fn, args);
                operation.fn = fn;
                operation.args = args;
                return true;
              }
              if (obj === _primitives.EOF) {
                return false;
              }
              if (obj !== null) {
                if (args === null) {
                  args = [];
                }
                args.push(obj);
                if (args.length > 33) {
                  throw new _util.FormatError("Too many arguments");
                }
              }
            }
          }
          preprocessCommand(fn, args) {
            switch (fn | 0) {
              case _util.OPS.save:
                this.stateManager.save();
                break;
              case _util.OPS.restore:
                this.stateManager.restore();
                break;
              case _util.OPS.transform:
                this.stateManager.transform(args);
                break;
            }
          }
        }
        exports.EvaluatorPreprocessor = EvaluatorPreprocessor;

        /***/
      },
      /* 14 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.IdentityCMap = exports.CMapFactory = exports.CMap = void 0;
        var _util = __w_pdfjs_require__(2);
        var _primitives = __w_pdfjs_require__(4);
        var _base_stream = __w_pdfjs_require__(5);
        var _binary_cmap = __w_pdfjs_require__(15);
        var _parser = __w_pdfjs_require__(16);
        var _core_utils = __w_pdfjs_require__(3);
        var _stream = __w_pdfjs_require__(8);
        const BUILT_IN_CMAPS = [
          "Adobe-GB1-UCS2",
          "Adobe-CNS1-UCS2",
          "Adobe-Japan1-UCS2",
          "Adobe-Korea1-UCS2",
          "78-EUC-H",
          "78-EUC-V",
          "78-H",
          "78-RKSJ-H",
          "78-RKSJ-V",
          "78-V",
          "78ms-RKSJ-H",
          "78ms-RKSJ-V",
          "83pv-RKSJ-H",
          "90ms-RKSJ-H",
          "90ms-RKSJ-V",
          "90msp-RKSJ-H",
          "90msp-RKSJ-V",
          "90pv-RKSJ-H",
          "90pv-RKSJ-V",
          "Add-H",
          "Add-RKSJ-H",
          "Add-RKSJ-V",
          "Add-V",
          "Adobe-CNS1-0",
          "Adobe-CNS1-1",
          "Adobe-CNS1-2",
          "Adobe-CNS1-3",
          "Adobe-CNS1-4",
          "Adobe-CNS1-5",
          "Adobe-CNS1-6",
          "Adobe-GB1-0",
          "Adobe-GB1-1",
          "Adobe-GB1-2",
          "Adobe-GB1-3",
          "Adobe-GB1-4",
          "Adobe-GB1-5",
          "Adobe-Japan1-0",
          "Adobe-Japan1-1",
          "Adobe-Japan1-2",
          "Adobe-Japan1-3",
          "Adobe-Japan1-4",
          "Adobe-Japan1-5",
          "Adobe-Japan1-6",
          "Adobe-Korea1-0",
          "Adobe-Korea1-1",
          "Adobe-Korea1-2",
          "B5-H",
          "B5-V",
          "B5pc-H",
          "B5pc-V",
          "CNS-EUC-H",
          "CNS-EUC-V",
          "CNS1-H",
          "CNS1-V",
          "CNS2-H",
          "CNS2-V",
          "ETHK-B5-H",
          "ETHK-B5-V",
          "ETen-B5-H",
          "ETen-B5-V",
          "ETenms-B5-H",
          "ETenms-B5-V",
          "EUC-H",
          "EUC-V",
          "Ext-H",
          "Ext-RKSJ-H",
          "Ext-RKSJ-V",
          "Ext-V",
          "GB-EUC-H",
          "GB-EUC-V",
          "GB-H",
          "GB-V",
          "GBK-EUC-H",
          "GBK-EUC-V",
          "GBK2K-H",
          "GBK2K-V",
          "GBKp-EUC-H",
          "GBKp-EUC-V",
          "GBT-EUC-H",
          "GBT-EUC-V",
          "GBT-H",
          "GBT-V",
          "GBTpc-EUC-H",
          "GBTpc-EUC-V",
          "GBpc-EUC-H",
          "GBpc-EUC-V",
          "H",
          "HKdla-B5-H",
          "HKdla-B5-V",
          "HKdlb-B5-H",
          "HKdlb-B5-V",
          "HKgccs-B5-H",
          "HKgccs-B5-V",
          "HKm314-B5-H",
          "HKm314-B5-V",
          "HKm471-B5-H",
          "HKm471-B5-V",
          "HKscs-B5-H",
          "HKscs-B5-V",
          "Hankaku",
          "Hiragana",
          "KSC-EUC-H",
          "KSC-EUC-V",
          "KSC-H",
          "KSC-Johab-H",
          "KSC-Johab-V",
          "KSC-V",
          "KSCms-UHC-H",
          "KSCms-UHC-HW-H",
          "KSCms-UHC-HW-V",
          "KSCms-UHC-V",
          "KSCpc-EUC-H",
          "KSCpc-EUC-V",
          "Katakana",
          "NWP-H",
          "NWP-V",
          "RKSJ-H",
          "RKSJ-V",
          "Roman",
          "UniCNS-UCS2-H",
          "UniCNS-UCS2-V",
          "UniCNS-UTF16-H",
          "UniCNS-UTF16-V",
          "UniCNS-UTF32-H",
          "UniCNS-UTF32-V",
          "UniCNS-UTF8-H",
          "UniCNS-UTF8-V",
          "UniGB-UCS2-H",
          "UniGB-UCS2-V",
          "UniGB-UTF16-H",
          "UniGB-UTF16-V",
          "UniGB-UTF32-H",
          "UniGB-UTF32-V",
          "UniGB-UTF8-H",
          "UniGB-UTF8-V",
          "UniJIS-UCS2-H",
          "UniJIS-UCS2-HW-H",
          "UniJIS-UCS2-HW-V",
          "UniJIS-UCS2-V",
          "UniJIS-UTF16-H",
          "UniJIS-UTF16-V",
          "UniJIS-UTF32-H",
          "UniJIS-UTF32-V",
          "UniJIS-UTF8-H",
          "UniJIS-UTF8-V",
          "UniJIS2004-UTF16-H",
          "UniJIS2004-UTF16-V",
          "UniJIS2004-UTF32-H",
          "UniJIS2004-UTF32-V",
          "UniJIS2004-UTF8-H",
          "UniJIS2004-UTF8-V",
          "UniJISPro-UCS2-HW-V",
          "UniJISPro-UCS2-V",
          "UniJISPro-UTF8-V",
          "UniJISX0213-UTF32-H",
          "UniJISX0213-UTF32-V",
          "UniJISX02132004-UTF32-H",
          "UniJISX02132004-UTF32-V",
          "UniKS-UCS2-H",
          "UniKS-UCS2-V",
          "UniKS-UTF16-H",
          "UniKS-UTF16-V",
          "UniKS-UTF32-H",
          "UniKS-UTF32-V",
          "UniKS-UTF8-H",
          "UniKS-UTF8-V",
          "V",
          "WP-Symbol",
        ];
        const MAX_MAP_RANGE = 2 ** 24 - 1;
        class CMap {
          constructor(builtInCMap = false) {
            this.codespaceRanges = [[], [], [], []];
            this.numCodespaceRanges = 0;
            this._map = [];
            this.name = "";
            this.vertical = false;
            this.useCMap = null;
            this.builtInCMap = builtInCMap;
          }
          addCodespaceRange(n, low, high) {
            this.codespaceRanges[n - 1].push(low, high);
            this.numCodespaceRanges++;
          }
          mapCidRange(low, high, dstLow) {
            if (high - low > MAX_MAP_RANGE) {
              throw new Error(
                "mapCidRange - ignoring data above MAX_MAP_RANGE."
              );
            }
            while (low <= high) {
              this._map[low++] = dstLow++;
            }
          }
          mapBfRange(low, high, dstLow) {
            if (high - low > MAX_MAP_RANGE) {
              throw new Error(
                "mapBfRange - ignoring data above MAX_MAP_RANGE."
              );
            }
            const lastByte = dstLow.length - 1;
            while (low <= high) {
              this._map[low++] = dstLow;
              const nextCharCode = dstLow.charCodeAt(lastByte) + 1;
              if (nextCharCode > 0xff) {
                dstLow =
                  dstLow.substring(0, lastByte - 1) +
                  String.fromCharCode(dstLow.charCodeAt(lastByte - 1) + 1) +
                  "\x00";
                continue;
              }
              dstLow =
                dstLow.substring(0, lastByte) +
                String.fromCharCode(nextCharCode);
            }
          }
          mapBfRangeToArray(low, high, array) {
            if (high - low > MAX_MAP_RANGE) {
              throw new Error(
                "mapBfRangeToArray - ignoring data above MAX_MAP_RANGE."
              );
            }
            const ii = array.length;
            let i = 0;
            while (low <= high && i < ii) {
              this._map[low] = array[i++];
              ++low;
            }
          }
          mapOne(src, dst) {
            this._map[src] = dst;
          }
          lookup(code) {
            return this._map[code];
          }
          contains(code) {
            return this._map[code] !== undefined;
          }
          forEach(callback) {
            const map = this._map;
            const length = map.length;
            if (length <= 0x10000) {
              for (let i = 0; i < length; i++) {
                if (map[i] !== undefined) {
                  callback(i, map[i]);
                }
              }
            } else {
              for (const i in map) {
                callback(i, map[i]);
              }
            }
          }
          charCodeOf(value) {
            const map = this._map;
            if (map.length <= 0x10000) {
              return map.indexOf(value);
            }
            for (const charCode in map) {
              if (map[charCode] === value) {
                return charCode | 0;
              }
            }
            return -1;
          }
          getMap() {
            return this._map;
          }
          readCharCode(str, offset, out) {
            let c = 0;
            const codespaceRanges = this.codespaceRanges;
            for (let n = 0, nn = codespaceRanges.length; n < nn; n++) {
              c = ((c << 8) | str.charCodeAt(offset + n)) >>> 0;
              const codespaceRange = codespaceRanges[n];
              for (let k = 0, kk = codespaceRange.length; k < kk; ) {
                const low = codespaceRange[k++];
                const high = codespaceRange[k++];
                if (c >= low && c <= high) {
                  out.charcode = c;
                  out.length = n + 1;
                  return;
                }
              }
            }
            out.charcode = 0;
            out.length = 1;
          }
          getCharCodeLength(charCode) {
            const codespaceRanges = this.codespaceRanges;
            for (let n = 0, nn = codespaceRanges.length; n < nn; n++) {
              const codespaceRange = codespaceRanges[n];
              for (let k = 0, kk = codespaceRange.length; k < kk; ) {
                const low = codespaceRange[k++];
                const high = codespaceRange[k++];
                if (charCode >= low && charCode <= high) {
                  return n + 1;
                }
              }
            }
            return 1;
          }
          get length() {
            return this._map.length;
          }
          get isIdentityCMap() {
            if (!(this.name === "Identity-H" || this.name === "Identity-V")) {
              return false;
            }
            if (this._map.length !== 0x10000) {
              return false;
            }
            for (let i = 0; i < 0x10000; i++) {
              if (this._map[i] !== i) {
                return false;
              }
            }
            return true;
          }
        }
        exports.CMap = CMap;
        class IdentityCMap extends CMap {
          constructor(vertical, n) {
            super();
            this.vertical = vertical;
            this.addCodespaceRange(n, 0, 0xffff);
          }
          mapCidRange(low, high, dstLow) {
            (0, _util.unreachable)("should not call mapCidRange");
          }
          mapBfRange(low, high, dstLow) {
            (0, _util.unreachable)("should not call mapBfRange");
          }
          mapBfRangeToArray(low, high, array) {
            (0, _util.unreachable)("should not call mapBfRangeToArray");
          }
          mapOne(src, dst) {
            (0, _util.unreachable)("should not call mapCidOne");
          }
          lookup(code) {
            return Number.isInteger(code) && code <= 0xffff ? code : undefined;
          }
          contains(code) {
            return Number.isInteger(code) && code <= 0xffff;
          }
          forEach(callback) {
            for (let i = 0; i <= 0xffff; i++) {
              callback(i, i);
            }
          }
          charCodeOf(value) {
            return Number.isInteger(value) && value <= 0xffff ? value : -1;
          }
          getMap() {
            const map = new Array(0x10000);
            for (let i = 0; i <= 0xffff; i++) {
              map[i] = i;
            }
            return map;
          }
          get length() {
            return 0x10000;
          }
          get isIdentityCMap() {
            (0, _util.unreachable)("should not access .isIdentityCMap");
          }
        }
        exports.IdentityCMap = IdentityCMap;
        function strToInt(str) {
          let a = 0;
          for (let i = 0; i < str.length; i++) {
            a = (a << 8) | str.charCodeAt(i);
          }
          return a >>> 0;
        }
        function expectString(obj) {
          if (typeof obj !== "string") {
            throw new _util.FormatError("Malformed CMap: expected string.");
          }
        }
        function expectInt(obj) {
          if (!Number.isInteger(obj)) {
            throw new _util.FormatError("Malformed CMap: expected int.");
          }
        }
        function parseBfChar(cMap, lexer) {
          while (true) {
            let obj = lexer.getObj();
            if (obj === _primitives.EOF) {
              break;
            }
            if ((0, _primitives.isCmd)(obj, "endbfchar")) {
              return;
            }
            expectString(obj);
            const src = strToInt(obj);
            obj = lexer.getObj();
            expectString(obj);
            const dst = obj;
            cMap.mapOne(src, dst);
          }
        }
        function parseBfRange(cMap, lexer) {
          while (true) {
            let obj = lexer.getObj();
            if (obj === _primitives.EOF) {
              break;
            }
            if ((0, _primitives.isCmd)(obj, "endbfrange")) {
              return;
            }
            expectString(obj);
            const low = strToInt(obj);
            obj = lexer.getObj();
            expectString(obj);
            const high = strToInt(obj);
            obj = lexer.getObj();
            if (Number.isInteger(obj) || typeof obj === "string") {
              const dstLow = Number.isInteger(obj)
                ? String.fromCharCode(obj)
                : obj;
              cMap.mapBfRange(low, high, dstLow);
            } else if ((0, _primitives.isCmd)(obj, "[")) {
              obj = lexer.getObj();
              const array = [];
              while (
                !(0, _primitives.isCmd)(obj, "]") &&
                obj !== _primitives.EOF
              ) {
                array.push(obj);
                obj = lexer.getObj();
              }
              cMap.mapBfRangeToArray(low, high, array);
            } else {
              break;
            }
          }
          throw new _util.FormatError("Invalid bf range.");
        }
        function parseCidChar(cMap, lexer) {
          while (true) {
            let obj = lexer.getObj();
            if (obj === _primitives.EOF) {
              break;
            }
            if ((0, _primitives.isCmd)(obj, "endcidchar")) {
              return;
            }
            expectString(obj);
            const src = strToInt(obj);
            obj = lexer.getObj();
            expectInt(obj);
            const dst = obj;
            cMap.mapOne(src, dst);
          }
        }
        function parseCidRange(cMap, lexer) {
          while (true) {
            let obj = lexer.getObj();
            if (obj === _primitives.EOF) {
              break;
            }
            if ((0, _primitives.isCmd)(obj, "endcidrange")) {
              return;
            }
            expectString(obj);
            const low = strToInt(obj);
            obj = lexer.getObj();
            expectString(obj);
            const high = strToInt(obj);
            obj = lexer.getObj();
            expectInt(obj);
            const dstLow = obj;
            cMap.mapCidRange(low, high, dstLow);
          }
        }
        function parseCodespaceRange(cMap, lexer) {
          while (true) {
            let obj = lexer.getObj();
            if (obj === _primitives.EOF) {
              break;
            }
            if ((0, _primitives.isCmd)(obj, "endcodespacerange")) {
              return;
            }
            if (typeof obj !== "string") {
              break;
            }
            const low = strToInt(obj);
            obj = lexer.getObj();
            if (typeof obj !== "string") {
              break;
            }
            const high = strToInt(obj);
            cMap.addCodespaceRange(obj.length, low, high);
          }
          throw new _util.FormatError("Invalid codespace range.");
        }
        function parseWMode(cMap, lexer) {
          const obj = lexer.getObj();
          if (Number.isInteger(obj)) {
            cMap.vertical = !!obj;
          }
        }
        function parseCMapName(cMap, lexer) {
          const obj = lexer.getObj();
          if (obj instanceof _primitives.Name) {
            cMap.name = obj.name;
          }
        }
        async function parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap) {
          let previous, embeddedUseCMap;
          objLoop: while (true) {
            try {
              const obj = lexer.getObj();
              if (obj === _primitives.EOF) {
                break;
              } else if (obj instanceof _primitives.Name) {
                if (obj.name === "WMode") {
                  parseWMode(cMap, lexer);
                } else if (obj.name === "CMapName") {
                  parseCMapName(cMap, lexer);
                }
                previous = obj;
              } else if (obj instanceof _primitives.Cmd) {
                switch (obj.cmd) {
                  case "endcmap":
                    break objLoop;
                  case "usecmap":
                    if (previous instanceof _primitives.Name) {
                      embeddedUseCMap = previous.name;
                    }
                    break;
                  case "begincodespacerange":
                    parseCodespaceRange(cMap, lexer);
                    break;
                  case "beginbfchar":
                    parseBfChar(cMap, lexer);
                    break;
                  case "begincidchar":
                    parseCidChar(cMap, lexer);
                    break;
                  case "beginbfrange":
                    parseBfRange(cMap, lexer);
                    break;
                  case "begincidrange":
                    parseCidRange(cMap, lexer);
                    break;
                }
              }
            } catch (ex) {
              if (ex instanceof _core_utils.MissingDataException) {
                throw ex;
              }
              (0, _util.warn)("Invalid cMap data: " + ex);
              continue;
            }
          }
          if (!useCMap && embeddedUseCMap) {
            useCMap = embeddedUseCMap;
          }
          if (useCMap) {
            return extendCMap(cMap, fetchBuiltInCMap, useCMap);
          }
          return cMap;
        }
        async function extendCMap(cMap, fetchBuiltInCMap, useCMap) {
          cMap.useCMap = await createBuiltInCMap(useCMap, fetchBuiltInCMap);
          if (cMap.numCodespaceRanges === 0) {
            const useCodespaceRanges = cMap.useCMap.codespaceRanges;
            for (let i = 0; i < useCodespaceRanges.length; i++) {
              cMap.codespaceRanges[i] = useCodespaceRanges[i].slice();
            }
            cMap.numCodespaceRanges = cMap.useCMap.numCodespaceRanges;
          }
          cMap.useCMap.forEach(function (key, value) {
            if (!cMap.contains(key)) {
              cMap.mapOne(key, cMap.useCMap.lookup(key));
            }
          });
          return cMap;
        }
        async function createBuiltInCMap(name, fetchBuiltInCMap) {
          if (name === "Identity-H") {
            return new IdentityCMap(false, 2);
          } else if (name === "Identity-V") {
            return new IdentityCMap(true, 2);
          }
          if (!BUILT_IN_CMAPS.includes(name)) {
            throw new Error("Unknown CMap name: " + name);
          }
          if (!fetchBuiltInCMap) {
            throw new Error("Built-in CMap parameters are not provided.");
          }
          const { cMapData, compressionType } = await fetchBuiltInCMap(name);
          const cMap = new CMap(true);
          if (compressionType === _util.CMapCompressionType.BINARY) {
            return new _binary_cmap.BinaryCMapReader().process(
              cMapData,
              cMap,
              (useCMap) => {
                return extendCMap(cMap, fetchBuiltInCMap, useCMap);
              }
            );
          }
          if (compressionType === _util.CMapCompressionType.NONE) {
            const lexer = new _parser.Lexer(new _stream.Stream(cMapData));
            return parseCMap(cMap, lexer, fetchBuiltInCMap, null);
          }
          throw new Error(
            `Invalid CMap "compressionType" value: ${compressionType}`
          );
        }
        class CMapFactory {
          static async create({ encoding, fetchBuiltInCMap, useCMap }) {
            if (encoding instanceof _primitives.Name) {
              return createBuiltInCMap(encoding.name, fetchBuiltInCMap);
            } else if (encoding instanceof _base_stream.BaseStream) {
              const parsedCMap = await parseCMap(
                new CMap(),
                new _parser.Lexer(encoding),
                fetchBuiltInCMap,
                useCMap
              );
              if (parsedCMap.isIdentityCMap) {
                return createBuiltInCMap(parsedCMap.name, fetchBuiltInCMap);
              }
              return parsedCMap;
            }
            throw new Error("Encoding required.");
          }
        }
        exports.CMapFactory = CMapFactory;

        /***/
      },
      /* 15 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.BinaryCMapReader = void 0;
        var _util = __w_pdfjs_require__(2);
        function hexToInt(a, size) {
          let n = 0;
          for (let i = 0; i <= size; i++) {
            n = (n << 8) | a[i];
          }
          return n >>> 0;
        }
        function hexToStr(a, size) {
          if (size === 1) {
            return String.fromCharCode(a[0], a[1]);
          }
          if (size === 3) {
            return String.fromCharCode(a[0], a[1], a[2], a[3]);
          }
          return String.fromCharCode(...a.subarray(0, size + 1));
        }
        function addHex(a, b, size) {
          let c = 0;
          for (let i = size; i >= 0; i--) {
            c += a[i] + b[i];
            a[i] = c & 255;
            c >>= 8;
          }
        }
        function incHex(a, size) {
          let c = 1;
          for (let i = size; i >= 0 && c > 0; i--) {
            c += a[i];
            a[i] = c & 255;
            c >>= 8;
          }
        }
        const MAX_NUM_SIZE = 16;
        const MAX_ENCODED_NUM_SIZE = 19;
        class BinaryCMapStream {
          constructor(data) {
            this.buffer = data;
            this.pos = 0;
            this.end = data.length;
            this.tmpBuf = new Uint8Array(MAX_ENCODED_NUM_SIZE);
          }
          readByte() {
            if (this.pos >= this.end) {
              return -1;
            }
            return this.buffer[this.pos++];
          }
          readNumber() {
            let n = 0;
            let last;
            do {
              const b = this.readByte();
              if (b < 0) {
                throw new _util.FormatError("unexpected EOF in bcmap");
              }
              last = !(b & 0x80);
              n = (n << 7) | (b & 0x7f);
            } while (!last);
            return n;
          }
          readSigned() {
            const n = this.readNumber();
            return n & 1 ? ~(n >>> 1) : n >>> 1;
          }
          readHex(num, size) {
            num.set(this.buffer.subarray(this.pos, this.pos + size + 1));
            this.pos += size + 1;
          }
          readHexNumber(num, size) {
            let last;
            const stack = this.tmpBuf;
            let sp = 0;
            do {
              const b = this.readByte();
              if (b < 0) {
                throw new _util.FormatError("unexpected EOF in bcmap");
              }
              last = !(b & 0x80);
              stack[sp++] = b & 0x7f;
            } while (!last);
            let i = size,
              buffer = 0,
              bufferSize = 0;
            while (i >= 0) {
              while (bufferSize < 8 && stack.length > 0) {
                buffer |= stack[--sp] << bufferSize;
                bufferSize += 7;
              }
              num[i] = buffer & 255;
              i--;
              buffer >>= 8;
              bufferSize -= 8;
            }
          }
          readHexSigned(num, size) {
            this.readHexNumber(num, size);
            const sign = num[size] & 1 ? 255 : 0;
            let c = 0;
            for (let i = 0; i <= size; i++) {
              c = ((c & 1) << 8) | num[i];
              num[i] = (c >> 1) ^ sign;
            }
          }
          readString() {
            const len = this.readNumber(),
              buf = new Array(len);
            for (let i = 0; i < len; i++) {
              buf[i] = this.readNumber();
            }
            return String.fromCharCode(...buf);
          }
        }
        class BinaryCMapReader {
          async process(data, cMap, extend) {
            const stream = new BinaryCMapStream(data);
            const header = stream.readByte();
            cMap.vertical = !!(header & 1);
            let useCMap = null;
            const start = new Uint8Array(MAX_NUM_SIZE);
            const end = new Uint8Array(MAX_NUM_SIZE);
            const char = new Uint8Array(MAX_NUM_SIZE);
            const charCode = new Uint8Array(MAX_NUM_SIZE);
            const tmp = new Uint8Array(MAX_NUM_SIZE);
            let code;
            let b;
            while ((b = stream.readByte()) >= 0) {
              const type = b >> 5;
              if (type === 7) {
                switch (b & 0x1f) {
                  case 0:
                    stream.readString();
                    break;
                  case 1:
                    useCMap = stream.readString();
                    break;
                }
                continue;
              }
              const sequence = !!(b & 0x10);
              const dataSize = b & 15;
              if (dataSize + 1 > MAX_NUM_SIZE) {
                throw new Error("BinaryCMapReader.process: Invalid dataSize.");
              }
              const ucs2DataSize = 1;
              const subitemsCount = stream.readNumber();
              switch (type) {
                case 0:
                  stream.readHex(start, dataSize);
                  stream.readHexNumber(end, dataSize);
                  addHex(end, start, dataSize);
                  cMap.addCodespaceRange(
                    dataSize + 1,
                    hexToInt(start, dataSize),
                    hexToInt(end, dataSize)
                  );
                  for (let i = 1; i < subitemsCount; i++) {
                    incHex(end, dataSize);
                    stream.readHexNumber(start, dataSize);
                    addHex(start, end, dataSize);
                    stream.readHexNumber(end, dataSize);
                    addHex(end, start, dataSize);
                    cMap.addCodespaceRange(
                      dataSize + 1,
                      hexToInt(start, dataSize),
                      hexToInt(end, dataSize)
                    );
                  }
                  break;
                case 1:
                  stream.readHex(start, dataSize);
                  stream.readHexNumber(end, dataSize);
                  addHex(end, start, dataSize);
                  stream.readNumber();
                  for (let i = 1; i < subitemsCount; i++) {
                    incHex(end, dataSize);
                    stream.readHexNumber(start, dataSize);
                    addHex(start, end, dataSize);
                    stream.readHexNumber(end, dataSize);
                    addHex(end, start, dataSize);
                    stream.readNumber();
                  }
                  break;
                case 2:
                  stream.readHex(char, dataSize);
                  code = stream.readNumber();
                  cMap.mapOne(hexToInt(char, dataSize), code);
                  for (let i = 1; i < subitemsCount; i++) {
                    incHex(char, dataSize);
                    if (!sequence) {
                      stream.readHexNumber(tmp, dataSize);
                      addHex(char, tmp, dataSize);
                    }
                    code = stream.readSigned() + (code + 1);
                    cMap.mapOne(hexToInt(char, dataSize), code);
                  }
                  break;
                case 3:
                  stream.readHex(start, dataSize);
                  stream.readHexNumber(end, dataSize);
                  addHex(end, start, dataSize);
                  code = stream.readNumber();
                  cMap.mapCidRange(
                    hexToInt(start, dataSize),
                    hexToInt(end, dataSize),
                    code
                  );
                  for (let i = 1; i < subitemsCount; i++) {
                    incHex(end, dataSize);
                    if (!sequence) {
                      stream.readHexNumber(start, dataSize);
                      addHex(start, end, dataSize);
                    } else {
                      start.set(end);
                    }
                    stream.readHexNumber(end, dataSize);
                    addHex(end, start, dataSize);
                    code = stream.readNumber();
                    cMap.mapCidRange(
                      hexToInt(start, dataSize),
                      hexToInt(end, dataSize),
                      code
                    );
                  }
                  break;
                case 4:
                  stream.readHex(char, ucs2DataSize);
                  stream.readHex(charCode, dataSize);
                  cMap.mapOne(
                    hexToInt(char, ucs2DataSize),
                    hexToStr(charCode, dataSize)
                  );
                  for (let i = 1; i < subitemsCount; i++) {
                    incHex(char, ucs2DataSize);
                    if (!sequence) {
                      stream.readHexNumber(tmp, ucs2DataSize);
                      addHex(char, tmp, ucs2DataSize);
                    }
                    incHex(charCode, dataSize);
                    stream.readHexSigned(tmp, dataSize);
                    addHex(charCode, tmp, dataSize);
                    cMap.mapOne(
                      hexToInt(char, ucs2DataSize),
                      hexToStr(charCode, dataSize)
                    );
                  }
                  break;
                case 5:
                  stream.readHex(start, ucs2DataSize);
                  stream.readHexNumber(end, ucs2DataSize);
                  addHex(end, start, ucs2DataSize);
                  stream.readHex(charCode, dataSize);
                  cMap.mapBfRange(
                    hexToInt(start, ucs2DataSize),
                    hexToInt(end, ucs2DataSize),
                    hexToStr(charCode, dataSize)
                  );
                  for (let i = 1; i < subitemsCount; i++) {
                    incHex(end, ucs2DataSize);
                    if (!sequence) {
                      stream.readHexNumber(start, ucs2DataSize);
                      addHex(start, end, ucs2DataSize);
                    } else {
                      start.set(end);
                    }
                    stream.readHexNumber(end, ucs2DataSize);
                    addHex(end, start, ucs2DataSize);
                    stream.readHex(charCode, dataSize);
                    cMap.mapBfRange(
                      hexToInt(start, ucs2DataSize),
                      hexToInt(end, ucs2DataSize),
                      hexToStr(charCode, dataSize)
                    );
                  }
                  break;
                default:
                  throw new Error(
                    `BinaryCMapReader.process - unknown type: ${type}`
                  );
              }
            }
            if (useCMap) {
              return extend(useCMap);
            }
            return cMap;
          }
        }
        exports.BinaryCMapReader = BinaryCMapReader;

        /***/
      },
      /* 16 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.Parser = exports.Linearization = exports.Lexer = void 0;
        var _util = __w_pdfjs_require__(2);
        var _primitives = __w_pdfjs_require__(4);
        var _core_utils = __w_pdfjs_require__(3);
        var _stream = __w_pdfjs_require__(8);
        var _ascii_85_stream = __w_pdfjs_require__(17);
        var _ascii_hex_stream = __w_pdfjs_require__(19);
        var _ccitt_stream = __w_pdfjs_require__(20);
        var _flate_stream = __w_pdfjs_require__(22);
        var _jbig2_stream = __w_pdfjs_require__(23);
        var _jpeg_stream = __w_pdfjs_require__(26);
        var _jpx_stream = __w_pdfjs_require__(29);
        var _lzw_stream = __w_pdfjs_require__(31);
        var _predictor_stream = __w_pdfjs_require__(32);
        var _run_length_stream = __w_pdfjs_require__(33);
        const MAX_LENGTH_TO_CACHE = 1000;
        function getInlineImageCacheKey(bytes) {
          const strBuf = [],
            ii = bytes.length;
          let i = 0;
          while (i < ii - 1) {
            strBuf.push((bytes[i++] << 8) | bytes[i++]);
          }
          if (i < ii) {
            strBuf.push(bytes[i]);
          }
          return ii + "_" + String.fromCharCode.apply(null, strBuf);
        }
        class Parser {
          constructor({
            lexer,
            xref,
            allowStreams = false,
            recoveryMode = false,
          }) {
            this.lexer = lexer;
            this.xref = xref;
            this.allowStreams = allowStreams;
            this.recoveryMode = recoveryMode;
            this.imageCache = Object.create(null);
            this._imageId = 0;
            this.refill();
          }
          refill() {
            this.buf1 = this.lexer.getObj();
            this.buf2 = this.lexer.getObj();
          }
          shift() {
            if (
              this.buf2 instanceof _primitives.Cmd &&
              this.buf2.cmd === "ID"
            ) {
              this.buf1 = this.buf2;
              this.buf2 = null;
            } else {
              this.buf1 = this.buf2;
              this.buf2 = this.lexer.getObj();
            }
          }
          tryShift() {
            try {
              this.shift();
              return true;
            } catch (e) {
              if (e instanceof _core_utils.MissingDataException) {
                throw e;
              }
              return false;
            }
          }
          getObj(cipherTransform = null) {
            const buf1 = this.buf1;
            this.shift();
            if (buf1 instanceof _primitives.Cmd) {
              switch (buf1.cmd) {
                case "BI":
                  return this.makeInlineImage(cipherTransform);
                case "[":
                  const array = [];
                  while (
                    !(0, _primitives.isCmd)(this.buf1, "]") &&
                    this.buf1 !== _primitives.EOF
                  ) {
                    array.push(this.getObj(cipherTransform));
                  }
                  if (this.buf1 === _primitives.EOF) {
                    if (this.recoveryMode) {
                      return array;
                    }
                    throw new _core_utils.ParserEOFException(
                      "End of file inside array."
                    );
                  }
                  this.shift();
                  return array;
                case "<<":
                  const dict = new _primitives.Dict(this.xref);
                  while (
                    !(0, _primitives.isCmd)(this.buf1, ">>") &&
                    this.buf1 !== _primitives.EOF
                  ) {
                    if (!(this.buf1 instanceof _primitives.Name)) {
                      (0, _util.info)(
                        "Malformed dictionary: key must be a name object"
                      );
                      this.shift();
                      continue;
                    }
                    const key = this.buf1.name;
                    this.shift();
                    if (this.buf1 === _primitives.EOF) {
                      break;
                    }
                    dict.set(key, this.getObj(cipherTransform));
                  }
                  if (this.buf1 === _primitives.EOF) {
                    if (this.recoveryMode) {
                      return dict;
                    }
                    throw new _core_utils.ParserEOFException(
                      "End of file inside dictionary."
                    );
                  }
                  if ((0, _primitives.isCmd)(this.buf2, "stream")) {
                    return this.allowStreams
                      ? this.makeStream(dict, cipherTransform)
                      : dict;
                  }
                  this.shift();
                  return dict;
                default:
                  return buf1;
              }
            }
            if (Number.isInteger(buf1)) {
              if (
                Number.isInteger(this.buf1) &&
                (0, _primitives.isCmd)(this.buf2, "R")
              ) {
                const ref = _primitives.Ref.get(buf1, this.buf1);
                this.shift();
                this.shift();
                return ref;
              }
              return buf1;
            }
            if (typeof buf1 === "string") {
              if (cipherTransform) {
                return cipherTransform.decryptString(buf1);
              }
              return buf1;
            }
            return buf1;
          }
          findDefaultInlineStreamEnd(stream) {
            const E = 0x45,
              I = 0x49,
              SPACE = 0x20,
              LF = 0xa,
              CR = 0xd,
              NUL = 0x0;
            const { knownCommands } = this.lexer,
              startPos = stream.pos,
              n = 15;
            let state = 0,
              ch,
              maybeEIPos;
            while ((ch = stream.getByte()) !== -1) {
              if (state === 0) {
                state = ch === E ? 1 : 0;
              } else if (state === 1) {
                state = ch === I ? 2 : 0;
              } else {
                if (ch === SPACE || ch === LF || ch === CR) {
                  maybeEIPos = stream.pos;
                  const followingBytes = stream.peekBytes(n);
                  const ii = followingBytes.length;
                  if (ii === 0) {
                    break;
                  }
                  for (let i = 0; i < ii; i++) {
                    ch = followingBytes[i];
                    if (ch === NUL && followingBytes[i + 1] !== NUL) {
                      continue;
                    }
                    if (ch !== LF && ch !== CR && (ch < SPACE || ch > 0x7f)) {
                      state = 0;
                      break;
                    }
                  }
                  if (state !== 2) {
                    continue;
                  }
                  if (!knownCommands) {
                    (0, _util.warn)(
                      "findDefaultInlineStreamEnd - `lexer.knownCommands` is undefined."
                    );
                    continue;
                  }
                  const tmpLexer = new Lexer(
                    new _stream.Stream(followingBytes.slice()),
                    knownCommands
                  );
                  tmpLexer._hexStringWarn = () => {};
                  let numArgs = 0;
                  while (true) {
                    const nextObj = tmpLexer.getObj();
                    if (nextObj === _primitives.EOF) {
                      state = 0;
                      break;
                    }
                    if (nextObj instanceof _primitives.Cmd) {
                      const knownCommand = knownCommands[nextObj.cmd];
                      if (!knownCommand) {
                        state = 0;
                        break;
                      } else if (
                        knownCommand.variableArgs
                          ? numArgs <= knownCommand.numArgs
                          : numArgs === knownCommand.numArgs
                      ) {
                        break;
                      }
                      numArgs = 0;
                      continue;
                    }
                    numArgs++;
                  }
                  if (state === 2) {
                    break;
                  }
                } else {
                  state = 0;
                }
              }
            }
            if (ch === -1) {
              (0, _util.warn)(
                "findDefaultInlineStreamEnd: " +
                  "Reached the end of the stream without finding a valid EI marker"
              );
              if (maybeEIPos) {
                (0, _util.warn)(
                  '... trying to recover by using the last "EI" occurrence.'
                );
                stream.skip(-(stream.pos - maybeEIPos));
              }
            }
            let endOffset = 4;
            stream.skip(-endOffset);
            ch = stream.peekByte();
            stream.skip(endOffset);
            if (!(0, _core_utils.isWhiteSpace)(ch)) {
              endOffset--;
            }
            return stream.pos - endOffset - startPos;
          }
          findDCTDecodeInlineStreamEnd(stream) {
            const startPos = stream.pos;
            let foundEOI = false,
              b,
              markerLength;
            while ((b = stream.getByte()) !== -1) {
              if (b !== 0xff) {
                continue;
              }
              switch (stream.getByte()) {
                case 0x00:
                  break;
                case 0xff:
                  stream.skip(-1);
                  break;
                case 0xd9:
                  foundEOI = true;
                  break;
                case 0xc0:
                case 0xc1:
                case 0xc2:
                case 0xc3:
                case 0xc5:
                case 0xc6:
                case 0xc7:
                case 0xc9:
                case 0xca:
                case 0xcb:
                case 0xcd:
                case 0xce:
                case 0xcf:
                case 0xc4:
                case 0xcc:
                case 0xda:
                case 0xdb:
                case 0xdc:
                case 0xdd:
                case 0xde:
                case 0xdf:
                case 0xe0:
                case 0xe1:
                case 0xe2:
                case 0xe3:
                case 0xe4:
                case 0xe5:
                case 0xe6:
                case 0xe7:
                case 0xe8:
                case 0xe9:
                case 0xea:
                case 0xeb:
                case 0xec:
                case 0xed:
                case 0xee:
                case 0xef:
                case 0xfe:
                  markerLength = stream.getUint16();
                  if (markerLength > 2) {
                    stream.skip(markerLength - 2);
                  } else {
                    stream.skip(-2);
                  }
                  break;
              }
              if (foundEOI) {
                break;
              }
            }
            const length = stream.pos - startPos;
            if (b === -1) {
              (0, _util.warn)(
                "Inline DCTDecode image stream: " +
                  "EOI marker not found, searching for /EI/ instead."
              );
              stream.skip(-length);
              return this.findDefaultInlineStreamEnd(stream);
            }
            this.inlineStreamSkipEI(stream);
            return length;
          }
          findASCII85DecodeInlineStreamEnd(stream) {
            const TILDE = 0x7e,
              GT = 0x3e;
            const startPos = stream.pos;
            let ch;
            while ((ch = stream.getByte()) !== -1) {
              if (ch === TILDE) {
                const tildePos = stream.pos;
                ch = stream.peekByte();
                while ((0, _core_utils.isWhiteSpace)(ch)) {
                  stream.skip();
                  ch = stream.peekByte();
                }
                if (ch === GT) {
                  stream.skip();
                  break;
                }
                if (stream.pos > tildePos) {
                  const maybeEI = stream.peekBytes(2);
                  if (maybeEI[0] === 0x45 && maybeEI[1] === 0x49) {
                    break;
                  }
                }
              }
            }
            const length = stream.pos - startPos;
            if (ch === -1) {
              (0, _util.warn)(
                "Inline ASCII85Decode image stream: " +
                  "EOD marker not found, searching for /EI/ instead."
              );
              stream.skip(-length);
              return this.findDefaultInlineStreamEnd(stream);
            }
            this.inlineStreamSkipEI(stream);
            return length;
          }
          findASCIIHexDecodeInlineStreamEnd(stream) {
            const GT = 0x3e;
            const startPos = stream.pos;
            let ch;
            while ((ch = stream.getByte()) !== -1) {
              if (ch === GT) {
                break;
              }
            }
            const length = stream.pos - startPos;
            if (ch === -1) {
              (0, _util.warn)(
                "Inline ASCIIHexDecode image stream: " +
                  "EOD marker not found, searching for /EI/ instead."
              );
              stream.skip(-length);
              return this.findDefaultInlineStreamEnd(stream);
            }
            this.inlineStreamSkipEI(stream);
            return length;
          }
          inlineStreamSkipEI(stream) {
            const E = 0x45,
              I = 0x49;
            let state = 0,
              ch;
            while ((ch = stream.getByte()) !== -1) {
              if (state === 0) {
                state = ch === E ? 1 : 0;
              } else if (state === 1) {
                state = ch === I ? 2 : 0;
              } else if (state === 2) {
                break;
              }
            }
          }
          makeInlineImage(cipherTransform) {
            const lexer = this.lexer;
            const stream = lexer.stream;
            const dictMap = Object.create(null);
            let dictLength;
            while (
              !(0, _primitives.isCmd)(this.buf1, "ID") &&
              this.buf1 !== _primitives.EOF
            ) {
              if (!(this.buf1 instanceof _primitives.Name)) {
                throw new _util.FormatError(
                  "Dictionary key must be a name object"
                );
              }
              const key = this.buf1.name;
              this.shift();
              if (this.buf1 === _primitives.EOF) {
                break;
              }
              dictMap[key] = this.getObj(cipherTransform);
            }
            if (lexer.beginInlineImagePos !== -1) {
              dictLength = stream.pos - lexer.beginInlineImagePos;
            }
            const filter = this.xref.fetchIfRef(dictMap.F || dictMap.Filter);
            let filterName;
            if (filter instanceof _primitives.Name) {
              filterName = filter.name;
            } else if (Array.isArray(filter)) {
              const filterZero = this.xref.fetchIfRef(filter[0]);
              if (filterZero instanceof _primitives.Name) {
                filterName = filterZero.name;
              }
            }
            const startPos = stream.pos;
            let length;
            switch (filterName) {
              case "DCT":
              case "DCTDecode":
                length = this.findDCTDecodeInlineStreamEnd(stream);
                break;
              case "A85":
              case "ASCII85Decode":
                length = this.findASCII85DecodeInlineStreamEnd(stream);
                break;
              case "AHx":
              case "ASCIIHexDecode":
                length = this.findASCIIHexDecodeInlineStreamEnd(stream);
                break;
              default:
                length = this.findDefaultInlineStreamEnd(stream);
            }
            let cacheKey;
            if (length < MAX_LENGTH_TO_CACHE && dictLength > 0) {
              const initialStreamPos = stream.pos;
              stream.pos = lexer.beginInlineImagePos;
              cacheKey = getInlineImageCacheKey(
                stream.getBytes(dictLength + length)
              );
              stream.pos = initialStreamPos;
              const cacheEntry = this.imageCache[cacheKey];
              if (cacheEntry !== undefined) {
                this.buf2 = _primitives.Cmd.get("EI");
                this.shift();
                cacheEntry.reset();
                return cacheEntry;
              }
            }
            const dict = new _primitives.Dict(this.xref);
            for (const key in dictMap) {
              dict.set(key, dictMap[key]);
            }
            let imageStream = stream.makeSubStream(startPos, length, dict);
            if (cipherTransform) {
              imageStream = cipherTransform.createStream(imageStream, length);
            }
            imageStream = this.filter(imageStream, dict, length);
            imageStream.dict = dict;
            if (cacheKey !== undefined) {
              imageStream.cacheKey = `inline_img_${++this._imageId}`;
              this.imageCache[cacheKey] = imageStream;
            }
            this.buf2 = _primitives.Cmd.get("EI");
            this.shift();
            return imageStream;
          }
          _findStreamLength(startPos, signature) {
            const { stream } = this.lexer;
            stream.pos = startPos;
            const SCAN_BLOCK_LENGTH = 2048;
            const signatureLength = signature.length;
            while (stream.pos < stream.end) {
              const scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);
              const scanLength = scanBytes.length - signatureLength;
              if (scanLength <= 0) {
                break;
              }
              let pos = 0;
              while (pos < scanLength) {
                let j = 0;
                while (
                  j < signatureLength &&
                  scanBytes[pos + j] === signature[j]
                ) {
                  j++;
                }
                if (j >= signatureLength) {
                  stream.pos += pos;
                  return stream.pos - startPos;
                }
                pos++;
              }
              stream.pos += scanLength;
            }
            return -1;
          }
          makeStream(dict, cipherTransform) {
            const lexer = this.lexer;
            let stream = lexer.stream;
            lexer.skipToNextLine();
            const startPos = stream.pos - 1;
            let length = dict.get("Length");
            if (!Number.isInteger(length)) {
              (0, _util.info)(
                `Bad length "${length && length.toString()}" in stream.`
              );
              length = 0;
            }
            stream.pos = startPos + length;
            lexer.nextChar();
            if (
              this.tryShift() &&
              (0, _primitives.isCmd)(this.buf2, "endstream")
            ) {
              this.shift();
            } else {
              const ENDSTREAM_SIGNATURE = new Uint8Array([
                0x65, 0x6e, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
              ]);
              let actualLength = this._findStreamLength(
                startPos,
                ENDSTREAM_SIGNATURE
              );
              if (actualLength < 0) {
                const MAX_TRUNCATION = 1;
                for (let i = 1; i <= MAX_TRUNCATION; i++) {
                  const end = ENDSTREAM_SIGNATURE.length - i;
                  const TRUNCATED_SIGNATURE = ENDSTREAM_SIGNATURE.slice(0, end);
                  const maybeLength = this._findStreamLength(
                    startPos,
                    TRUNCATED_SIGNATURE
                  );
                  if (maybeLength >= 0) {
                    const lastByte = stream.peekBytes(end + 1)[end];
                    if (!(0, _core_utils.isWhiteSpace)(lastByte)) {
                      break;
                    }
                    (0, _util.info)(
                      `Found "${(0, _util.bytesToString)(
                        TRUNCATED_SIGNATURE
                      )}" when ` + "searching for endstream command."
                    );
                    actualLength = maybeLength;
                    break;
                  }
                }
                if (actualLength < 0) {
                  throw new _util.FormatError("Missing endstream command.");
                }
              }
              length = actualLength;
              lexer.nextChar();
              this.shift();
              this.shift();
            }
            this.shift();
            stream = stream.makeSubStream(startPos, length, dict);
            if (cipherTransform) {
              stream = cipherTransform.createStream(stream, length);
            }
            stream = this.filter(stream, dict, length);
            stream.dict = dict;
            return stream;
          }
          filter(stream, dict, length) {
            let filter = dict.get("F", "Filter");
            let params = dict.get("DP", "DecodeParms");
            if (filter instanceof _primitives.Name) {
              if (Array.isArray(params)) {
                (0, _util.warn)(
                  "/DecodeParms should not be an Array, when /Filter is a Name."
                );
              }
              return this.makeFilter(stream, filter.name, length, params);
            }
            let maybeLength = length;
            if (Array.isArray(filter)) {
              const filterArray = filter;
              const paramsArray = params;
              for (let i = 0, ii = filterArray.length; i < ii; ++i) {
                filter = this.xref.fetchIfRef(filterArray[i]);
                if (!(filter instanceof _primitives.Name)) {
                  throw new _util.FormatError(`Bad filter name "${filter}"`);
                }
                params = null;
                if (Array.isArray(paramsArray) && i in paramsArray) {
                  params = this.xref.fetchIfRef(paramsArray[i]);
                }
                stream = this.makeFilter(
                  stream,
                  filter.name,
                  maybeLength,
                  params
                );
                maybeLength = null;
              }
            }
            return stream;
          }
          makeFilter(stream, name, maybeLength, params) {
            if (maybeLength === 0) {
              (0, _util.warn)(`Empty "${name}" stream.`);
              return new _stream.NullStream();
            }
            try {
              switch (name) {
                case "Fl":
                case "FlateDecode":
                  if (params) {
                    return new _predictor_stream.PredictorStream(
                      new _flate_stream.FlateStream(stream, maybeLength),
                      maybeLength,
                      params
                    );
                  }
                  return new _flate_stream.FlateStream(stream, maybeLength);
                case "LZW":
                case "LZWDecode":
                  let earlyChange = 1;
                  if (params) {
                    if (params.has("EarlyChange")) {
                      earlyChange = params.get("EarlyChange");
                    }
                    return new _predictor_stream.PredictorStream(
                      new _lzw_stream.LZWStream(
                        stream,
                        maybeLength,
                        earlyChange
                      ),
                      maybeLength,
                      params
                    );
                  }
                  return new _lzw_stream.LZWStream(
                    stream,
                    maybeLength,
                    earlyChange
                  );
                case "DCT":
                case "DCTDecode":
                  return new _jpeg_stream.JpegStream(
                    stream,
                    maybeLength,
                    params
                  );
                case "JPX":
                case "JPXDecode":
                  return new _jpx_stream.JpxStream(stream, maybeLength, params);
                case "A85":
                case "ASCII85Decode":
                  return new _ascii_85_stream.Ascii85Stream(
                    stream,
                    maybeLength
                  );
                case "AHx":
                case "ASCIIHexDecode":
                  return new _ascii_hex_stream.AsciiHexStream(
                    stream,
                    maybeLength
                  );
                case "CCF":
                case "CCITTFaxDecode":
                  return new _ccitt_stream.CCITTFaxStream(
                    stream,
                    maybeLength,
                    params
                  );
                case "RL":
                case "RunLengthDecode":
                  return new _run_length_stream.RunLengthStream(
                    stream,
                    maybeLength
                  );
                case "JBIG2Decode":
                  return new _jbig2_stream.Jbig2Stream(
                    stream,
                    maybeLength,
                    params
                  );
              }
              (0, _util.warn)(`Filter "${name}" is not supported.`);
              return stream;
            } catch (ex) {
              if (ex instanceof _core_utils.MissingDataException) {
                throw ex;
              }
              (0, _util.warn)(`Invalid stream: "${ex}"`);
              return new _stream.NullStream();
            }
          }
        }
        exports.Parser = Parser;
        const specialChars = [
          1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0,
          0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
          0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0,
        ];
        function toHexDigit(ch) {
          if (ch >= 0x30 && ch <= 0x39) {
            return ch & 0x0f;
          }
          if ((ch >= 0x41 && ch <= 0x46) || (ch >= 0x61 && ch <= 0x66)) {
            return (ch & 0x0f) + 9;
          }
          return -1;
        }
        class Lexer {
          constructor(stream, knownCommands = null) {
            this.stream = stream;
            this.nextChar();
            this.strBuf = [];
            this.knownCommands = knownCommands;
            this._hexStringNumWarn = 0;
            this.beginInlineImagePos = -1;
          }
          nextChar() {
            return (this.currentChar = this.stream.getByte());
          }
          peekChar() {
            return this.stream.peekByte();
          }
          getNumber() {
            let ch = this.currentChar;
            let eNotation = false;
            let divideBy = 0;
            let sign = 1;
            if (ch === 0x2d) {
              sign = -1;
              ch = this.nextChar();
              if (ch === 0x2d) {
                ch = this.nextChar();
              }
            } else if (ch === 0x2b) {
              ch = this.nextChar();
            }
            if (ch === 0x0a || ch === 0x0d) {
              do {
                ch = this.nextChar();
              } while (ch === 0x0a || ch === 0x0d);
            }
            if (ch === 0x2e) {
              divideBy = 10;
              ch = this.nextChar();
            }
            if (ch < 0x30 || ch > 0x39) {
              const msg = `Invalid number: ${String.fromCharCode(
                ch
              )} (charCode ${ch})`;
              if ((0, _core_utils.isWhiteSpace)(ch) || ch === -1) {
                (0, _util.info)(`Lexer.getNumber - "${msg}".`);
                return 0;
              }
              throw new _util.FormatError(msg);
            }
            let baseValue = ch - 0x30;
            let powerValue = 0;
            let powerValueSign = 1;
            while ((ch = this.nextChar()) >= 0) {
              if (ch >= 0x30 && ch <= 0x39) {
                const currentDigit = ch - 0x30;
                if (eNotation) {
                  powerValue = powerValue * 10 + currentDigit;
                } else {
                  if (divideBy !== 0) {
                    divideBy *= 10;
                  }
                  baseValue = baseValue * 10 + currentDigit;
                }
              } else if (ch === 0x2e) {
                if (divideBy === 0) {
                  divideBy = 1;
                } else {
                  break;
                }
              } else if (ch === 0x2d) {
                (0, _util.warn)(
                  "Badly formatted number: minus sign in the middle"
                );
              } else if (ch === 0x45 || ch === 0x65) {
                ch = this.peekChar();
                if (ch === 0x2b || ch === 0x2d) {
                  powerValueSign = ch === 0x2d ? -1 : 1;
                  this.nextChar();
                } else if (ch < 0x30 || ch > 0x39) {
                  break;
                }
                eNotation = true;
              } else {
                break;
              }
            }
            if (divideBy !== 0) {
              baseValue /= divideBy;
            }
            if (eNotation) {
              baseValue *= 10 ** (powerValueSign * powerValue);
            }
            return sign * baseValue;
          }
          getString() {
            let numParen = 1;
            let done = false;
            const strBuf = this.strBuf;
            strBuf.length = 0;
            let ch = this.nextChar();
            while (true) {
              let charBuffered = false;
              switch (ch | 0) {
                case -1:
                  (0, _util.warn)("Unterminated string");
                  done = true;
                  break;
                case 0x28:
                  ++numParen;
                  strBuf.push("(");
                  break;
                case 0x29:
                  if (--numParen === 0) {
                    this.nextChar();
                    done = true;
                  } else {
                    strBuf.push(")");
                  }
                  break;
                case 0x5c:
                  ch = this.nextChar();
                  switch (ch) {
                    case -1:
                      (0, _util.warn)("Unterminated string");
                      done = true;
                      break;
                    case 0x6e:
                      strBuf.push("\n");
                      break;
                    case 0x72:
                      strBuf.push("\r");
                      break;
                    case 0x74:
                      strBuf.push("\t");
                      break;
                    case 0x62:
                      strBuf.push("\b");
                      break;
                    case 0x66:
                      strBuf.push("\f");
                      break;
                    case 0x5c:
                    case 0x28:
                    case 0x29:
                      strBuf.push(String.fromCharCode(ch));
                      break;
                    case 0x30:
                    case 0x31:
                    case 0x32:
                    case 0x33:
                    case 0x34:
                    case 0x35:
                    case 0x36:
                    case 0x37:
                      let x = ch & 0x0f;
                      ch = this.nextChar();
                      charBuffered = true;
                      if (ch >= 0x30 && ch <= 0x37) {
                        x = (x << 3) + (ch & 0x0f);
                        ch = this.nextChar();
                        if (ch >= 0x30 && ch <= 0x37) {
                          charBuffered = false;
                          x = (x << 3) + (ch & 0x0f);
                        }
                      }
                      strBuf.push(String.fromCharCode(x));
                      break;
                    case 0x0d:
                      if (this.peekChar() === 0x0a) {
                        this.nextChar();
                      }
                      break;
                    case 0x0a:
                      break;
                    default:
                      strBuf.push(String.fromCharCode(ch));
                      break;
                  }
                  break;
                default:
                  strBuf.push(String.fromCharCode(ch));
                  break;
              }
              if (done) {
                break;
              }
              if (!charBuffered) {
                ch = this.nextChar();
              }
            }
            return strBuf.join("");
          }
          getName() {
            let ch, previousCh;
            const strBuf = this.strBuf;
            strBuf.length = 0;
            while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {
              if (ch === 0x23) {
                ch = this.nextChar();
                if (specialChars[ch]) {
                  (0, _util.warn)(
                    "Lexer_getName: " +
                      "NUMBER SIGN (#) should be followed by a hexadecimal number."
                  );
                  strBuf.push("#");
                  break;
                }
                const x = toHexDigit(ch);
                if (x !== -1) {
                  previousCh = ch;
                  ch = this.nextChar();
                  const x2 = toHexDigit(ch);
                  if (x2 === -1) {
                    (0, _util.warn)(
                      `Lexer_getName: Illegal digit (${String.fromCharCode(
                        ch
                      )}) ` + "in hexadecimal number."
                    );
                    strBuf.push("#", String.fromCharCode(previousCh));
                    if (specialChars[ch]) {
                      break;
                    }
                    strBuf.push(String.fromCharCode(ch));
                    continue;
                  }
                  strBuf.push(String.fromCharCode((x << 4) | x2));
                } else {
                  strBuf.push("#", String.fromCharCode(ch));
                }
              } else {
                strBuf.push(String.fromCharCode(ch));
              }
            }
            if (strBuf.length > 127) {
              (0, _util.warn)(
                `Name token is longer than allowed by the spec: ${strBuf.length}`
              );
            }
            return _primitives.Name.get(strBuf.join(""));
          }
          _hexStringWarn(ch) {
            const MAX_HEX_STRING_NUM_WARN = 5;
            if (this._hexStringNumWarn++ === MAX_HEX_STRING_NUM_WARN) {
              (0, _util.warn)(
                "getHexString - ignoring additional invalid characters."
              );
              return;
            }
            if (this._hexStringNumWarn > MAX_HEX_STRING_NUM_WARN) {
              return;
            }
            (0, _util.warn)(`getHexString - ignoring invalid character: ${ch}`);
          }
          getHexString() {
            const strBuf = this.strBuf;
            strBuf.length = 0;
            let ch = this.currentChar;
            let isFirstHex = true;
            let firstDigit, secondDigit;
            this._hexStringNumWarn = 0;
            while (true) {
              if (ch < 0) {
                (0, _util.warn)("Unterminated hex string");
                break;
              } else if (ch === 0x3e) {
                this.nextChar();
                break;
              } else if (specialChars[ch] === 1) {
                ch = this.nextChar();
                continue;
              } else {
                if (isFirstHex) {
                  firstDigit = toHexDigit(ch);
                  if (firstDigit === -1) {
                    this._hexStringWarn(ch);
                    ch = this.nextChar();
                    continue;
                  }
                } else {
                  secondDigit = toHexDigit(ch);
                  if (secondDigit === -1) {
                    this._hexStringWarn(ch);
                    ch = this.nextChar();
                    continue;
                  }
                  strBuf.push(
                    String.fromCharCode((firstDigit << 4) | secondDigit)
                  );
                }
                isFirstHex = !isFirstHex;
                ch = this.nextChar();
              }
            }
            return strBuf.join("");
          }
          getObj() {
            let comment = false;
            let ch = this.currentChar;
            while (true) {
              if (ch < 0) {
                return _primitives.EOF;
              }
              if (comment) {
                if (ch === 0x0a || ch === 0x0d) {
                  comment = false;
                }
              } else if (ch === 0x25) {
                comment = true;
              } else if (specialChars[ch] !== 1) {
                break;
              }
              ch = this.nextChar();
            }
            switch (ch | 0) {
              case 0x30:
              case 0x31:
              case 0x32:
              case 0x33:
              case 0x34:
              case 0x35:
              case 0x36:
              case 0x37:
              case 0x38:
              case 0x39:
              case 0x2b:
              case 0x2d:
              case 0x2e:
                return this.getNumber();
              case 0x28:
                return this.getString();
              case 0x2f:
                return this.getName();
              case 0x5b:
                this.nextChar();
                return _primitives.Cmd.get("[");
              case 0x5d:
                this.nextChar();
                return _primitives.Cmd.get("]");
              case 0x3c:
                ch = this.nextChar();
                if (ch === 0x3c) {
                  this.nextChar();
                  return _primitives.Cmd.get("<<");
                }
                return this.getHexString();
              case 0x3e:
                ch = this.nextChar();
                if (ch === 0x3e) {
                  this.nextChar();
                  return _primitives.Cmd.get(">>");
                }
                return _primitives.Cmd.get(">");
              case 0x7b:
                this.nextChar();
                return _primitives.Cmd.get("{");
              case 0x7d:
                this.nextChar();
                return _primitives.Cmd.get("}");
              case 0x29:
                this.nextChar();
                throw new _util.FormatError(`Illegal character: ${ch}`);
            }
            let str = String.fromCharCode(ch);
            if (ch < 0x20 || ch > 0x7f) {
              const nextCh = this.peekChar();
              if (nextCh >= 0x20 && nextCh <= 0x7f) {
                this.nextChar();
                return _primitives.Cmd.get(str);
              }
            }
            const knownCommands = this.knownCommands;
            let knownCommandFound = knownCommands?.[str] !== undefined;
            while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {
              const possibleCommand = str + String.fromCharCode(ch);
              if (
                knownCommandFound &&
                knownCommands[possibleCommand] === undefined
              ) {
                break;
              }
              if (str.length === 128) {
                throw new _util.FormatError(
                  `Command token too long: ${str.length}`
                );
              }
              str = possibleCommand;
              knownCommandFound = knownCommands?.[str] !== undefined;
            }
            if (str === "true") {
              return true;
            }
            if (str === "false") {
              return false;
            }
            if (str === "null") {
              return null;
            }
            if (str === "BI") {
              this.beginInlineImagePos = this.stream.pos;
            }
            return _primitives.Cmd.get(str);
          }
          skipToNextLine() {
            let ch = this.currentChar;
            while (ch >= 0) {
              if (ch === 0x0d) {
                ch = this.nextChar();
                if (ch === 0x0a) {
                  this.nextChar();
                }
                break;
              } else if (ch === 0x0a) {
                this.nextChar();
                break;
              }
              ch = this.nextChar();
            }
          }
        }
        exports.Lexer = Lexer;
        class Linearization {
          static create(stream) {
            function getInt(linDict, name, allowZeroValue = false) {
              const obj = linDict.get(name);
              if (
                Number.isInteger(obj) &&
                (allowZeroValue ? obj >= 0 : obj > 0)
              ) {
                return obj;
              }
              throw new Error(
                `The "${name}" parameter in the linearization ` +
                  "dictionary is invalid."
              );
            }
            function getHints(linDict) {
              const hints = linDict.get("H");
              let hintsLength;
              if (
                Array.isArray(hints) &&
                ((hintsLength = hints.length) === 2 || hintsLength === 4)
              ) {
                for (let index = 0; index < hintsLength; index++) {
                  const hint = hints[index];
                  if (!(Number.isInteger(hint) && hint > 0)) {
                    throw new Error(
                      `Hint (${index}) in the linearization dictionary is invalid.`
                    );
                  }
                }
                return hints;
              }
              throw new Error(
                "Hint array in the linearization dictionary is invalid."
              );
            }
            const parser = new Parser({
              lexer: new Lexer(stream),
              xref: null,
            });
            const obj1 = parser.getObj();
            const obj2 = parser.getObj();
            const obj3 = parser.getObj();
            const linDict = parser.getObj();
            let obj, length;
            if (
              !(
                Number.isInteger(obj1) &&
                Number.isInteger(obj2) &&
                (0, _primitives.isCmd)(obj3, "obj") &&
                linDict instanceof _primitives.Dict &&
                typeof (obj = linDict.get("Linearized")) === "number" &&
                obj > 0
              )
            ) {
              return null;
            } else if ((length = getInt(linDict, "L")) !== stream.length) {
              throw new Error(
                'The "L" parameter in the linearization dictionary ' +
                  "does not equal the stream length."
              );
            }
            return {
              length,
              hints: getHints(linDict),
              objectNumberFirst: getInt(linDict, "O"),
              endFirst: getInt(linDict, "E"),
              numPages: getInt(linDict, "N"),
              mainXRefEntriesOffset: getInt(linDict, "T"),
              pageFirst: linDict.has("P") ? getInt(linDict, "P", true) : 0,
            };
          }
        }
        exports.Linearization = Linearization;

        /***/
      },
      /* 17 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.Ascii85Stream = void 0;
        var _decode_stream = __w_pdfjs_require__(18);
        var _core_utils = __w_pdfjs_require__(3);
        class Ascii85Stream extends _decode_stream.DecodeStream {
          constructor(str, maybeLength) {
            if (maybeLength) {
              maybeLength *= 0.8;
            }
            super(maybeLength);
            this.str = str;
            this.dict = str.dict;
            this.input = new Uint8Array(5);
          }
          readBlock() {
            const TILDA_CHAR = 0x7e;
            const Z_LOWER_CHAR = 0x7a;
            const EOF = -1;
            const str = this.str;
            let c = str.getByte();
            while ((0, _core_utils.isWhiteSpace)(c)) {
              c = str.getByte();
            }
            if (c === EOF || c === TILDA_CHAR) {
              this.eof = true;
              return;
            }
            const bufferLength = this.bufferLength;
            let buffer, i;
            if (c === Z_LOWER_CHAR) {
              buffer = this.ensureBuffer(bufferLength + 4);
              for (i = 0; i < 4; ++i) {
                buffer[bufferLength + i] = 0;
              }
              this.bufferLength += 4;
            } else {
              const input = this.input;
              input[0] = c;
              for (i = 1; i < 5; ++i) {
                c = str.getByte();
                while ((0, _core_utils.isWhiteSpace)(c)) {
                  c = str.getByte();
                }
                input[i] = c;
                if (c === EOF || c === TILDA_CHAR) {
                  break;
                }
              }
              buffer = this.ensureBuffer(bufferLength + i - 1);
              this.bufferLength += i - 1;
              if (i < 5) {
                for (; i < 5; ++i) {
                  input[i] = 0x21 + 84;
                }
                this.eof = true;
              }
              let t = 0;
              for (i = 0; i < 5; ++i) {
                t = t * 85 + (input[i] - 0x21);
              }
              for (i = 3; i >= 0; --i) {
                buffer[bufferLength + i] = t & 0xff;
                t >>= 8;
              }
            }
          }
        }
        exports.Ascii85Stream = Ascii85Stream;

        /***/
      },
      /* 18 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.StreamsSequenceStream = exports.DecodeStream = void 0;
        var _base_stream = __w_pdfjs_require__(5);
        var _stream = __w_pdfjs_require__(8);
        const emptyBuffer = new Uint8Array(0);
        class DecodeStream extends _base_stream.BaseStream {
          constructor(maybeMinBufferLength) {
            super();
            this._rawMinBufferLength = maybeMinBufferLength || 0;
            this.pos = 0;
            this.bufferLength = 0;
            this.eof = false;
            this.buffer = emptyBuffer;
            this.minBufferLength = 512;
            if (maybeMinBufferLength) {
              while (this.minBufferLength < maybeMinBufferLength) {
                this.minBufferLength *= 2;
              }
            }
          }
          get isEmpty() {
            while (!this.eof && this.bufferLength === 0) {
              this.readBlock();
            }
            return this.bufferLength === 0;
          }
          ensureBuffer(requested) {
            const buffer = this.buffer;
            if (requested <= buffer.byteLength) {
              return buffer;
            }
            let size = this.minBufferLength;
            while (size < requested) {
              size *= 2;
            }
            const buffer2 = new Uint8Array(size);
            buffer2.set(buffer);
            return (this.buffer = buffer2);
          }
          getByte() {
            const pos = this.pos;
            while (this.bufferLength <= pos) {
              if (this.eof) {
                return -1;
              }
              this.readBlock();
            }
            return this.buffer[this.pos++];
          }
          getBytes(length) {
            const pos = this.pos;
            let end;
            if (length) {
              this.ensureBuffer(pos + length);
              end = pos + length;
              while (!this.eof && this.bufferLength < end) {
                this.readBlock();
              }
              const bufEnd = this.bufferLength;
              if (end > bufEnd) {
                end = bufEnd;
              }
            } else {
              while (!this.eof) {
                this.readBlock();
              }
              end = this.bufferLength;
            }
            this.pos = end;
            return this.buffer.subarray(pos, end);
          }
          reset() {
            this.pos = 0;
          }
          makeSubStream(start, length, dict = null) {
            if (length === undefined) {
              while (!this.eof) {
                this.readBlock();
              }
            } else {
              const end = start + length;
              while (this.bufferLength <= end && !this.eof) {
                this.readBlock();
              }
            }
            return new _stream.Stream(this.buffer, start, length, dict);
          }
          getBaseStreams() {
            return this.str ? this.str.getBaseStreams() : null;
          }
        }
        exports.DecodeStream = DecodeStream;
        class StreamsSequenceStream extends DecodeStream {
          constructor(streams, onError = null) {
            let maybeLength = 0;
            for (const stream of streams) {
              maybeLength +=
                stream instanceof DecodeStream
                  ? stream._rawMinBufferLength
                  : stream.length;
            }
            super(maybeLength);
            this.streams = streams;
            this._onError = onError;
          }
          readBlock() {
            const streams = this.streams;
            if (streams.length === 0) {
              this.eof = true;
              return;
            }
            const stream = streams.shift();
            let chunk;
            try {
              chunk = stream.getBytes();
            } catch (reason) {
              if (this._onError) {
                this._onError(reason, stream.dict?.objId);
                return;
              }
              throw reason;
            }
            const bufferLength = this.bufferLength;
            const newLength = bufferLength + chunk.length;
            const buffer = this.ensureBuffer(newLength);
            buffer.set(chunk, bufferLength);
            this.bufferLength = newLength;
          }
          getBaseStreams() {
            const baseStreamsBuf = [];
            for (const stream of this.streams) {
              const baseStreams = stream.getBaseStreams();
              if (baseStreams) {
                baseStreamsBuf.push(...baseStreams);
              }
            }
            return baseStreamsBuf.length > 0 ? baseStreamsBuf : null;
          }
        }
        exports.StreamsSequenceStream = StreamsSequenceStream;

        /***/
      },
      /* 19 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.AsciiHexStream = void 0;
        var _decode_stream = __w_pdfjs_require__(18);
        class AsciiHexStream extends _decode_stream.DecodeStream {
          constructor(str, maybeLength) {
            if (maybeLength) {
              maybeLength *= 0.5;
            }
            super(maybeLength);
            this.str = str;
            this.dict = str.dict;
            this.firstDigit = -1;
          }
          readBlock() {
            const UPSTREAM_BLOCK_SIZE = 8000;
            const bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);
            if (!bytes.length) {
              this.eof = true;
              return;
            }
            const maxDecodeLength = (bytes.length + 1) >> 1;
            const buffer = this.ensureBuffer(
              this.bufferLength + maxDecodeLength
            );
            let bufferLength = this.bufferLength;
            let firstDigit = this.firstDigit;
            for (const ch of bytes) {
              let digit;
              if (ch >= 0x30 && ch <= 0x39) {
                digit = ch & 0x0f;
              } else if (
                (ch >= 0x41 && ch <= 0x46) ||
                (ch >= 0x61 && ch <= 0x66)
              ) {
                digit = (ch & 0x0f) + 9;
              } else if (ch === 0x3e) {
                this.eof = true;
                break;
              } else {
                continue;
              }
              if (firstDigit < 0) {
                firstDigit = digit;
              } else {
                buffer[bufferLength++] = (firstDigit << 4) | digit;
                firstDigit = -1;
              }
            }
            if (firstDigit >= 0 && this.eof) {
              buffer[bufferLength++] = firstDigit << 4;
              firstDigit = -1;
            }
            this.firstDigit = firstDigit;
            this.bufferLength = bufferLength;
          }
        }
        exports.AsciiHexStream = AsciiHexStream;

        /***/
      },
      /* 20 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.CCITTFaxStream = void 0;
        var _ccitt = __w_pdfjs_require__(21);
        var _decode_stream = __w_pdfjs_require__(18);
        var _primitives = __w_pdfjs_require__(4);
        class CCITTFaxStream extends _decode_stream.DecodeStream {
          constructor(str, maybeLength, params) {
            super(maybeLength);
            this.str = str;
            this.dict = str.dict;
            if (!(params instanceof _primitives.Dict)) {
              params = _primitives.Dict.empty;
            }
            const source = {
              next() {
                return str.getByte();
              },
            };
            this.ccittFaxDecoder = new _ccitt.CCITTFaxDecoder(source, {
              K: params.get("K"),
              EndOfLine: params.get("EndOfLine"),
              EncodedByteAlign: params.get("EncodedByteAlign"),
              Columns: params.get("Columns"),
              Rows: params.get("Rows"),
              EndOfBlock: params.get("EndOfBlock"),
              BlackIs1: params.get("BlackIs1"),
            });
          }
          readBlock() {
            while (!this.eof) {
              const c = this.ccittFaxDecoder.readNextChar();
              if (c === -1) {
                this.eof = true;
                return;
              }
              this.ensureBuffer(this.bufferLength + 1);
              this.buffer[this.bufferLength++] = c;
            }
          }
        }
        exports.CCITTFaxStream = CCITTFaxStream;

        /***/
      },
      /* 21 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.CCITTFaxDecoder = void 0;
        var _util = __w_pdfjs_require__(2);
        const ccittEOL = -2;
        const ccittEOF = -1;
        const twoDimPass = 0;
        const twoDimHoriz = 1;
        const twoDimVert0 = 2;
        const twoDimVertR1 = 3;
        const twoDimVertL1 = 4;
        const twoDimVertR2 = 5;
        const twoDimVertL2 = 6;
        const twoDimVertR3 = 7;
        const twoDimVertL3 = 8;
        const twoDimTable = [
          [-1, -1],
          [-1, -1],
          [7, twoDimVertL3],
          [7, twoDimVertR3],
          [6, twoDimVertL2],
          [6, twoDimVertL2],
          [6, twoDimVertR2],
          [6, twoDimVertR2],
          [4, twoDimPass],
          [4, twoDimPass],
          [4, twoDimPass],
          [4, twoDimPass],
          [4, twoDimPass],
          [4, twoDimPass],
          [4, twoDimPass],
          [4, twoDimPass],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimHoriz],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertL1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [3, twoDimVertR1],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
          [1, twoDimVert0],
        ];
        const whiteTable1 = [
          [-1, -1],
          [12, ccittEOL],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [11, 1792],
          [11, 1792],
          [12, 1984],
          [12, 2048],
          [12, 2112],
          [12, 2176],
          [12, 2240],
          [12, 2304],
          [11, 1856],
          [11, 1856],
          [11, 1920],
          [11, 1920],
          [12, 2368],
          [12, 2432],
          [12, 2496],
          [12, 2560],
        ];
        const whiteTable2 = [
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [8, 29],
          [8, 29],
          [8, 30],
          [8, 30],
          [8, 45],
          [8, 45],
          [8, 46],
          [8, 46],
          [7, 22],
          [7, 22],
          [7, 22],
          [7, 22],
          [7, 23],
          [7, 23],
          [7, 23],
          [7, 23],
          [8, 47],
          [8, 47],
          [8, 48],
          [8, 48],
          [6, 13],
          [6, 13],
          [6, 13],
          [6, 13],
          [6, 13],
          [6, 13],
          [6, 13],
          [6, 13],
          [7, 20],
          [7, 20],
          [7, 20],
          [7, 20],
          [8, 33],
          [8, 33],
          [8, 34],
          [8, 34],
          [8, 35],
          [8, 35],
          [8, 36],
          [8, 36],
          [8, 37],
          [8, 37],
          [8, 38],
          [8, 38],
          [7, 19],
          [7, 19],
          [7, 19],
          [7, 19],
          [8, 31],
          [8, 31],
          [8, 32],
          [8, 32],
          [6, 1],
          [6, 1],
          [6, 1],
          [6, 1],
          [6, 1],
          [6, 1],
          [6, 1],
          [6, 1],
          [6, 12],
          [6, 12],
          [6, 12],
          [6, 12],
          [6, 12],
          [6, 12],
          [6, 12],
          [6, 12],
          [8, 53],
          [8, 53],
          [8, 54],
          [8, 54],
          [7, 26],
          [7, 26],
          [7, 26],
          [7, 26],
          [8, 39],
          [8, 39],
          [8, 40],
          [8, 40],
          [8, 41],
          [8, 41],
          [8, 42],
          [8, 42],
          [8, 43],
          [8, 43],
          [8, 44],
          [8, 44],
          [7, 21],
          [7, 21],
          [7, 21],
          [7, 21],
          [7, 28],
          [7, 28],
          [7, 28],
          [7, 28],
          [8, 61],
          [8, 61],
          [8, 62],
          [8, 62],
          [8, 63],
          [8, 63],
          [8, 0],
          [8, 0],
          [8, 320],
          [8, 320],
          [8, 384],
          [8, 384],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 10],
          [5, 11],
          [5, 11],
          [5, 11],
          [5, 11],
          [5, 11],
          [5, 11],
          [5, 11],
          [5, 11],
          [5, 11],
          [5, 11],
          [5, 11],
          [5, 11],
          [5, 11],
          [5, 11],
          [5, 11],
          [5, 11],
          [7, 27],
          [7, 27],
          [7, 27],
          [7, 27],
          [8, 59],
          [8, 59],
          [8, 60],
          [8, 60],
          [9, 1472],
          [9, 1536],
          [9, 1600],
          [9, 1728],
          [7, 18],
          [7, 18],
          [7, 18],
          [7, 18],
          [7, 24],
          [7, 24],
          [7, 24],
          [7, 24],
          [8, 49],
          [8, 49],
          [8, 50],
          [8, 50],
          [8, 51],
          [8, 51],
          [8, 52],
          [8, 52],
          [7, 25],
          [7, 25],
          [7, 25],
          [7, 25],
          [8, 55],
          [8, 55],
          [8, 56],
          [8, 56],
          [8, 57],
          [8, 57],
          [8, 58],
          [8, 58],
          [6, 192],
          [6, 192],
          [6, 192],
          [6, 192],
          [6, 192],
          [6, 192],
          [6, 192],
          [6, 192],
          [6, 1664],
          [6, 1664],
          [6, 1664],
          [6, 1664],
          [6, 1664],
          [6, 1664],
          [6, 1664],
          [6, 1664],
          [8, 448],
          [8, 448],
          [8, 512],
          [8, 512],
          [9, 704],
          [9, 768],
          [8, 640],
          [8, 640],
          [8, 576],
          [8, 576],
          [9, 832],
          [9, 896],
          [9, 960],
          [9, 1024],
          [9, 1088],
          [9, 1152],
          [9, 1216],
          [9, 1280],
          [9, 1344],
          [9, 1408],
          [7, 256],
          [7, 256],
          [7, 256],
          [7, 256],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 2],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 128],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 8],
          [5, 9],
          [5, 9],
          [5, 9],
          [5, 9],
          [5, 9],
          [5, 9],
          [5, 9],
          [5, 9],
          [5, 9],
          [5, 9],
          [5, 9],
          [5, 9],
          [5, 9],
          [5, 9],
          [5, 9],
          [5, 9],
          [6, 16],
          [6, 16],
          [6, 16],
          [6, 16],
          [6, 16],
          [6, 16],
          [6, 16],
          [6, 16],
          [6, 17],
          [6, 17],
          [6, 17],
          [6, 17],
          [6, 17],
          [6, 17],
          [6, 17],
          [6, 17],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 4],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [6, 14],
          [6, 14],
          [6, 14],
          [6, 14],
          [6, 14],
          [6, 14],
          [6, 14],
          [6, 14],
          [6, 15],
          [6, 15],
          [6, 15],
          [6, 15],
          [6, 15],
          [6, 15],
          [6, 15],
          [6, 15],
          [5, 64],
          [5, 64],
          [5, 64],
          [5, 64],
          [5, 64],
          [5, 64],
          [5, 64],
          [5, 64],
          [5, 64],
          [5, 64],
          [5, 64],
          [5, 64],
          [5, 64],
          [5, 64],
          [5, 64],
          [5, 64],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
          [4, 7],
        ];
        const blackTable1 = [
          [-1, -1],
          [-1, -1],
          [12, ccittEOL],
          [12, ccittEOL],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [11, 1792],
          [11, 1792],
          [11, 1792],
          [11, 1792],
          [12, 1984],
          [12, 1984],
          [12, 2048],
          [12, 2048],
          [12, 2112],
          [12, 2112],
          [12, 2176],
          [12, 2176],
          [12, 2240],
          [12, 2240],
          [12, 2304],
          [12, 2304],
          [11, 1856],
          [11, 1856],
          [11, 1856],
          [11, 1856],
          [11, 1920],
          [11, 1920],
          [11, 1920],
          [11, 1920],
          [12, 2368],
          [12, 2368],
          [12, 2432],
          [12, 2432],
          [12, 2496],
          [12, 2496],
          [12, 2560],
          [12, 2560],
          [10, 18],
          [10, 18],
          [10, 18],
          [10, 18],
          [10, 18],
          [10, 18],
          [10, 18],
          [10, 18],
          [12, 52],
          [12, 52],
          [13, 640],
          [13, 704],
          [13, 768],
          [13, 832],
          [12, 55],
          [12, 55],
          [12, 56],
          [12, 56],
          [13, 1280],
          [13, 1344],
          [13, 1408],
          [13, 1472],
          [12, 59],
          [12, 59],
          [12, 60],
          [12, 60],
          [13, 1536],
          [13, 1600],
          [11, 24],
          [11, 24],
          [11, 24],
          [11, 24],
          [11, 25],
          [11, 25],
          [11, 25],
          [11, 25],
          [13, 1664],
          [13, 1728],
          [12, 320],
          [12, 320],
          [12, 384],
          [12, 384],
          [12, 448],
          [12, 448],
          [13, 512],
          [13, 576],
          [12, 53],
          [12, 53],
          [12, 54],
          [12, 54],
          [13, 896],
          [13, 960],
          [13, 1024],
          [13, 1088],
          [13, 1152],
          [13, 1216],
          [10, 64],
          [10, 64],
          [10, 64],
          [10, 64],
          [10, 64],
          [10, 64],
          [10, 64],
          [10, 64],
        ];
        const blackTable2 = [
          [8, 13],
          [8, 13],
          [8, 13],
          [8, 13],
          [8, 13],
          [8, 13],
          [8, 13],
          [8, 13],
          [8, 13],
          [8, 13],
          [8, 13],
          [8, 13],
          [8, 13],
          [8, 13],
          [8, 13],
          [8, 13],
          [11, 23],
          [11, 23],
          [12, 50],
          [12, 51],
          [12, 44],
          [12, 45],
          [12, 46],
          [12, 47],
          [12, 57],
          [12, 58],
          [12, 61],
          [12, 256],
          [10, 16],
          [10, 16],
          [10, 16],
          [10, 16],
          [10, 17],
          [10, 17],
          [10, 17],
          [10, 17],
          [12, 48],
          [12, 49],
          [12, 62],
          [12, 63],
          [12, 30],
          [12, 31],
          [12, 32],
          [12, 33],
          [12, 40],
          [12, 41],
          [11, 22],
          [11, 22],
          [8, 14],
          [8, 14],
          [8, 14],
          [8, 14],
          [8, 14],
          [8, 14],
          [8, 14],
          [8, 14],
          [8, 14],
          [8, 14],
          [8, 14],
          [8, 14],
          [8, 14],
          [8, 14],
          [8, 14],
          [8, 14],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 10],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [7, 11],
          [9, 15],
          [9, 15],
          [9, 15],
          [9, 15],
          [9, 15],
          [9, 15],
          [9, 15],
          [9, 15],
          [12, 128],
          [12, 192],
          [12, 26],
          [12, 27],
          [12, 28],
          [12, 29],
          [11, 19],
          [11, 19],
          [11, 20],
          [11, 20],
          [12, 34],
          [12, 35],
          [12, 36],
          [12, 37],
          [12, 38],
          [12, 39],
          [11, 21],
          [11, 21],
          [12, 42],
          [12, 43],
          [10, 0],
          [10, 0],
          [10, 0],
          [10, 0],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
          [7, 12],
        ];
        const blackTable3 = [
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [-1, -1],
          [6, 9],
          [6, 8],
          [5, 7],
          [5, 7],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 6],
          [4, 5],
          [4, 5],
          [4, 5],
          [4, 5],
          [3, 1],
          [3, 1],
          [3, 1],
          [3, 1],
          [3, 1],
          [3, 1],
          [3, 1],
          [3, 1],
          [3, 4],
          [3, 4],
          [3, 4],
          [3, 4],
          [3, 4],
          [3, 4],
          [3, 4],
          [3, 4],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 3],
          [2, 2],
          [2, 2],
          [2, 2],
          [2, 2],
          [2, 2],
          [2, 2],
          [2, 2],
          [2, 2],
          [2, 2],
          [2, 2],
          [2, 2],
          [2, 2],
          [2, 2],
          [2, 2],
          [2, 2],
          [2, 2],
        ];
        class CCITTFaxDecoder {
          constructor(source, options = {}) {
            if (!source || typeof source.next !== "function") {
              throw new Error('CCITTFaxDecoder - invalid "source" parameter.');
            }
            this.source = source;
            this.eof = false;
            this.encoding = options.K || 0;
            this.eoline = options.EndOfLine || false;
            this.byteAlign = options.EncodedByteAlign || false;
            this.columns = options.Columns || 1728;
            this.rows = options.Rows || 0;
            this.eoblock = options.EndOfBlock ?? true;
            this.black = options.BlackIs1 || false;
            this.codingLine = new Uint32Array(this.columns + 1);
            this.refLine = new Uint32Array(this.columns + 2);
            this.codingLine[0] = this.columns;
            this.codingPos = 0;
            this.row = 0;
            this.nextLine2D = this.encoding < 0;
            this.inputBits = 0;
            this.inputBuf = 0;
            this.outputBits = 0;
            this.rowsDone = false;
            let code1;
            while ((code1 = this._lookBits(12)) === 0) {
              this._eatBits(1);
            }
            if (code1 === 1) {
              this._eatBits(12);
            }
            if (this.encoding > 0) {
              this.nextLine2D = !this._lookBits(1);
              this._eatBits(1);
            }
          }
          readNextChar() {
            if (this.eof) {
              return -1;
            }
            const refLine = this.refLine;
            const codingLine = this.codingLine;
            const columns = this.columns;
            let refPos, blackPixels, bits, i;
            if (this.outputBits === 0) {
              if (this.rowsDone) {
                this.eof = true;
              }
              if (this.eof) {
                return -1;
              }
              this.err = false;
              let code1, code2, code3;
              if (this.nextLine2D) {
                for (i = 0; codingLine[i] < columns; ++i) {
                  refLine[i] = codingLine[i];
                }
                refLine[i++] = columns;
                refLine[i] = columns;
                codingLine[0] = 0;
                this.codingPos = 0;
                refPos = 0;
                blackPixels = 0;
                while (codingLine[this.codingPos] < columns) {
                  code1 = this._getTwoDimCode();
                  switch (code1) {
                    case twoDimPass:
                      this._addPixels(refLine[refPos + 1], blackPixels);
                      if (refLine[refPos + 1] < columns) {
                        refPos += 2;
                      }
                      break;
                    case twoDimHoriz:
                      code1 = code2 = 0;
                      if (blackPixels) {
                        do {
                          code1 += code3 = this._getBlackCode();
                        } while (code3 >= 64);
                        do {
                          code2 += code3 = this._getWhiteCode();
                        } while (code3 >= 64);
                      } else {
                        do {
                          code1 += code3 = this._getWhiteCode();
                        } while (code3 >= 64);
                        do {
                          code2 += code3 = this._getBlackCode();
                        } while (code3 >= 64);
                      }
                      this._addPixels(
                        codingLine[this.codingPos] + code1,
                        blackPixels
                      );
                      if (codingLine[this.codingPos] < columns) {
                        this._addPixels(
                          codingLine[this.codingPos] + code2,
                          blackPixels ^ 1
                        );
                      }
                      while (
                        refLine[refPos] <= codingLine[this.codingPos] &&
                        refLine[refPos] < columns
                      ) {
                        refPos += 2;
                      }
                      break;
                    case twoDimVertR3:
                      this._addPixels(refLine[refPos] + 3, blackPixels);
                      blackPixels ^= 1;
                      if (codingLine[this.codingPos] < columns) {
                        ++refPos;
                        while (
                          refLine[refPos] <= codingLine[this.codingPos] &&
                          refLine[refPos] < columns
                        ) {
                          refPos += 2;
                        }
                      }
                      break;
                    case twoDimVertR2:
                      this._addPixels(refLine[refPos] + 2, blackPixels);
                      blackPixels ^= 1;
                      if (codingLine[this.codingPos] < columns) {
                        ++refPos;
                        while (
                          refLine[refPos] <= codingLine[this.codingPos] &&
                          refLine[refPos] < columns
                        ) {
                          refPos += 2;
                        }
                      }
                      break;
                    case twoDimVertR1:
                      this._addPixels(refLine[refPos] + 1, blackPixels);
                      blackPixels ^= 1;
                      if (codingLine[this.codingPos] < columns) {
                        ++refPos;
                        while (
                          refLine[refPos] <= codingLine[this.codingPos] &&
                          refLine[refPos] < columns
                        ) {
                          refPos += 2;
                        }
                      }
                      break;
                    case twoDimVert0:
                      this._addPixels(refLine[refPos], blackPixels);
                      blackPixels ^= 1;
                      if (codingLine[this.codingPos] < columns) {
                        ++refPos;
                        while (
                          refLine[refPos] <= codingLine[this.codingPos] &&
                          refLine[refPos] < columns
                        ) {
                          refPos += 2;
                        }
                      }
                      break;
                    case twoDimVertL3:
                      this._addPixelsNeg(refLine[refPos] - 3, blackPixels);
                      blackPixels ^= 1;
                      if (codingLine[this.codingPos] < columns) {
                        if (refPos > 0) {
                          --refPos;
                        } else {
                          ++refPos;
                        }
                        while (
                          refLine[refPos] <= codingLine[this.codingPos] &&
                          refLine[refPos] < columns
                        ) {
                          refPos += 2;
                        }
                      }
                      break;
                    case twoDimVertL2:
                      this._addPixelsNeg(refLine[refPos] - 2, blackPixels);
                      blackPixels ^= 1;
                      if (codingLine[this.codingPos] < columns) {
                        if (refPos > 0) {
                          --refPos;
                        } else {
                          ++refPos;
                        }
                        while (
                          refLine[refPos] <= codingLine[this.codingPos] &&
                          refLine[refPos] < columns
                        ) {
                          refPos += 2;
                        }
                      }
                      break;
                    case twoDimVertL1:
                      this._addPixelsNeg(refLine[refPos] - 1, blackPixels);
                      blackPixels ^= 1;
                      if (codingLine[this.codingPos] < columns) {
                        if (refPos > 0) {
                          --refPos;
                        } else {
                          ++refPos;
                        }
                        while (
                          refLine[refPos] <= codingLine[this.codingPos] &&
                          refLine[refPos] < columns
                        ) {
                          refPos += 2;
                        }
                      }
                      break;
                    case ccittEOF:
                      this._addPixels(columns, 0);
                      this.eof = true;
                      break;
                    default:
                      (0, _util.info)("bad 2d code");
                      this._addPixels(columns, 0);
                      this.err = true;
                  }
                }
              } else {
                codingLine[0] = 0;
                this.codingPos = 0;
                blackPixels = 0;
                while (codingLine[this.codingPos] < columns) {
                  code1 = 0;
                  if (blackPixels) {
                    do {
                      code1 += code3 = this._getBlackCode();
                    } while (code3 >= 64);
                  } else {
                    do {
                      code1 += code3 = this._getWhiteCode();
                    } while (code3 >= 64);
                  }
                  this._addPixels(
                    codingLine[this.codingPos] + code1,
                    blackPixels
                  );
                  blackPixels ^= 1;
                }
              }
              let gotEOL = false;
              if (this.byteAlign) {
                this.inputBits &= ~7;
              }
              if (!this.eoblock && this.row === this.rows - 1) {
                this.rowsDone = true;
              } else {
                code1 = this._lookBits(12);
                if (this.eoline) {
                  while (code1 !== ccittEOF && code1 !== 1) {
                    this._eatBits(1);
                    code1 = this._lookBits(12);
                  }
                } else {
                  while (code1 === 0) {
                    this._eatBits(1);
                    code1 = this._lookBits(12);
                  }
                }
                if (code1 === 1) {
                  this._eatBits(12);
                  gotEOL = true;
                } else if (code1 === ccittEOF) {
                  this.eof = true;
                }
              }
              if (!this.eof && this.encoding > 0 && !this.rowsDone) {
                this.nextLine2D = !this._lookBits(1);
                this._eatBits(1);
              }
              if (this.eoblock && gotEOL && this.byteAlign) {
                code1 = this._lookBits(12);
                if (code1 === 1) {
                  this._eatBits(12);
                  if (this.encoding > 0) {
                    this._lookBits(1);
                    this._eatBits(1);
                  }
                  if (this.encoding >= 0) {
                    for (i = 0; i < 4; ++i) {
                      code1 = this._lookBits(12);
                      if (code1 !== 1) {
                        (0, _util.info)("bad rtc code: " + code1);
                      }
                      this._eatBits(12);
                      if (this.encoding > 0) {
                        this._lookBits(1);
                        this._eatBits(1);
                      }
                    }
                  }
                  this.eof = true;
                }
              } else if (this.err && this.eoline) {
                while (true) {
                  code1 = this._lookBits(13);
                  if (code1 === ccittEOF) {
                    this.eof = true;
                    return -1;
                  }
                  if (code1 >> 1 === 1) {
                    break;
                  }
                  this._eatBits(1);
                }
                this._eatBits(12);
                if (this.encoding > 0) {
                  this._eatBits(1);
                  this.nextLine2D = !(code1 & 1);
                }
              }
              this.outputBits =
                codingLine[0] > 0
                  ? codingLine[(this.codingPos = 0)]
                  : codingLine[(this.codingPos = 1)];
              this.row++;
            }
            let c;
            if (this.outputBits >= 8) {
              c = this.codingPos & 1 ? 0 : 0xff;
              this.outputBits -= 8;
              if (
                this.outputBits === 0 &&
                codingLine[this.codingPos] < columns
              ) {
                this.codingPos++;
                this.outputBits =
                  codingLine[this.codingPos] - codingLine[this.codingPos - 1];
              }
            } else {
              bits = 8;
              c = 0;
              do {
                if (typeof this.outputBits !== "number") {
                  throw new _util.FormatError(
                    'Invalid /CCITTFaxDecode data, "outputBits" must be a number.'
                  );
                }
                if (this.outputBits > bits) {
                  c <<= bits;
                  if (!(this.codingPos & 1)) {
                    c |= 0xff >> (8 - bits);
                  }
                  this.outputBits -= bits;
                  bits = 0;
                } else {
                  c <<= this.outputBits;
                  if (!(this.codingPos & 1)) {
                    c |= 0xff >> (8 - this.outputBits);
                  }
                  bits -= this.outputBits;
                  this.outputBits = 0;
                  if (codingLine[this.codingPos] < columns) {
                    this.codingPos++;
                    this.outputBits =
                      codingLine[this.codingPos] -
                      codingLine[this.codingPos - 1];
                  } else if (bits > 0) {
                    c <<= bits;
                    bits = 0;
                  }
                }
              } while (bits);
            }
            if (this.black) {
              c ^= 0xff;
            }
            return c;
          }
          _addPixels(a1, blackPixels) {
            const codingLine = this.codingLine;
            let codingPos = this.codingPos;
            if (a1 > codingLine[codingPos]) {
              if (a1 > this.columns) {
                (0, _util.info)("row is wrong length");
                this.err = true;
                a1 = this.columns;
              }
              if ((codingPos & 1) ^ blackPixels) {
                ++codingPos;
              }
              codingLine[codingPos] = a1;
            }
            this.codingPos = codingPos;
          }
          _addPixelsNeg(a1, blackPixels) {
            const codingLine = this.codingLine;
            let codingPos = this.codingPos;
            if (a1 > codingLine[codingPos]) {
              if (a1 > this.columns) {
                (0, _util.info)("row is wrong length");
                this.err = true;
                a1 = this.columns;
              }
              if ((codingPos & 1) ^ blackPixels) {
                ++codingPos;
              }
              codingLine[codingPos] = a1;
            } else if (a1 < codingLine[codingPos]) {
              if (a1 < 0) {
                (0, _util.info)("invalid code");
                this.err = true;
                a1 = 0;
              }
              while (codingPos > 0 && a1 < codingLine[codingPos - 1]) {
                --codingPos;
              }
              codingLine[codingPos] = a1;
            }
            this.codingPos = codingPos;
          }
          _findTableCode(start, end, table, limit) {
            const limitValue = limit || 0;
            for (let i = start; i <= end; ++i) {
              let code = this._lookBits(i);
              if (code === ccittEOF) {
                return [true, 1, false];
              }
              if (i < end) {
                code <<= end - i;
              }
              if (!limitValue || code >= limitValue) {
                const p = table[code - limitValue];
                if (p[0] === i) {
                  this._eatBits(i);
                  return [true, p[1], true];
                }
              }
            }
            return [false, 0, false];
          }
          _getTwoDimCode() {
            let code = 0;
            let p;
            if (this.eoblock) {
              code = this._lookBits(7);
              p = twoDimTable[code];
              if (p?.[0] > 0) {
                this._eatBits(p[0]);
                return p[1];
              }
            } else {
              const result = this._findTableCode(1, 7, twoDimTable);
              if (result[0] && result[2]) {
                return result[1];
              }
            }
            (0, _util.info)("Bad two dim code");
            return ccittEOF;
          }
          _getWhiteCode() {
            let code = 0;
            let p;
            if (this.eoblock) {
              code = this._lookBits(12);
              if (code === ccittEOF) {
                return 1;
              }
              p = code >> 5 === 0 ? whiteTable1[code] : whiteTable2[code >> 3];
              if (p[0] > 0) {
                this._eatBits(p[0]);
                return p[1];
              }
            } else {
              let result = this._findTableCode(1, 9, whiteTable2);
              if (result[0]) {
                return result[1];
              }
              result = this._findTableCode(11, 12, whiteTable1);
              if (result[0]) {
                return result[1];
              }
            }
            (0, _util.info)("bad white code");
            this._eatBits(1);
            return 1;
          }
          _getBlackCode() {
            let code, p;
            if (this.eoblock) {
              code = this._lookBits(13);
              if (code === ccittEOF) {
                return 1;
              }
              if (code >> 7 === 0) {
                p = blackTable1[code];
              } else if (code >> 9 === 0 && code >> 7 !== 0) {
                p = blackTable2[(code >> 1) - 64];
              } else {
                p = blackTable3[code >> 7];
              }
              if (p[0] > 0) {
                this._eatBits(p[0]);
                return p[1];
              }
            } else {
              let result = this._findTableCode(2, 6, blackTable3);
              if (result[0]) {
                return result[1];
              }
              result = this._findTableCode(7, 12, blackTable2, 64);
              if (result[0]) {
                return result[1];
              }
              result = this._findTableCode(10, 13, blackTable1);
              if (result[0]) {
                return result[1];
              }
            }
            (0, _util.info)("bad black code");
            this._eatBits(1);
            return 1;
          }
          _lookBits(n) {
            let c;
            while (this.inputBits < n) {
              if ((c = this.source.next()) === -1) {
                if (this.inputBits === 0) {
                  return ccittEOF;
                }
                return (
                  (this.inputBuf << (n - this.inputBits)) & (0xffff >> (16 - n))
                );
              }
              this.inputBuf = (this.inputBuf << 8) | c;
              this.inputBits += 8;
            }
            return (
              (this.inputBuf >> (this.inputBits - n)) & (0xffff >> (16 - n))
            );
          }
          _eatBits(n) {
            if ((this.inputBits -= n) < 0) {
              this.inputBits = 0;
            }
          }
        }
        exports.CCITTFaxDecoder = CCITTFaxDecoder;

        /***/
      },
      /* 22 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.FlateStream = void 0;
        var _decode_stream = __w_pdfjs_require__(18);
        var _util = __w_pdfjs_require__(2);
        const codeLenCodeMap = new Int32Array([
          16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
        ]);
        const lengthDecode = new Int32Array([
          0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009,
          0x0000a, 0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017,
          0x2001b, 0x2001f, 0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043,
          0x40053, 0x40063, 0x40073, 0x50083, 0x500a3, 0x500c3, 0x500e3,
          0x00102, 0x00102, 0x00102,
        ]);
        const distDecode = new Int32Array([
          0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009,
          0x2000d, 0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061,
          0x60081, 0x600c1, 0x70101, 0x70181, 0x80201, 0x80301, 0x90401,
          0x90601, 0xa0801, 0xa0c01, 0xb1001, 0xb1801, 0xc2001, 0xc3001,
          0xd4001, 0xd6001,
        ]);
        const fixedLitCodeTab = [
          new Int32Array([
            0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030,
            0x900c0, 0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080,
            0x80040, 0x900e0, 0x70104, 0x80058, 0x80018, 0x90090, 0x70114,
            0x80078, 0x80038, 0x900d0, 0x7010c, 0x80068, 0x80028, 0x900b0,
            0x80008, 0x80088, 0x80048, 0x900f0, 0x70102, 0x80054, 0x80014,
            0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8, 0x7010a, 0x80064,
            0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8, 0x70106,
            0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8,
            0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c,
            0x900f8, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072,
            0x80032, 0x900c4, 0x70109, 0x80062, 0x80022, 0x900a4, 0x80002,
            0x80082, 0x80042, 0x900e4, 0x70105, 0x8005a, 0x8001a, 0x90094,
            0x70115, 0x8007a, 0x8003a, 0x900d4, 0x7010d, 0x8006a, 0x8002a,
            0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4, 0x70103, 0x80056,
            0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc, 0x7010b,
            0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec,
            0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e,
            0x900dc, 0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e,
            0x8004e, 0x900fc, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110,
            0x80071, 0x80031, 0x900c2, 0x70108, 0x80061, 0x80021, 0x900a2,
            0x80001, 0x80081, 0x80041, 0x900e2, 0x70104, 0x80059, 0x80019,
            0x90092, 0x70114, 0x80079, 0x80039, 0x900d2, 0x7010c, 0x80069,
            0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2, 0x70102,
            0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca,
            0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045,
            0x900ea, 0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d,
            0x8003d, 0x900da, 0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d,
            0x8008d, 0x8004d, 0x900fa, 0x70101, 0x80053, 0x80013, 0x8011b,
            0x70111, 0x80073, 0x80033, 0x900c6, 0x70109, 0x80063, 0x80023,
            0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6, 0x70105, 0x8005b,
            0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6, 0x7010d,
            0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6,
            0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037,
            0x900ce, 0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087,
            0x80047, 0x900ee, 0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117,
            0x8007f, 0x8003f, 0x900de, 0x7010f, 0x8006f, 0x8002f, 0x900be,
            0x8000f, 0x8008f, 0x8004f, 0x900fe, 0x70100, 0x80050, 0x80010,
            0x80118, 0x70110, 0x80070, 0x80030, 0x900c1, 0x70108, 0x80060,
            0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1, 0x70104,
            0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1,
            0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048,
            0x900f1, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074,
            0x80034, 0x900c9, 0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004,
            0x80084, 0x80044, 0x900e9, 0x70106, 0x8005c, 0x8001c, 0x90099,
            0x70116, 0x8007c, 0x8003c, 0x900d9, 0x7010e, 0x8006c, 0x8002c,
            0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9, 0x70101, 0x80052,
            0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5, 0x70109,
            0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5,
            0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a,
            0x900d5, 0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a,
            0x8004a, 0x900f5, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113,
            0x80076, 0x80036, 0x900cd, 0x7010b, 0x80066, 0x80026, 0x900ad,
            0x80006, 0x80086, 0x80046, 0x900ed, 0x70107, 0x8005e, 0x8001e,
            0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd, 0x7010f, 0x8006e,
            0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd, 0x70100,
            0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3,
            0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041,
            0x900e3, 0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079,
            0x80039, 0x900d3, 0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009,
            0x80089, 0x80049, 0x900f3, 0x70102, 0x80055, 0x80015, 0x8011d,
            0x70112, 0x80075, 0x80035, 0x900cb, 0x7010a, 0x80065, 0x80025,
            0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb, 0x70106, 0x8005d,
            0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db, 0x7010e,
            0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb,
            0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033,
            0x900c7, 0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083,
            0x80043, 0x900e7, 0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115,
            0x8007b, 0x8003b, 0x900d7, 0x7010d, 0x8006b, 0x8002b, 0x900b7,
            0x8000b, 0x8008b, 0x8004b, 0x900f7, 0x70103, 0x80057, 0x80017,
            0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf, 0x7010b, 0x80067,
            0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef, 0x70107,
            0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df,
            0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f,
            0x900ff,
          ]),
          9,
        ];
        const fixedDistCodeTab = [
          new Int32Array([
            0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c,
            0x5001c, 0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016,
            0x5000e, 0x00000, 0x50001, 0x50011, 0x50009, 0x50019, 0x50005,
            0x50015, 0x5000d, 0x5001d, 0x50003, 0x50013, 0x5000b, 0x5001b,
            0x50007, 0x50017, 0x5000f, 0x00000,
          ]),
          5,
        ];
        class FlateStream extends _decode_stream.DecodeStream {
          constructor(str, maybeLength) {
            super(maybeLength);
            this.str = str;
            this.dict = str.dict;
            const cmf = str.getByte();
            const flg = str.getByte();
            if (cmf === -1 || flg === -1) {
              throw new _util.FormatError(
                `Invalid header in flate stream: ${cmf}, ${flg}`
              );
            }
            if ((cmf & 0x0f) !== 0x08) {
              throw new _util.FormatError(
                `Unknown compression method in flate stream: ${cmf}, ${flg}`
              );
            }
            if (((cmf << 8) + flg) % 31 !== 0) {
              throw new _util.FormatError(
                `Bad FCHECK in flate stream: ${cmf}, ${flg}`
              );
            }
            if (flg & 0x20) {
              throw new _util.FormatError(
                `FDICT bit set in flate stream: ${cmf}, ${flg}`
              );
            }
            this.codeSize = 0;
            this.codeBuf = 0;
          }
          getBits(bits) {
            const str = this.str;
            let codeSize = this.codeSize;
            let codeBuf = this.codeBuf;
            let b;
            while (codeSize < bits) {
              if ((b = str.getByte()) === -1) {
                throw new _util.FormatError("Bad encoding in flate stream");
              }
              codeBuf |= b << codeSize;
              codeSize += 8;
            }
            b = codeBuf & ((1 << bits) - 1);
            this.codeBuf = codeBuf >> bits;
            this.codeSize = codeSize -= bits;
            return b;
          }
          getCode(table) {
            const str = this.str;
            const codes = table[0];
            const maxLen = table[1];
            let codeSize = this.codeSize;
            let codeBuf = this.codeBuf;
            let b;
            while (codeSize < maxLen) {
              if ((b = str.getByte()) === -1) {
                break;
              }
              codeBuf |= b << codeSize;
              codeSize += 8;
            }
            const code = codes[codeBuf & ((1 << maxLen) - 1)];
            const codeLen = code >> 16;
            const codeVal = code & 0xffff;
            if (codeLen < 1 || codeSize < codeLen) {
              throw new _util.FormatError("Bad encoding in flate stream");
            }
            this.codeBuf = codeBuf >> codeLen;
            this.codeSize = codeSize - codeLen;
            return codeVal;
          }
          generateHuffmanTable(lengths) {
            const n = lengths.length;
            let maxLen = 0;
            let i;
            for (i = 0; i < n; ++i) {
              if (lengths[i] > maxLen) {
                maxLen = lengths[i];
              }
            }
            const size = 1 << maxLen;
            const codes = new Int32Array(size);
            for (
              let len = 1, code = 0, skip = 2;
              len <= maxLen;
              ++len, code <<= 1, skip <<= 1
            ) {
              for (let val = 0; val < n; ++val) {
                if (lengths[val] === len) {
                  let code2 = 0;
                  let t = code;
                  for (i = 0; i < len; ++i) {
                    code2 = (code2 << 1) | (t & 1);
                    t >>= 1;
                  }
                  for (i = code2; i < size; i += skip) {
                    codes[i] = (len << 16) | val;
                  }
                  ++code;
                }
              }
            }
            return [codes, maxLen];
          }
          readBlock() {
            let buffer, len;
            const str = this.str;
            let hdr = this.getBits(3);
            if (hdr & 1) {
              this.eof = true;
            }
            hdr >>= 1;
            if (hdr === 0) {
              let b;
              if ((b = str.getByte()) === -1) {
                throw new _util.FormatError("Bad block header in flate stream");
              }
              let blockLen = b;
              if ((b = str.getByte()) === -1) {
                throw new _util.FormatError("Bad block header in flate stream");
              }
              blockLen |= b << 8;
              if ((b = str.getByte()) === -1) {
                throw new _util.FormatError("Bad block header in flate stream");
              }
              let check = b;
              if ((b = str.getByte()) === -1) {
                throw new _util.FormatError("Bad block header in flate stream");
              }
              check |= b << 8;
              if (
                check !== (~blockLen & 0xffff) &&
                (blockLen !== 0 || check !== 0)
              ) {
                throw new _util.FormatError(
                  "Bad uncompressed block length in flate stream"
                );
              }
              this.codeBuf = 0;
              this.codeSize = 0;
              const bufferLength = this.bufferLength,
                end = bufferLength + blockLen;
              buffer = this.ensureBuffer(end);
              this.bufferLength = end;
              if (blockLen === 0) {
                if (str.peekByte() === -1) {
                  this.eof = true;
                }
              } else {
                const block = str.getBytes(blockLen);
                buffer.set(block, bufferLength);
                if (block.length < blockLen) {
                  this.eof = true;
                }
              }
              return;
            }
            let litCodeTable;
            let distCodeTable;
            if (hdr === 1) {
              litCodeTable = fixedLitCodeTab;
              distCodeTable = fixedDistCodeTab;
            } else if (hdr === 2) {
              const numLitCodes = this.getBits(5) + 257;
              const numDistCodes = this.getBits(5) + 1;
              const numCodeLenCodes = this.getBits(4) + 4;
              const codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);
              let i;
              for (i = 0; i < numCodeLenCodes; ++i) {
                codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);
              }
              const codeLenCodeTab =
                this.generateHuffmanTable(codeLenCodeLengths);
              len = 0;
              i = 0;
              const codes = numLitCodes + numDistCodes;
              const codeLengths = new Uint8Array(codes);
              let bitsLength, bitsOffset, what;
              while (i < codes) {
                const code = this.getCode(codeLenCodeTab);
                if (code === 16) {
                  bitsLength = 2;
                  bitsOffset = 3;
                  what = len;
                } else if (code === 17) {
                  bitsLength = 3;
                  bitsOffset = 3;
                  what = len = 0;
                } else if (code === 18) {
                  bitsLength = 7;
                  bitsOffset = 11;
                  what = len = 0;
                } else {
                  codeLengths[i++] = len = code;
                  continue;
                }
                let repeatLength = this.getBits(bitsLength) + bitsOffset;
                while (repeatLength-- > 0) {
                  codeLengths[i++] = what;
                }
              }
              litCodeTable = this.generateHuffmanTable(
                codeLengths.subarray(0, numLitCodes)
              );
              distCodeTable = this.generateHuffmanTable(
                codeLengths.subarray(numLitCodes, codes)
              );
            } else {
              throw new _util.FormatError("Unknown block type in flate stream");
            }
            buffer = this.buffer;
            let limit = buffer ? buffer.length : 0;
            let pos = this.bufferLength;
            while (true) {
              let code1 = this.getCode(litCodeTable);
              if (code1 < 256) {
                if (pos + 1 >= limit) {
                  buffer = this.ensureBuffer(pos + 1);
                  limit = buffer.length;
                }
                buffer[pos++] = code1;
                continue;
              }
              if (code1 === 256) {
                this.bufferLength = pos;
                return;
              }
              code1 -= 257;
              code1 = lengthDecode[code1];
              let code2 = code1 >> 16;
              if (code2 > 0) {
                code2 = this.getBits(code2);
              }
              len = (code1 & 0xffff) + code2;
              code1 = this.getCode(distCodeTable);
              code1 = distDecode[code1];
              code2 = code1 >> 16;
              if (code2 > 0) {
                code2 = this.getBits(code2);
              }
              const dist = (code1 & 0xffff) + code2;
              if (pos + len >= limit) {
                buffer = this.ensureBuffer(pos + len);
                limit = buffer.length;
              }
              for (let k = 0; k < len; ++k, ++pos) {
                buffer[pos] = buffer[pos - dist];
              }
            }
          }
        }
        exports.FlateStream = FlateStream;

        /***/
      },
      /* 23 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.Jbig2Stream = void 0;
        var _base_stream = __w_pdfjs_require__(5);
        var _decode_stream = __w_pdfjs_require__(18);
        var _primitives = __w_pdfjs_require__(4);
        var _jbig = __w_pdfjs_require__(24);
        var _util = __w_pdfjs_require__(2);
        class Jbig2Stream extends _decode_stream.DecodeStream {
          constructor(stream, maybeLength, params) {
            super(maybeLength);
            this.stream = stream;
            this.dict = stream.dict;
            this.maybeLength = maybeLength;
            this.params = params;
          }
          get bytes() {
            return (0, _util.shadow)(
              this,
              "bytes",
              this.stream.getBytes(this.maybeLength)
            );
          }
          ensureBuffer(requested) {}
          readBlock() {
            if (this.eof) {
              return;
            }
            const jbig2Image = new _jbig.Jbig2Image();
            const chunks = [];
            if (this.params instanceof _primitives.Dict) {
              const globalsStream = this.params.get("JBIG2Globals");
              if (globalsStream instanceof _base_stream.BaseStream) {
                const globals = globalsStream.getBytes();
                chunks.push({
                  data: globals,
                  start: 0,
                  end: globals.length,
                });
              }
            }
            chunks.push({
              data: this.bytes,
              start: 0,
              end: this.bytes.length,
            });
            const data = jbig2Image.parseChunks(chunks);
            const dataLength = data.length;
            for (let i = 0; i < dataLength; i++) {
              data[i] ^= 0xff;
            }
            this.buffer = data;
            this.bufferLength = dataLength;
            this.eof = true;
          }
        }
        exports.Jbig2Stream = Jbig2Stream;

        /***/
      },
      /* 24 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.Jbig2Image = void 0;
        var _util = __w_pdfjs_require__(2);
        var _core_utils = __w_pdfjs_require__(3);
        var _arithmetic_decoder = __w_pdfjs_require__(25);
        var _ccitt = __w_pdfjs_require__(21);
        class Jbig2Error extends _util.BaseException {
          constructor(msg) {
            super(`JBIG2 error: ${msg}`, "Jbig2Error");
          }
        }
        class ContextCache {
          getContexts(id) {
            if (id in this) {
              return this[id];
            }
            return (this[id] = new Int8Array(1 << 16));
          }
        }
        class DecodingContext {
          constructor(data, start, end) {
            this.data = data;
            this.start = start;
            this.end = end;
          }
          get decoder() {
            const decoder = new _arithmetic_decoder.ArithmeticDecoder(
              this.data,
              this.start,
              this.end
            );
            return (0, _util.shadow)(this, "decoder", decoder);
          }
          get contextCache() {
            const cache = new ContextCache();
            return (0, _util.shadow)(this, "contextCache", cache);
          }
        }
        const MAX_INT_32 = 2 ** 31 - 1;
        const MIN_INT_32 = -(2 ** 31);
        function decodeInteger(contextCache, procedure, decoder) {
          const contexts = contextCache.getContexts(procedure);
          let prev = 1;
          function readBits(length) {
            let v = 0;
            for (let i = 0; i < length; i++) {
              const bit = decoder.readBit(contexts, prev);
              prev =
                prev < 256
                  ? (prev << 1) | bit
                  : (((prev << 1) | bit) & 511) | 256;
              v = (v << 1) | bit;
            }
            return v >>> 0;
          }
          const sign = readBits(1);
          const value = readBits(1)
            ? readBits(1)
              ? readBits(1)
                ? readBits(1)
                  ? readBits(1)
                    ? readBits(32) + 4436
                    : readBits(12) + 340
                  : readBits(8) + 84
                : readBits(6) + 20
              : readBits(4) + 4
            : readBits(2);
          let signedValue;
          if (sign === 0) {
            signedValue = value;
          } else if (value > 0) {
            signedValue = -value;
          }
          if (signedValue >= MIN_INT_32 && signedValue <= MAX_INT_32) {
            return signedValue;
          }
          return null;
        }
        function decodeIAID(contextCache, decoder, codeLength) {
          const contexts = contextCache.getContexts("IAID");
          let prev = 1;
          for (let i = 0; i < codeLength; i++) {
            const bit = decoder.readBit(contexts, prev);
            prev = (prev << 1) | bit;
          }
          if (codeLength < 31) {
            return prev & ((1 << codeLength) - 1);
          }
          return prev & 0x7fffffff;
        }
        const SegmentTypes = [
          "SymbolDictionary",
          null,
          null,
          null,
          "IntermediateTextRegion",
          null,
          "ImmediateTextRegion",
          "ImmediateLosslessTextRegion",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          "PatternDictionary",
          null,
          null,
          null,
          "IntermediateHalftoneRegion",
          null,
          "ImmediateHalftoneRegion",
          "ImmediateLosslessHalftoneRegion",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          "IntermediateGenericRegion",
          null,
          "ImmediateGenericRegion",
          "ImmediateLosslessGenericRegion",
          "IntermediateGenericRefinementRegion",
          null,
          "ImmediateGenericRefinementRegion",
          "ImmediateLosslessGenericRefinementRegion",
          null,
          null,
          null,
          null,
          "PageInformation",
          "EndOfPage",
          "EndOfStripe",
          "EndOfFile",
          "Profiles",
          "Tables",
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          "Extension",
        ];
        const CodingTemplates = [
          [
            {
              x: -1,
              y: -2,
            },
            {
              x: 0,
              y: -2,
            },
            {
              x: 1,
              y: -2,
            },
            {
              x: -2,
              y: -1,
            },
            {
              x: -1,
              y: -1,
            },
            {
              x: 0,
              y: -1,
            },
            {
              x: 1,
              y: -1,
            },
            {
              x: 2,
              y: -1,
            },
            {
              x: -4,
              y: 0,
            },
            {
              x: -3,
              y: 0,
            },
            {
              x: -2,
              y: 0,
            },
            {
              x: -1,
              y: 0,
            },
          ],
          [
            {
              x: -1,
              y: -2,
            },
            {
              x: 0,
              y: -2,
            },
            {
              x: 1,
              y: -2,
            },
            {
              x: 2,
              y: -2,
            },
            {
              x: -2,
              y: -1,
            },
            {
              x: -1,
              y: -1,
            },
            {
              x: 0,
              y: -1,
            },
            {
              x: 1,
              y: -1,
            },
            {
              x: 2,
              y: -1,
            },
            {
              x: -3,
              y: 0,
            },
            {
              x: -2,
              y: 0,
            },
            {
              x: -1,
              y: 0,
            },
          ],
          [
            {
              x: -1,
              y: -2,
            },
            {
              x: 0,
              y: -2,
            },
            {
              x: 1,
              y: -2,
            },
            {
              x: -2,
              y: -1,
            },
            {
              x: -1,
              y: -1,
            },
            {
              x: 0,
              y: -1,
            },
            {
              x: 1,
              y: -1,
            },
            {
              x: -2,
              y: 0,
            },
            {
              x: -1,
              y: 0,
            },
          ],
          [
            {
              x: -3,
              y: -1,
            },
            {
              x: -2,
              y: -1,
            },
            {
              x: -1,
              y: -1,
            },
            {
              x: 0,
              y: -1,
            },
            {
              x: 1,
              y: -1,
            },
            {
              x: -4,
              y: 0,
            },
            {
              x: -3,
              y: 0,
            },
            {
              x: -2,
              y: 0,
            },
            {
              x: -1,
              y: 0,
            },
          ],
        ];
        const RefinementTemplates = [
          {
            coding: [
              {
                x: 0,
                y: -1,
              },
              {
                x: 1,
                y: -1,
              },
              {
                x: -1,
                y: 0,
              },
            ],
            reference: [
              {
                x: 0,
                y: -1,
              },
              {
                x: 1,
                y: -1,
              },
              {
                x: -1,
                y: 0,
              },
              {
                x: 0,
                y: 0,
              },
              {
                x: 1,
                y: 0,
              },
              {
                x: -1,
                y: 1,
              },
              {
                x: 0,
                y: 1,
              },
              {
                x: 1,
                y: 1,
              },
            ],
          },
          {
            coding: [
              {
                x: -1,
                y: -1,
              },
              {
                x: 0,
                y: -1,
              },
              {
                x: 1,
                y: -1,
              },
              {
                x: -1,
                y: 0,
              },
            ],
            reference: [
              {
                x: 0,
                y: -1,
              },
              {
                x: -1,
                y: 0,
              },
              {
                x: 0,
                y: 0,
              },
              {
                x: 1,
                y: 0,
              },
              {
                x: 0,
                y: 1,
              },
              {
                x: 1,
                y: 1,
              },
            ],
          },
        ];
        const ReusedContexts = [0x9b25, 0x0795, 0x00e5, 0x0195];
        const RefinementReusedContexts = [0x0020, 0x0008];
        function decodeBitmapTemplate0(width, height, decodingContext) {
          const decoder = decodingContext.decoder;
          const contexts = decodingContext.contextCache.getContexts("GB");
          const bitmap = [];
          let contextLabel, i, j, pixel, row, row1, row2;
          const OLD_PIXEL_MASK = 0x7bf7;
          for (i = 0; i < height; i++) {
            row = bitmap[i] = new Uint8Array(width);
            row1 = i < 1 ? row : bitmap[i - 1];
            row2 = i < 2 ? row : bitmap[i - 2];
            contextLabel =
              (row2[0] << 13) |
              (row2[1] << 12) |
              (row2[2] << 11) |
              (row1[0] << 7) |
              (row1[1] << 6) |
              (row1[2] << 5) |
              (row1[3] << 4);
            for (j = 0; j < width; j++) {
              row[j] = pixel = decoder.readBit(contexts, contextLabel);
              contextLabel =
                ((contextLabel & OLD_PIXEL_MASK) << 1) |
                (j + 3 < width ? row2[j + 3] << 11 : 0) |
                (j + 4 < width ? row1[j + 4] << 4 : 0) |
                pixel;
            }
          }
          return bitmap;
        }
        function decodeBitmap(
          mmr,
          width,
          height,
          templateIndex,
          prediction,
          skip,
          at,
          decodingContext
        ) {
          if (mmr) {
            const input = new Reader(
              decodingContext.data,
              decodingContext.start,
              decodingContext.end
            );
            return decodeMMRBitmap(input, width, height, false);
          }
          if (
            templateIndex === 0 &&
            !skip &&
            !prediction &&
            at.length === 4 &&
            at[0].x === 3 &&
            at[0].y === -1 &&
            at[1].x === -3 &&
            at[1].y === -1 &&
            at[2].x === 2 &&
            at[2].y === -2 &&
            at[3].x === -2 &&
            at[3].y === -2
          ) {
            return decodeBitmapTemplate0(width, height, decodingContext);
          }
          const useskip = !!skip;
          const template = CodingTemplates[templateIndex].concat(at);
          template.sort(function (a, b) {
            return a.y - b.y || a.x - b.x;
          });
          const templateLength = template.length;
          const templateX = new Int8Array(templateLength);
          const templateY = new Int8Array(templateLength);
          const changingTemplateEntries = [];
          let reuseMask = 0,
            minX = 0,
            maxX = 0,
            minY = 0;
          let c, k;
          for (k = 0; k < templateLength; k++) {
            templateX[k] = template[k].x;
            templateY[k] = template[k].y;
            minX = Math.min(minX, template[k].x);
            maxX = Math.max(maxX, template[k].x);
            minY = Math.min(minY, template[k].y);
            if (
              k < templateLength - 1 &&
              template[k].y === template[k + 1].y &&
              template[k].x === template[k + 1].x - 1
            ) {
              reuseMask |= 1 << (templateLength - 1 - k);
            } else {
              changingTemplateEntries.push(k);
            }
          }
          const changingEntriesLength = changingTemplateEntries.length;
          const changingTemplateX = new Int8Array(changingEntriesLength);
          const changingTemplateY = new Int8Array(changingEntriesLength);
          const changingTemplateBit = new Uint16Array(changingEntriesLength);
          for (c = 0; c < changingEntriesLength; c++) {
            k = changingTemplateEntries[c];
            changingTemplateX[c] = template[k].x;
            changingTemplateY[c] = template[k].y;
            changingTemplateBit[c] = 1 << (templateLength - 1 - k);
          }
          const sbb_left = -minX;
          const sbb_top = -minY;
          const sbb_right = width - maxX;
          const pseudoPixelContext = ReusedContexts[templateIndex];
          let row = new Uint8Array(width);
          const bitmap = [];
          const decoder = decodingContext.decoder;
          const contexts = decodingContext.contextCache.getContexts("GB");
          let ltp = 0,
            j,
            i0,
            j0,
            contextLabel = 0,
            bit,
            shift;
          for (let i = 0; i < height; i++) {
            if (prediction) {
              const sltp = decoder.readBit(contexts, pseudoPixelContext);
              ltp ^= sltp;
              if (ltp) {
                bitmap.push(row);
                continue;
              }
            }
            row = new Uint8Array(row);
            bitmap.push(row);
            for (j = 0; j < width; j++) {
              if (useskip && skip[i][j]) {
                row[j] = 0;
                continue;
              }
              if (j >= sbb_left && j < sbb_right && i >= sbb_top) {
                contextLabel = (contextLabel << 1) & reuseMask;
                for (k = 0; k < changingEntriesLength; k++) {
                  i0 = i + changingTemplateY[k];
                  j0 = j + changingTemplateX[k];
                  bit = bitmap[i0][j0];
                  if (bit) {
                    bit = changingTemplateBit[k];
                    contextLabel |= bit;
                  }
                }
              } else {
                contextLabel = 0;
                shift = templateLength - 1;
                for (k = 0; k < templateLength; k++, shift--) {
                  j0 = j + templateX[k];
                  if (j0 >= 0 && j0 < width) {
                    i0 = i + templateY[k];
                    if (i0 >= 0) {
                      bit = bitmap[i0][j0];
                      if (bit) {
                        contextLabel |= bit << shift;
                      }
                    }
                  }
                }
              }
              const pixel = decoder.readBit(contexts, contextLabel);
              row[j] = pixel;
            }
          }
          return bitmap;
        }
        function decodeRefinement(
          width,
          height,
          templateIndex,
          referenceBitmap,
          offsetX,
          offsetY,
          prediction,
          at,
          decodingContext
        ) {
          let codingTemplate = RefinementTemplates[templateIndex].coding;
          if (templateIndex === 0) {
            codingTemplate = codingTemplate.concat([at[0]]);
          }
          const codingTemplateLength = codingTemplate.length;
          const codingTemplateX = new Int32Array(codingTemplateLength);
          const codingTemplateY = new Int32Array(codingTemplateLength);
          let k;
          for (k = 0; k < codingTemplateLength; k++) {
            codingTemplateX[k] = codingTemplate[k].x;
            codingTemplateY[k] = codingTemplate[k].y;
          }
          let referenceTemplate = RefinementTemplates[templateIndex].reference;
          if (templateIndex === 0) {
            referenceTemplate = referenceTemplate.concat([at[1]]);
          }
          const referenceTemplateLength = referenceTemplate.length;
          const referenceTemplateX = new Int32Array(referenceTemplateLength);
          const referenceTemplateY = new Int32Array(referenceTemplateLength);
          for (k = 0; k < referenceTemplateLength; k++) {
            referenceTemplateX[k] = referenceTemplate[k].x;
            referenceTemplateY[k] = referenceTemplate[k].y;
          }
          const referenceWidth = referenceBitmap[0].length;
          const referenceHeight = referenceBitmap.length;
          const pseudoPixelContext = RefinementReusedContexts[templateIndex];
          const bitmap = [];
          const decoder = decodingContext.decoder;
          const contexts = decodingContext.contextCache.getContexts("GR");
          let ltp = 0;
          for (let i = 0; i < height; i++) {
            if (prediction) {
              const sltp = decoder.readBit(contexts, pseudoPixelContext);
              ltp ^= sltp;
              if (ltp) {
                throw new Jbig2Error("prediction is not supported");
              }
            }
            const row = new Uint8Array(width);
            bitmap.push(row);
            for (let j = 0; j < width; j++) {
              let i0, j0;
              let contextLabel = 0;
              for (k = 0; k < codingTemplateLength; k++) {
                i0 = i + codingTemplateY[k];
                j0 = j + codingTemplateX[k];
                if (i0 < 0 || j0 < 0 || j0 >= width) {
                  contextLabel <<= 1;
                } else {
                  contextLabel = (contextLabel << 1) | bitmap[i0][j0];
                }
              }
              for (k = 0; k < referenceTemplateLength; k++) {
                i0 = i + referenceTemplateY[k] - offsetY;
                j0 = j + referenceTemplateX[k] - offsetX;
                if (
                  i0 < 0 ||
                  i0 >= referenceHeight ||
                  j0 < 0 ||
                  j0 >= referenceWidth
                ) {
                  contextLabel <<= 1;
                } else {
                  contextLabel = (contextLabel << 1) | referenceBitmap[i0][j0];
                }
              }
              const pixel = decoder.readBit(contexts, contextLabel);
              row[j] = pixel;
            }
          }
          return bitmap;
        }
        function decodeSymbolDictionary(
          huffman,
          refinement,
          symbols,
          numberOfNewSymbols,
          numberOfExportedSymbols,
          huffmanTables,
          templateIndex,
          at,
          refinementTemplateIndex,
          refinementAt,
          decodingContext,
          huffmanInput
        ) {
          if (huffman && refinement) {
            throw new Jbig2Error(
              "symbol refinement with Huffman is not supported"
            );
          }
          const newSymbols = [];
          let currentHeight = 0;
          let symbolCodeLength = (0, _core_utils.log2)(
            symbols.length + numberOfNewSymbols
          );
          const decoder = decodingContext.decoder;
          const contextCache = decodingContext.contextCache;
          let tableB1, symbolWidths;
          if (huffman) {
            tableB1 = getStandardTable(1);
            symbolWidths = [];
            symbolCodeLength = Math.max(symbolCodeLength, 1);
          }
          while (newSymbols.length < numberOfNewSymbols) {
            const deltaHeight = huffman
              ? huffmanTables.tableDeltaHeight.decode(huffmanInput)
              : decodeInteger(contextCache, "IADH", decoder);
            currentHeight += deltaHeight;
            let currentWidth = 0,
              totalWidth = 0;
            const firstSymbol = huffman ? symbolWidths.length : 0;
            while (true) {
              const deltaWidth = huffman
                ? huffmanTables.tableDeltaWidth.decode(huffmanInput)
                : decodeInteger(contextCache, "IADW", decoder);
              if (deltaWidth === null) {
                break;
              }
              currentWidth += deltaWidth;
              totalWidth += currentWidth;
              let bitmap;
              if (refinement) {
                const numberOfInstances = decodeInteger(
                  contextCache,
                  "IAAI",
                  decoder
                );
                if (numberOfInstances > 1) {
                  bitmap = decodeTextRegion(
                    huffman,
                    refinement,
                    currentWidth,
                    currentHeight,
                    0,
                    numberOfInstances,
                    1,
                    symbols.concat(newSymbols),
                    symbolCodeLength,
                    0,
                    0,
                    1,
                    0,
                    huffmanTables,
                    refinementTemplateIndex,
                    refinementAt,
                    decodingContext,
                    0,
                    huffmanInput
                  );
                } else {
                  const symbolId = decodeIAID(
                    contextCache,
                    decoder,
                    symbolCodeLength
                  );
                  const rdx = decodeInteger(contextCache, "IARDX", decoder);
                  const rdy = decodeInteger(contextCache, "IARDY", decoder);
                  const symbol =
                    symbolId < symbols.length
                      ? symbols[symbolId]
                      : newSymbols[symbolId - symbols.length];
                  bitmap = decodeRefinement(
                    currentWidth,
                    currentHeight,
                    refinementTemplateIndex,
                    symbol,
                    rdx,
                    rdy,
                    false,
                    refinementAt,
                    decodingContext
                  );
                }
                newSymbols.push(bitmap);
              } else if (huffman) {
                symbolWidths.push(currentWidth);
              } else {
                bitmap = decodeBitmap(
                  false,
                  currentWidth,
                  currentHeight,
                  templateIndex,
                  false,
                  null,
                  at,
                  decodingContext
                );
                newSymbols.push(bitmap);
              }
            }
            if (huffman && !refinement) {
              const bitmapSize =
                huffmanTables.tableBitmapSize.decode(huffmanInput);
              huffmanInput.byteAlign();
              let collectiveBitmap;
              if (bitmapSize === 0) {
                collectiveBitmap = readUncompressedBitmap(
                  huffmanInput,
                  totalWidth,
                  currentHeight
                );
              } else {
                const originalEnd = huffmanInput.end;
                const bitmapEnd = huffmanInput.position + bitmapSize;
                huffmanInput.end = bitmapEnd;
                collectiveBitmap = decodeMMRBitmap(
                  huffmanInput,
                  totalWidth,
                  currentHeight,
                  false
                );
                huffmanInput.end = originalEnd;
                huffmanInput.position = bitmapEnd;
              }
              const numberOfSymbolsDecoded = symbolWidths.length;
              if (firstSymbol === numberOfSymbolsDecoded - 1) {
                newSymbols.push(collectiveBitmap);
              } else {
                let i,
                  y,
                  xMin = 0,
                  xMax,
                  bitmapWidth,
                  symbolBitmap;
                for (i = firstSymbol; i < numberOfSymbolsDecoded; i++) {
                  bitmapWidth = symbolWidths[i];
                  xMax = xMin + bitmapWidth;
                  symbolBitmap = [];
                  for (y = 0; y < currentHeight; y++) {
                    symbolBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));
                  }
                  newSymbols.push(symbolBitmap);
                  xMin = xMax;
                }
              }
            }
          }
          const exportedSymbols = [],
            flags = [];
          let currentFlag = false,
            i,
            ii;
          const totalSymbolsLength = symbols.length + numberOfNewSymbols;
          while (flags.length < totalSymbolsLength) {
            let runLength = huffman
              ? tableB1.decode(huffmanInput)
              : decodeInteger(contextCache, "IAEX", decoder);
            while (runLength--) {
              flags.push(currentFlag);
            }
            currentFlag = !currentFlag;
          }
          for (i = 0, ii = symbols.length; i < ii; i++) {
            if (flags[i]) {
              exportedSymbols.push(symbols[i]);
            }
          }
          for (let j = 0; j < numberOfNewSymbols; i++, j++) {
            if (flags[i]) {
              exportedSymbols.push(newSymbols[j]);
            }
          }
          return exportedSymbols;
        }
        function decodeTextRegion(
          huffman,
          refinement,
          width,
          height,
          defaultPixelValue,
          numberOfSymbolInstances,
          stripSize,
          inputSymbols,
          symbolCodeLength,
          transposed,
          dsOffset,
          referenceCorner,
          combinationOperator,
          huffmanTables,
          refinementTemplateIndex,
          refinementAt,
          decodingContext,
          logStripSize,
          huffmanInput
        ) {
          if (huffman && refinement) {
            throw new Jbig2Error("refinement with Huffman is not supported");
          }
          const bitmap = [];
          let i, row;
          for (i = 0; i < height; i++) {
            row = new Uint8Array(width);
            if (defaultPixelValue) {
              for (let j = 0; j < width; j++) {
                row[j] = defaultPixelValue;
              }
            }
            bitmap.push(row);
          }
          const decoder = decodingContext.decoder;
          const contextCache = decodingContext.contextCache;
          let stripT = huffman
            ? -huffmanTables.tableDeltaT.decode(huffmanInput)
            : -decodeInteger(contextCache, "IADT", decoder);
          let firstS = 0;
          i = 0;
          while (i < numberOfSymbolInstances) {
            const deltaT = huffman
              ? huffmanTables.tableDeltaT.decode(huffmanInput)
              : decodeInteger(contextCache, "IADT", decoder);
            stripT += deltaT;
            const deltaFirstS = huffman
              ? huffmanTables.tableFirstS.decode(huffmanInput)
              : decodeInteger(contextCache, "IAFS", decoder);
            firstS += deltaFirstS;
            let currentS = firstS;
            do {
              let currentT = 0;
              if (stripSize > 1) {
                currentT = huffman
                  ? huffmanInput.readBits(logStripSize)
                  : decodeInteger(contextCache, "IAIT", decoder);
              }
              const t = stripSize * stripT + currentT;
              const symbolId = huffman
                ? huffmanTables.symbolIDTable.decode(huffmanInput)
                : decodeIAID(contextCache, decoder, symbolCodeLength);
              const applyRefinement =
                refinement &&
                (huffman
                  ? huffmanInput.readBit()
                  : decodeInteger(contextCache, "IARI", decoder));
              let symbolBitmap = inputSymbols[symbolId];
              let symbolWidth = symbolBitmap[0].length;
              let symbolHeight = symbolBitmap.length;
              if (applyRefinement) {
                const rdw = decodeInteger(contextCache, "IARDW", decoder);
                const rdh = decodeInteger(contextCache, "IARDH", decoder);
                const rdx = decodeInteger(contextCache, "IARDX", decoder);
                const rdy = decodeInteger(contextCache, "IARDY", decoder);
                symbolWidth += rdw;
                symbolHeight += rdh;
                symbolBitmap = decodeRefinement(
                  symbolWidth,
                  symbolHeight,
                  refinementTemplateIndex,
                  symbolBitmap,
                  (rdw >> 1) + rdx,
                  (rdh >> 1) + rdy,
                  false,
                  refinementAt,
                  decodingContext
                );
              }
              const offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight - 1);
              const offsetS =
                currentS - (referenceCorner & 2 ? symbolWidth - 1 : 0);
              let s2, t2, symbolRow;
              if (transposed) {
                for (s2 = 0; s2 < symbolHeight; s2++) {
                  row = bitmap[offsetS + s2];
                  if (!row) {
                    continue;
                  }
                  symbolRow = symbolBitmap[s2];
                  const maxWidth = Math.min(width - offsetT, symbolWidth);
                  switch (combinationOperator) {
                    case 0:
                      for (t2 = 0; t2 < maxWidth; t2++) {
                        row[offsetT + t2] |= symbolRow[t2];
                      }
                      break;
                    case 2:
                      for (t2 = 0; t2 < maxWidth; t2++) {
                        row[offsetT + t2] ^= symbolRow[t2];
                      }
                      break;
                    default:
                      throw new Jbig2Error(
                        `operator ${combinationOperator} is not supported`
                      );
                  }
                }
                currentS += symbolHeight - 1;
              } else {
                for (t2 = 0; t2 < symbolHeight; t2++) {
                  row = bitmap[offsetT + t2];
                  if (!row) {
                    continue;
                  }
                  symbolRow = symbolBitmap[t2];
                  switch (combinationOperator) {
                    case 0:
                      for (s2 = 0; s2 < symbolWidth; s2++) {
                        row[offsetS + s2] |= symbolRow[s2];
                      }
                      break;
                    case 2:
                      for (s2 = 0; s2 < symbolWidth; s2++) {
                        row[offsetS + s2] ^= symbolRow[s2];
                      }
                      break;
                    default:
                      throw new Jbig2Error(
                        `operator ${combinationOperator} is not supported`
                      );
                  }
                }
                currentS += symbolWidth - 1;
              }
              i++;
              const deltaS = huffman
                ? huffmanTables.tableDeltaS.decode(huffmanInput)
                : decodeInteger(contextCache, "IADS", decoder);
              if (deltaS === null) {
                break;
              }
              currentS += deltaS + dsOffset;
            } while (true);
          }
          return bitmap;
        }
        function decodePatternDictionary(
          mmr,
          patternWidth,
          patternHeight,
          maxPatternIndex,
          template,
          decodingContext
        ) {
          const at = [];
          if (!mmr) {
            at.push({
              x: -patternWidth,
              y: 0,
            });
            if (template === 0) {
              at.push(
                {
                  x: -3,
                  y: -1,
                },
                {
                  x: 2,
                  y: -2,
                },
                {
                  x: -2,
                  y: -2,
                }
              );
            }
          }
          const collectiveWidth = (maxPatternIndex + 1) * patternWidth;
          const collectiveBitmap = decodeBitmap(
            mmr,
            collectiveWidth,
            patternHeight,
            template,
            false,
            null,
            at,
            decodingContext
          );
          const patterns = [];
          for (let i = 0; i <= maxPatternIndex; i++) {
            const patternBitmap = [];
            const xMin = patternWidth * i;
            const xMax = xMin + patternWidth;
            for (let y = 0; y < patternHeight; y++) {
              patternBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));
            }
            patterns.push(patternBitmap);
          }
          return patterns;
        }
        function decodeHalftoneRegion(
          mmr,
          patterns,
          template,
          regionWidth,
          regionHeight,
          defaultPixelValue,
          enableSkip,
          combinationOperator,
          gridWidth,
          gridHeight,
          gridOffsetX,
          gridOffsetY,
          gridVectorX,
          gridVectorY,
          decodingContext
        ) {
          const skip = null;
          if (enableSkip) {
            throw new Jbig2Error("skip is not supported");
          }
          if (combinationOperator !== 0) {
            throw new Jbig2Error(
              `operator "${combinationOperator}" is not supported in halftone region`
            );
          }
          const regionBitmap = [];
          let i, j, row;
          for (i = 0; i < regionHeight; i++) {
            row = new Uint8Array(regionWidth);
            if (defaultPixelValue) {
              for (j = 0; j < regionWidth; j++) {
                row[j] = defaultPixelValue;
              }
            }
            regionBitmap.push(row);
          }
          const numberOfPatterns = patterns.length;
          const pattern0 = patterns[0];
          const patternWidth = pattern0[0].length,
            patternHeight = pattern0.length;
          const bitsPerValue = (0, _core_utils.log2)(numberOfPatterns);
          const at = [];
          if (!mmr) {
            at.push({
              x: template <= 1 ? 3 : 2,
              y: -1,
            });
            if (template === 0) {
              at.push(
                {
                  x: -3,
                  y: -1,
                },
                {
                  x: 2,
                  y: -2,
                },
                {
                  x: -2,
                  y: -2,
                }
              );
            }
          }
          const grayScaleBitPlanes = [];
          let mmrInput, bitmap;
          if (mmr) {
            mmrInput = new Reader(
              decodingContext.data,
              decodingContext.start,
              decodingContext.end
            );
          }
          for (i = bitsPerValue - 1; i >= 0; i--) {
            if (mmr) {
              bitmap = decodeMMRBitmap(mmrInput, gridWidth, gridHeight, true);
            } else {
              bitmap = decodeBitmap(
                false,
                gridWidth,
                gridHeight,
                template,
                false,
                skip,
                at,
                decodingContext
              );
            }
            grayScaleBitPlanes[i] = bitmap;
          }
          let mg,
            ng,
            bit,
            patternIndex,
            patternBitmap,
            x,
            y,
            patternRow,
            regionRow;
          for (mg = 0; mg < gridHeight; mg++) {
            for (ng = 0; ng < gridWidth; ng++) {
              bit = 0;
              patternIndex = 0;
              for (j = bitsPerValue - 1; j >= 0; j--) {
                bit ^= grayScaleBitPlanes[j][mg][ng];
                patternIndex |= bit << j;
              }
              patternBitmap = patterns[patternIndex];
              x = (gridOffsetX + mg * gridVectorY + ng * gridVectorX) >> 8;
              y = (gridOffsetY + mg * gridVectorX - ng * gridVectorY) >> 8;
              if (
                x >= 0 &&
                x + patternWidth <= regionWidth &&
                y >= 0 &&
                y + patternHeight <= regionHeight
              ) {
                for (i = 0; i < patternHeight; i++) {
                  regionRow = regionBitmap[y + i];
                  patternRow = patternBitmap[i];
                  for (j = 0; j < patternWidth; j++) {
                    regionRow[x + j] |= patternRow[j];
                  }
                }
              } else {
                let regionX, regionY;
                for (i = 0; i < patternHeight; i++) {
                  regionY = y + i;
                  if (regionY < 0 || regionY >= regionHeight) {
                    continue;
                  }
                  regionRow = regionBitmap[regionY];
                  patternRow = patternBitmap[i];
                  for (j = 0; j < patternWidth; j++) {
                    regionX = x + j;
                    if (regionX >= 0 && regionX < regionWidth) {
                      regionRow[regionX] |= patternRow[j];
                    }
                  }
                }
              }
            }
          }
          return regionBitmap;
        }
        function readSegmentHeader(data, start) {
          const segmentHeader = {};
          segmentHeader.number = (0, _core_utils.readUint32)(data, start);
          const flags = data[start + 4];
          const segmentType = flags & 0x3f;
          if (!SegmentTypes[segmentType]) {
            throw new Jbig2Error("invalid segment type: " + segmentType);
          }
          segmentHeader.type = segmentType;
          segmentHeader.typeName = SegmentTypes[segmentType];
          segmentHeader.deferredNonRetain = !!(flags & 0x80);
          const pageAssociationFieldSize = !!(flags & 0x40);
          const referredFlags = data[start + 5];
          let referredToCount = (referredFlags >> 5) & 7;
          const retainBits = [referredFlags & 31];
          let position = start + 6;
          if (referredFlags === 7) {
            referredToCount =
              (0, _core_utils.readUint32)(data, position - 1) & 0x1fffffff;
            position += 3;
            let bytes = (referredToCount + 7) >> 3;
            retainBits[0] = data[position++];
            while (--bytes > 0) {
              retainBits.push(data[position++]);
            }
          } else if (referredFlags === 5 || referredFlags === 6) {
            throw new Jbig2Error("invalid referred-to flags");
          }
          segmentHeader.retainBits = retainBits;
          let referredToSegmentNumberSize = 4;
          if (segmentHeader.number <= 256) {
            referredToSegmentNumberSize = 1;
          } else if (segmentHeader.number <= 65536) {
            referredToSegmentNumberSize = 2;
          }
          const referredTo = [];
          let i, ii;
          for (i = 0; i < referredToCount; i++) {
            let number;
            if (referredToSegmentNumberSize === 1) {
              number = data[position];
            } else if (referredToSegmentNumberSize === 2) {
              number = (0, _core_utils.readUint16)(data, position);
            } else {
              number = (0, _core_utils.readUint32)(data, position);
            }
            referredTo.push(number);
            position += referredToSegmentNumberSize;
          }
          segmentHeader.referredTo = referredTo;
          if (!pageAssociationFieldSize) {
            segmentHeader.pageAssociation = data[position++];
          } else {
            segmentHeader.pageAssociation = (0, _core_utils.readUint32)(
              data,
              position
            );
            position += 4;
          }
          segmentHeader.length = (0, _core_utils.readUint32)(data, position);
          position += 4;
          if (segmentHeader.length === 0xffffffff) {
            if (segmentType === 38) {
              const genericRegionInfo = readRegionSegmentInformation(
                data,
                position
              );
              const genericRegionSegmentFlags =
                data[position + RegionSegmentInformationFieldLength];
              const genericRegionMmr = !!(genericRegionSegmentFlags & 1);
              const searchPatternLength = 6;
              const searchPattern = new Uint8Array(searchPatternLength);
              if (!genericRegionMmr) {
                searchPattern[0] = 0xff;
                searchPattern[1] = 0xac;
              }
              searchPattern[2] = (genericRegionInfo.height >>> 24) & 0xff;
              searchPattern[3] = (genericRegionInfo.height >> 16) & 0xff;
              searchPattern[4] = (genericRegionInfo.height >> 8) & 0xff;
              searchPattern[5] = genericRegionInfo.height & 0xff;
              for (i = position, ii = data.length; i < ii; i++) {
                let j = 0;
                while (
                  j < searchPatternLength &&
                  searchPattern[j] === data[i + j]
                ) {
                  j++;
                }
                if (j === searchPatternLength) {
                  segmentHeader.length = i + searchPatternLength;
                  break;
                }
              }
              if (segmentHeader.length === 0xffffffff) {
                throw new Jbig2Error("segment end was not found");
              }
            } else {
              throw new Jbig2Error("invalid unknown segment length");
            }
          }
          segmentHeader.headerEnd = position;
          return segmentHeader;
        }
        function readSegments(header, data, start, end) {
          const segments = [];
          let position = start;
          while (position < end) {
            const segmentHeader = readSegmentHeader(data, position);
            position = segmentHeader.headerEnd;
            const segment = {
              header: segmentHeader,
              data,
            };
            if (!header.randomAccess) {
              segment.start = position;
              position += segmentHeader.length;
              segment.end = position;
            }
            segments.push(segment);
            if (segmentHeader.type === 51) {
              break;
            }
          }
          if (header.randomAccess) {
            for (let i = 0, ii = segments.length; i < ii; i++) {
              segments[i].start = position;
              position += segments[i].header.length;
              segments[i].end = position;
            }
          }
          return segments;
        }
        function readRegionSegmentInformation(data, start) {
          return {
            width: (0, _core_utils.readUint32)(data, start),
            height: (0, _core_utils.readUint32)(data, start + 4),
            x: (0, _core_utils.readUint32)(data, start + 8),
            y: (0, _core_utils.readUint32)(data, start + 12),
            combinationOperator: data[start + 16] & 7,
          };
        }
        const RegionSegmentInformationFieldLength = 17;
        function processSegment(segment, visitor) {
          const header = segment.header;
          const data = segment.data,
            end = segment.end;
          let position = segment.start;
          let args, at, i, atLength;
          switch (header.type) {
            case 0:
              const dictionary = {};
              const dictionaryFlags = (0, _core_utils.readUint16)(
                data,
                position
              );
              dictionary.huffman = !!(dictionaryFlags & 1);
              dictionary.refinement = !!(dictionaryFlags & 2);
              dictionary.huffmanDHSelector = (dictionaryFlags >> 2) & 3;
              dictionary.huffmanDWSelector = (dictionaryFlags >> 4) & 3;
              dictionary.bitmapSizeSelector = (dictionaryFlags >> 6) & 1;
              dictionary.aggregationInstancesSelector =
                (dictionaryFlags >> 7) & 1;
              dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);
              dictionary.bitmapCodingContextRetained = !!(
                dictionaryFlags & 512
              );
              dictionary.template = (dictionaryFlags >> 10) & 3;
              dictionary.refinementTemplate = (dictionaryFlags >> 12) & 1;
              position += 2;
              if (!dictionary.huffman) {
                atLength = dictionary.template === 0 ? 4 : 1;
                at = [];
                for (i = 0; i < atLength; i++) {
                  at.push({
                    x: (0, _core_utils.readInt8)(data, position),
                    y: (0, _core_utils.readInt8)(data, position + 1),
                  });
                  position += 2;
                }
                dictionary.at = at;
              }
              if (dictionary.refinement && !dictionary.refinementTemplate) {
                at = [];
                for (i = 0; i < 2; i++) {
                  at.push({
                    x: (0, _core_utils.readInt8)(data, position),
                    y: (0, _core_utils.readInt8)(data, position + 1),
                  });
                  position += 2;
                }
                dictionary.refinementAt = at;
              }
              dictionary.numberOfExportedSymbols = (0, _core_utils.readUint32)(
                data,
                position
              );
              position += 4;
              dictionary.numberOfNewSymbols = (0, _core_utils.readUint32)(
                data,
                position
              );
              position += 4;
              args = [
                dictionary,
                header.number,
                header.referredTo,
                data,
                position,
                end,
              ];
              break;
            case 6:
            case 7:
              const textRegion = {};
              textRegion.info = readRegionSegmentInformation(data, position);
              position += RegionSegmentInformationFieldLength;
              const textRegionSegmentFlags = (0, _core_utils.readUint16)(
                data,
                position
              );
              position += 2;
              textRegion.huffman = !!(textRegionSegmentFlags & 1);
              textRegion.refinement = !!(textRegionSegmentFlags & 2);
              textRegion.logStripSize = (textRegionSegmentFlags >> 2) & 3;
              textRegion.stripSize = 1 << textRegion.logStripSize;
              textRegion.referenceCorner = (textRegionSegmentFlags >> 4) & 3;
              textRegion.transposed = !!(textRegionSegmentFlags & 64);
              textRegion.combinationOperator =
                (textRegionSegmentFlags >> 7) & 3;
              textRegion.defaultPixelValue = (textRegionSegmentFlags >> 9) & 1;
              textRegion.dsOffset = (textRegionSegmentFlags << 17) >> 27;
              textRegion.refinementTemplate =
                (textRegionSegmentFlags >> 15) & 1;
              if (textRegion.huffman) {
                const textRegionHuffmanFlags = (0, _core_utils.readUint16)(
                  data,
                  position
                );
                position += 2;
                textRegion.huffmanFS = textRegionHuffmanFlags & 3;
                textRegion.huffmanDS = (textRegionHuffmanFlags >> 2) & 3;
                textRegion.huffmanDT = (textRegionHuffmanFlags >> 4) & 3;
                textRegion.huffmanRefinementDW =
                  (textRegionHuffmanFlags >> 6) & 3;
                textRegion.huffmanRefinementDH =
                  (textRegionHuffmanFlags >> 8) & 3;
                textRegion.huffmanRefinementDX =
                  (textRegionHuffmanFlags >> 10) & 3;
                textRegion.huffmanRefinementDY =
                  (textRegionHuffmanFlags >> 12) & 3;
                textRegion.huffmanRefinementSizeSelector = !!(
                  textRegionHuffmanFlags & 0x4000
                );
              }
              if (textRegion.refinement && !textRegion.refinementTemplate) {
                at = [];
                for (i = 0; i < 2; i++) {
                  at.push({
                    x: (0, _core_utils.readInt8)(data, position),
                    y: (0, _core_utils.readInt8)(data, position + 1),
                  });
                  position += 2;
                }
                textRegion.refinementAt = at;
              }
              textRegion.numberOfSymbolInstances = (0, _core_utils.readUint32)(
                data,
                position
              );
              position += 4;
              args = [textRegion, header.referredTo, data, position, end];
              break;
            case 16:
              const patternDictionary = {};
              const patternDictionaryFlags = data[position++];
              patternDictionary.mmr = !!(patternDictionaryFlags & 1);
              patternDictionary.template = (patternDictionaryFlags >> 1) & 3;
              patternDictionary.patternWidth = data[position++];
              patternDictionary.patternHeight = data[position++];
              patternDictionary.maxPatternIndex = (0, _core_utils.readUint32)(
                data,
                position
              );
              position += 4;
              args = [patternDictionary, header.number, data, position, end];
              break;
            case 22:
            case 23:
              const halftoneRegion = {};
              halftoneRegion.info = readRegionSegmentInformation(
                data,
                position
              );
              position += RegionSegmentInformationFieldLength;
              const halftoneRegionFlags = data[position++];
              halftoneRegion.mmr = !!(halftoneRegionFlags & 1);
              halftoneRegion.template = (halftoneRegionFlags >> 1) & 3;
              halftoneRegion.enableSkip = !!(halftoneRegionFlags & 8);
              halftoneRegion.combinationOperator =
                (halftoneRegionFlags >> 4) & 7;
              halftoneRegion.defaultPixelValue = (halftoneRegionFlags >> 7) & 1;
              halftoneRegion.gridWidth = (0, _core_utils.readUint32)(
                data,
                position
              );
              position += 4;
              halftoneRegion.gridHeight = (0, _core_utils.readUint32)(
                data,
                position
              );
              position += 4;
              halftoneRegion.gridOffsetX =
                (0, _core_utils.readUint32)(data, position) & 0xffffffff;
              position += 4;
              halftoneRegion.gridOffsetY =
                (0, _core_utils.readUint32)(data, position) & 0xffffffff;
              position += 4;
              halftoneRegion.gridVectorX = (0, _core_utils.readUint16)(
                data,
                position
              );
              position += 2;
              halftoneRegion.gridVectorY = (0, _core_utils.readUint16)(
                data,
                position
              );
              position += 2;
              args = [halftoneRegion, header.referredTo, data, position, end];
              break;
            case 38:
            case 39:
              const genericRegion = {};
              genericRegion.info = readRegionSegmentInformation(data, position);
              position += RegionSegmentInformationFieldLength;
              const genericRegionSegmentFlags = data[position++];
              genericRegion.mmr = !!(genericRegionSegmentFlags & 1);
              genericRegion.template = (genericRegionSegmentFlags >> 1) & 3;
              genericRegion.prediction = !!(genericRegionSegmentFlags & 8);
              if (!genericRegion.mmr) {
                atLength = genericRegion.template === 0 ? 4 : 1;
                at = [];
                for (i = 0; i < atLength; i++) {
                  at.push({
                    x: (0, _core_utils.readInt8)(data, position),
                    y: (0, _core_utils.readInt8)(data, position + 1),
                  });
                  position += 2;
                }
                genericRegion.at = at;
              }
              args = [genericRegion, data, position, end];
              break;
            case 48:
              const pageInfo = {
                width: (0, _core_utils.readUint32)(data, position),
                height: (0, _core_utils.readUint32)(data, position + 4),
                resolutionX: (0, _core_utils.readUint32)(data, position + 8),
                resolutionY: (0, _core_utils.readUint32)(data, position + 12),
              };
              if (pageInfo.height === 0xffffffff) {
                delete pageInfo.height;
              }
              const pageSegmentFlags = data[position + 16];
              (0, _core_utils.readUint16)(data, position + 17);
              pageInfo.lossless = !!(pageSegmentFlags & 1);
              pageInfo.refinement = !!(pageSegmentFlags & 2);
              pageInfo.defaultPixelValue = (pageSegmentFlags >> 2) & 1;
              pageInfo.combinationOperator = (pageSegmentFlags >> 3) & 3;
              pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);
              pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);
              args = [pageInfo];
              break;
            case 49:
              break;
            case 50:
              break;
            case 51:
              break;
            case 53:
              args = [header.number, data, position, end];
              break;
            case 62:
              break;
            default:
              throw new Jbig2Error(
                `segment type ${header.typeName}(${header.type}) is not implemented`
              );
          }
          const callbackName = "on" + header.typeName;
          if (callbackName in visitor) {
            visitor[callbackName].apply(visitor, args);
          }
        }
        function processSegments(segments, visitor) {
          for (let i = 0, ii = segments.length; i < ii; i++) {
            processSegment(segments[i], visitor);
          }
        }
        function parseJbig2Chunks(chunks) {
          const visitor = new SimpleSegmentVisitor();
          for (let i = 0, ii = chunks.length; i < ii; i++) {
            const chunk = chunks[i];
            const segments = readSegments(
              {},
              chunk.data,
              chunk.start,
              chunk.end
            );
            processSegments(segments, visitor);
          }
          return visitor.buffer;
        }
        function parseJbig2(data) {
          throw new Error("Not implemented: parseJbig2");
        }
        class SimpleSegmentVisitor {
          onPageInformation(info) {
            this.currentPageInfo = info;
            const rowSize = (info.width + 7) >> 3;
            const buffer = new Uint8ClampedArray(rowSize * info.height);
            if (info.defaultPixelValue) {
              buffer.fill(0xff);
            }
            this.buffer = buffer;
          }
          drawBitmap(regionInfo, bitmap) {
            const pageInfo = this.currentPageInfo;
            const width = regionInfo.width,
              height = regionInfo.height;
            const rowSize = (pageInfo.width + 7) >> 3;
            const combinationOperator = pageInfo.combinationOperatorOverride
              ? regionInfo.combinationOperator
              : pageInfo.combinationOperator;
            const buffer = this.buffer;
            const mask0 = 128 >> (regionInfo.x & 7);
            let offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);
            let i, j, mask, offset;
            switch (combinationOperator) {
              case 0:
                for (i = 0; i < height; i++) {
                  mask = mask0;
                  offset = offset0;
                  for (j = 0; j < width; j++) {
                    if (bitmap[i][j]) {
                      buffer[offset] |= mask;
                    }
                    mask >>= 1;
                    if (!mask) {
                      mask = 128;
                      offset++;
                    }
                  }
                  offset0 += rowSize;
                }
                break;
              case 2:
                for (i = 0; i < height; i++) {
                  mask = mask0;
                  offset = offset0;
                  for (j = 0; j < width; j++) {
                    if (bitmap[i][j]) {
                      buffer[offset] ^= mask;
                    }
                    mask >>= 1;
                    if (!mask) {
                      mask = 128;
                      offset++;
                    }
                  }
                  offset0 += rowSize;
                }
                break;
              default:
                throw new Jbig2Error(
                  `operator ${combinationOperator} is not supported`
                );
            }
          }
          onImmediateGenericRegion(region, data, start, end) {
            const regionInfo = region.info;
            const decodingContext = new DecodingContext(data, start, end);
            const bitmap = decodeBitmap(
              region.mmr,
              regionInfo.width,
              regionInfo.height,
              region.template,
              region.prediction,
              null,
              region.at,
              decodingContext
            );
            this.drawBitmap(regionInfo, bitmap);
          }
          onImmediateLosslessGenericRegion() {
            this.onImmediateGenericRegion(...arguments);
          }
          onSymbolDictionary(
            dictionary,
            currentSegment,
            referredSegments,
            data,
            start,
            end
          ) {
            let huffmanTables, huffmanInput;
            if (dictionary.huffman) {
              huffmanTables = getSymbolDictionaryHuffmanTables(
                dictionary,
                referredSegments,
                this.customTables
              );
              huffmanInput = new Reader(data, start, end);
            }
            let symbols = this.symbols;
            if (!symbols) {
              this.symbols = symbols = {};
            }
            const inputSymbols = [];
            for (const referredSegment of referredSegments) {
              const referredSymbols = symbols[referredSegment];
              if (referredSymbols) {
                inputSymbols.push(...referredSymbols);
              }
            }
            const decodingContext = new DecodingContext(data, start, end);
            symbols[currentSegment] = decodeSymbolDictionary(
              dictionary.huffman,
              dictionary.refinement,
              inputSymbols,
              dictionary.numberOfNewSymbols,
              dictionary.numberOfExportedSymbols,
              huffmanTables,
              dictionary.template,
              dictionary.at,
              dictionary.refinementTemplate,
              dictionary.refinementAt,
              decodingContext,
              huffmanInput
            );
          }
          onImmediateTextRegion(region, referredSegments, data, start, end) {
            const regionInfo = region.info;
            let huffmanTables, huffmanInput;
            const symbols = this.symbols;
            const inputSymbols = [];
            for (const referredSegment of referredSegments) {
              const referredSymbols = symbols[referredSegment];
              if (referredSymbols) {
                inputSymbols.push(...referredSymbols);
              }
            }
            const symbolCodeLength = (0, _core_utils.log2)(inputSymbols.length);
            if (region.huffman) {
              huffmanInput = new Reader(data, start, end);
              huffmanTables = getTextRegionHuffmanTables(
                region,
                referredSegments,
                this.customTables,
                inputSymbols.length,
                huffmanInput
              );
            }
            const decodingContext = new DecodingContext(data, start, end);
            const bitmap = decodeTextRegion(
              region.huffman,
              region.refinement,
              regionInfo.width,
              regionInfo.height,
              region.defaultPixelValue,
              region.numberOfSymbolInstances,
              region.stripSize,
              inputSymbols,
              symbolCodeLength,
              region.transposed,
              region.dsOffset,
              region.referenceCorner,
              region.combinationOperator,
              huffmanTables,
              region.refinementTemplate,
              region.refinementAt,
              decodingContext,
              region.logStripSize,
              huffmanInput
            );
            this.drawBitmap(regionInfo, bitmap);
          }
          onImmediateLosslessTextRegion() {
            this.onImmediateTextRegion(...arguments);
          }
          onPatternDictionary(dictionary, currentSegment, data, start, end) {
            let patterns = this.patterns;
            if (!patterns) {
              this.patterns = patterns = {};
            }
            const decodingContext = new DecodingContext(data, start, end);
            patterns[currentSegment] = decodePatternDictionary(
              dictionary.mmr,
              dictionary.patternWidth,
              dictionary.patternHeight,
              dictionary.maxPatternIndex,
              dictionary.template,
              decodingContext
            );
          }
          onImmediateHalftoneRegion(
            region,
            referredSegments,
            data,
            start,
            end
          ) {
            const patterns = this.patterns[referredSegments[0]];
            const regionInfo = region.info;
            const decodingContext = new DecodingContext(data, start, end);
            const bitmap = decodeHalftoneRegion(
              region.mmr,
              patterns,
              region.template,
              regionInfo.width,
              regionInfo.height,
              region.defaultPixelValue,
              region.enableSkip,
              region.combinationOperator,
              region.gridWidth,
              region.gridHeight,
              region.gridOffsetX,
              region.gridOffsetY,
              region.gridVectorX,
              region.gridVectorY,
              decodingContext
            );
            this.drawBitmap(regionInfo, bitmap);
          }
          onImmediateLosslessHalftoneRegion() {
            this.onImmediateHalftoneRegion(...arguments);
          }
          onTables(currentSegment, data, start, end) {
            let customTables = this.customTables;
            if (!customTables) {
              this.customTables = customTables = {};
            }
            customTables[currentSegment] = decodeTablesSegment(
              data,
              start,
              end
            );
          }
        }
        class HuffmanLine {
          constructor(lineData) {
            if (lineData.length === 2) {
              this.isOOB = true;
              this.rangeLow = 0;
              this.prefixLength = lineData[0];
              this.rangeLength = 0;
              this.prefixCode = lineData[1];
              this.isLowerRange = false;
            } else {
              this.isOOB = false;
              this.rangeLow = lineData[0];
              this.prefixLength = lineData[1];
              this.rangeLength = lineData[2];
              this.prefixCode = lineData[3];
              this.isLowerRange = lineData[4] === "lower";
            }
          }
        }
        class HuffmanTreeNode {
          constructor(line) {
            this.children = [];
            if (line) {
              this.isLeaf = true;
              this.rangeLength = line.rangeLength;
              this.rangeLow = line.rangeLow;
              this.isLowerRange = line.isLowerRange;
              this.isOOB = line.isOOB;
            } else {
              this.isLeaf = false;
            }
          }
          buildTree(line, shift) {
            const bit = (line.prefixCode >> shift) & 1;
            if (shift <= 0) {
              this.children[bit] = new HuffmanTreeNode(line);
            } else {
              let node = this.children[bit];
              if (!node) {
                this.children[bit] = node = new HuffmanTreeNode(null);
              }
              node.buildTree(line, shift - 1);
            }
          }
          decodeNode(reader) {
            if (this.isLeaf) {
              if (this.isOOB) {
                return null;
              }
              const htOffset = reader.readBits(this.rangeLength);
              return this.rangeLow + (this.isLowerRange ? -htOffset : htOffset);
            }
            const node = this.children[reader.readBit()];
            if (!node) {
              throw new Jbig2Error("invalid Huffman data");
            }
            return node.decodeNode(reader);
          }
        }
        class HuffmanTable {
          constructor(lines, prefixCodesDone) {
            if (!prefixCodesDone) {
              this.assignPrefixCodes(lines);
            }
            this.rootNode = new HuffmanTreeNode(null);
            for (let i = 0, ii = lines.length; i < ii; i++) {
              const line = lines[i];
              if (line.prefixLength > 0) {
                this.rootNode.buildTree(line, line.prefixLength - 1);
              }
            }
          }
          decode(reader) {
            return this.rootNode.decodeNode(reader);
          }
          assignPrefixCodes(lines) {
            const linesLength = lines.length;
            let prefixLengthMax = 0;
            for (let i = 0; i < linesLength; i++) {
              prefixLengthMax = Math.max(
                prefixLengthMax,
                lines[i].prefixLength
              );
            }
            const histogram = new Uint32Array(prefixLengthMax + 1);
            for (let i = 0; i < linesLength; i++) {
              histogram[lines[i].prefixLength]++;
            }
            let currentLength = 1,
              firstCode = 0,
              currentCode,
              currentTemp,
              line;
            histogram[0] = 0;
            while (currentLength <= prefixLengthMax) {
              firstCode = (firstCode + histogram[currentLength - 1]) << 1;
              currentCode = firstCode;
              currentTemp = 0;
              while (currentTemp < linesLength) {
                line = lines[currentTemp];
                if (line.prefixLength === currentLength) {
                  line.prefixCode = currentCode;
                  currentCode++;
                }
                currentTemp++;
              }
              currentLength++;
            }
          }
        }
        function decodeTablesSegment(data, start, end) {
          const flags = data[start];
          const lowestValue =
            (0, _core_utils.readUint32)(data, start + 1) & 0xffffffff;
          const highestValue =
            (0, _core_utils.readUint32)(data, start + 5) & 0xffffffff;
          const reader = new Reader(data, start + 9, end);
          const prefixSizeBits = ((flags >> 1) & 7) + 1;
          const rangeSizeBits = ((flags >> 4) & 7) + 1;
          const lines = [];
          let prefixLength,
            rangeLength,
            currentRangeLow = lowestValue;
          do {
            prefixLength = reader.readBits(prefixSizeBits);
            rangeLength = reader.readBits(rangeSizeBits);
            lines.push(
              new HuffmanLine([currentRangeLow, prefixLength, rangeLength, 0])
            );
            currentRangeLow += 1 << rangeLength;
          } while (currentRangeLow < highestValue);
          prefixLength = reader.readBits(prefixSizeBits);
          lines.push(
            new HuffmanLine([lowestValue - 1, prefixLength, 32, 0, "lower"])
          );
          prefixLength = reader.readBits(prefixSizeBits);
          lines.push(new HuffmanLine([highestValue, prefixLength, 32, 0]));
          if (flags & 1) {
            prefixLength = reader.readBits(prefixSizeBits);
            lines.push(new HuffmanLine([prefixLength, 0]));
          }
          return new HuffmanTable(lines, false);
        }
        const standardTablesCache = {};
        function getStandardTable(number) {
          let table = standardTablesCache[number];
          if (table) {
            return table;
          }
          let lines;
          switch (number) {
            case 1:
              lines = [
                [0, 1, 4, 0x0],
                [16, 2, 8, 0x2],
                [272, 3, 16, 0x6],
                [65808, 3, 32, 0x7],
              ];
              break;
            case 2:
              lines = [
                [0, 1, 0, 0x0],
                [1, 2, 0, 0x2],
                [2, 3, 0, 0x6],
                [3, 4, 3, 0xe],
                [11, 5, 6, 0x1e],
                [75, 6, 32, 0x3e],
                [6, 0x3f],
              ];
              break;
            case 3:
              lines = [
                [-256, 8, 8, 0xfe],
                [0, 1, 0, 0x0],
                [1, 2, 0, 0x2],
                [2, 3, 0, 0x6],
                [3, 4, 3, 0xe],
                [11, 5, 6, 0x1e],
                [-257, 8, 32, 0xff, "lower"],
                [75, 7, 32, 0x7e],
                [6, 0x3e],
              ];
              break;
            case 4:
              lines = [
                [1, 1, 0, 0x0],
                [2, 2, 0, 0x2],
                [3, 3, 0, 0x6],
                [4, 4, 3, 0xe],
                [12, 5, 6, 0x1e],
                [76, 5, 32, 0x1f],
              ];
              break;
            case 5:
              lines = [
                [-255, 7, 8, 0x7e],
                [1, 1, 0, 0x0],
                [2, 2, 0, 0x2],
                [3, 3, 0, 0x6],
                [4, 4, 3, 0xe],
                [12, 5, 6, 0x1e],
                [-256, 7, 32, 0x7f, "lower"],
                [76, 6, 32, 0x3e],
              ];
              break;
            case 6:
              lines = [
                [-2048, 5, 10, 0x1c],
                [-1024, 4, 9, 0x8],
                [-512, 4, 8, 0x9],
                [-256, 4, 7, 0xa],
                [-128, 5, 6, 0x1d],
                [-64, 5, 5, 0x1e],
                [-32, 4, 5, 0xb],
                [0, 2, 7, 0x0],
                [128, 3, 7, 0x2],
                [256, 3, 8, 0x3],
                [512, 4, 9, 0xc],
                [1024, 4, 10, 0xd],
                [-2049, 6, 32, 0x3e, "lower"],
                [2048, 6, 32, 0x3f],
              ];
              break;
            case 7:
              lines = [
                [-1024, 4, 9, 0x8],
                [-512, 3, 8, 0x0],
                [-256, 4, 7, 0x9],
                [-128, 5, 6, 0x1a],
                [-64, 5, 5, 0x1b],
                [-32, 4, 5, 0xa],
                [0, 4, 5, 0xb],
                [32, 5, 5, 0x1c],
                [64, 5, 6, 0x1d],
                [128, 4, 7, 0xc],
                [256, 3, 8, 0x1],
                [512, 3, 9, 0x2],
                [1024, 3, 10, 0x3],
                [-1025, 5, 32, 0x1e, "lower"],
                [2048, 5, 32, 0x1f],
              ];
              break;
            case 8:
              lines = [
                [-15, 8, 3, 0xfc],
                [-7, 9, 1, 0x1fc],
                [-5, 8, 1, 0xfd],
                [-3, 9, 0, 0x1fd],
                [-2, 7, 0, 0x7c],
                [-1, 4, 0, 0xa],
                [0, 2, 1, 0x0],
                [2, 5, 0, 0x1a],
                [3, 6, 0, 0x3a],
                [4, 3, 4, 0x4],
                [20, 6, 1, 0x3b],
                [22, 4, 4, 0xb],
                [38, 4, 5, 0xc],
                [70, 5, 6, 0x1b],
                [134, 5, 7, 0x1c],
                [262, 6, 7, 0x3c],
                [390, 7, 8, 0x7d],
                [646, 6, 10, 0x3d],
                [-16, 9, 32, 0x1fe, "lower"],
                [1670, 9, 32, 0x1ff],
                [2, 0x1],
              ];
              break;
            case 9:
              lines = [
                [-31, 8, 4, 0xfc],
                [-15, 9, 2, 0x1fc],
                [-11, 8, 2, 0xfd],
                [-7, 9, 1, 0x1fd],
                [-5, 7, 1, 0x7c],
                [-3, 4, 1, 0xa],
                [-1, 3, 1, 0x2],
                [1, 3, 1, 0x3],
                [3, 5, 1, 0x1a],
                [5, 6, 1, 0x3a],
                [7, 3, 5, 0x4],
                [39, 6, 2, 0x3b],
                [43, 4, 5, 0xb],
                [75, 4, 6, 0xc],
                [139, 5, 7, 0x1b],
                [267, 5, 8, 0x1c],
                [523, 6, 8, 0x3c],
                [779, 7, 9, 0x7d],
                [1291, 6, 11, 0x3d],
                [-32, 9, 32, 0x1fe, "lower"],
                [3339, 9, 32, 0x1ff],
                [2, 0x0],
              ];
              break;
            case 10:
              lines = [
                [-21, 7, 4, 0x7a],
                [-5, 8, 0, 0xfc],
                [-4, 7, 0, 0x7b],
                [-3, 5, 0, 0x18],
                [-2, 2, 2, 0x0],
                [2, 5, 0, 0x19],
                [3, 6, 0, 0x36],
                [4, 7, 0, 0x7c],
                [5, 8, 0, 0xfd],
                [6, 2, 6, 0x1],
                [70, 5, 5, 0x1a],
                [102, 6, 5, 0x37],
                [134, 6, 6, 0x38],
                [198, 6, 7, 0x39],
                [326, 6, 8, 0x3a],
                [582, 6, 9, 0x3b],
                [1094, 6, 10, 0x3c],
                [2118, 7, 11, 0x7d],
                [-22, 8, 32, 0xfe, "lower"],
                [4166, 8, 32, 0xff],
                [2, 0x2],
              ];
              break;
            case 11:
              lines = [
                [1, 1, 0, 0x0],
                [2, 2, 1, 0x2],
                [4, 4, 0, 0xc],
                [5, 4, 1, 0xd],
                [7, 5, 1, 0x1c],
                [9, 5, 2, 0x1d],
                [13, 6, 2, 0x3c],
                [17, 7, 2, 0x7a],
                [21, 7, 3, 0x7b],
                [29, 7, 4, 0x7c],
                [45, 7, 5, 0x7d],
                [77, 7, 6, 0x7e],
                [141, 7, 32, 0x7f],
              ];
              break;
            case 12:
              lines = [
                [1, 1, 0, 0x0],
                [2, 2, 0, 0x2],
                [3, 3, 1, 0x6],
                [5, 5, 0, 0x1c],
                [6, 5, 1, 0x1d],
                [8, 6, 1, 0x3c],
                [10, 7, 0, 0x7a],
                [11, 7, 1, 0x7b],
                [13, 7, 2, 0x7c],
                [17, 7, 3, 0x7d],
                [25, 7, 4, 0x7e],
                [41, 8, 5, 0xfe],
                [73, 8, 32, 0xff],
              ];
              break;
            case 13:
              lines = [
                [1, 1, 0, 0x0],
                [2, 3, 0, 0x4],
                [3, 4, 0, 0xc],
                [4, 5, 0, 0x1c],
                [5, 4, 1, 0xd],
                [7, 3, 3, 0x5],
                [15, 6, 1, 0x3a],
                [17, 6, 2, 0x3b],
                [21, 6, 3, 0x3c],
                [29, 6, 4, 0x3d],
                [45, 6, 5, 0x3e],
                [77, 7, 6, 0x7e],
                [141, 7, 32, 0x7f],
              ];
              break;
            case 14:
              lines = [
                [-2, 3, 0, 0x4],
                [-1, 3, 0, 0x5],
                [0, 1, 0, 0x0],
                [1, 3, 0, 0x6],
                [2, 3, 0, 0x7],
              ];
              break;
            case 15:
              lines = [
                [-24, 7, 4, 0x7c],
                [-8, 6, 2, 0x3c],
                [-4, 5, 1, 0x1c],
                [-2, 4, 0, 0xc],
                [-1, 3, 0, 0x4],
                [0, 1, 0, 0x0],
                [1, 3, 0, 0x5],
                [2, 4, 0, 0xd],
                [3, 5, 1, 0x1d],
                [5, 6, 2, 0x3d],
                [9, 7, 4, 0x7d],
                [-25, 7, 32, 0x7e, "lower"],
                [25, 7, 32, 0x7f],
              ];
              break;
            default:
              throw new Jbig2Error(`standard table B.${number} does not exist`);
          }
          for (let i = 0, ii = lines.length; i < ii; i++) {
            lines[i] = new HuffmanLine(lines[i]);
          }
          table = new HuffmanTable(lines, true);
          standardTablesCache[number] = table;
          return table;
        }
        class Reader {
          constructor(data, start, end) {
            this.data = data;
            this.start = start;
            this.end = end;
            this.position = start;
            this.shift = -1;
            this.currentByte = 0;
          }
          readBit() {
            if (this.shift < 0) {
              if (this.position >= this.end) {
                throw new Jbig2Error("end of data while reading bit");
              }
              this.currentByte = this.data[this.position++];
              this.shift = 7;
            }
            const bit = (this.currentByte >> this.shift) & 1;
            this.shift--;
            return bit;
          }
          readBits(numBits) {
            let result = 0,
              i;
            for (i = numBits - 1; i >= 0; i--) {
              result |= this.readBit() << i;
            }
            return result;
          }
          byteAlign() {
            this.shift = -1;
          }
          next() {
            if (this.position >= this.end) {
              return -1;
            }
            return this.data[this.position++];
          }
        }
        function getCustomHuffmanTable(index, referredTo, customTables) {
          let currentIndex = 0;
          for (let i = 0, ii = referredTo.length; i < ii; i++) {
            const table = customTables[referredTo[i]];
            if (table) {
              if (index === currentIndex) {
                return table;
              }
              currentIndex++;
            }
          }
          throw new Jbig2Error("can't find custom Huffman table");
        }
        function getTextRegionHuffmanTables(
          textRegion,
          referredTo,
          customTables,
          numberOfSymbols,
          reader
        ) {
          const codes = [];
          for (let i = 0; i <= 34; i++) {
            const codeLength = reader.readBits(4);
            codes.push(new HuffmanLine([i, codeLength, 0, 0]));
          }
          const runCodesTable = new HuffmanTable(codes, false);
          codes.length = 0;
          for (let i = 0; i < numberOfSymbols; ) {
            const codeLength = runCodesTable.decode(reader);
            if (codeLength >= 32) {
              let repeatedLength, numberOfRepeats, j;
              switch (codeLength) {
                case 32:
                  if (i === 0) {
                    throw new Jbig2Error(
                      "no previous value in symbol ID table"
                    );
                  }
                  numberOfRepeats = reader.readBits(2) + 3;
                  repeatedLength = codes[i - 1].prefixLength;
                  break;
                case 33:
                  numberOfRepeats = reader.readBits(3) + 3;
                  repeatedLength = 0;
                  break;
                case 34:
                  numberOfRepeats = reader.readBits(7) + 11;
                  repeatedLength = 0;
                  break;
                default:
                  throw new Jbig2Error(
                    "invalid code length in symbol ID table"
                  );
              }
              for (j = 0; j < numberOfRepeats; j++) {
                codes.push(new HuffmanLine([i, repeatedLength, 0, 0]));
                i++;
              }
            } else {
              codes.push(new HuffmanLine([i, codeLength, 0, 0]));
              i++;
            }
          }
          reader.byteAlign();
          const symbolIDTable = new HuffmanTable(codes, false);
          let customIndex = 0,
            tableFirstS,
            tableDeltaS,
            tableDeltaT;
          switch (textRegion.huffmanFS) {
            case 0:
            case 1:
              tableFirstS = getStandardTable(textRegion.huffmanFS + 6);
              break;
            case 3:
              tableFirstS = getCustomHuffmanTable(
                customIndex,
                referredTo,
                customTables
              );
              customIndex++;
              break;
            default:
              throw new Jbig2Error("invalid Huffman FS selector");
          }
          switch (textRegion.huffmanDS) {
            case 0:
            case 1:
            case 2:
              tableDeltaS = getStandardTable(textRegion.huffmanDS + 8);
              break;
            case 3:
              tableDeltaS = getCustomHuffmanTable(
                customIndex,
                referredTo,
                customTables
              );
              customIndex++;
              break;
            default:
              throw new Jbig2Error("invalid Huffman DS selector");
          }
          switch (textRegion.huffmanDT) {
            case 0:
            case 1:
            case 2:
              tableDeltaT = getStandardTable(textRegion.huffmanDT + 11);
              break;
            case 3:
              tableDeltaT = getCustomHuffmanTable(
                customIndex,
                referredTo,
                customTables
              );
              customIndex++;
              break;
            default:
              throw new Jbig2Error("invalid Huffman DT selector");
          }
          if (textRegion.refinement) {
            throw new Jbig2Error("refinement with Huffman is not supported");
          }
          return {
            symbolIDTable,
            tableFirstS,
            tableDeltaS,
            tableDeltaT,
          };
        }
        function getSymbolDictionaryHuffmanTables(
          dictionary,
          referredTo,
          customTables
        ) {
          let customIndex = 0,
            tableDeltaHeight,
            tableDeltaWidth;
          switch (dictionary.huffmanDHSelector) {
            case 0:
            case 1:
              tableDeltaHeight = getStandardTable(
                dictionary.huffmanDHSelector + 4
              );
              break;
            case 3:
              tableDeltaHeight = getCustomHuffmanTable(
                customIndex,
                referredTo,
                customTables
              );
              customIndex++;
              break;
            default:
              throw new Jbig2Error("invalid Huffman DH selector");
          }
          switch (dictionary.huffmanDWSelector) {
            case 0:
            case 1:
              tableDeltaWidth = getStandardTable(
                dictionary.huffmanDWSelector + 2
              );
              break;
            case 3:
              tableDeltaWidth = getCustomHuffmanTable(
                customIndex,
                referredTo,
                customTables
              );
              customIndex++;
              break;
            default:
              throw new Jbig2Error("invalid Huffman DW selector");
          }
          let tableBitmapSize, tableAggregateInstances;
          if (dictionary.bitmapSizeSelector) {
            tableBitmapSize = getCustomHuffmanTable(
              customIndex,
              referredTo,
              customTables
            );
            customIndex++;
          } else {
            tableBitmapSize = getStandardTable(1);
          }
          if (dictionary.aggregationInstancesSelector) {
            tableAggregateInstances = getCustomHuffmanTable(
              customIndex,
              referredTo,
              customTables
            );
          } else {
            tableAggregateInstances = getStandardTable(1);
          }
          return {
            tableDeltaHeight,
            tableDeltaWidth,
            tableBitmapSize,
            tableAggregateInstances,
          };
        }
        function readUncompressedBitmap(reader, width, height) {
          const bitmap = [];
          for (let y = 0; y < height; y++) {
            const row = new Uint8Array(width);
            bitmap.push(row);
            for (let x = 0; x < width; x++) {
              row[x] = reader.readBit();
            }
            reader.byteAlign();
          }
          return bitmap;
        }
        function decodeMMRBitmap(input, width, height, endOfBlock) {
          const params = {
            K: -1,
            Columns: width,
            Rows: height,
            BlackIs1: true,
            EndOfBlock: endOfBlock,
          };
          const decoder = new _ccitt.CCITTFaxDecoder(input, params);
          const bitmap = [];
          let currentByte,
            eof = false;
          for (let y = 0; y < height; y++) {
            const row = new Uint8Array(width);
            bitmap.push(row);
            let shift = -1;
            for (let x = 0; x < width; x++) {
              if (shift < 0) {
                currentByte = decoder.readNextChar();
                if (currentByte === -1) {
                  currentByte = 0;
                  eof = true;
                }
                shift = 7;
              }
              row[x] = (currentByte >> shift) & 1;
              shift--;
            }
          }
          if (endOfBlock && !eof) {
            const lookForEOFLimit = 5;
            for (let i = 0; i < lookForEOFLimit; i++) {
              if (decoder.readNextChar() === -1) {
                break;
              }
            }
          }
          return bitmap;
        }
        class Jbig2Image {
          parseChunks(chunks) {
            return parseJbig2Chunks(chunks);
          }
          parse(data) {
            throw new Error("Not implemented: Jbig2Image.parse");
          }
        }
        exports.Jbig2Image = Jbig2Image;

        /***/
      },
      /* 25 */
      /***/ (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.ArithmeticDecoder = void 0;
        const QeTable = [
          {
            qe: 0x5601,
            nmps: 1,
            nlps: 1,
            switchFlag: 1,
          },
          {
            qe: 0x3401,
            nmps: 2,
            nlps: 6,
            switchFlag: 0,
          },
          {
            qe: 0x1801,
            nmps: 3,
            nlps: 9,
            switchFlag: 0,
          },
          {
            qe: 0x0ac1,
            nmps: 4,
            nlps: 12,
            switchFlag: 0,
          },
          {
            qe: 0x0521,
            nmps: 5,
            nlps: 29,
            switchFlag: 0,
          },
          {
            qe: 0x0221,
            nmps: 38,
            nlps: 33,
            switchFlag: 0,
          },
          {
            qe: 0x5601,
            nmps: 7,
            nlps: 6,
            switchFlag: 1,
          },
          {
            qe: 0x5401,
            nmps: 8,
            nlps: 14,
            switchFlag: 0,
          },
          {
            qe: 0x4801,
            nmps: 9,
            nlps: 14,
            switchFlag: 0,
          },
          {
            qe: 0x3801,
            nmps: 10,
            nlps: 14,
            switchFlag: 0,
          },
          {
            qe: 0x3001,
            nmps: 11,
            nlps: 17,
            switchFlag: 0,
          },
          {
            qe: 0x2401,
            nmps: 12,
            nlps: 18,
            switchFlag: 0,
          },
          {
            qe: 0x1c01,
            nmps: 13,
            nlps: 20,
            switchFlag: 0,
          },
          {
            qe: 0x1601,
            nmps: 29,
            nlps: 21,
            switchFlag: 0,
          },
          {
            qe: 0x5601,
            nmps: 15,
            nlps: 14,
            switchFlag: 1,
          },
          {
            qe: 0x5401,
            nmps: 16,
            nlps: 14,
            switchFlag: 0,
          },
          {
            qe: 0x5101,
            nmps: 17,
            nlps: 15,
            switchFlag: 0,
          },
          {
            qe: 0x4801,
            nmps: 18,
            nlps: 16,
            switchFlag: 0,
          },
          {
            qe: 0x3801,
            nmps: 19,
            nlps: 17,
            switchFlag: 0,
          },
          {
            qe: 0x3401,
            nmps: 20,
            nlps: 18,
            switchFlag: 0,
          },
          {
            qe: 0x3001,
            nmps: 21,
            nlps: 19,
            switchFlag: 0,
          },
          {
            qe: 0x2801,
            nmps: 22,
            nlps: 19,
            switchFlag: 0,
          },
          {
            qe: 0x2401,
            nmps: 23,
            nlps: 20,
            switchFlag: 0,
          },
          {
            qe: 0x2201,
            nmps: 24,
            nlps: 21,
            switchFlag: 0,
          },
          {
            qe: 0x1c01,
            nmps: 25,
            nlps: 22,
            switchFlag: 0,
          },
          {
            qe: 0x1801,
            nmps: 26,
            nlps: 23,
            switchFlag: 0,
          },
          {
            qe: 0x1601,
            nmps: 27,
            nlps: 24,
            switchFlag: 0,
          },
          {
            qe: 0x1401,
            nmps: 28,
            nlps: 25,
            switchFlag: 0,
          },
          {
            qe: 0x1201,
            nmps: 29,
            nlps: 26,
            switchFlag: 0,
          },
          {
            qe: 0x1101,
            nmps: 30,
            nlps: 27,
            switchFlag: 0,
          },
          {
            qe: 0x0ac1,
            nmps: 31,
            nlps: 28,
            switchFlag: 0,
          },
          {
            qe: 0x09c1,
            nmps: 32,
            nlps: 29,
            switchFlag: 0,
          },
          {
            qe: 0x08a1,
            nmps: 33,
            nlps: 30,
            switchFlag: 0,
          },
          {
            qe: 0x0521,
            nmps: 34,
            nlps: 31,
            switchFlag: 0,
          },
          {
            qe: 0x0441,
            nmps: 35,
            nlps: 32,
            switchFlag: 0,
          },
          {
            qe: 0x02a1,
            nmps: 36,
            nlps: 33,
            switchFlag: 0,
          },
          {
            qe: 0x0221,
            nmps: 37,
            nlps: 34,
            switchFlag: 0,
          },
          {
            qe: 0x0141,
            nmps: 38,
            nlps: 35,
            switchFlag: 0,
          },
          {
            qe: 0x0111,
            nmps: 39,
            nlps: 36,
            switchFlag: 0,
          },
          {
            qe: 0x0085,
            nmps: 40,
            nlps: 37,
            switchFlag: 0,
          },
          {
            qe: 0x0049,
            nmps: 41,
            nlps: 38,
            switchFlag: 0,
          },
          {
            qe: 0x0025,
            nmps: 42,
            nlps: 39,
            switchFlag: 0,
          },
          {
            qe: 0x0015,
            nmps: 43,
            nlps: 40,
            switchFlag: 0,
          },
          {
            qe: 0x0009,
            nmps: 44,
            nlps: 41,
            switchFlag: 0,
          },
          {
            qe: 0x0005,
            nmps: 45,
            nlps: 42,
            switchFlag: 0,
          },
          {
            qe: 0x0001,
            nmps: 45,
            nlps: 43,
            switchFlag: 0,
          },
          {
            qe: 0x5601,
            nmps: 46,
            nlps: 46,
            switchFlag: 0,
          },
        ];
        class ArithmeticDecoder {
          constructor(data, start, end) {
            this.data = data;
            this.bp = start;
            this.dataEnd = end;
            this.chigh = data[start];
            this.clow = 0;
            this.byteIn();
            this.chigh =
              ((this.chigh << 7) & 0xffff) | ((this.clow >> 9) & 0x7f);
            this.clow = (this.clow << 7) & 0xffff;
            this.ct -= 7;
            this.a = 0x8000;
          }
          byteIn() {
            const data = this.data;
            let bp = this.bp;
            if (data[bp] === 0xff) {
              if (data[bp + 1] > 0x8f) {
                this.clow += 0xff00;
                this.ct = 8;
              } else {
                bp++;
                this.clow += data[bp] << 9;
                this.ct = 7;
                this.bp = bp;
              }
            } else {
              bp++;
              this.clow += bp < this.dataEnd ? data[bp] << 8 : 0xff00;
              this.ct = 8;
              this.bp = bp;
            }
            if (this.clow > 0xffff) {
              this.chigh += this.clow >> 16;
              this.clow &= 0xffff;
            }
          }
          readBit(contexts, pos) {
            let cx_index = contexts[pos] >> 1,
              cx_mps = contexts[pos] & 1;
            const qeTableIcx = QeTable[cx_index];
            const qeIcx = qeTableIcx.qe;
            let d;
            let a = this.a - qeIcx;
            if (this.chigh < qeIcx) {
              if (a < qeIcx) {
                a = qeIcx;
                d = cx_mps;
                cx_index = qeTableIcx.nmps;
              } else {
                a = qeIcx;
                d = 1 ^ cx_mps;
                if (qeTableIcx.switchFlag === 1) {
                  cx_mps = d;
                }
                cx_index = qeTableIcx.nlps;
              }
            } else {
              this.chigh -= qeIcx;
              if ((a & 0x8000) !== 0) {
                this.a = a;
                return cx_mps;
              }
              if (a < qeIcx) {
                d = 1 ^ cx_mps;
                if (qeTableIcx.switchFlag === 1) {
                  cx_mps = d;
                }
                cx_index = qeTableIcx.nlps;
              } else {
                d = cx_mps;
                cx_index = qeTableIcx.nmps;
              }
            }
            do {
              if (this.ct === 0) {
                this.byteIn();
              }
              a <<= 1;
              this.chigh =
                ((this.chigh << 1) & 0xffff) | ((this.clow >> 15) & 1);
              this.clow = (this.clow << 1) & 0xffff;
              this.ct--;
            } while ((a & 0x8000) === 0);
            this.a = a;
            contexts[pos] = (cx_index << 1) | cx_mps;
            return d;
          }
        }
        exports.ArithmeticDecoder = ArithmeticDecoder;

        /***/
      },
      /* 26 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.JpegStream = void 0;
        var _decode_stream = __w_pdfjs_require__(18);
        var _primitives = __w_pdfjs_require__(4);
        var _jpg = __w_pdfjs_require__(27);
        var _util = __w_pdfjs_require__(2);
        class JpegStream extends _decode_stream.DecodeStream {
          constructor(stream, maybeLength, params) {
            let ch;
            while ((ch = stream.getByte()) !== -1) {
              if (ch === 0xff) {
                stream.skip(-1);
                break;
              }
            }
            super(maybeLength);
            this.stream = stream;
            this.dict = stream.dict;
            this.maybeLength = maybeLength;
            this.params = params;
          }
          get bytes() {
            return (0, _util.shadow)(
              this,
              "bytes",
              this.stream.getBytes(this.maybeLength)
            );
          }
          ensureBuffer(requested) {}
          readBlock() {
            if (this.eof) {
              return;
            }
            const jpegOptions = {
              decodeTransform: undefined,
              colorTransform: undefined,
            };
            const decodeArr = this.dict.getArray("D", "Decode");
            if ((this.forceRGBA || this.forceRGB) && Array.isArray(decodeArr)) {
              const bitsPerComponent =
                this.dict.get("BPC", "BitsPerComponent") || 8;
              const decodeArrLength = decodeArr.length;
              const transform = new Int32Array(decodeArrLength);
              let transformNeeded = false;
              const maxValue = (1 << bitsPerComponent) - 1;
              for (let i = 0; i < decodeArrLength; i += 2) {
                transform[i] = ((decodeArr[i + 1] - decodeArr[i]) * 256) | 0;
                transform[i + 1] = (decodeArr[i] * maxValue) | 0;
                if (transform[i] !== 256 || transform[i + 1] !== 0) {
                  transformNeeded = true;
                }
              }
              if (transformNeeded) {
                jpegOptions.decodeTransform = transform;
              }
            }
            if (this.params instanceof _primitives.Dict) {
              const colorTransform = this.params.get("ColorTransform");
              if (Number.isInteger(colorTransform)) {
                jpegOptions.colorTransform = colorTransform;
              }
            }
            const jpegImage = new _jpg.JpegImage(jpegOptions);
            jpegImage.parse(this.bytes);
            const data = jpegImage.getData({
              width: this.drawWidth,
              height: this.drawHeight,
              forceRGBA: this.forceRGBA,
              forceRGB: this.forceRGB,
              isSourcePDF: true,
            });
            this.buffer = data;
            this.bufferLength = data.length;
            this.eof = true;
          }
        }
        exports.JpegStream = JpegStream;

        /***/
      },
      /* 27 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.JpegImage = void 0;
        var _util = __w_pdfjs_require__(2);
        var _image_utils = __w_pdfjs_require__(28);
        var _core_utils = __w_pdfjs_require__(3);
        class JpegError extends _util.BaseException {
          constructor(msg) {
            super(`JPEG error: ${msg}`, "JpegError");
          }
        }
        class DNLMarkerError extends _util.BaseException {
          constructor(message, scanLines) {
            super(message, "DNLMarkerError");
            this.scanLines = scanLines;
          }
        }
        class EOIMarkerError extends _util.BaseException {
          constructor(msg) {
            super(msg, "EOIMarkerError");
          }
        }
        const dctZigZag = new Uint8Array([
          0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26,
          33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57,
          50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31,
          39, 46, 53, 60, 61, 54, 47, 55, 62, 63,
        ]);
        const dctCos1 = 4017;
        const dctSin1 = 799;
        const dctCos3 = 3406;
        const dctSin3 = 2276;
        const dctCos6 = 1567;
        const dctSin6 = 3784;
        const dctSqrt2 = 5793;
        const dctSqrt1d2 = 2896;
        function buildHuffmanTable(codeLengths, values) {
          let k = 0,
            i,
            j,
            length = 16;
          while (length > 0 && !codeLengths[length - 1]) {
            length--;
          }
          const code = [
            {
              children: [],
              index: 0,
            },
          ];
          let p = code[0],
            q;
          for (i = 0; i < length; i++) {
            for (j = 0; j < codeLengths[i]; j++) {
              p = code.pop();
              p.children[p.index] = values[k];
              while (p.index > 0) {
                p = code.pop();
              }
              p.index++;
              code.push(p);
              while (code.length <= i) {
                code.push(
                  (q = {
                    children: [],
                    index: 0,
                  })
                );
                p.children[p.index] = q.children;
                p = q;
              }
              k++;
            }
            if (i + 1 < length) {
              code.push(
                (q = {
                  children: [],
                  index: 0,
                })
              );
              p.children[p.index] = q.children;
              p = q;
            }
          }
          return code[0].children;
        }
        function getBlockBufferOffset(component, row, col) {
          return 64 * ((component.blocksPerLine + 1) * row + col);
        }
        function decodeScan(
          data,
          offset,
          frame,
          components,
          resetInterval,
          spectralStart,
          spectralEnd,
          successivePrev,
          successive,
          parseDNLMarker = false
        ) {
          const mcusPerLine = frame.mcusPerLine;
          const progressive = frame.progressive;
          const startOffset = offset;
          let bitsData = 0,
            bitsCount = 0;
          function readBit() {
            if (bitsCount > 0) {
              bitsCount--;
              return (bitsData >> bitsCount) & 1;
            }
            bitsData = data[offset++];
            if (bitsData === 0xff) {
              const nextByte = data[offset++];
              if (nextByte) {
                if (nextByte === 0xdc && parseDNLMarker) {
                  offset += 2;
                  const scanLines = (0, _core_utils.readUint16)(data, offset);
                  offset += 2;
                  if (scanLines > 0 && scanLines !== frame.scanLines) {
                    throw new DNLMarkerError(
                      "Found DNL marker (0xFFDC) while parsing scan data",
                      scanLines
                    );
                  }
                } else if (nextByte === 0xd9) {
                  if (parseDNLMarker) {
                    const maybeScanLines =
                      blockRow * (frame.precision === 8 ? 8 : 0);
                    if (
                      maybeScanLines > 0 &&
                      Math.round(frame.scanLines / maybeScanLines) >= 5
                    ) {
                      throw new DNLMarkerError(
                        "Found EOI marker (0xFFD9) while parsing scan data, " +
                          "possibly caused by incorrect `scanLines` parameter",
                        maybeScanLines
                      );
                    }
                  }
                  throw new EOIMarkerError(
                    "Found EOI marker (0xFFD9) while parsing scan data"
                  );
                }
                throw new JpegError(
                  `unexpected marker ${((bitsData << 8) | nextByte).toString(
                    16
                  )}`
                );
              }
            }
            bitsCount = 7;
            return bitsData >>> 7;
          }
          function decodeHuffman(tree) {
            let node = tree;
            while (true) {
              node = node[readBit()];
              switch (typeof node) {
                case "number":
                  return node;
                case "object":
                  continue;
              }
              throw new JpegError("invalid huffman sequence");
            }
          }
          function receive(length) {
            let n = 0;
            while (length > 0) {
              n = (n << 1) | readBit();
              length--;
            }
            return n;
          }
          function receiveAndExtend(length) {
            if (length === 1) {
              return readBit() === 1 ? 1 : -1;
            }
            const n = receive(length);
            if (n >= 1 << (length - 1)) {
              return n;
            }
            return n + (-1 << length) + 1;
          }
          function decodeBaseline(component, blockOffset) {
            const t = decodeHuffman(component.huffmanTableDC);
            const diff = t === 0 ? 0 : receiveAndExtend(t);
            component.blockData[blockOffset] = component.pred += diff;
            let k = 1;
            while (k < 64) {
              const rs = decodeHuffman(component.huffmanTableAC);
              const s = rs & 15,
                r = rs >> 4;
              if (s === 0) {
                if (r < 15) {
                  break;
                }
                k += 16;
                continue;
              }
              k += r;
              const z = dctZigZag[k];
              component.blockData[blockOffset + z] = receiveAndExtend(s);
              k++;
            }
          }
          function decodeDCFirst(component, blockOffset) {
            const t = decodeHuffman(component.huffmanTableDC);
            const diff = t === 0 ? 0 : receiveAndExtend(t) << successive;
            component.blockData[blockOffset] = component.pred += diff;
          }
          function decodeDCSuccessive(component, blockOffset) {
            component.blockData[blockOffset] |= readBit() << successive;
          }
          let eobrun = 0;
          function decodeACFirst(component, blockOffset) {
            if (eobrun > 0) {
              eobrun--;
              return;
            }
            let k = spectralStart;
            const e = spectralEnd;
            while (k <= e) {
              const rs = decodeHuffman(component.huffmanTableAC);
              const s = rs & 15,
                r = rs >> 4;
              if (s === 0) {
                if (r < 15) {
                  eobrun = receive(r) + (1 << r) - 1;
                  break;
                }
                k += 16;
                continue;
              }
              k += r;
              const z = dctZigZag[k];
              component.blockData[blockOffset + z] =
                receiveAndExtend(s) * (1 << successive);
              k++;
            }
          }
          let successiveACState = 0,
            successiveACNextValue;
          function decodeACSuccessive(component, blockOffset) {
            let k = spectralStart;
            const e = spectralEnd;
            let r = 0;
            let s;
            let rs;
            while (k <= e) {
              const offsetZ = blockOffset + dctZigZag[k];
              const sign = component.blockData[offsetZ] < 0 ? -1 : 1;
              switch (successiveACState) {
                case 0:
                  rs = decodeHuffman(component.huffmanTableAC);
                  s = rs & 15;
                  r = rs >> 4;
                  if (s === 0) {
                    if (r < 15) {
                      eobrun = receive(r) + (1 << r);
                      successiveACState = 4;
                    } else {
                      r = 16;
                      successiveACState = 1;
                    }
                  } else {
                    if (s !== 1) {
                      throw new JpegError("invalid ACn encoding");
                    }
                    successiveACNextValue = receiveAndExtend(s);
                    successiveACState = r ? 2 : 3;
                  }
                  continue;
                case 1:
                case 2:
                  if (component.blockData[offsetZ]) {
                    component.blockData[offsetZ] +=
                      sign * (readBit() << successive);
                  } else {
                    r--;
                    if (r === 0) {
                      successiveACState = successiveACState === 2 ? 3 : 0;
                    }
                  }
                  break;
                case 3:
                  if (component.blockData[offsetZ]) {
                    component.blockData[offsetZ] +=
                      sign * (readBit() << successive);
                  } else {
                    component.blockData[offsetZ] =
                      successiveACNextValue << successive;
                    successiveACState = 0;
                  }
                  break;
                case 4:
                  if (component.blockData[offsetZ]) {
                    component.blockData[offsetZ] +=
                      sign * (readBit() << successive);
                  }
                  break;
              }
              k++;
            }
            if (successiveACState === 4) {
              eobrun--;
              if (eobrun === 0) {
                successiveACState = 0;
              }
            }
          }
          let blockRow = 0;
          function decodeMcu(component, decode, mcu, row, col) {
            const mcuRow = (mcu / mcusPerLine) | 0;
            const mcuCol = mcu % mcusPerLine;
            blockRow = mcuRow * component.v + row;
            const blockCol = mcuCol * component.h + col;
            const blockOffset = getBlockBufferOffset(
              component,
              blockRow,
              blockCol
            );
            decode(component, blockOffset);
          }
          function decodeBlock(component, decode, mcu) {
            blockRow = (mcu / component.blocksPerLine) | 0;
            const blockCol = mcu % component.blocksPerLine;
            const blockOffset = getBlockBufferOffset(
              component,
              blockRow,
              blockCol
            );
            decode(component, blockOffset);
          }
          const componentsLength = components.length;
          let component, i, j, k, n;
          let decodeFn;
          if (progressive) {
            if (spectralStart === 0) {
              decodeFn =
                successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
            } else {
              decodeFn =
                successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
            }
          } else {
            decodeFn = decodeBaseline;
          }
          let mcu = 0,
            fileMarker;
          const mcuExpected =
            componentsLength === 1
              ? components[0].blocksPerLine * components[0].blocksPerColumn
              : mcusPerLine * frame.mcusPerColumn;
          let h, v;
          while (mcu <= mcuExpected) {
            const mcuToRead = resetInterval
              ? Math.min(mcuExpected - mcu, resetInterval)
              : mcuExpected;
            if (mcuToRead > 0) {
              for (i = 0; i < componentsLength; i++) {
                components[i].pred = 0;
              }
              eobrun = 0;
              if (componentsLength === 1) {
                component = components[0];
                for (n = 0; n < mcuToRead; n++) {
                  decodeBlock(component, decodeFn, mcu);
                  mcu++;
                }
              } else {
                for (n = 0; n < mcuToRead; n++) {
                  for (i = 0; i < componentsLength; i++) {
                    component = components[i];
                    h = component.h;
                    v = component.v;
                    for (j = 0; j < v; j++) {
                      for (k = 0; k < h; k++) {
                        decodeMcu(component, decodeFn, mcu, j, k);
                      }
                    }
                  }
                  mcu++;
                }
              }
            }
            bitsCount = 0;
            fileMarker = findNextFileMarker(data, offset);
            if (!fileMarker) {
              break;
            }
            if (fileMarker.invalid) {
              const partialMsg = mcuToRead > 0 ? "unexpected" : "excessive";
              (0, _util.warn)(
                `decodeScan - ${partialMsg} MCU data, current marker is: ${fileMarker.invalid}`
              );
              offset = fileMarker.offset;
            }
            if (fileMarker.marker >= 0xffd0 && fileMarker.marker <= 0xffd7) {
              offset += 2;
            } else {
              break;
            }
          }
          return offset - startOffset;
        }
        function quantizeAndInverse(component, blockBufferOffset, p) {
          const qt = component.quantizationTable,
            blockData = component.blockData;
          let v0, v1, v2, v3, v4, v5, v6, v7;
          let p0, p1, p2, p3, p4, p5, p6, p7;
          let t;
          if (!qt) {
            throw new JpegError("missing required Quantization Table.");
          }
          for (let row = 0; row < 64; row += 8) {
            p0 = blockData[blockBufferOffset + row];
            p1 = blockData[blockBufferOffset + row + 1];
            p2 = blockData[blockBufferOffset + row + 2];
            p3 = blockData[blockBufferOffset + row + 3];
            p4 = blockData[blockBufferOffset + row + 4];
            p5 = blockData[blockBufferOffset + row + 5];
            p6 = blockData[blockBufferOffset + row + 6];
            p7 = blockData[blockBufferOffset + row + 7];
            p0 *= qt[row];
            if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
              t = (dctSqrt2 * p0 + 512) >> 10;
              p[row] = t;
              p[row + 1] = t;
              p[row + 2] = t;
              p[row + 3] = t;
              p[row + 4] = t;
              p[row + 5] = t;
              p[row + 6] = t;
              p[row + 7] = t;
              continue;
            }
            p1 *= qt[row + 1];
            p2 *= qt[row + 2];
            p3 *= qt[row + 3];
            p4 *= qt[row + 4];
            p5 *= qt[row + 5];
            p6 *= qt[row + 6];
            p7 *= qt[row + 7];
            v0 = (dctSqrt2 * p0 + 128) >> 8;
            v1 = (dctSqrt2 * p4 + 128) >> 8;
            v2 = p2;
            v3 = p6;
            v4 = (dctSqrt1d2 * (p1 - p7) + 128) >> 8;
            v7 = (dctSqrt1d2 * (p1 + p7) + 128) >> 8;
            v5 = p3 << 4;
            v6 = p5 << 4;
            v0 = (v0 + v1 + 1) >> 1;
            v1 = v0 - v1;
            t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;
            v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;
            v3 = t;
            v4 = (v4 + v6 + 1) >> 1;
            v6 = v4 - v6;
            v7 = (v7 + v5 + 1) >> 1;
            v5 = v7 - v5;
            v0 = (v0 + v3 + 1) >> 1;
            v3 = v0 - v3;
            v1 = (v1 + v2 + 1) >> 1;
            v2 = v1 - v2;
            t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
            v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
            v7 = t;
            t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
            v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
            v6 = t;
            p[row] = v0 + v7;
            p[row + 7] = v0 - v7;
            p[row + 1] = v1 + v6;
            p[row + 6] = v1 - v6;
            p[row + 2] = v2 + v5;
            p[row + 5] = v2 - v5;
            p[row + 3] = v3 + v4;
            p[row + 4] = v3 - v4;
          }
          for (let col = 0; col < 8; ++col) {
            p0 = p[col];
            p1 = p[col + 8];
            p2 = p[col + 16];
            p3 = p[col + 24];
            p4 = p[col + 32];
            p5 = p[col + 40];
            p6 = p[col + 48];
            p7 = p[col + 56];
            if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
              t = (dctSqrt2 * p0 + 8192) >> 14;
              if (t < -2040) {
                t = 0;
              } else if (t >= 2024) {
                t = 255;
              } else {
                t = (t + 2056) >> 4;
              }
              blockData[blockBufferOffset + col] = t;
              blockData[blockBufferOffset + col + 8] = t;
              blockData[blockBufferOffset + col + 16] = t;
              blockData[blockBufferOffset + col + 24] = t;
              blockData[blockBufferOffset + col + 32] = t;
              blockData[blockBufferOffset + col + 40] = t;
              blockData[blockBufferOffset + col + 48] = t;
              blockData[blockBufferOffset + col + 56] = t;
              continue;
            }
            v0 = (dctSqrt2 * p0 + 2048) >> 12;
            v1 = (dctSqrt2 * p4 + 2048) >> 12;
            v2 = p2;
            v3 = p6;
            v4 = (dctSqrt1d2 * (p1 - p7) + 2048) >> 12;
            v7 = (dctSqrt1d2 * (p1 + p7) + 2048) >> 12;
            v5 = p3;
            v6 = p5;
            v0 = ((v0 + v1 + 1) >> 1) + 4112;
            v1 = v0 - v1;
            t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;
            v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;
            v3 = t;
            v4 = (v4 + v6 + 1) >> 1;
            v6 = v4 - v6;
            v7 = (v7 + v5 + 1) >> 1;
            v5 = v7 - v5;
            v0 = (v0 + v3 + 1) >> 1;
            v3 = v0 - v3;
            v1 = (v1 + v2 + 1) >> 1;
            v2 = v1 - v2;
            t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
            v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
            v7 = t;
            t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
            v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
            v6 = t;
            p0 = v0 + v7;
            p7 = v0 - v7;
            p1 = v1 + v6;
            p6 = v1 - v6;
            p2 = v2 + v5;
            p5 = v2 - v5;
            p3 = v3 + v4;
            p4 = v3 - v4;
            if (p0 < 16) {
              p0 = 0;
            } else if (p0 >= 4080) {
              p0 = 255;
            } else {
              p0 >>= 4;
            }
            if (p1 < 16) {
              p1 = 0;
            } else if (p1 >= 4080) {
              p1 = 255;
            } else {
              p1 >>= 4;
            }
            if (p2 < 16) {
              p2 = 0;
            } else if (p2 >= 4080) {
              p2 = 255;
            } else {
              p2 >>= 4;
            }
            if (p3 < 16) {
              p3 = 0;
            } else if (p3 >= 4080) {
              p3 = 255;
            } else {
              p3 >>= 4;
            }
            if (p4 < 16) {
              p4 = 0;
            } else if (p4 >= 4080) {
              p4 = 255;
            } else {
              p4 >>= 4;
            }
            if (p5 < 16) {
              p5 = 0;
            } else if (p5 >= 4080) {
              p5 = 255;
            } else {
              p5 >>= 4;
            }
            if (p6 < 16) {
              p6 = 0;
            } else if (p6 >= 4080) {
              p6 = 255;
            } else {
              p6 >>= 4;
            }
            if (p7 < 16) {
              p7 = 0;
            } else if (p7 >= 4080) {
              p7 = 255;
            } else {
              p7 >>= 4;
            }
            blockData[blockBufferOffset + col] = p0;
            blockData[blockBufferOffset + col + 8] = p1;
            blockData[blockBufferOffset + col + 16] = p2;
            blockData[blockBufferOffset + col + 24] = p3;
            blockData[blockBufferOffset + col + 32] = p4;
            blockData[blockBufferOffset + col + 40] = p5;
            blockData[blockBufferOffset + col + 48] = p6;
            blockData[blockBufferOffset + col + 56] = p7;
          }
        }
        function buildComponentData(frame, component) {
          const blocksPerLine = component.blocksPerLine;
          const blocksPerColumn = component.blocksPerColumn;
          const computationBuffer = new Int16Array(64);
          for (let blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
            for (let blockCol = 0; blockCol < blocksPerLine; blockCol++) {
              const offset = getBlockBufferOffset(
                component,
                blockRow,
                blockCol
              );
              quantizeAndInverse(component, offset, computationBuffer);
            }
          }
          return component.blockData;
        }
        function findNextFileMarker(data, currentPos, startPos = currentPos) {
          const maxPos = data.length - 1;
          let newPos = startPos < currentPos ? startPos : currentPos;
          if (currentPos >= maxPos) {
            return null;
          }
          const currentMarker = (0, _core_utils.readUint16)(data, currentPos);
          if (currentMarker >= 0xffc0 && currentMarker <= 0xfffe) {
            return {
              invalid: null,
              marker: currentMarker,
              offset: currentPos,
            };
          }
          let newMarker = (0, _core_utils.readUint16)(data, newPos);
          while (!(newMarker >= 0xffc0 && newMarker <= 0xfffe)) {
            if (++newPos >= maxPos) {
              return null;
            }
            newMarker = (0, _core_utils.readUint16)(data, newPos);
          }
          return {
            invalid: currentMarker.toString(16),
            marker: newMarker,
            offset: newPos,
          };
        }
        class JpegImage {
          constructor({ decodeTransform = null, colorTransform = -1 } = {}) {
            this._decodeTransform = decodeTransform;
            this._colorTransform = colorTransform;
          }
          parse(data, { dnlScanLines = null } = {}) {
            function readDataBlock() {
              const length = (0, _core_utils.readUint16)(data, offset);
              offset += 2;
              let endOffset = offset + length - 2;
              const fileMarker = findNextFileMarker(data, endOffset, offset);
              if (fileMarker?.invalid) {
                (0, _util.warn)(
                  "readDataBlock - incorrect length, current marker is: " +
                    fileMarker.invalid
                );
                endOffset = fileMarker.offset;
              }
              const array = data.subarray(offset, endOffset);
              offset += array.length;
              return array;
            }
            function prepareComponents(frame) {
              const mcusPerLine = Math.ceil(
                frame.samplesPerLine / 8 / frame.maxH
              );
              const mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);
              for (const component of frame.components) {
                const blocksPerLine = Math.ceil(
                  (Math.ceil(frame.samplesPerLine / 8) * component.h) /
                    frame.maxH
                );
                const blocksPerColumn = Math.ceil(
                  (Math.ceil(frame.scanLines / 8) * component.v) / frame.maxV
                );
                const blocksPerLineForMcu = mcusPerLine * component.h;
                const blocksPerColumnForMcu = mcusPerColumn * component.v;
                const blocksBufferSize =
                  64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
                component.blockData = new Int16Array(blocksBufferSize);
                component.blocksPerLine = blocksPerLine;
                component.blocksPerColumn = blocksPerColumn;
              }
              frame.mcusPerLine = mcusPerLine;
              frame.mcusPerColumn = mcusPerColumn;
            }
            let offset = 0;
            let jfif = null;
            let adobe = null;
            let frame, resetInterval;
            let numSOSMarkers = 0;
            const quantizationTables = [];
            const huffmanTablesAC = [],
              huffmanTablesDC = [];
            let fileMarker = (0, _core_utils.readUint16)(data, offset);
            offset += 2;
            if (fileMarker !== 0xffd8) {
              throw new JpegError("SOI not found");
            }
            fileMarker = (0, _core_utils.readUint16)(data, offset);
            offset += 2;
            markerLoop: while (fileMarker !== 0xffd9) {
              let i, j, l;
              switch (fileMarker) {
                case 0xffe0:
                case 0xffe1:
                case 0xffe2:
                case 0xffe3:
                case 0xffe4:
                case 0xffe5:
                case 0xffe6:
                case 0xffe7:
                case 0xffe8:
                case 0xffe9:
                case 0xffea:
                case 0xffeb:
                case 0xffec:
                case 0xffed:
                case 0xffee:
                case 0xffef:
                case 0xfffe:
                  const appData = readDataBlock();
                  if (fileMarker === 0xffe0) {
                    if (
                      appData[0] === 0x4a &&
                      appData[1] === 0x46 &&
                      appData[2] === 0x49 &&
                      appData[3] === 0x46 &&
                      appData[4] === 0
                    ) {
                      jfif = {
                        version: {
                          major: appData[5],
                          minor: appData[6],
                        },
                        densityUnits: appData[7],
                        xDensity: (appData[8] << 8) | appData[9],
                        yDensity: (appData[10] << 8) | appData[11],
                        thumbWidth: appData[12],
                        thumbHeight: appData[13],
                        thumbData: appData.subarray(
                          14,
                          14 + 3 * appData[12] * appData[13]
                        ),
                      };
                    }
                  }
                  if (fileMarker === 0xffee) {
                    if (
                      appData[0] === 0x41 &&
                      appData[1] === 0x64 &&
                      appData[2] === 0x6f &&
                      appData[3] === 0x62 &&
                      appData[4] === 0x65
                    ) {
                      adobe = {
                        version: (appData[5] << 8) | appData[6],
                        flags0: (appData[7] << 8) | appData[8],
                        flags1: (appData[9] << 8) | appData[10],
                        transformCode: appData[11],
                      };
                    }
                  }
                  break;
                case 0xffdb:
                  const quantizationTablesLength = (0, _core_utils.readUint16)(
                    data,
                    offset
                  );
                  offset += 2;
                  const quantizationTablesEnd =
                    quantizationTablesLength + offset - 2;
                  let z;
                  while (offset < quantizationTablesEnd) {
                    const quantizationTableSpec = data[offset++];
                    const tableData = new Uint16Array(64);
                    if (quantizationTableSpec >> 4 === 0) {
                      for (j = 0; j < 64; j++) {
                        z = dctZigZag[j];
                        tableData[z] = data[offset++];
                      }
                    } else if (quantizationTableSpec >> 4 === 1) {
                      for (j = 0; j < 64; j++) {
                        z = dctZigZag[j];
                        tableData[z] = (0, _core_utils.readUint16)(
                          data,
                          offset
                        );
                        offset += 2;
                      }
                    } else {
                      throw new JpegError("DQT - invalid table spec");
                    }
                    quantizationTables[quantizationTableSpec & 15] = tableData;
                  }
                  break;
                case 0xffc0:
                case 0xffc1:
                case 0xffc2:
                  if (frame) {
                    throw new JpegError("Only single frame JPEGs supported");
                  }
                  offset += 2;
                  frame = {};
                  frame.extended = fileMarker === 0xffc1;
                  frame.progressive = fileMarker === 0xffc2;
                  frame.precision = data[offset++];
                  const sofScanLines = (0, _core_utils.readUint16)(
                    data,
                    offset
                  );
                  offset += 2;
                  frame.scanLines = dnlScanLines || sofScanLines;
                  frame.samplesPerLine = (0, _core_utils.readUint16)(
                    data,
                    offset
                  );
                  offset += 2;
                  frame.components = [];
                  frame.componentIds = {};
                  const componentsCount = data[offset++];
                  let maxH = 0,
                    maxV = 0;
                  for (i = 0; i < componentsCount; i++) {
                    const componentId = data[offset];
                    const h = data[offset + 1] >> 4;
                    const v = data[offset + 1] & 15;
                    if (maxH < h) {
                      maxH = h;
                    }
                    if (maxV < v) {
                      maxV = v;
                    }
                    const qId = data[offset + 2];
                    l = frame.components.push({
                      h,
                      v,
                      quantizationId: qId,
                      quantizationTable: null,
                    });
                    frame.componentIds[componentId] = l - 1;
                    offset += 3;
                  }
                  frame.maxH = maxH;
                  frame.maxV = maxV;
                  prepareComponents(frame);
                  break;
                case 0xffc4:
                  const huffmanLength = (0, _core_utils.readUint16)(
                    data,
                    offset
                  );
                  offset += 2;
                  for (i = 2; i < huffmanLength; ) {
                    const huffmanTableSpec = data[offset++];
                    const codeLengths = new Uint8Array(16);
                    let codeLengthSum = 0;
                    for (j = 0; j < 16; j++, offset++) {
                      codeLengthSum += codeLengths[j] = data[offset];
                    }
                    const huffmanValues = new Uint8Array(codeLengthSum);
                    for (j = 0; j < codeLengthSum; j++, offset++) {
                      huffmanValues[j] = data[offset];
                    }
                    i += 17 + codeLengthSum;
                    (huffmanTableSpec >> 4 === 0
                      ? huffmanTablesDC
                      : huffmanTablesAC)[huffmanTableSpec & 15] =
                      buildHuffmanTable(codeLengths, huffmanValues);
                  }
                  break;
                case 0xffdd:
                  offset += 2;
                  resetInterval = (0, _core_utils.readUint16)(data, offset);
                  offset += 2;
                  break;
                case 0xffda:
                  const parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;
                  offset += 2;
                  const selectorsCount = data[offset++],
                    components = [];
                  for (i = 0; i < selectorsCount; i++) {
                    const index = data[offset++];
                    const componentIndex = frame.componentIds[index];
                    const component = frame.components[componentIndex];
                    component.index = index;
                    const tableSpec = data[offset++];
                    component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
                    component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
                    components.push(component);
                  }
                  const spectralStart = data[offset++],
                    spectralEnd = data[offset++],
                    successiveApproximation = data[offset++];
                  try {
                    const processed = decodeScan(
                      data,
                      offset,
                      frame,
                      components,
                      resetInterval,
                      spectralStart,
                      spectralEnd,
                      successiveApproximation >> 4,
                      successiveApproximation & 15,
                      parseDNLMarker
                    );
                    offset += processed;
                  } catch (ex) {
                    if (ex instanceof DNLMarkerError) {
                      (0, _util.warn)(
                        `${ex.message} -- attempting to re-parse the JPEG image.`
                      );
                      return this.parse(data, {
                        dnlScanLines: ex.scanLines,
                      });
                    } else if (ex instanceof EOIMarkerError) {
                      (0, _util.warn)(
                        `${ex.message} -- ignoring the rest of the image data.`
                      );
                      break markerLoop;
                    }
                    throw ex;
                  }
                  break;
                case 0xffdc:
                  offset += 4;
                  break;
                case 0xffff:
                  if (data[offset] !== 0xff) {
                    offset--;
                  }
                  break;
                default:
                  const nextFileMarker = findNextFileMarker(
                    data,
                    offset - 2,
                    offset - 3
                  );
                  if (nextFileMarker?.invalid) {
                    (0, _util.warn)(
                      "JpegImage.parse - unexpected data, current marker is: " +
                        nextFileMarker.invalid
                    );
                    offset = nextFileMarker.offset;
                    break;
                  }
                  if (!nextFileMarker || offset >= data.length - 1) {
                    (0, _util.warn)(
                      "JpegImage.parse - reached the end of the image data " +
                        "without finding an EOI marker (0xFFD9)."
                    );
                    break markerLoop;
                  }
                  throw new JpegError(
                    "JpegImage.parse - unknown marker: " +
                      fileMarker.toString(16)
                  );
              }
              fileMarker = (0, _core_utils.readUint16)(data, offset);
              offset += 2;
            }
            this.width = frame.samplesPerLine;
            this.height = frame.scanLines;
            this.jfif = jfif;
            this.adobe = adobe;
            this.components = [];
            for (const component of frame.components) {
              const quantizationTable =
                quantizationTables[component.quantizationId];
              if (quantizationTable) {
                component.quantizationTable = quantizationTable;
              }
              this.components.push({
                index: component.index,
                output: buildComponentData(frame, component),
                scaleX: component.h / frame.maxH,
                scaleY: component.v / frame.maxV,
                blocksPerLine: component.blocksPerLine,
                blocksPerColumn: component.blocksPerColumn,
              });
            }
            this.numComponents = this.components.length;
            return undefined;
          }
          _getLinearizedBlockData(width, height, isSourcePDF = false) {
            const scaleX = this.width / width,
              scaleY = this.height / height;
            let component, componentScaleX, componentScaleY, blocksPerScanline;
            let x, y, i, j, k;
            let index;
            let offset = 0;
            let output;
            const numComponents = this.components.length;
            const dataLength = width * height * numComponents;
            const data = new Uint8ClampedArray(dataLength);
            const xScaleBlockOffset = new Uint32Array(width);
            const mask3LSB = 0xfffffff8;
            let lastComponentScaleX;
            for (i = 0; i < numComponents; i++) {
              component = this.components[i];
              componentScaleX = component.scaleX * scaleX;
              componentScaleY = component.scaleY * scaleY;
              offset = i;
              output = component.output;
              blocksPerScanline = (component.blocksPerLine + 1) << 3;
              if (componentScaleX !== lastComponentScaleX) {
                for (x = 0; x < width; x++) {
                  j = 0 | (x * componentScaleX);
                  xScaleBlockOffset[x] = ((j & mask3LSB) << 3) | (j & 7);
                }
                lastComponentScaleX = componentScaleX;
              }
              for (y = 0; y < height; y++) {
                j = 0 | (y * componentScaleY);
                index = (blocksPerScanline * (j & mask3LSB)) | ((j & 7) << 3);
                for (x = 0; x < width; x++) {
                  data[offset] = output[index + xScaleBlockOffset[x]];
                  offset += numComponents;
                }
              }
            }
            let transform = this._decodeTransform;
            if (!isSourcePDF && numComponents === 4 && !transform) {
              transform = new Int32Array([
                -256, 255, -256, 255, -256, 255, -256, 255,
              ]);
            }
            if (transform) {
              for (i = 0; i < dataLength; ) {
                for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {
                  data[i] = ((data[i] * transform[k]) >> 8) + transform[k + 1];
                }
              }
            }
            return data;
          }
          get _isColorConversionNeeded() {
            if (this.adobe) {
              return !!this.adobe.transformCode;
            }
            if (this.numComponents === 3) {
              if (this._colorTransform === 0) {
                return false;
              } else if (
                this.components[0].index === 0x52 &&
                this.components[1].index === 0x47 &&
                this.components[2].index === 0x42
              ) {
                return false;
              }
              return true;
            }
            if (this._colorTransform === 1) {
              return true;
            }
            return false;
          }
          _convertYccToRgb(data) {
            let Y, Cb, Cr;
            for (let i = 0, length = data.length; i < length; i += 3) {
              Y = data[i];
              Cb = data[i + 1];
              Cr = data[i + 2];
              data[i] = Y - 179.456 + 1.402 * Cr;
              data[i + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;
              data[i + 2] = Y - 226.816 + 1.772 * Cb;
            }
            return data;
          }
          _convertYccToRgba(data, out) {
            for (
              let i = 0, j = 0, length = data.length;
              i < length;
              i += 3, j += 4
            ) {
              const Y = data[i];
              const Cb = data[i + 1];
              const Cr = data[i + 2];
              out[j] = Y - 179.456 + 1.402 * Cr;
              out[j + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;
              out[j + 2] = Y - 226.816 + 1.772 * Cb;
              out[j + 3] = 255;
            }
            return out;
          }
          _convertYcckToRgb(data) {
            let Y, Cb, Cr, k;
            let offset = 0;
            for (let i = 0, length = data.length; i < length; i += 4) {
              Y = data[i];
              Cb = data[i + 1];
              Cr = data[i + 2];
              k = data[i + 3];
              data[offset++] =
                -122.67195406894 +
                Cb *
                  (-6.60635669420364e-5 * Cb +
                    0.000437130475926232 * Cr -
                    5.4080610064599e-5 * Y +
                    0.00048449797120281 * k -
                    0.154362151871126) +
                Cr *
                  (-0.000957964378445773 * Cr +
                    0.000817076911346625 * Y -
                    0.00477271405408747 * k +
                    1.53380253221734) +
                Y *
                  (0.000961250184130688 * Y -
                    0.00266257332283933 * k +
                    0.48357088451265) +
                k * (-0.000336197177618394 * k + 0.484791561490776);
              data[offset++] =
                107.268039397724 +
                Cb *
                  (2.19927104525741e-5 * Cb -
                    0.000640992018297945 * Cr +
                    0.000659397001245577 * Y +
                    0.000426105652938837 * k -
                    0.176491792462875) +
                Cr *
                  (-0.000778269941513683 * Cr +
                    0.00130872261408275 * Y +
                    0.000770482631801132 * k -
                    0.151051492775562) +
                Y *
                  (0.00126935368114843 * Y -
                    0.00265090189010898 * k +
                    0.25802910206845) +
                k * (-0.000318913117588328 * k - 0.213742400323665);
              data[offset++] =
                -20.810012546947 +
                Cb *
                  (-0.000570115196973677 * Cb -
                    2.63409051004589e-5 * Cr +
                    0.0020741088115012 * Y -
                    0.00288260236853442 * k +
                    0.814272968359295) +
                Cr *
                  (-1.53496057440975e-5 * Cr -
                    0.000132689043961446 * Y +
                    0.000560833691242812 * k -
                    0.195152027534049) +
                Y *
                  (0.00174418132927582 * Y -
                    0.00255243321439347 * k +
                    0.116935020465145) +
                k * (-0.000343531996510555 * k + 0.24165260232407);
            }
            return data.subarray(0, offset);
          }
          _convertYcckToRgba(data) {
            for (let i = 0, length = data.length; i < length; i += 4) {
              const Y = data[i];
              const Cb = data[i + 1];
              const Cr = data[i + 2];
              const k = data[i + 3];
              data[i] =
                -122.67195406894 +
                Cb *
                  (-6.60635669420364e-5 * Cb +
                    0.000437130475926232 * Cr -
                    5.4080610064599e-5 * Y +
                    0.00048449797120281 * k -
                    0.154362151871126) +
                Cr *
                  (-0.000957964378445773 * Cr +
                    0.000817076911346625 * Y -
                    0.00477271405408747 * k +
                    1.53380253221734) +
                Y *
                  (0.000961250184130688 * Y -
                    0.00266257332283933 * k +
                    0.48357088451265) +
                k * (-0.000336197177618394 * k + 0.484791561490776);
              data[i + 1] =
                107.268039397724 +
                Cb *
                  (2.19927104525741e-5 * Cb -
                    0.000640992018297945 * Cr +
                    0.000659397001245577 * Y +
                    0.000426105652938837 * k -
                    0.176491792462875) +
                Cr *
                  (-0.000778269941513683 * Cr +
                    0.00130872261408275 * Y +
                    0.000770482631801132 * k -
                    0.151051492775562) +
                Y *
                  (0.00126935368114843 * Y -
                    0.00265090189010898 * k +
                    0.25802910206845) +
                k * (-0.000318913117588328 * k - 0.213742400323665);
              data[i + 2] =
                -20.810012546947 +
                Cb *
                  (-0.000570115196973677 * Cb -
                    2.63409051004589e-5 * Cr +
                    0.0020741088115012 * Y -
                    0.00288260236853442 * k +
                    0.814272968359295) +
                Cr *
                  (-1.53496057440975e-5 * Cr -
                    0.000132689043961446 * Y +
                    0.000560833691242812 * k -
                    0.195152027534049) +
                Y *
                  (0.00174418132927582 * Y -
                    0.00255243321439347 * k +
                    0.116935020465145) +
                k * (-0.000343531996510555 * k + 0.24165260232407);
              data[i + 3] = 255;
            }
            return data;
          }
          _convertYcckToCmyk(data) {
            let Y, Cb, Cr;
            for (let i = 0, length = data.length; i < length; i += 4) {
              Y = data[i];
              Cb = data[i + 1];
              Cr = data[i + 2];
              data[i] = 434.456 - Y - 1.402 * Cr;
              data[i + 1] = 119.541 - Y + 0.344 * Cb + 0.714 * Cr;
              data[i + 2] = 481.816 - Y - 1.772 * Cb;
            }
            return data;
          }
          _convertCmykToRgb(data) {
            let c, m, y, k;
            let offset = 0;
            for (let i = 0, length = data.length; i < length; i += 4) {
              c = data[i];
              m = data[i + 1];
              y = data[i + 2];
              k = data[i + 3];
              data[offset++] =
                255 +
                c *
                  (-0.00006747147073602441 * c +
                    0.0008379262121013727 * m +
                    0.0002894718188643294 * y +
                    0.003264231057537806 * k -
                    1.1185611867203937) +
                m *
                  (0.000026374107616089405 * m -
                    0.00008626949158638572 * y -
                    0.0002748769067499491 * k -
                    0.02155688794978967) +
                y *
                  (-0.00003878099212869363 * y -
                    0.0003267808279485286 * k +
                    0.0686742238595345) -
                k * (0.0003361971776183937 * k + 0.7430659151342254);
              data[offset++] =
                255 +
                c *
                  (0.00013596372813588848 * c +
                    0.000924537132573585 * m +
                    0.00010567359618683593 * y +
                    0.0004791864687436512 * k -
                    0.3109689587515875) +
                m *
                  (-0.00023545346108370344 * m +
                    0.0002702845253534714 * y +
                    0.0020200308977307156 * k -
                    0.7488052167015494) +
                y *
                  (0.00006834815998235662 * y +
                    0.00015168452363460973 * k -
                    0.09751927774728933) -
                k * (0.0003189131175883281 * k + 0.7364883807733168);
              data[offset++] =
                255 +
                c *
                  (0.000013598650411385307 * c +
                    0.00012423956175490851 * m +
                    0.0004751985097583589 * y -
                    0.0000036729317476630422 * k -
                    0.05562186980264034) +
                m *
                  (0.00016141380598724676 * m +
                    0.0009692239130725186 * y +
                    0.0007782692450036253 * k -
                    0.44015232367526463) +
                y *
                  (5.068882914068769e-7 * y +
                    0.0017778369011375071 * k -
                    0.7591454649749609) -
                k * (0.0003435319965105553 * k + 0.7063770186160144);
            }
            return data.subarray(0, offset);
          }
          _convertCmykToRgba(data) {
            for (let i = 0, length = data.length; i < length; i += 4) {
              const c = data[i];
              const m = data[i + 1];
              const y = data[i + 2];
              const k = data[i + 3];
              data[i] =
                255 +
                c *
                  (-0.00006747147073602441 * c +
                    0.0008379262121013727 * m +
                    0.0002894718188643294 * y +
                    0.003264231057537806 * k -
                    1.1185611867203937) +
                m *
                  (0.000026374107616089405 * m -
                    0.00008626949158638572 * y -
                    0.0002748769067499491 * k -
                    0.02155688794978967) +
                y *
                  (-0.00003878099212869363 * y -
                    0.0003267808279485286 * k +
                    0.0686742238595345) -
                k * (0.0003361971776183937 * k + 0.7430659151342254);
              data[i + 1] =
                255 +
                c *
                  (0.00013596372813588848 * c +
                    0.000924537132573585 * m +
                    0.00010567359618683593 * y +
                    0.0004791864687436512 * k -
                    0.3109689587515875) +
                m *
                  (-0.00023545346108370344 * m +
                    0.0002702845253534714 * y +
                    0.0020200308977307156 * k -
                    0.7488052167015494) +
                y *
                  (0.00006834815998235662 * y +
                    0.00015168452363460973 * k -
                    0.09751927774728933) -
                k * (0.0003189131175883281 * k + 0.7364883807733168);
              data[i + 2] =
                255 +
                c *
                  (0.000013598650411385307 * c +
                    0.00012423956175490851 * m +
                    0.0004751985097583589 * y -
                    0.0000036729317476630422 * k -
                    0.05562186980264034) +
                m *
                  (0.00016141380598724676 * m +
                    0.0009692239130725186 * y +
                    0.0007782692450036253 * k -
                    0.44015232367526463) +
                y *
                  (5.068882914068769e-7 * y +
                    0.0017778369011375071 * k -
                    0.7591454649749609) -
                k * (0.0003435319965105553 * k + 0.7063770186160144);
              data[i + 3] = 255;
            }
            return data;
          }
          getData({
            width,
            height,
            forceRGBA = false,
            forceRGB = false,
            isSourcePDF = false,
          }) {
            if (this.numComponents > 4) {
              throw new JpegError("Unsupported color mode");
            }
            const data = this._getLinearizedBlockData(
              width,
              height,
              isSourcePDF
            );
            if (this.numComponents === 1 && (forceRGBA || forceRGB)) {
              const len = data.length * (forceRGBA ? 4 : 3);
              const rgbaData = new Uint8ClampedArray(len);
              let offset = 0;
              if (forceRGBA) {
                (0, _image_utils.grayToRGBA)(
                  data,
                  new Uint32Array(rgbaData.buffer)
                );
              } else {
                for (const grayColor of data) {
                  rgbaData[offset++] = grayColor;
                  rgbaData[offset++] = grayColor;
                  rgbaData[offset++] = grayColor;
                }
              }
              return rgbaData;
            } else if (
              this.numComponents === 3 &&
              this._isColorConversionNeeded
            ) {
              if (forceRGBA) {
                const rgbaData = new Uint8ClampedArray((data.length / 3) * 4);
                return this._convertYccToRgba(data, rgbaData);
              }
              return this._convertYccToRgb(data);
            } else if (this.numComponents === 4) {
              if (this._isColorConversionNeeded) {
                if (forceRGBA) {
                  return this._convertYcckToRgba(data);
                }
                if (forceRGB) {
                  return this._convertYcckToRgb(data);
                }
                return this._convertYcckToCmyk(data);
              } else if (forceRGBA) {
                return this._convertCmykToRgba(data);
              } else if (forceRGB) {
                return this._convertCmykToRgb(data);
              }
            }
            return data;
          }
        }
        exports.JpegImage = JpegImage;

        /***/
      },
      /* 28 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.convertBlackAndWhiteToRGBA = convertBlackAndWhiteToRGBA;
        exports.convertToRGBA = convertToRGBA;
        exports.grayToRGBA = grayToRGBA;
        var _util = __w_pdfjs_require__(2);
        function convertToRGBA(params) {
          switch (params.kind) {
            case _util.ImageKind.GRAYSCALE_1BPP:
              return convertBlackAndWhiteToRGBA(params);
            case _util.ImageKind.RGB_24BPP:
              return convertRGBToRGBA(params);
          }
          return null;
        }
        function convertBlackAndWhiteToRGBA({
          src,
          srcPos = 0,
          dest,
          width,
          height,
          nonBlackColor = 0xffffffff,
          inverseDecode = false,
        }) {
          const black = _util.FeatureTest.isLittleEndian
            ? 0xff000000
            : 0x000000ff;
          const [zeroMapping, oneMapping] = inverseDecode
            ? [nonBlackColor, black]
            : [black, nonBlackColor];
          const widthInSource = width >> 3;
          const widthRemainder = width & 7;
          const srcLength = src.length;
          dest = new Uint32Array(dest.buffer);
          let destPos = 0;
          for (let i = 0; i < height; i++) {
            for (const max = srcPos + widthInSource; srcPos < max; srcPos++) {
              const elem = srcPos < srcLength ? src[srcPos] : 255;
              dest[destPos++] = elem & 0b10000000 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b1000000 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b100000 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b10000 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b1000 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b100 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b10 ? oneMapping : zeroMapping;
              dest[destPos++] = elem & 0b1 ? oneMapping : zeroMapping;
            }
            if (widthRemainder === 0) {
              continue;
            }
            const elem = srcPos < srcLength ? src[srcPos++] : 255;
            for (let j = 0; j < widthRemainder; j++) {
              dest[destPos++] =
                elem & (1 << (7 - j)) ? oneMapping : zeroMapping;
            }
          }
          return {
            srcPos,
            destPos,
          };
        }
        function convertRGBToRGBA({
          src,
          srcPos = 0,
          dest,
          destPos = 0,
          width,
          height,
        }) {
          let i = 0;
          const len32 = src.length >> 2;
          const src32 = new Uint32Array(src.buffer, srcPos, len32);
          if (_util.FeatureTest.isLittleEndian) {
            for (; i < len32 - 2; i += 3, destPos += 4) {
              const s1 = src32[i];
              const s2 = src32[i + 1];
              const s3 = src32[i + 2];
              dest[destPos] = s1 | 0xff000000;
              dest[destPos + 1] = (s1 >>> 24) | (s2 << 8) | 0xff000000;
              dest[destPos + 2] = (s2 >>> 16) | (s3 << 16) | 0xff000000;
              dest[destPos + 3] = (s3 >>> 8) | 0xff000000;
            }
            for (let j = i * 4, jj = src.length; j < jj; j += 3) {
              dest[destPos++] =
                src[j] | (src[j + 1] << 8) | (src[j + 2] << 16) | 0xff000000;
            }
          } else {
            for (; i < len32 - 2; i += 3, destPos += 4) {
              const s1 = src32[i];
              const s2 = src32[i + 1];
              const s3 = src32[i + 2];
              dest[destPos] = s1 | 0xff;
              dest[destPos + 1] = (s1 << 24) | (s2 >>> 8) | 0xff;
              dest[destPos + 2] = (s2 << 16) | (s3 >>> 16) | 0xff;
              dest[destPos + 3] = (s3 << 8) | 0xff;
            }
            for (let j = i * 4, jj = src.length; j < jj; j += 3) {
              dest[destPos++] =
                (src[j] << 24) | (src[j + 1] << 16) | (src[j + 2] << 8) | 0xff;
            }
          }
          return {
            srcPos,
            destPos,
          };
        }
        function grayToRGBA(src, dest) {
          if (_util.FeatureTest.isLittleEndian) {
            for (let i = 0, ii = src.length; i < ii; i++) {
              dest[i] = (src[i] * 0x10101) | 0xff000000;
            }
          } else {
            for (let i = 0, ii = src.length; i < ii; i++) {
              dest[i] = (src[i] * 0x1010100) | 0x000000ff;
            }
          }
        }

        /***/
      },
      /* 29 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.JpxStream = void 0;
        var _decode_stream = __w_pdfjs_require__(18);
        var _jpx = __w_pdfjs_require__(30);
        var _util = __w_pdfjs_require__(2);
        class JpxStream extends _decode_stream.DecodeStream {
          constructor(stream, maybeLength, params) {
            super(maybeLength);
            this.stream = stream;
            this.dict = stream.dict;
            this.maybeLength = maybeLength;
            this.params = params;
          }
          get bytes() {
            return (0, _util.shadow)(
              this,
              "bytes",
              this.stream.getBytes(this.maybeLength)
            );
          }
          ensureBuffer(requested) {}
          readBlock() {
            if (this.eof) {
              return;
            }
            const jpxImage = new _jpx.JpxImage();
            jpxImage.parse(this.bytes);
            const width = jpxImage.width;
            const height = jpxImage.height;
            const componentsCount = jpxImage.componentsCount;
            const tileCount = jpxImage.tiles.length;
            if (tileCount === 1) {
              this.buffer = jpxImage.tiles[0].items;
            } else {
              const data = new Uint8ClampedArray(
                width * height * componentsCount
              );
              for (let k = 0; k < tileCount; k++) {
                const tileComponents = jpxImage.tiles[k];
                const tileWidth = tileComponents.width;
                const tileHeight = tileComponents.height;
                const tileLeft = tileComponents.left;
                const tileTop = tileComponents.top;
                const src = tileComponents.items;
                let srcPosition = 0;
                let dataPosition =
                  (width * tileTop + tileLeft) * componentsCount;
                const imgRowSize = width * componentsCount;
                const tileRowSize = tileWidth * componentsCount;
                for (let j = 0; j < tileHeight; j++) {
                  const rowBytes = src.subarray(
                    srcPosition,
                    srcPosition + tileRowSize
                  );
                  data.set(rowBytes, dataPosition);
                  srcPosition += tileRowSize;
                  dataPosition += imgRowSize;
                }
              }
              this.buffer = data;
            }
            this.bufferLength = this.buffer.length;
            this.eof = true;
          }
        }
        exports.JpxStream = JpxStream;

        /***/
      },
      /* 30 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.JpxImage = void 0;
        var _util = __w_pdfjs_require__(2);
        var _core_utils = __w_pdfjs_require__(3);
        var _arithmetic_decoder = __w_pdfjs_require__(25);
        class JpxError extends _util.BaseException {
          constructor(msg) {
            super(`JPX error: ${msg}`, "JpxError");
          }
        }
        const SubbandsGainLog2 = {
          LL: 0,
          LH: 1,
          HL: 1,
          HH: 2,
        };
        class JpxImage {
          constructor() {
            this.failOnCorruptedImage = false;
          }
          parse(data) {
            const head = (0, _core_utils.readUint16)(data, 0);
            if (head === 0xff4f) {
              this.parseCodestream(data, 0, data.length);
              return;
            }
            const length = data.length;
            let position = 0;
            while (position < length) {
              let headerSize = 8;
              let lbox = (0, _core_utils.readUint32)(data, position);
              const tbox = (0, _core_utils.readUint32)(data, position + 4);
              position += headerSize;
              if (lbox === 1) {
                lbox =
                  (0, _core_utils.readUint32)(data, position) * 4294967296 +
                  (0, _core_utils.readUint32)(data, position + 4);
                position += 8;
                headerSize += 8;
              }
              if (lbox === 0) {
                lbox = length - position + headerSize;
              }
              if (lbox < headerSize) {
                throw new JpxError("Invalid box field size");
              }
              const dataLength = lbox - headerSize;
              let jumpDataLength = true;
              switch (tbox) {
                case 0x6a703268:
                  jumpDataLength = false;
                  break;
                case 0x636f6c72:
                  const method = data[position];
                  if (method === 1) {
                    const colorspace = (0, _core_utils.readUint32)(
                      data,
                      position + 3
                    );
                    switch (colorspace) {
                      case 16:
                      case 17:
                      case 18:
                        break;
                      default:
                        (0, _util.warn)("Unknown colorspace " + colorspace);
                        break;
                    }
                  } else if (method === 2) {
                    (0, _util.info)("ICC profile not supported");
                  }
                  break;
                case 0x6a703263:
                  this.parseCodestream(data, position, position + dataLength);
                  break;
                case 0x6a502020:
                  if (
                    (0, _core_utils.readUint32)(data, position) !== 0x0d0a870a
                  ) {
                    (0, _util.warn)("Invalid JP2 signature");
                  }
                  break;
                case 0x6a501a1a:
                case 0x66747970:
                case 0x72726571:
                case 0x72657320:
                case 0x69686472:
                  break;
                default:
                  const headerType = String.fromCharCode(
                    (tbox >> 24) & 0xff,
                    (tbox >> 16) & 0xff,
                    (tbox >> 8) & 0xff,
                    tbox & 0xff
                  );
                  (0, _util.warn)(
                    `Unsupported header type ${tbox} (${headerType}).`
                  );
                  break;
              }
              if (jumpDataLength) {
                position += dataLength;
              }
            }
          }
          parseImageProperties(stream) {
            let newByte = stream.getByte();
            while (newByte >= 0) {
              const oldByte = newByte;
              newByte = stream.getByte();
              const code = (oldByte << 8) | newByte;
              if (code === 0xff51) {
                stream.skip(4);
                const Xsiz = stream.getInt32() >>> 0;
                const Ysiz = stream.getInt32() >>> 0;
                const XOsiz = stream.getInt32() >>> 0;
                const YOsiz = stream.getInt32() >>> 0;
                stream.skip(16);
                const Csiz = stream.getUint16();
                this.width = Xsiz - XOsiz;
                this.height = Ysiz - YOsiz;
                this.componentsCount = Csiz;
                this.bitsPerComponent = 8;
                return;
              }
            }
            throw new JpxError("No size marker found in JPX stream");
          }
          parseCodestream(data, start, end) {
            const context = {};
            let doNotRecover = false;
            try {
              let position = start;
              while (position + 1 < end) {
                const code = (0, _core_utils.readUint16)(data, position);
                position += 2;
                let length = 0,
                  j,
                  sqcd,
                  spqcds,
                  spqcdSize,
                  scalarExpounded,
                  tile;
                switch (code) {
                  case 0xff4f:
                    context.mainHeader = true;
                    break;
                  case 0xffd9:
                    break;
                  case 0xff51:
                    length = (0, _core_utils.readUint16)(data, position);
                    const siz = {};
                    siz.Xsiz = (0, _core_utils.readUint32)(data, position + 4);
                    siz.Ysiz = (0, _core_utils.readUint32)(data, position + 8);
                    siz.XOsiz = (0, _core_utils.readUint32)(
                      data,
                      position + 12
                    );
                    siz.YOsiz = (0, _core_utils.readUint32)(
                      data,
                      position + 16
                    );
                    siz.XTsiz = (0, _core_utils.readUint32)(
                      data,
                      position + 20
                    );
                    siz.YTsiz = (0, _core_utils.readUint32)(
                      data,
                      position + 24
                    );
                    siz.XTOsiz = (0, _core_utils.readUint32)(
                      data,
                      position + 28
                    );
                    siz.YTOsiz = (0, _core_utils.readUint32)(
                      data,
                      position + 32
                    );
                    const componentsCount = (0, _core_utils.readUint16)(
                      data,
                      position + 36
                    );
                    siz.Csiz = componentsCount;
                    const components = [];
                    j = position + 38;
                    for (let i = 0; i < componentsCount; i++) {
                      const component = {
                        precision: (data[j] & 0x7f) + 1,
                        isSigned: !!(data[j] & 0x80),
                        XRsiz: data[j + 1],
                        YRsiz: data[j + 2],
                      };
                      j += 3;
                      calculateComponentDimensions(component, siz);
                      components.push(component);
                    }
                    context.SIZ = siz;
                    context.components = components;
                    calculateTileGrids(context, components);
                    context.QCC = [];
                    context.COC = [];
                    break;
                  case 0xff5c:
                    length = (0, _core_utils.readUint16)(data, position);
                    const qcd = {};
                    j = position + 2;
                    sqcd = data[j++];
                    switch (sqcd & 0x1f) {
                      case 0:
                        spqcdSize = 8;
                        scalarExpounded = true;
                        break;
                      case 1:
                        spqcdSize = 16;
                        scalarExpounded = false;
                        break;
                      case 2:
                        spqcdSize = 16;
                        scalarExpounded = true;
                        break;
                      default:
                        throw new Error("Invalid SQcd value " + sqcd);
                    }
                    qcd.noQuantization = spqcdSize === 8;
                    qcd.scalarExpounded = scalarExpounded;
                    qcd.guardBits = sqcd >> 5;
                    spqcds = [];
                    while (j < length + position) {
                      const spqcd = {};
                      if (spqcdSize === 8) {
                        spqcd.epsilon = data[j++] >> 3;
                        spqcd.mu = 0;
                      } else {
                        spqcd.epsilon = data[j] >> 3;
                        spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];
                        j += 2;
                      }
                      spqcds.push(spqcd);
                    }
                    qcd.SPqcds = spqcds;
                    if (context.mainHeader) {
                      context.QCD = qcd;
                    } else {
                      context.currentTile.QCD = qcd;
                      context.currentTile.QCC = [];
                    }
                    break;
                  case 0xff5d:
                    length = (0, _core_utils.readUint16)(data, position);
                    const qcc = {};
                    j = position + 2;
                    let cqcc;
                    if (context.SIZ.Csiz < 257) {
                      cqcc = data[j++];
                    } else {
                      cqcc = (0, _core_utils.readUint16)(data, j);
                      j += 2;
                    }
                    sqcd = data[j++];
                    switch (sqcd & 0x1f) {
                      case 0:
                        spqcdSize = 8;
                        scalarExpounded = true;
                        break;
                      case 1:
                        spqcdSize = 16;
                        scalarExpounded = false;
                        break;
                      case 2:
                        spqcdSize = 16;
                        scalarExpounded = true;
                        break;
                      default:
                        throw new Error("Invalid SQcd value " + sqcd);
                    }
                    qcc.noQuantization = spqcdSize === 8;
                    qcc.scalarExpounded = scalarExpounded;
                    qcc.guardBits = sqcd >> 5;
                    spqcds = [];
                    while (j < length + position) {
                      const spqcd = {};
                      if (spqcdSize === 8) {
                        spqcd.epsilon = data[j++] >> 3;
                        spqcd.mu = 0;
                      } else {
                        spqcd.epsilon = data[j] >> 3;
                        spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];
                        j += 2;
                      }
                      spqcds.push(spqcd);
                    }
                    qcc.SPqcds = spqcds;
                    if (context.mainHeader) {
                      context.QCC[cqcc] = qcc;
                    } else {
                      context.currentTile.QCC[cqcc] = qcc;
                    }
                    break;
                  case 0xff52:
                    length = (0, _core_utils.readUint16)(data, position);
                    const cod = {};
                    j = position + 2;
                    const scod = data[j++];
                    cod.entropyCoderWithCustomPrecincts = !!(scod & 1);
                    cod.sopMarkerUsed = !!(scod & 2);
                    cod.ephMarkerUsed = !!(scod & 4);
                    cod.progressionOrder = data[j++];
                    cod.layersCount = (0, _core_utils.readUint16)(data, j);
                    j += 2;
                    cod.multipleComponentTransform = data[j++];
                    cod.decompositionLevelsCount = data[j++];
                    cod.xcb = (data[j++] & 0xf) + 2;
                    cod.ycb = (data[j++] & 0xf) + 2;
                    const blockStyle = data[j++];
                    cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);
                    cod.resetContextProbabilities = !!(blockStyle & 2);
                    cod.terminationOnEachCodingPass = !!(blockStyle & 4);
                    cod.verticallyStripe = !!(blockStyle & 8);
                    cod.predictableTermination = !!(blockStyle & 16);
                    cod.segmentationSymbolUsed = !!(blockStyle & 32);
                    cod.reversibleTransformation = data[j++];
                    if (cod.entropyCoderWithCustomPrecincts) {
                      const precinctsSizes = [];
                      while (j < length + position) {
                        const precinctsSize = data[j++];
                        precinctsSizes.push({
                          PPx: precinctsSize & 0xf,
                          PPy: precinctsSize >> 4,
                        });
                      }
                      cod.precinctsSizes = precinctsSizes;
                    }
                    const unsupported = [];
                    if (cod.selectiveArithmeticCodingBypass) {
                      unsupported.push("selectiveArithmeticCodingBypass");
                    }
                    if (cod.terminationOnEachCodingPass) {
                      unsupported.push("terminationOnEachCodingPass");
                    }
                    if (cod.verticallyStripe) {
                      unsupported.push("verticallyStripe");
                    }
                    if (cod.predictableTermination) {
                      unsupported.push("predictableTermination");
                    }
                    if (unsupported.length > 0) {
                      doNotRecover = true;
                      (0, _util.warn)(
                        `JPX: Unsupported COD options (${unsupported.join(
                          ", "
                        )}).`
                      );
                    }
                    if (context.mainHeader) {
                      context.COD = cod;
                    } else {
                      context.currentTile.COD = cod;
                      context.currentTile.COC = [];
                    }
                    break;
                  case 0xff90:
                    length = (0, _core_utils.readUint16)(data, position);
                    tile = {};
                    tile.index = (0, _core_utils.readUint16)(
                      data,
                      position + 2
                    );
                    tile.length = (0, _core_utils.readUint32)(
                      data,
                      position + 4
                    );
                    tile.dataEnd = tile.length + position - 2;
                    tile.partIndex = data[position + 8];
                    tile.partsCount = data[position + 9];
                    context.mainHeader = false;
                    if (tile.partIndex === 0) {
                      tile.COD = context.COD;
                      tile.COC = context.COC.slice(0);
                      tile.QCD = context.QCD;
                      tile.QCC = context.QCC.slice(0);
                    }
                    context.currentTile = tile;
                    break;
                  case 0xff93:
                    tile = context.currentTile;
                    if (tile.partIndex === 0) {
                      initializeTile(context, tile.index);
                      buildPackets(context);
                    }
                    length = tile.dataEnd - position;
                    parseTilePackets(context, data, position, length);
                    break;
                  case 0xff53:
                    (0, _util.warn)(
                      "JPX: Codestream code 0xFF53 (COC) is not implemented."
                    );
                  case 0xff55:
                  case 0xff57:
                  case 0xff58:
                  case 0xff64:
                    length = (0, _core_utils.readUint16)(data, position);
                    break;
                  default:
                    throw new Error(
                      "Unknown codestream code: " + code.toString(16)
                    );
                }
                position += length;
              }
            } catch (e) {
              if (doNotRecover || this.failOnCorruptedImage) {
                throw new JpxError(e.message);
              } else {
                (0, _util.warn)(`JPX: Trying to recover from: "${e.message}".`);
              }
            }
            this.tiles = transformComponents(context);
            this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;
            this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;
            this.componentsCount = context.SIZ.Csiz;
          }
        }
        exports.JpxImage = JpxImage;
        function calculateComponentDimensions(component, siz) {
          component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);
          component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);
          component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);
          component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);
          component.width = component.x1 - component.x0;
          component.height = component.y1 - component.y0;
        }
        function calculateTileGrids(context, components) {
          const siz = context.SIZ;
          const tiles = [];
          let tile;
          const numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);
          const numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);
          for (let q = 0; q < numYtiles; q++) {
            for (let p = 0; p < numXtiles; p++) {
              tile = {};
              tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);
              tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);
              tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);
              tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);
              tile.width = tile.tx1 - tile.tx0;
              tile.height = tile.ty1 - tile.ty0;
              tile.components = [];
              tiles.push(tile);
            }
          }
          context.tiles = tiles;
          const componentsCount = siz.Csiz;
          for (let i = 0, ii = componentsCount; i < ii; i++) {
            const component = components[i];
            for (let j = 0, jj = tiles.length; j < jj; j++) {
              const tileComponent = {};
              tile = tiles[j];
              tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);
              tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);
              tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);
              tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);
              tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;
              tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;
              tile.components[i] = tileComponent;
            }
          }
        }
        function getBlocksDimensions(context, component, r) {
          const codOrCoc = component.codingStyleParameters;
          const result = {};
          if (!codOrCoc.entropyCoderWithCustomPrecincts) {
            result.PPx = 15;
            result.PPy = 15;
          } else {
            result.PPx = codOrCoc.precinctsSizes[r].PPx;
            result.PPy = codOrCoc.precinctsSizes[r].PPy;
          }
          result.xcb_ =
            r > 0
              ? Math.min(codOrCoc.xcb, result.PPx - 1)
              : Math.min(codOrCoc.xcb, result.PPx);
          result.ycb_ =
            r > 0
              ? Math.min(codOrCoc.ycb, result.PPy - 1)
              : Math.min(codOrCoc.ycb, result.PPy);
          return result;
        }
        function buildPrecincts(context, resolution, dimensions) {
          const precinctWidth = 1 << dimensions.PPx;
          const precinctHeight = 1 << dimensions.PPy;
          const isZeroRes = resolution.resLevel === 0;
          const precinctWidthInSubband =
            1 << (dimensions.PPx + (isZeroRes ? 0 : -1));
          const precinctHeightInSubband =
            1 << (dimensions.PPy + (isZeroRes ? 0 : -1));
          const numprecinctswide =
            resolution.trx1 > resolution.trx0
              ? Math.ceil(resolution.trx1 / precinctWidth) -
                Math.floor(resolution.trx0 / precinctWidth)
              : 0;
          const numprecinctshigh =
            resolution.try1 > resolution.try0
              ? Math.ceil(resolution.try1 / precinctHeight) -
                Math.floor(resolution.try0 / precinctHeight)
              : 0;
          const numprecincts = numprecinctswide * numprecinctshigh;
          resolution.precinctParameters = {
            precinctWidth,
            precinctHeight,
            numprecinctswide,
            numprecinctshigh,
            numprecincts,
            precinctWidthInSubband,
            precinctHeightInSubband,
          };
        }
        function buildCodeblocks(context, subband, dimensions) {
          const xcb_ = dimensions.xcb_;
          const ycb_ = dimensions.ycb_;
          const codeblockWidth = 1 << xcb_;
          const codeblockHeight = 1 << ycb_;
          const cbx0 = subband.tbx0 >> xcb_;
          const cby0 = subband.tby0 >> ycb_;
          const cbx1 = (subband.tbx1 + codeblockWidth - 1) >> xcb_;
          const cby1 = (subband.tby1 + codeblockHeight - 1) >> ycb_;
          const precinctParameters = subband.resolution.precinctParameters;
          const codeblocks = [];
          const precincts = [];
          let i, j, codeblock, precinctNumber;
          for (j = cby0; j < cby1; j++) {
            for (i = cbx0; i < cbx1; i++) {
              codeblock = {
                cbx: i,
                cby: j,
                tbx0: codeblockWidth * i,
                tby0: codeblockHeight * j,
                tbx1: codeblockWidth * (i + 1),
                tby1: codeblockHeight * (j + 1),
              };
              codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);
              codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);
              codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);
              codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);
              const pi = Math.floor(
                (codeblock.tbx0_ - subband.tbx0) /
                  precinctParameters.precinctWidthInSubband
              );
              const pj = Math.floor(
                (codeblock.tby0_ - subband.tby0) /
                  precinctParameters.precinctHeightInSubband
              );
              precinctNumber = pi + pj * precinctParameters.numprecinctswide;
              codeblock.precinctNumber = precinctNumber;
              codeblock.subbandType = subband.type;
              codeblock.Lblock = 3;
              if (
                codeblock.tbx1_ <= codeblock.tbx0_ ||
                codeblock.tby1_ <= codeblock.tby0_
              ) {
                continue;
              }
              codeblocks.push(codeblock);
              let precinct = precincts[precinctNumber];
              if (precinct !== undefined) {
                if (i < precinct.cbxMin) {
                  precinct.cbxMin = i;
                } else if (i > precinct.cbxMax) {
                  precinct.cbxMax = i;
                }
                if (j < precinct.cbyMin) {
                  precinct.cbxMin = j;
                } else if (j > precinct.cbyMax) {
                  precinct.cbyMax = j;
                }
              } else {
                precincts[precinctNumber] = precinct = {
                  cbxMin: i,
                  cbyMin: j,
                  cbxMax: i,
                  cbyMax: j,
                };
              }
              codeblock.precinct = precinct;
            }
          }
          subband.codeblockParameters = {
            codeblockWidth: xcb_,
            codeblockHeight: ycb_,
            numcodeblockwide: cbx1 - cbx0 + 1,
            numcodeblockhigh: cby1 - cby0 + 1,
          };
          subband.codeblocks = codeblocks;
          subband.precincts = precincts;
        }
        function createPacket(resolution, precinctNumber, layerNumber) {
          const precinctCodeblocks = [];
          const subbands = resolution.subbands;
          for (let i = 0, ii = subbands.length; i < ii; i++) {
            const subband = subbands[i];
            const codeblocks = subband.codeblocks;
            for (let j = 0, jj = codeblocks.length; j < jj; j++) {
              const codeblock = codeblocks[j];
              if (codeblock.precinctNumber !== precinctNumber) {
                continue;
              }
              precinctCodeblocks.push(codeblock);
            }
          }
          return {
            layerNumber,
            codeblocks: precinctCodeblocks,
          };
        }
        function LayerResolutionComponentPositionIterator(context) {
          const siz = context.SIZ;
          const tileIndex = context.currentTile.index;
          const tile = context.tiles[tileIndex];
          const layersCount = tile.codingStyleDefaultParameters.layersCount;
          const componentsCount = siz.Csiz;
          let maxDecompositionLevelsCount = 0;
          for (let q = 0; q < componentsCount; q++) {
            maxDecompositionLevelsCount = Math.max(
              maxDecompositionLevelsCount,
              tile.components[q].codingStyleParameters.decompositionLevelsCount
            );
          }
          let l = 0,
            r = 0,
            i = 0,
            k = 0;
          this.nextPacket = function JpxImage_nextPacket() {
            for (; l < layersCount; l++) {
              for (; r <= maxDecompositionLevelsCount; r++) {
                for (; i < componentsCount; i++) {
                  const component = tile.components[i];
                  if (
                    r > component.codingStyleParameters.decompositionLevelsCount
                  ) {
                    continue;
                  }
                  const resolution = component.resolutions[r];
                  const numprecincts =
                    resolution.precinctParameters.numprecincts;
                  for (; k < numprecincts; ) {
                    const packet = createPacket(resolution, k, l);
                    k++;
                    return packet;
                  }
                  k = 0;
                }
                i = 0;
              }
              r = 0;
            }
            throw new JpxError("Out of packets");
          };
        }
        function ResolutionLayerComponentPositionIterator(context) {
          const siz = context.SIZ;
          const tileIndex = context.currentTile.index;
          const tile = context.tiles[tileIndex];
          const layersCount = tile.codingStyleDefaultParameters.layersCount;
          const componentsCount = siz.Csiz;
          let maxDecompositionLevelsCount = 0;
          for (let q = 0; q < componentsCount; q++) {
            maxDecompositionLevelsCount = Math.max(
              maxDecompositionLevelsCount,
              tile.components[q].codingStyleParameters.decompositionLevelsCount
            );
          }
          let r = 0,
            l = 0,
            i = 0,
            k = 0;
          this.nextPacket = function JpxImage_nextPacket() {
            for (; r <= maxDecompositionLevelsCount; r++) {
              for (; l < layersCount; l++) {
                for (; i < componentsCount; i++) {
                  const component = tile.components[i];
                  if (
                    r > component.codingStyleParameters.decompositionLevelsCount
                  ) {
                    continue;
                  }
                  const resolution = component.resolutions[r];
                  const numprecincts =
                    resolution.precinctParameters.numprecincts;
                  for (; k < numprecincts; ) {
                    const packet = createPacket(resolution, k, l);
                    k++;
                    return packet;
                  }
                  k = 0;
                }
                i = 0;
              }
              l = 0;
            }
            throw new JpxError("Out of packets");
          };
        }
        function ResolutionPositionComponentLayerIterator(context) {
          const siz = context.SIZ;
          const tileIndex = context.currentTile.index;
          const tile = context.tiles[tileIndex];
          const layersCount = tile.codingStyleDefaultParameters.layersCount;
          const componentsCount = siz.Csiz;
          let l, r, c, p;
          let maxDecompositionLevelsCount = 0;
          for (c = 0; c < componentsCount; c++) {
            const component = tile.components[c];
            maxDecompositionLevelsCount = Math.max(
              maxDecompositionLevelsCount,
              component.codingStyleParameters.decompositionLevelsCount
            );
          }
          const maxNumPrecinctsInLevel = new Int32Array(
            maxDecompositionLevelsCount + 1
          );
          for (r = 0; r <= maxDecompositionLevelsCount; ++r) {
            let maxNumPrecincts = 0;
            for (c = 0; c < componentsCount; ++c) {
              const resolutions = tile.components[c].resolutions;
              if (r < resolutions.length) {
                maxNumPrecincts = Math.max(
                  maxNumPrecincts,
                  resolutions[r].precinctParameters.numprecincts
                );
              }
            }
            maxNumPrecinctsInLevel[r] = maxNumPrecincts;
          }
          l = 0;
          r = 0;
          c = 0;
          p = 0;
          this.nextPacket = function JpxImage_nextPacket() {
            for (; r <= maxDecompositionLevelsCount; r++) {
              for (; p < maxNumPrecinctsInLevel[r]; p++) {
                for (; c < componentsCount; c++) {
                  const component = tile.components[c];
                  if (
                    r > component.codingStyleParameters.decompositionLevelsCount
                  ) {
                    continue;
                  }
                  const resolution = component.resolutions[r];
                  const numprecincts =
                    resolution.precinctParameters.numprecincts;
                  if (p >= numprecincts) {
                    continue;
                  }
                  for (; l < layersCount; ) {
                    const packet = createPacket(resolution, p, l);
                    l++;
                    return packet;
                  }
                  l = 0;
                }
                c = 0;
              }
              p = 0;
            }
            throw new JpxError("Out of packets");
          };
        }
        function PositionComponentResolutionLayerIterator(context) {
          const siz = context.SIZ;
          const tileIndex = context.currentTile.index;
          const tile = context.tiles[tileIndex];
          const layersCount = tile.codingStyleDefaultParameters.layersCount;
          const componentsCount = siz.Csiz;
          const precinctsSizes = getPrecinctSizesInImageScale(tile);
          const precinctsIterationSizes = precinctsSizes;
          let l = 0,
            r = 0,
            c = 0,
            px = 0,
            py = 0;
          this.nextPacket = function JpxImage_nextPacket() {
            for (; py < precinctsIterationSizes.maxNumHigh; py++) {
              for (; px < precinctsIterationSizes.maxNumWide; px++) {
                for (; c < componentsCount; c++) {
                  const component = tile.components[c];
                  const decompositionLevelsCount =
                    component.codingStyleParameters.decompositionLevelsCount;
                  for (; r <= decompositionLevelsCount; r++) {
                    const resolution = component.resolutions[r];
                    const sizeInImageScale =
                      precinctsSizes.components[c].resolutions[r];
                    const k = getPrecinctIndexIfExist(
                      px,
                      py,
                      sizeInImageScale,
                      precinctsIterationSizes,
                      resolution
                    );
                    if (k === null) {
                      continue;
                    }
                    for (; l < layersCount; ) {
                      const packet = createPacket(resolution, k, l);
                      l++;
                      return packet;
                    }
                    l = 0;
                  }
                  r = 0;
                }
                c = 0;
              }
              px = 0;
            }
            throw new JpxError("Out of packets");
          };
        }
        function ComponentPositionResolutionLayerIterator(context) {
          const siz = context.SIZ;
          const tileIndex = context.currentTile.index;
          const tile = context.tiles[tileIndex];
          const layersCount = tile.codingStyleDefaultParameters.layersCount;
          const componentsCount = siz.Csiz;
          const precinctsSizes = getPrecinctSizesInImageScale(tile);
          let l = 0,
            r = 0,
            c = 0,
            px = 0,
            py = 0;
          this.nextPacket = function JpxImage_nextPacket() {
            for (; c < componentsCount; ++c) {
              const component = tile.components[c];
              const precinctsIterationSizes = precinctsSizes.components[c];
              const decompositionLevelsCount =
                component.codingStyleParameters.decompositionLevelsCount;
              for (; py < precinctsIterationSizes.maxNumHigh; py++) {
                for (; px < precinctsIterationSizes.maxNumWide; px++) {
                  for (; r <= decompositionLevelsCount; r++) {
                    const resolution = component.resolutions[r];
                    const sizeInImageScale =
                      precinctsIterationSizes.resolutions[r];
                    const k = getPrecinctIndexIfExist(
                      px,
                      py,
                      sizeInImageScale,
                      precinctsIterationSizes,
                      resolution
                    );
                    if (k === null) {
                      continue;
                    }
                    for (; l < layersCount; ) {
                      const packet = createPacket(resolution, k, l);
                      l++;
                      return packet;
                    }
                    l = 0;
                  }
                  r = 0;
                }
                px = 0;
              }
              py = 0;
            }
            throw new JpxError("Out of packets");
          };
        }
        function getPrecinctIndexIfExist(
          pxIndex,
          pyIndex,
          sizeInImageScale,
          precinctIterationSizes,
          resolution
        ) {
          const posX = pxIndex * precinctIterationSizes.minWidth;
          const posY = pyIndex * precinctIterationSizes.minHeight;
          if (
            posX % sizeInImageScale.width !== 0 ||
            posY % sizeInImageScale.height !== 0
          ) {
            return null;
          }
          const startPrecinctRowIndex =
            (posY / sizeInImageScale.width) *
            resolution.precinctParameters.numprecinctswide;
          return posX / sizeInImageScale.height + startPrecinctRowIndex;
        }
        function getPrecinctSizesInImageScale(tile) {
          const componentsCount = tile.components.length;
          let minWidth = Number.MAX_VALUE;
          let minHeight = Number.MAX_VALUE;
          let maxNumWide = 0;
          let maxNumHigh = 0;
          const sizePerComponent = new Array(componentsCount);
          for (let c = 0; c < componentsCount; c++) {
            const component = tile.components[c];
            const decompositionLevelsCount =
              component.codingStyleParameters.decompositionLevelsCount;
            const sizePerResolution = new Array(decompositionLevelsCount + 1);
            let minWidthCurrentComponent = Number.MAX_VALUE;
            let minHeightCurrentComponent = Number.MAX_VALUE;
            let maxNumWideCurrentComponent = 0;
            let maxNumHighCurrentComponent = 0;
            let scale = 1;
            for (let r = decompositionLevelsCount; r >= 0; --r) {
              const resolution = component.resolutions[r];
              const widthCurrentResolution =
                scale * resolution.precinctParameters.precinctWidth;
              const heightCurrentResolution =
                scale * resolution.precinctParameters.precinctHeight;
              minWidthCurrentComponent = Math.min(
                minWidthCurrentComponent,
                widthCurrentResolution
              );
              minHeightCurrentComponent = Math.min(
                minHeightCurrentComponent,
                heightCurrentResolution
              );
              maxNumWideCurrentComponent = Math.max(
                maxNumWideCurrentComponent,
                resolution.precinctParameters.numprecinctswide
              );
              maxNumHighCurrentComponent = Math.max(
                maxNumHighCurrentComponent,
                resolution.precinctParameters.numprecinctshigh
              );
              sizePerResolution[r] = {
                width: widthCurrentResolution,
                height: heightCurrentResolution,
              };
              scale <<= 1;
            }
            minWidth = Math.min(minWidth, minWidthCurrentComponent);
            minHeight = Math.min(minHeight, minHeightCurrentComponent);
            maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);
            maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);
            sizePerComponent[c] = {
              resolutions: sizePerResolution,
              minWidth: minWidthCurrentComponent,
              minHeight: minHeightCurrentComponent,
              maxNumWide: maxNumWideCurrentComponent,
              maxNumHigh: maxNumHighCurrentComponent,
            };
          }
          return {
            components: sizePerComponent,
            minWidth,
            minHeight,
            maxNumWide,
            maxNumHigh,
          };
        }
        function buildPackets(context) {
          const siz = context.SIZ;
          const tileIndex = context.currentTile.index;
          const tile = context.tiles[tileIndex];
          const componentsCount = siz.Csiz;
          for (let c = 0; c < componentsCount; c++) {
            const component = tile.components[c];
            const decompositionLevelsCount =
              component.codingStyleParameters.decompositionLevelsCount;
            const resolutions = [];
            const subbands = [];
            for (let r = 0; r <= decompositionLevelsCount; r++) {
              const blocksDimensions = getBlocksDimensions(
                context,
                component,
                r
              );
              const resolution = {};
              const scale = 1 << (decompositionLevelsCount - r);
              resolution.trx0 = Math.ceil(component.tcx0 / scale);
              resolution.try0 = Math.ceil(component.tcy0 / scale);
              resolution.trx1 = Math.ceil(component.tcx1 / scale);
              resolution.try1 = Math.ceil(component.tcy1 / scale);
              resolution.resLevel = r;
              buildPrecincts(context, resolution, blocksDimensions);
              resolutions.push(resolution);
              let subband;
              if (r === 0) {
                subband = {};
                subband.type = "LL";
                subband.tbx0 = Math.ceil(component.tcx0 / scale);
                subband.tby0 = Math.ceil(component.tcy0 / scale);
                subband.tbx1 = Math.ceil(component.tcx1 / scale);
                subband.tby1 = Math.ceil(component.tcy1 / scale);
                subband.resolution = resolution;
                buildCodeblocks(context, subband, blocksDimensions);
                subbands.push(subband);
                resolution.subbands = [subband];
              } else {
                const bscale = 1 << (decompositionLevelsCount - r + 1);
                const resolutionSubbands = [];
                subband = {};
                subband.type = "HL";
                subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);
                subband.tby0 = Math.ceil(component.tcy0 / bscale);
                subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);
                subband.tby1 = Math.ceil(component.tcy1 / bscale);
                subband.resolution = resolution;
                buildCodeblocks(context, subband, blocksDimensions);
                subbands.push(subband);
                resolutionSubbands.push(subband);
                subband = {};
                subband.type = "LH";
                subband.tbx0 = Math.ceil(component.tcx0 / bscale);
                subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);
                subband.tbx1 = Math.ceil(component.tcx1 / bscale);
                subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);
                subband.resolution = resolution;
                buildCodeblocks(context, subband, blocksDimensions);
                subbands.push(subband);
                resolutionSubbands.push(subband);
                subband = {};
                subband.type = "HH";
                subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);
                subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);
                subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);
                subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);
                subband.resolution = resolution;
                buildCodeblocks(context, subband, blocksDimensions);
                subbands.push(subband);
                resolutionSubbands.push(subband);
                resolution.subbands = resolutionSubbands;
              }
            }
            component.resolutions = resolutions;
            component.subbands = subbands;
          }
          const progressionOrder =
            tile.codingStyleDefaultParameters.progressionOrder;
          switch (progressionOrder) {
            case 0:
              tile.packetsIterator =
                new LayerResolutionComponentPositionIterator(context);
              break;
            case 1:
              tile.packetsIterator =
                new ResolutionLayerComponentPositionIterator(context);
              break;
            case 2:
              tile.packetsIterator =
                new ResolutionPositionComponentLayerIterator(context);
              break;
            case 3:
              tile.packetsIterator =
                new PositionComponentResolutionLayerIterator(context);
              break;
            case 4:
              tile.packetsIterator =
                new ComponentPositionResolutionLayerIterator(context);
              break;
            default:
              throw new JpxError(
                `Unsupported progression order ${progressionOrder}`
              );
          }
        }
        function parseTilePackets(context, data, offset, dataLength) {
          let position = 0;
          let buffer,
            bufferSize = 0,
            skipNextBit = false;
          function readBits(count) {
            while (bufferSize < count) {
              const b = data[offset + position];
              position++;
              if (skipNextBit) {
                buffer = (buffer << 7) | b;
                bufferSize += 7;
                skipNextBit = false;
              } else {
                buffer = (buffer << 8) | b;
                bufferSize += 8;
              }
              if (b === 0xff) {
                skipNextBit = true;
              }
            }
            bufferSize -= count;
            return (buffer >>> bufferSize) & ((1 << count) - 1);
          }
          function skipMarkerIfEqual(value) {
            if (
              data[offset + position - 1] === 0xff &&
              data[offset + position] === value
            ) {
              skipBytes(1);
              return true;
            } else if (
              data[offset + position] === 0xff &&
              data[offset + position + 1] === value
            ) {
              skipBytes(2);
              return true;
            }
            return false;
          }
          function skipBytes(count) {
            position += count;
          }
          function alignToByte() {
            bufferSize = 0;
            if (skipNextBit) {
              position++;
              skipNextBit = false;
            }
          }
          function readCodingpasses() {
            if (readBits(1) === 0) {
              return 1;
            }
            if (readBits(1) === 0) {
              return 2;
            }
            let value = readBits(2);
            if (value < 3) {
              return value + 3;
            }
            value = readBits(5);
            if (value < 31) {
              return value + 6;
            }
            value = readBits(7);
            return value + 37;
          }
          const tileIndex = context.currentTile.index;
          const tile = context.tiles[tileIndex];
          const sopMarkerUsed = context.COD.sopMarkerUsed;
          const ephMarkerUsed = context.COD.ephMarkerUsed;
          const packetsIterator = tile.packetsIterator;
          while (position < dataLength) {
            alignToByte();
            if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {
              skipBytes(4);
            }
            const packet = packetsIterator.nextPacket();
            if (!readBits(1)) {
              continue;
            }
            const layerNumber = packet.layerNumber,
              queue = [];
            let codeblock;
            for (let i = 0, ii = packet.codeblocks.length; i < ii; i++) {
              codeblock = packet.codeblocks[i];
              let precinct = codeblock.precinct;
              const codeblockColumn = codeblock.cbx - precinct.cbxMin;
              const codeblockRow = codeblock.cby - precinct.cbyMin;
              let codeblockIncluded = false;
              let firstTimeInclusion = false;
              let valueReady, zeroBitPlanesTree;
              if (codeblock.included !== undefined) {
                codeblockIncluded = !!readBits(1);
              } else {
                precinct = codeblock.precinct;
                let inclusionTree;
                if (precinct.inclusionTree !== undefined) {
                  inclusionTree = precinct.inclusionTree;
                } else {
                  const width = precinct.cbxMax - precinct.cbxMin + 1;
                  const height = precinct.cbyMax - precinct.cbyMin + 1;
                  inclusionTree = new InclusionTree(width, height, layerNumber);
                  zeroBitPlanesTree = new TagTree(width, height);
                  precinct.inclusionTree = inclusionTree;
                  precinct.zeroBitPlanesTree = zeroBitPlanesTree;
                  for (let l = 0; l < layerNumber; l++) {
                    if (readBits(1) !== 0) {
                      throw new JpxError("Invalid tag tree");
                    }
                  }
                }
                if (
                  inclusionTree.reset(
                    codeblockColumn,
                    codeblockRow,
                    layerNumber
                  )
                ) {
                  while (true) {
                    if (readBits(1)) {
                      valueReady = !inclusionTree.nextLevel();
                      if (valueReady) {
                        codeblock.included = true;
                        codeblockIncluded = firstTimeInclusion = true;
                        break;
                      }
                    } else {
                      inclusionTree.incrementValue(layerNumber);
                      break;
                    }
                  }
                }
              }
              if (!codeblockIncluded) {
                continue;
              }
              if (firstTimeInclusion) {
                zeroBitPlanesTree = precinct.zeroBitPlanesTree;
                zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);
                while (true) {
                  if (readBits(1)) {
                    valueReady = !zeroBitPlanesTree.nextLevel();
                    if (valueReady) {
                      break;
                    }
                  } else {
                    zeroBitPlanesTree.incrementValue();
                  }
                }
                codeblock.zeroBitPlanes = zeroBitPlanesTree.value;
              }
              const codingpasses = readCodingpasses();
              while (readBits(1)) {
                codeblock.Lblock++;
              }
              const codingpassesLog2 = (0, _core_utils.log2)(codingpasses);
              const bits =
                (codingpasses < 1 << codingpassesLog2
                  ? codingpassesLog2 - 1
                  : codingpassesLog2) + codeblock.Lblock;
              const codedDataLength = readBits(bits);
              queue.push({
                codeblock,
                codingpasses,
                dataLength: codedDataLength,
              });
            }
            alignToByte();
            if (ephMarkerUsed) {
              skipMarkerIfEqual(0x92);
            }
            while (queue.length > 0) {
              const packetItem = queue.shift();
              codeblock = packetItem.codeblock;
              if (codeblock.data === undefined) {
                codeblock.data = [];
              }
              codeblock.data.push({
                data,
                start: offset + position,
                end: offset + position + packetItem.dataLength,
                codingpasses: packetItem.codingpasses,
              });
              position += packetItem.dataLength;
            }
          }
          return position;
        }
        function copyCoefficients(
          coefficients,
          levelWidth,
          levelHeight,
          subband,
          delta,
          mb,
          reversible,
          segmentationSymbolUsed,
          resetContextProbabilities
        ) {
          const x0 = subband.tbx0;
          const y0 = subband.tby0;
          const width = subband.tbx1 - subband.tbx0;
          const codeblocks = subband.codeblocks;
          const right = subband.type.charAt(0) === "H" ? 1 : 0;
          const bottom = subband.type.charAt(1) === "H" ? levelWidth : 0;
          for (let i = 0, ii = codeblocks.length; i < ii; ++i) {
            const codeblock = codeblocks[i];
            const blockWidth = codeblock.tbx1_ - codeblock.tbx0_;
            const blockHeight = codeblock.tby1_ - codeblock.tby0_;
            if (blockWidth === 0 || blockHeight === 0) {
              continue;
            }
            if (codeblock.data === undefined) {
              continue;
            }
            const bitModel = new BitModel(
              blockWidth,
              blockHeight,
              codeblock.subbandType,
              codeblock.zeroBitPlanes,
              mb
            );
            let currentCodingpassType = 2;
            const data = codeblock.data;
            let totalLength = 0,
              codingpasses = 0;
            let j, jj, dataItem;
            for (j = 0, jj = data.length; j < jj; j++) {
              dataItem = data[j];
              totalLength += dataItem.end - dataItem.start;
              codingpasses += dataItem.codingpasses;
            }
            const encodedData = new Uint8Array(totalLength);
            let position = 0;
            for (j = 0, jj = data.length; j < jj; j++) {
              dataItem = data[j];
              const chunk = dataItem.data.subarray(
                dataItem.start,
                dataItem.end
              );
              encodedData.set(chunk, position);
              position += chunk.length;
            }
            const decoder = new _arithmetic_decoder.ArithmeticDecoder(
              encodedData,
              0,
              totalLength
            );
            bitModel.setDecoder(decoder);
            for (j = 0; j < codingpasses; j++) {
              switch (currentCodingpassType) {
                case 0:
                  bitModel.runSignificancePropagationPass();
                  break;
                case 1:
                  bitModel.runMagnitudeRefinementPass();
                  break;
                case 2:
                  bitModel.runCleanupPass();
                  if (segmentationSymbolUsed) {
                    bitModel.checkSegmentationSymbol();
                  }
                  break;
              }
              if (resetContextProbabilities) {
                bitModel.reset();
              }
              currentCodingpassType = (currentCodingpassType + 1) % 3;
            }
            let offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;
            const sign = bitModel.coefficentsSign;
            const magnitude = bitModel.coefficentsMagnitude;
            const bitsDecoded = bitModel.bitsDecoded;
            const magnitudeCorrection = reversible ? 0 : 0.5;
            let k, n, nb;
            position = 0;
            const interleave = subband.type !== "LL";
            for (j = 0; j < blockHeight; j++) {
              const row = (offset / width) | 0;
              const levelOffset =
                2 * row * (levelWidth - width) + right + bottom;
              for (k = 0; k < blockWidth; k++) {
                n = magnitude[position];
                if (n !== 0) {
                  n = (n + magnitudeCorrection) * delta;
                  if (sign[position] !== 0) {
                    n = -n;
                  }
                  nb = bitsDecoded[position];
                  const pos = interleave ? levelOffset + (offset << 1) : offset;
                  coefficients[pos] =
                    reversible && nb >= mb ? n : n * (1 << (mb - nb));
                }
                offset++;
                position++;
              }
              offset += width - blockWidth;
            }
          }
        }
        function transformTile(context, tile, c) {
          const component = tile.components[c];
          const codingStyleParameters = component.codingStyleParameters;
          const quantizationParameters = component.quantizationParameters;
          const decompositionLevelsCount =
            codingStyleParameters.decompositionLevelsCount;
          const spqcds = quantizationParameters.SPqcds;
          const scalarExpounded = quantizationParameters.scalarExpounded;
          const guardBits = quantizationParameters.guardBits;
          const segmentationSymbolUsed =
            codingStyleParameters.segmentationSymbolUsed;
          const resetContextProbabilities =
            codingStyleParameters.resetContextProbabilities;
          const precision = context.components[c].precision;
          const reversible = codingStyleParameters.reversibleTransformation;
          const transform = reversible
            ? new ReversibleTransform()
            : new IrreversibleTransform();
          const subbandCoefficients = [];
          let b = 0;
          for (let i = 0; i <= decompositionLevelsCount; i++) {
            const resolution = component.resolutions[i];
            const width = resolution.trx1 - resolution.trx0;
            const height = resolution.try1 - resolution.try0;
            const coefficients = new Float32Array(width * height);
            for (let j = 0, jj = resolution.subbands.length; j < jj; j++) {
              let mu, epsilon;
              if (!scalarExpounded) {
                mu = spqcds[0].mu;
                epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);
              } else {
                mu = spqcds[b].mu;
                epsilon = spqcds[b].epsilon;
                b++;
              }
              const subband = resolution.subbands[j];
              const gainLog2 = SubbandsGainLog2[subband.type];
              const delta = reversible
                ? 1
                : 2 ** (precision + gainLog2 - epsilon) * (1 + mu / 2048);
              const mb = guardBits + epsilon - 1;
              copyCoefficients(
                coefficients,
                width,
                height,
                subband,
                delta,
                mb,
                reversible,
                segmentationSymbolUsed,
                resetContextProbabilities
              );
            }
            subbandCoefficients.push({
              width,
              height,
              items: coefficients,
            });
          }
          const result = transform.calculate(
            subbandCoefficients,
            component.tcx0,
            component.tcy0
          );
          return {
            left: component.tcx0,
            top: component.tcy0,
            width: result.width,
            height: result.height,
            items: result.items,
          };
        }
        function transformComponents(context) {
          const siz = context.SIZ;
          const components = context.components;
          const componentsCount = siz.Csiz;
          const resultImages = [];
          for (let i = 0, ii = context.tiles.length; i < ii; i++) {
            const tile = context.tiles[i];
            const transformedTiles = [];
            for (let c = 0; c < componentsCount; c++) {
              transformedTiles[c] = transformTile(context, tile, c);
            }
            const tile0 = transformedTiles[0];
            const out = new Uint8ClampedArray(
              tile0.items.length * componentsCount
            );
            const result = {
              left: tile0.left,
              top: tile0.top,
              width: tile0.width,
              height: tile0.height,
              items: out,
            };
            let shift, offset;
            let pos = 0,
              j,
              jj,
              y0,
              y1,
              y2;
            if (tile.codingStyleDefaultParameters.multipleComponentTransform) {
              const fourComponents = componentsCount === 4;
              const y0items = transformedTiles[0].items;
              const y1items = transformedTiles[1].items;
              const y2items = transformedTiles[2].items;
              const y3items = fourComponents ? transformedTiles[3].items : null;
              shift = components[0].precision - 8;
              offset = (128 << shift) + 0.5;
              const component0 = tile.components[0];
              const alpha01 = componentsCount - 3;
              jj = y0items.length;
              if (!component0.codingStyleParameters.reversibleTransformation) {
                for (j = 0; j < jj; j++, pos += alpha01) {
                  y0 = y0items[j] + offset;
                  y1 = y1items[j];
                  y2 = y2items[j];
                  out[pos++] = (y0 + 1.402 * y2) >> shift;
                  out[pos++] = (y0 - 0.34413 * y1 - 0.71414 * y2) >> shift;
                  out[pos++] = (y0 + 1.772 * y1) >> shift;
                }
              } else {
                for (j = 0; j < jj; j++, pos += alpha01) {
                  y0 = y0items[j] + offset;
                  y1 = y1items[j];
                  y2 = y2items[j];
                  const g = y0 - ((y2 + y1) >> 2);
                  out[pos++] = (g + y2) >> shift;
                  out[pos++] = g >> shift;
                  out[pos++] = (g + y1) >> shift;
                }
              }
              if (fourComponents) {
                for (j = 0, pos = 3; j < jj; j++, pos += 4) {
                  out[pos] = (y3items[j] + offset) >> shift;
                }
              }
            } else {
              for (let c = 0; c < componentsCount; c++) {
                const items = transformedTiles[c].items;
                shift = components[c].precision - 8;
                offset = (128 << shift) + 0.5;
                for (pos = c, j = 0, jj = items.length; j < jj; j++) {
                  out[pos] = (items[j] + offset) >> shift;
                  pos += componentsCount;
                }
              }
            }
            resultImages.push(result);
          }
          return resultImages;
        }
        function initializeTile(context, tileIndex) {
          const siz = context.SIZ;
          const componentsCount = siz.Csiz;
          const tile = context.tiles[tileIndex];
          for (let c = 0; c < componentsCount; c++) {
            const component = tile.components[c];
            const qcdOrQcc =
              context.currentTile.QCC[c] !== undefined
                ? context.currentTile.QCC[c]
                : context.currentTile.QCD;
            component.quantizationParameters = qcdOrQcc;
            const codOrCoc =
              context.currentTile.COC[c] !== undefined
                ? context.currentTile.COC[c]
                : context.currentTile.COD;
            component.codingStyleParameters = codOrCoc;
          }
          tile.codingStyleDefaultParameters = context.currentTile.COD;
        }
        class TagTree {
          constructor(width, height) {
            const levelsLength =
              (0, _core_utils.log2)(Math.max(width, height)) + 1;
            this.levels = [];
            for (let i = 0; i < levelsLength; i++) {
              const level = {
                width,
                height,
                items: [],
              };
              this.levels.push(level);
              width = Math.ceil(width / 2);
              height = Math.ceil(height / 2);
            }
          }
          reset(i, j) {
            let currentLevel = 0,
              value = 0,
              level;
            while (currentLevel < this.levels.length) {
              level = this.levels[currentLevel];
              const index = i + j * level.width;
              if (level.items[index] !== undefined) {
                value = level.items[index];
                break;
              }
              level.index = index;
              i >>= 1;
              j >>= 1;
              currentLevel++;
            }
            currentLevel--;
            level = this.levels[currentLevel];
            level.items[level.index] = value;
            this.currentLevel = currentLevel;
            delete this.value;
          }
          incrementValue() {
            const level = this.levels[this.currentLevel];
            level.items[level.index]++;
          }
          nextLevel() {
            let currentLevel = this.currentLevel;
            let level = this.levels[currentLevel];
            const value = level.items[level.index];
            currentLevel--;
            if (currentLevel < 0) {
              this.value = value;
              return false;
            }
            this.currentLevel = currentLevel;
            level = this.levels[currentLevel];
            level.items[level.index] = value;
            return true;
          }
        }
        class InclusionTree {
          constructor(width, height, defaultValue) {
            const levelsLength =
              (0, _core_utils.log2)(Math.max(width, height)) + 1;
            this.levels = [];
            for (let i = 0; i < levelsLength; i++) {
              const items = new Uint8Array(width * height);
              for (let j = 0, jj = items.length; j < jj; j++) {
                items[j] = defaultValue;
              }
              const level = {
                width,
                height,
                items,
              };
              this.levels.push(level);
              width = Math.ceil(width / 2);
              height = Math.ceil(height / 2);
            }
          }
          reset(i, j, stopValue) {
            let currentLevel = 0;
            while (currentLevel < this.levels.length) {
              const level = this.levels[currentLevel];
              const index = i + j * level.width;
              level.index = index;
              const value = level.items[index];
              if (value === 0xff) {
                break;
              }
              if (value > stopValue) {
                this.currentLevel = currentLevel;
                this.propagateValues();
                return false;
              }
              i >>= 1;
              j >>= 1;
              currentLevel++;
            }
            this.currentLevel = currentLevel - 1;
            return true;
          }
          incrementValue(stopValue) {
            const level = this.levels[this.currentLevel];
            level.items[level.index] = stopValue + 1;
            this.propagateValues();
          }
          propagateValues() {
            let levelIndex = this.currentLevel;
            let level = this.levels[levelIndex];
            const currentValue = level.items[level.index];
            while (--levelIndex >= 0) {
              level = this.levels[levelIndex];
              level.items[level.index] = currentValue;
            }
          }
          nextLevel() {
            let currentLevel = this.currentLevel;
            let level = this.levels[currentLevel];
            const value = level.items[level.index];
            level.items[level.index] = 0xff;
            currentLevel--;
            if (currentLevel < 0) {
              return false;
            }
            this.currentLevel = currentLevel;
            level = this.levels[currentLevel];
            level.items[level.index] = value;
            return true;
          }
        }
        class BitModel {
          static UNIFORM_CONTEXT = 17;
          static RUNLENGTH_CONTEXT = 18;
          static LLAndLHContextsLabel = new Uint8Array([
            0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8,
            0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0,
            0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3,
            7, 8, 0, 4, 7, 8,
          ]);
          static HLContextLabel = new Uint8Array([
            0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7,
            0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0,
            0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6,
            7, 7, 0, 8, 8, 8,
          ]);
          static HHContextLabel = new Uint8Array([
            0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5,
            0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0,
            0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8,
            8, 8, 0, 8, 8, 8,
          ]);
          constructor(width, height, subband, zeroBitPlanes, mb) {
            this.width = width;
            this.height = height;
            let contextLabelTable;
            if (subband === "HH") {
              contextLabelTable = BitModel.HHContextLabel;
            } else if (subband === "HL") {
              contextLabelTable = BitModel.HLContextLabel;
            } else {
              contextLabelTable = BitModel.LLAndLHContextsLabel;
            }
            this.contextLabelTable = contextLabelTable;
            const coefficientCount = width * height;
            this.neighborsSignificance = new Uint8Array(coefficientCount);
            this.coefficentsSign = new Uint8Array(coefficientCount);
            let coefficentsMagnitude;
            if (mb > 14) {
              coefficentsMagnitude = new Uint32Array(coefficientCount);
            } else if (mb > 6) {
              coefficentsMagnitude = new Uint16Array(coefficientCount);
            } else {
              coefficentsMagnitude = new Uint8Array(coefficientCount);
            }
            this.coefficentsMagnitude = coefficentsMagnitude;
            this.processingFlags = new Uint8Array(coefficientCount);
            const bitsDecoded = new Uint8Array(coefficientCount);
            if (zeroBitPlanes !== 0) {
              for (let i = 0; i < coefficientCount; i++) {
                bitsDecoded[i] = zeroBitPlanes;
              }
            }
            this.bitsDecoded = bitsDecoded;
            this.reset();
          }
          setDecoder(decoder) {
            this.decoder = decoder;
          }
          reset() {
            this.contexts = new Int8Array(19);
            this.contexts[0] = (4 << 1) | 0;
            this.contexts[BitModel.UNIFORM_CONTEXT] = (46 << 1) | 0;
            this.contexts[BitModel.RUNLENGTH_CONTEXT] = (3 << 1) | 0;
          }
          setNeighborsSignificance(row, column, index) {
            const neighborsSignificance = this.neighborsSignificance;
            const width = this.width,
              height = this.height;
            const left = column > 0;
            const right = column + 1 < width;
            let i;
            if (row > 0) {
              i = index - width;
              if (left) {
                neighborsSignificance[i - 1] += 0x10;
              }
              if (right) {
                neighborsSignificance[i + 1] += 0x10;
              }
              neighborsSignificance[i] += 0x04;
            }
            if (row + 1 < height) {
              i = index + width;
              if (left) {
                neighborsSignificance[i - 1] += 0x10;
              }
              if (right) {
                neighborsSignificance[i + 1] += 0x10;
              }
              neighborsSignificance[i] += 0x04;
            }
            if (left) {
              neighborsSignificance[index - 1] += 0x01;
            }
            if (right) {
              neighborsSignificance[index + 1] += 0x01;
            }
            neighborsSignificance[index] |= 0x80;
          }
          runSignificancePropagationPass() {
            const decoder = this.decoder;
            const width = this.width,
              height = this.height;
            const coefficentsMagnitude = this.coefficentsMagnitude;
            const coefficentsSign = this.coefficentsSign;
            const neighborsSignificance = this.neighborsSignificance;
            const processingFlags = this.processingFlags;
            const contexts = this.contexts;
            const labels = this.contextLabelTable;
            const bitsDecoded = this.bitsDecoded;
            const processedInverseMask = ~1;
            const processedMask = 1;
            const firstMagnitudeBitMask = 2;
            for (let i0 = 0; i0 < height; i0 += 4) {
              for (let j = 0; j < width; j++) {
                let index = i0 * width + j;
                for (let i1 = 0; i1 < 4; i1++, index += width) {
                  const i = i0 + i1;
                  if (i >= height) {
                    break;
                  }
                  processingFlags[index] &= processedInverseMask;
                  if (
                    coefficentsMagnitude[index] ||
                    !neighborsSignificance[index]
                  ) {
                    continue;
                  }
                  const contextLabel = labels[neighborsSignificance[index]];
                  const decision = decoder.readBit(contexts, contextLabel);
                  if (decision) {
                    const sign = this.decodeSignBit(i, j, index);
                    coefficentsSign[index] = sign;
                    coefficentsMagnitude[index] = 1;
                    this.setNeighborsSignificance(i, j, index);
                    processingFlags[index] |= firstMagnitudeBitMask;
                  }
                  bitsDecoded[index]++;
                  processingFlags[index] |= processedMask;
                }
              }
            }
          }
          decodeSignBit(row, column, index) {
            const width = this.width,
              height = this.height;
            const coefficentsMagnitude = this.coefficentsMagnitude;
            const coefficentsSign = this.coefficentsSign;
            let contribution, sign0, sign1, significance1;
            let contextLabel, decoded;
            significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;
            if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {
              sign1 = coefficentsSign[index + 1];
              if (significance1) {
                sign0 = coefficentsSign[index - 1];
                contribution = 1 - sign1 - sign0;
              } else {
                contribution = 1 - sign1 - sign1;
              }
            } else if (significance1) {
              sign0 = coefficentsSign[index - 1];
              contribution = 1 - sign0 - sign0;
            } else {
              contribution = 0;
            }
            const horizontalContribution = 3 * contribution;
            significance1 =
              row > 0 && coefficentsMagnitude[index - width] !== 0;
            if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {
              sign1 = coefficentsSign[index + width];
              if (significance1) {
                sign0 = coefficentsSign[index - width];
                contribution = 1 - sign1 - sign0 + horizontalContribution;
              } else {
                contribution = 1 - sign1 - sign1 + horizontalContribution;
              }
            } else if (significance1) {
              sign0 = coefficentsSign[index - width];
              contribution = 1 - sign0 - sign0 + horizontalContribution;
            } else {
              contribution = horizontalContribution;
            }
            if (contribution >= 0) {
              contextLabel = 9 + contribution;
              decoded = this.decoder.readBit(this.contexts, contextLabel);
            } else {
              contextLabel = 9 - contribution;
              decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;
            }
            return decoded;
          }
          runMagnitudeRefinementPass() {
            const decoder = this.decoder;
            const width = this.width,
              height = this.height;
            const coefficentsMagnitude = this.coefficentsMagnitude;
            const neighborsSignificance = this.neighborsSignificance;
            const contexts = this.contexts;
            const bitsDecoded = this.bitsDecoded;
            const processingFlags = this.processingFlags;
            const processedMask = 1;
            const firstMagnitudeBitMask = 2;
            const length = width * height;
            const width4 = width * 4;
            for (
              let index0 = 0, indexNext;
              index0 < length;
              index0 = indexNext
            ) {
              indexNext = Math.min(length, index0 + width4);
              for (let j = 0; j < width; j++) {
                for (
                  let index = index0 + j;
                  index < indexNext;
                  index += width
                ) {
                  if (
                    !coefficentsMagnitude[index] ||
                    (processingFlags[index] & processedMask) !== 0
                  ) {
                    continue;
                  }
                  let contextLabel = 16;
                  if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {
                    processingFlags[index] ^= firstMagnitudeBitMask;
                    const significance = neighborsSignificance[index] & 127;
                    contextLabel = significance === 0 ? 15 : 14;
                  }
                  const bit = decoder.readBit(contexts, contextLabel);
                  coefficentsMagnitude[index] =
                    (coefficentsMagnitude[index] << 1) | bit;
                  bitsDecoded[index]++;
                  processingFlags[index] |= processedMask;
                }
              }
            }
          }
          runCleanupPass() {
            const decoder = this.decoder;
            const width = this.width,
              height = this.height;
            const neighborsSignificance = this.neighborsSignificance;
            const coefficentsMagnitude = this.coefficentsMagnitude;
            const coefficentsSign = this.coefficentsSign;
            const contexts = this.contexts;
            const labels = this.contextLabelTable;
            const bitsDecoded = this.bitsDecoded;
            const processingFlags = this.processingFlags;
            const processedMask = 1;
            const firstMagnitudeBitMask = 2;
            const oneRowDown = width;
            const twoRowsDown = width * 2;
            const threeRowsDown = width * 3;
            let iNext;
            for (let i0 = 0; i0 < height; i0 = iNext) {
              iNext = Math.min(i0 + 4, height);
              const indexBase = i0 * width;
              const checkAllEmpty = i0 + 3 < height;
              for (let j = 0; j < width; j++) {
                const index0 = indexBase + j;
                const allEmpty =
                  checkAllEmpty &&
                  processingFlags[index0] === 0 &&
                  processingFlags[index0 + oneRowDown] === 0 &&
                  processingFlags[index0 + twoRowsDown] === 0 &&
                  processingFlags[index0 + threeRowsDown] === 0 &&
                  neighborsSignificance[index0] === 0 &&
                  neighborsSignificance[index0 + oneRowDown] === 0 &&
                  neighborsSignificance[index0 + twoRowsDown] === 0 &&
                  neighborsSignificance[index0 + threeRowsDown] === 0;
                let i1 = 0,
                  index = index0;
                let i = i0,
                  sign;
                if (allEmpty) {
                  const hasSignificantCoefficent = decoder.readBit(
                    contexts,
                    BitModel.RUNLENGTH_CONTEXT
                  );
                  if (!hasSignificantCoefficent) {
                    bitsDecoded[index0]++;
                    bitsDecoded[index0 + oneRowDown]++;
                    bitsDecoded[index0 + twoRowsDown]++;
                    bitsDecoded[index0 + threeRowsDown]++;
                    continue;
                  }
                  i1 =
                    (decoder.readBit(contexts, BitModel.UNIFORM_CONTEXT) << 1) |
                    decoder.readBit(contexts, BitModel.UNIFORM_CONTEXT);
                  if (i1 !== 0) {
                    i = i0 + i1;
                    index += i1 * width;
                  }
                  sign = this.decodeSignBit(i, j, index);
                  coefficentsSign[index] = sign;
                  coefficentsMagnitude[index] = 1;
                  this.setNeighborsSignificance(i, j, index);
                  processingFlags[index] |= firstMagnitudeBitMask;
                  index = index0;
                  for (let i2 = i0; i2 <= i; i2++, index += width) {
                    bitsDecoded[index]++;
                  }
                  i1++;
                }
                for (i = i0 + i1; i < iNext; i++, index += width) {
                  if (
                    coefficentsMagnitude[index] ||
                    (processingFlags[index] & processedMask) !== 0
                  ) {
                    continue;
                  }
                  const contextLabel = labels[neighborsSignificance[index]];
                  const decision = decoder.readBit(contexts, contextLabel);
                  if (decision === 1) {
                    sign = this.decodeSignBit(i, j, index);
                    coefficentsSign[index] = sign;
                    coefficentsMagnitude[index] = 1;
                    this.setNeighborsSignificance(i, j, index);
                    processingFlags[index] |= firstMagnitudeBitMask;
                  }
                  bitsDecoded[index]++;
                }
              }
            }
          }
          checkSegmentationSymbol() {
            const decoder = this.decoder;
            const contexts = this.contexts;
            const symbol =
              (decoder.readBit(contexts, BitModel.UNIFORM_CONTEXT) << 3) |
              (decoder.readBit(contexts, BitModel.UNIFORM_CONTEXT) << 2) |
              (decoder.readBit(contexts, BitModel.UNIFORM_CONTEXT) << 1) |
              decoder.readBit(contexts, BitModel.UNIFORM_CONTEXT);
            if (symbol !== 0xa) {
              throw new JpxError("Invalid segmentation symbol");
            }
          }
        }
        class Transform {
          constructor() {
            if (this.constructor === Transform) {
              (0, _util.unreachable)("Cannot initialize Transform.");
            }
          }
          calculate(subbands, u0, v0) {
            let ll = subbands[0];
            for (let i = 1, ii = subbands.length; i < ii; i++) {
              ll = this.iterate(ll, subbands[i], u0, v0);
            }
            return ll;
          }
          extend(buffer, offset, size) {
            let i1 = offset - 1,
              j1 = offset + 1;
            let i2 = offset + size - 2,
              j2 = offset + size;
            buffer[i1--] = buffer[j1++];
            buffer[j2++] = buffer[i2--];
            buffer[i1--] = buffer[j1++];
            buffer[j2++] = buffer[i2--];
            buffer[i1--] = buffer[j1++];
            buffer[j2++] = buffer[i2--];
            buffer[i1] = buffer[j1];
            buffer[j2] = buffer[i2];
          }
          filter(x, offset, length) {
            (0, _util.unreachable)("Abstract method `filter` called");
          }
          iterate(ll, hl_lh_hh, u0, v0) {
            const llWidth = ll.width,
              llHeight = ll.height;
            let llItems = ll.items;
            const width = hl_lh_hh.width;
            const height = hl_lh_hh.height;
            const items = hl_lh_hh.items;
            let i, j, k, l, u, v;
            for (k = 0, i = 0; i < llHeight; i++) {
              l = i * 2 * width;
              for (j = 0; j < llWidth; j++, k++, l += 2) {
                items[l] = llItems[k];
              }
            }
            llItems = ll.items = null;
            const bufferPadding = 4;
            const rowBuffer = new Float32Array(width + 2 * bufferPadding);
            if (width === 1) {
              if ((u0 & 1) !== 0) {
                for (v = 0, k = 0; v < height; v++, k += width) {
                  items[k] *= 0.5;
                }
              }
            } else {
              for (v = 0, k = 0; v < height; v++, k += width) {
                rowBuffer.set(items.subarray(k, k + width), bufferPadding);
                this.extend(rowBuffer, bufferPadding, width);
                this.filter(rowBuffer, bufferPadding, width);
                items.set(
                  rowBuffer.subarray(bufferPadding, bufferPadding + width),
                  k
                );
              }
            }
            let numBuffers = 16;
            const colBuffers = [];
            for (i = 0; i < numBuffers; i++) {
              colBuffers.push(new Float32Array(height + 2 * bufferPadding));
            }
            let b,
              currentBuffer = 0;
            ll = bufferPadding + height;
            if (height === 1) {
              if ((v0 & 1) !== 0) {
                for (u = 0; u < width; u++) {
                  items[u] *= 0.5;
                }
              }
            } else {
              for (u = 0; u < width; u++) {
                if (currentBuffer === 0) {
                  numBuffers = Math.min(width - u, numBuffers);
                  for (k = u, l = bufferPadding; l < ll; k += width, l++) {
                    for (b = 0; b < numBuffers; b++) {
                      colBuffers[b][l] = items[k + b];
                    }
                  }
                  currentBuffer = numBuffers;
                }
                currentBuffer--;
                const buffer = colBuffers[currentBuffer];
                this.extend(buffer, bufferPadding, height);
                this.filter(buffer, bufferPadding, height);
                if (currentBuffer === 0) {
                  k = u - numBuffers + 1;
                  for (l = bufferPadding; l < ll; k += width, l++) {
                    for (b = 0; b < numBuffers; b++) {
                      items[k + b] = colBuffers[b][l];
                    }
                  }
                }
              }
            }
            return {
              width,
              height,
              items,
            };
          }
        }
        class IrreversibleTransform extends Transform {
          filter(x, offset, length) {
            const len = length >> 1;
            offset |= 0;
            let j, n, current, next;
            const alpha = -1.586134342059924;
            const beta = -0.052980118572961;
            const gamma = 0.882911075530934;
            const delta = 0.443506852043971;
            const K = 1.230174104914001;
            const K_ = 1 / K;
            j = offset - 3;
            for (n = len + 4; n--; j += 2) {
              x[j] *= K_;
            }
            j = offset - 2;
            current = delta * x[j - 1];
            for (n = len + 3; n--; j += 2) {
              next = delta * x[j + 1];
              x[j] = K * x[j] - current - next;
              if (n--) {
                j += 2;
                current = delta * x[j + 1];
                x[j] = K * x[j] - current - next;
              } else {
                break;
              }
            }
            j = offset - 1;
            current = gamma * x[j - 1];
            for (n = len + 2; n--; j += 2) {
              next = gamma * x[j + 1];
              x[j] -= current + next;
              if (n--) {
                j += 2;
                current = gamma * x[j + 1];
                x[j] -= current + next;
              } else {
                break;
              }
            }
            j = offset;
            current = beta * x[j - 1];
            for (n = len + 1; n--; j += 2) {
              next = beta * x[j + 1];
              x[j] -= current + next;
              if (n--) {
                j += 2;
                current = beta * x[j + 1];
                x[j] -= current + next;
              } else {
                break;
              }
            }
            if (len !== 0) {
              j = offset + 1;
              current = alpha * x[j - 1];
              for (n = len; n--; j += 2) {
                next = alpha * x[j + 1];
                x[j] -= current + next;
                if (n--) {
                  j += 2;
                  current = alpha * x[j + 1];
                  x[j] -= current + next;
                } else {
                  break;
                }
              }
            }
          }
        }
        class ReversibleTransform extends Transform {
          filter(x, offset, length) {
            const len = length >> 1;
            offset |= 0;
            let j, n;
            for (j = offset, n = len + 1; n--; j += 2) {
              x[j] -= (x[j - 1] + x[j + 1] + 2) >> 2;
            }
            for (j = offset + 1, n = len; n--; j += 2) {
              x[j] += (x[j - 1] + x[j + 1]) >> 1;
            }
          }
        }

        /***/
      },
      /* 31 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.LZWStream = void 0;
        var _decode_stream = __w_pdfjs_require__(18);
        class LZWStream extends _decode_stream.DecodeStream {
          constructor(str, maybeLength, earlyChange) {
            super(maybeLength);
            this.str = str;
            this.dict = str.dict;
            this.cachedData = 0;
            this.bitsCached = 0;
            const maxLzwDictionarySize = 4096;
            const lzwState = {
              earlyChange,
              codeLength: 9,
              nextCode: 258,
              dictionaryValues: new Uint8Array(maxLzwDictionarySize),
              dictionaryLengths: new Uint16Array(maxLzwDictionarySize),
              dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),
              currentSequence: new Uint8Array(maxLzwDictionarySize),
              currentSequenceLength: 0,
            };
            for (let i = 0; i < 256; ++i) {
              lzwState.dictionaryValues[i] = i;
              lzwState.dictionaryLengths[i] = 1;
            }
            this.lzwState = lzwState;
          }
          readBits(n) {
            let bitsCached = this.bitsCached;
            let cachedData = this.cachedData;
            while (bitsCached < n) {
              const c = this.str.getByte();
              if (c === -1) {
                this.eof = true;
                return null;
              }
              cachedData = (cachedData << 8) | c;
              bitsCached += 8;
            }
            this.bitsCached = bitsCached -= n;
            this.cachedData = cachedData;
            this.lastCode = null;
            return (cachedData >>> bitsCached) & ((1 << n) - 1);
          }
          readBlock() {
            const blockSize = 512,
              decodedSizeDelta = blockSize;
            let estimatedDecodedSize = blockSize * 2;
            let i, j, q;
            const lzwState = this.lzwState;
            if (!lzwState) {
              return;
            }
            const earlyChange = lzwState.earlyChange;
            let nextCode = lzwState.nextCode;
            const dictionaryValues = lzwState.dictionaryValues;
            const dictionaryLengths = lzwState.dictionaryLengths;
            const dictionaryPrevCodes = lzwState.dictionaryPrevCodes;
            let codeLength = lzwState.codeLength;
            let prevCode = lzwState.prevCode;
            const currentSequence = lzwState.currentSequence;
            let currentSequenceLength = lzwState.currentSequenceLength;
            let decodedLength = 0;
            let currentBufferLength = this.bufferLength;
            let buffer = this.ensureBuffer(
              this.bufferLength + estimatedDecodedSize
            );
            for (i = 0; i < blockSize; i++) {
              const code = this.readBits(codeLength);
              const hasPrev = currentSequenceLength > 0;
              if (code < 256) {
                currentSequence[0] = code;
                currentSequenceLength = 1;
              } else if (code >= 258) {
                if (code < nextCode) {
                  currentSequenceLength = dictionaryLengths[code];
                  for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {
                    currentSequence[j] = dictionaryValues[q];
                    q = dictionaryPrevCodes[q];
                  }
                } else {
                  currentSequence[currentSequenceLength++] = currentSequence[0];
                }
              } else if (code === 256) {
                codeLength = 9;
                nextCode = 258;
                currentSequenceLength = 0;
                continue;
              } else {
                this.eof = true;
                delete this.lzwState;
                break;
              }
              if (hasPrev) {
                dictionaryPrevCodes[nextCode] = prevCode;
                dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;
                dictionaryValues[nextCode] = currentSequence[0];
                nextCode++;
                codeLength =
                  (nextCode + earlyChange) & (nextCode + earlyChange - 1)
                    ? codeLength
                    : Math.min(
                        Math.log(nextCode + earlyChange) / 0.6931471805599453 +
                          1,
                        12
                      ) | 0;
              }
              prevCode = code;
              decodedLength += currentSequenceLength;
              if (estimatedDecodedSize < decodedLength) {
                do {
                  estimatedDecodedSize += decodedSizeDelta;
                } while (estimatedDecodedSize < decodedLength);
                buffer = this.ensureBuffer(
                  this.bufferLength + estimatedDecodedSize
                );
              }
              for (j = 0; j < currentSequenceLength; j++) {
                buffer[currentBufferLength++] = currentSequence[j];
              }
            }
            lzwState.nextCode = nextCode;
            lzwState.codeLength = codeLength;
            lzwState.prevCode = prevCode;
            lzwState.currentSequenceLength = currentSequenceLength;
            this.bufferLength = currentBufferLength;
          }
        }
        exports.LZWStream = LZWStream;

        /***/
      },
      /* 32 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.PredictorStream = void 0;
        var _decode_stream = __w_pdfjs_require__(18);
        var _primitives = __w_pdfjs_require__(4);
        var _util = __w_pdfjs_require__(2);
        class PredictorStream extends _decode_stream.DecodeStream {
          constructor(str, maybeLength, params) {
            super(maybeLength);
            if (!(params instanceof _primitives.Dict)) {
              return str;
            }
            const predictor = (this.predictor = params.get("Predictor") || 1);
            if (predictor <= 1) {
              return str;
            }
            if (predictor !== 2 && (predictor < 10 || predictor > 15)) {
              throw new _util.FormatError(
                `Unsupported predictor: ${predictor}`
              );
            }
            this.readBlock =
              predictor === 2 ? this.readBlockTiff : this.readBlockPng;
            this.str = str;
            this.dict = str.dict;
            const colors = (this.colors = params.get("Colors") || 1);
            const bits = (this.bits =
              params.get("BPC", "BitsPerComponent") || 8);
            const columns = (this.columns = params.get("Columns") || 1);
            this.pixBytes = (colors * bits + 7) >> 3;
            this.rowBytes = (columns * colors * bits + 7) >> 3;
            return this;
          }
          readBlockTiff() {
            const rowBytes = this.rowBytes;
            const bufferLength = this.bufferLength;
            const buffer = this.ensureBuffer(bufferLength + rowBytes);
            const bits = this.bits;
            const colors = this.colors;
            const rawBytes = this.str.getBytes(rowBytes);
            this.eof = !rawBytes.length;
            if (this.eof) {
              return;
            }
            let inbuf = 0,
              outbuf = 0;
            let inbits = 0,
              outbits = 0;
            let pos = bufferLength;
            let i;
            if (bits === 1 && colors === 1) {
              for (i = 0; i < rowBytes; ++i) {
                let c = rawBytes[i] ^ inbuf;
                c ^= c >> 1;
                c ^= c >> 2;
                c ^= c >> 4;
                inbuf = (c & 1) << 7;
                buffer[pos++] = c;
              }
            } else if (bits === 8) {
              for (i = 0; i < colors; ++i) {
                buffer[pos++] = rawBytes[i];
              }
              for (; i < rowBytes; ++i) {
                buffer[pos] = buffer[pos - colors] + rawBytes[i];
                pos++;
              }
            } else if (bits === 16) {
              const bytesPerPixel = colors * 2;
              for (i = 0; i < bytesPerPixel; ++i) {
                buffer[pos++] = rawBytes[i];
              }
              for (; i < rowBytes; i += 2) {
                const sum =
                  ((rawBytes[i] & 0xff) << 8) +
                  (rawBytes[i + 1] & 0xff) +
                  ((buffer[pos - bytesPerPixel] & 0xff) << 8) +
                  (buffer[pos - bytesPerPixel + 1] & 0xff);
                buffer[pos++] = (sum >> 8) & 0xff;
                buffer[pos++] = sum & 0xff;
              }
            } else {
              const compArray = new Uint8Array(colors + 1);
              const bitMask = (1 << bits) - 1;
              let j = 0,
                k = bufferLength;
              const columns = this.columns;
              for (i = 0; i < columns; ++i) {
                for (let kk = 0; kk < colors; ++kk) {
                  if (inbits < bits) {
                    inbuf = (inbuf << 8) | (rawBytes[j++] & 0xff);
                    inbits += 8;
                  }
                  compArray[kk] =
                    (compArray[kk] + (inbuf >> (inbits - bits))) & bitMask;
                  inbits -= bits;
                  outbuf = (outbuf << bits) | compArray[kk];
                  outbits += bits;
                  if (outbits >= 8) {
                    buffer[k++] = (outbuf >> (outbits - 8)) & 0xff;
                    outbits -= 8;
                  }
                }
              }
              if (outbits > 0) {
                buffer[k++] =
                  (outbuf << (8 - outbits)) +
                  (inbuf & ((1 << (8 - outbits)) - 1));
              }
            }
            this.bufferLength += rowBytes;
          }
          readBlockPng() {
            const rowBytes = this.rowBytes;
            const pixBytes = this.pixBytes;
            const predictor = this.str.getByte();
            const rawBytes = this.str.getBytes(rowBytes);
            this.eof = !rawBytes.length;
            if (this.eof) {
              return;
            }
            const bufferLength = this.bufferLength;
            const buffer = this.ensureBuffer(bufferLength + rowBytes);
            let prevRow = buffer.subarray(
              bufferLength - rowBytes,
              bufferLength
            );
            if (prevRow.length === 0) {
              prevRow = new Uint8Array(rowBytes);
            }
            let i,
              j = bufferLength,
              up,
              c;
            switch (predictor) {
              case 0:
                for (i = 0; i < rowBytes; ++i) {
                  buffer[j++] = rawBytes[i];
                }
                break;
              case 1:
                for (i = 0; i < pixBytes; ++i) {
                  buffer[j++] = rawBytes[i];
                }
                for (; i < rowBytes; ++i) {
                  buffer[j] = (buffer[j - pixBytes] + rawBytes[i]) & 0xff;
                  j++;
                }
                break;
              case 2:
                for (i = 0; i < rowBytes; ++i) {
                  buffer[j++] = (prevRow[i] + rawBytes[i]) & 0xff;
                }
                break;
              case 3:
                for (i = 0; i < pixBytes; ++i) {
                  buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];
                }
                for (; i < rowBytes; ++i) {
                  buffer[j] =
                    (((prevRow[i] + buffer[j - pixBytes]) >> 1) + rawBytes[i]) &
                    0xff;
                  j++;
                }
                break;
              case 4:
                for (i = 0; i < pixBytes; ++i) {
                  up = prevRow[i];
                  c = rawBytes[i];
                  buffer[j++] = up + c;
                }
                for (; i < rowBytes; ++i) {
                  up = prevRow[i];
                  const upLeft = prevRow[i - pixBytes];
                  const left = buffer[j - pixBytes];
                  const p = left + up - upLeft;
                  let pa = p - left;
                  if (pa < 0) {
                    pa = -pa;
                  }
                  let pb = p - up;
                  if (pb < 0) {
                    pb = -pb;
                  }
                  let pc = p - upLeft;
                  if (pc < 0) {
                    pc = -pc;
                  }
                  c = rawBytes[i];
                  if (pa <= pb && pa <= pc) {
                    buffer[j++] = left + c;
                  } else if (pb <= pc) {
                    buffer[j++] = up + c;
                  } else {
                    buffer[j++] = upLeft + c;
                  }
                }
                break;
              default:
                throw new _util.FormatError(
                  `Unsupported predictor: ${predictor}`
                );
            }
            this.bufferLength += rowBytes;
          }
        }
        exports.PredictorStream = PredictorStream;

        /***/
      },
      /* 33 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.RunLengthStream = void 0;
        var _decode_stream = __w_pdfjs_require__(18);
        class RunLengthStream extends _decode_stream.DecodeStream {
          constructor(str, maybeLength) {
            super(maybeLength);
            this.str = str;
            this.dict = str.dict;
          }
          readBlock() {
            const repeatHeader = this.str.getBytes(2);
            if (
              !repeatHeader ||
              repeatHeader.length < 2 ||
              repeatHeader[0] === 128
            ) {
              this.eof = true;
              return;
            }
            let buffer;
            let bufferLength = this.bufferLength;
            let n = repeatHeader[0];
            if (n < 128) {
              buffer = this.ensureBuffer(bufferLength + n + 1);
              buffer[bufferLength++] = repeatHeader[1];
              if (n > 0) {
                const source = this.str.getBytes(n);
                buffer.set(source, bufferLength);
                bufferLength += n;
              }
            } else {
              n = 257 - n;
              const b = repeatHeader[1];
              buffer = this.ensureBuffer(bufferLength + n + 1);
              for (let i = 0; i < n; i++) {
                buffer[bufferLength++] = b;
              }
            }
            this.bufferLength = bufferLength;
          }
        }
        exports.RunLengthStream = RunLengthStream;

        /***/
      },
      /* 34 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.Font = exports.ErrorFont = void 0;
        var _util = __w_pdfjs_require__(2);
        var _cff_parser = __w_pdfjs_require__(35);
        var _fonts_utils = __w_pdfjs_require__(38);
        var _unicode = __w_pdfjs_require__(40);
        var _glyphlist = __w_pdfjs_require__(39);
        var _encodings = __w_pdfjs_require__(37);
        var _standard_fonts = __w_pdfjs_require__(41);
        var _to_unicode_map = __w_pdfjs_require__(42);
        var _cff_font = __w_pdfjs_require__(43);
        var _font_renderer = __w_pdfjs_require__(44);
        var _metrics = __w_pdfjs_require__(45);
        var _glyf = __w_pdfjs_require__(46);
        var _cmap = __w_pdfjs_require__(14);
        var _opentype_file_builder = __w_pdfjs_require__(47);
        var _core_utils = __w_pdfjs_require__(3);
        var _stream = __w_pdfjs_require__(8);
        var _type1_font = __w_pdfjs_require__(48);
        const PRIVATE_USE_AREAS = [
          [0xe000, 0xf8ff],
          [0x100000, 0x10fffd],
        ];
        const PDF_GLYPH_SPACE_UNITS = 1000;
        const EXPORT_DATA_PROPERTIES = [
          "ascent",
          "bbox",
          "black",
          "bold",
          "charProcOperatorList",
          "composite",
          "cssFontInfo",
          "data",
          "defaultVMetrics",
          "defaultWidth",
          "descent",
          "fallbackName",
          "fontMatrix",
          "isInvalidPDFjsFont",
          "isType3Font",
          "italic",
          "loadedName",
          "mimetype",
          "missingFile",
          "name",
          "remeasure",
          "subtype",
          "systemFontInfo",
          "type",
          "vertical",
        ];
        const EXPORT_DATA_EXTRA_PROPERTIES = [
          "cMap",
          "defaultEncoding",
          "differences",
          "isMonospace",
          "isSerifFont",
          "isSymbolicFont",
          "seacMap",
          "toFontChar",
          "toUnicode",
          "vmetrics",
          "widths",
        ];
        function adjustWidths(properties) {
          if (!properties.fontMatrix) {
            return;
          }
          if (properties.fontMatrix[0] === _util.FONT_IDENTITY_MATRIX[0]) {
            return;
          }
          const scale = 0.001 / properties.fontMatrix[0];
          const glyphsWidths = properties.widths;
          for (const glyph in glyphsWidths) {
            glyphsWidths[glyph] *= scale;
          }
          properties.defaultWidth *= scale;
        }
        function adjustTrueTypeToUnicode(
          properties,
          isSymbolicFont,
          nameRecords
        ) {
          if (properties.isInternalFont) {
            return;
          }
          if (properties.hasIncludedToUnicodeMap) {
            return;
          }
          if (properties.hasEncoding) {
            return;
          }
          if (
            properties.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap
          ) {
            return;
          }
          if (!isSymbolicFont) {
            return;
          }
          if (nameRecords.length === 0) {
            return;
          }
          if (properties.defaultEncoding === _encodings.WinAnsiEncoding) {
            return;
          }
          for (const r of nameRecords) {
            if (!isWinNameRecord(r)) {
              return;
            }
          }
          const encoding = _encodings.WinAnsiEncoding;
          const toUnicode = [],
            glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();
          for (const charCode in encoding) {
            const glyphName = encoding[charCode];
            if (glyphName === "") {
              continue;
            }
            const unicode = glyphsUnicodeMap[glyphName];
            if (unicode === undefined) {
              continue;
            }
            toUnicode[charCode] = String.fromCharCode(unicode);
          }
          if (toUnicode.length > 0) {
            properties.toUnicode.amend(toUnicode);
          }
        }
        function adjustType1ToUnicode(properties, builtInEncoding) {
          if (properties.isInternalFont) {
            return;
          }
          if (properties.hasIncludedToUnicodeMap) {
            return;
          }
          if (builtInEncoding === properties.defaultEncoding) {
            return;
          }
          if (
            properties.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap
          ) {
            return;
          }
          const toUnicode = [],
            glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();
          for (const charCode in builtInEncoding) {
            if (properties.hasEncoding) {
              if (
                properties.baseEncodingName ||
                properties.differences[charCode] !== undefined
              ) {
                continue;
              }
            }
            const glyphName = builtInEncoding[charCode];
            const unicode = (0, _unicode.getUnicodeForGlyph)(
              glyphName,
              glyphsUnicodeMap
            );
            if (unicode !== -1) {
              toUnicode[charCode] = String.fromCharCode(unicode);
            }
          }
          if (toUnicode.length > 0) {
            properties.toUnicode.amend(toUnicode);
          }
        }
        function amendFallbackToUnicode(properties) {
          if (!properties.fallbackToUnicode) {
            return;
          }
          if (
            properties.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap
          ) {
            return;
          }
          const toUnicode = [];
          for (const charCode in properties.fallbackToUnicode) {
            if (properties.toUnicode.has(charCode)) {
              continue;
            }
            toUnicode[charCode] = properties.fallbackToUnicode[charCode];
          }
          if (toUnicode.length > 0) {
            properties.toUnicode.amend(toUnicode);
          }
        }
        class Glyph {
          constructor(
            originalCharCode,
            fontChar,
            unicode,
            accent,
            width,
            vmetric,
            operatorListId,
            isSpace,
            isInFont
          ) {
            this.originalCharCode = originalCharCode;
            this.fontChar = fontChar;
            this.unicode = unicode;
            this.accent = accent;
            this.width = width;
            this.vmetric = vmetric;
            this.operatorListId = operatorListId;
            this.isSpace = isSpace;
            this.isInFont = isInFont;
          }
          get category() {
            return (0, _util.shadow)(
              this,
              "category",
              (0, _unicode.getCharUnicodeCategory)(this.unicode),
              true
            );
          }
        }
        function int16(b0, b1) {
          return (b0 << 8) + b1;
        }
        function writeSignedInt16(bytes, index, value) {
          bytes[index + 1] = value;
          bytes[index] = value >>> 8;
        }
        function signedInt16(b0, b1) {
          const value = (b0 << 8) + b1;
          return value & (1 << 15) ? value - 0x10000 : value;
        }
        function int32(b0, b1, b2, b3) {
          return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;
        }
        function string16(value) {
          return String.fromCharCode((value >> 8) & 0xff, value & 0xff);
        }
        function safeString16(value) {
          if (value > 0x7fff) {
            value = 0x7fff;
          } else if (value < -0x8000) {
            value = -0x8000;
          }
          return String.fromCharCode((value >> 8) & 0xff, value & 0xff);
        }
        function isTrueTypeFile(file) {
          const header = file.peekBytes(4);
          return (
            (0, _core_utils.readUint32)(header, 0) === 0x00010000 ||
            (0, _util.bytesToString)(header) === "true"
          );
        }
        function isTrueTypeCollectionFile(file) {
          const header = file.peekBytes(4);
          return (0, _util.bytesToString)(header) === "ttcf";
        }
        function isOpenTypeFile(file) {
          const header = file.peekBytes(4);
          return (0, _util.bytesToString)(header) === "OTTO";
        }
        function isType1File(file) {
          const header = file.peekBytes(2);
          if (header[0] === 0x25 && header[1] === 0x21) {
            return true;
          }
          if (header[0] === 0x80 && header[1] === 0x01) {
            return true;
          }
          return false;
        }
        function isCFFFile(file) {
          const header = file.peekBytes(4);
          if (header[0] >= 1 && header[3] >= 1 && header[3] <= 4) {
            return true;
          }
          return false;
        }
        function getFontFileType(file, { type, subtype, composite }) {
          let fileType, fileSubtype;
          if (isTrueTypeFile(file) || isTrueTypeCollectionFile(file)) {
            fileType = composite ? "CIDFontType2" : "TrueType";
          } else if (isOpenTypeFile(file)) {
            fileType = composite ? "CIDFontType2" : "OpenType";
          } else if (isType1File(file)) {
            if (composite) {
              fileType = "CIDFontType0";
            } else {
              fileType = type === "MMType1" ? "MMType1" : "Type1";
            }
          } else if (isCFFFile(file)) {
            if (composite) {
              fileType = "CIDFontType0";
              fileSubtype = "CIDFontType0C";
            } else {
              fileType = type === "MMType1" ? "MMType1" : "Type1";
              fileSubtype = "Type1C";
            }
          } else {
            (0, _util.warn)(
              "getFontFileType: Unable to detect correct font file Type/Subtype."
            );
            fileType = type;
            fileSubtype = subtype;
          }
          return [fileType, fileSubtype];
        }
        function applyStandardFontGlyphMap(map, glyphMap) {
          for (const charCode in glyphMap) {
            map[+charCode] = glyphMap[charCode];
          }
        }
        function buildToFontChar(encoding, glyphsUnicodeMap, differences) {
          const toFontChar = [];
          let unicode;
          for (let i = 0, ii = encoding.length; i < ii; i++) {
            unicode = (0, _unicode.getUnicodeForGlyph)(
              encoding[i],
              glyphsUnicodeMap
            );
            if (unicode !== -1) {
              toFontChar[i] = unicode;
            }
          }
          for (const charCode in differences) {
            unicode = (0, _unicode.getUnicodeForGlyph)(
              differences[charCode],
              glyphsUnicodeMap
            );
            if (unicode !== -1) {
              toFontChar[+charCode] = unicode;
            }
          }
          return toFontChar;
        }
        function isMacNameRecord(r) {
          return r.platform === 1 && r.encoding === 0 && r.language === 0;
        }
        function isWinNameRecord(r) {
          return r.platform === 3 && r.encoding === 1 && r.language === 0x409;
        }
        function convertCidString(charCode, cid, shouldThrow = false) {
          switch (cid.length) {
            case 1:
              return cid.charCodeAt(0);
            case 2:
              return (cid.charCodeAt(0) << 8) | cid.charCodeAt(1);
          }
          const msg = `Unsupported CID string (charCode ${charCode}): "${cid}".`;
          if (shouldThrow) {
            throw new _util.FormatError(msg);
          }
          (0, _util.warn)(msg);
          return cid;
        }
        function adjustMapping(
          charCodeToGlyphId,
          hasGlyph,
          newGlyphZeroId,
          toUnicode
        ) {
          const newMap = Object.create(null);
          const toUnicodeExtraMap = new Map();
          const toFontChar = [];
          const usedGlyphIds = new Set();
          let privateUseAreaIndex = 0;
          const privateUseOffetStart =
            PRIVATE_USE_AREAS[privateUseAreaIndex][0];
          let nextAvailableFontCharCode = privateUseOffetStart;
          let privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];
          const isInPrivateArea = (code) =>
            (PRIVATE_USE_AREAS[0][0] <= code &&
              code <= PRIVATE_USE_AREAS[0][1]) ||
            (PRIVATE_USE_AREAS[1][0] <= code &&
              code <= PRIVATE_USE_AREAS[1][1]);
          for (let originalCharCode in charCodeToGlyphId) {
            originalCharCode |= 0;
            let glyphId = charCodeToGlyphId[originalCharCode];
            if (!hasGlyph(glyphId)) {
              continue;
            }
            if (nextAvailableFontCharCode > privateUseOffetEnd) {
              privateUseAreaIndex++;
              if (privateUseAreaIndex >= PRIVATE_USE_AREAS.length) {
                (0, _util.warn)("Ran out of space in font private use area.");
                break;
              }
              nextAvailableFontCharCode =
                PRIVATE_USE_AREAS[privateUseAreaIndex][0];
              privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];
            }
            const fontCharCode = nextAvailableFontCharCode++;
            if (glyphId === 0) {
              glyphId = newGlyphZeroId;
            }
            let unicode = toUnicode.get(originalCharCode);
            if (typeof unicode === "string") {
              unicode = unicode.codePointAt(0);
            }
            if (
              unicode &&
              !isInPrivateArea(unicode) &&
              !usedGlyphIds.has(glyphId)
            ) {
              toUnicodeExtraMap.set(unicode, glyphId);
              usedGlyphIds.add(glyphId);
            }
            newMap[fontCharCode] = glyphId;
            toFontChar[originalCharCode] = fontCharCode;
          }
          return {
            toFontChar,
            charCodeToGlyphId: newMap,
            toUnicodeExtraMap,
            nextAvailableFontCharCode,
          };
        }
        function getRanges(glyphs, toUnicodeExtraMap, numGlyphs) {
          const codes = [];
          for (const charCode in glyphs) {
            if (glyphs[charCode] >= numGlyphs) {
              continue;
            }
            codes.push({
              fontCharCode: charCode | 0,
              glyphId: glyphs[charCode],
            });
          }
          if (toUnicodeExtraMap) {
            for (const [unicode, glyphId] of toUnicodeExtraMap) {
              if (glyphId >= numGlyphs) {
                continue;
              }
              codes.push({
                fontCharCode: unicode,
                glyphId,
              });
            }
          }
          if (codes.length === 0) {
            codes.push({
              fontCharCode: 0,
              glyphId: 0,
            });
          }
          codes.sort(function fontGetRangesSort(a, b) {
            return a.fontCharCode - b.fontCharCode;
          });
          const ranges = [];
          const length = codes.length;
          for (let n = 0; n < length; ) {
            const start = codes[n].fontCharCode;
            const codeIndices = [codes[n].glyphId];
            ++n;
            let end = start;
            while (n < length && end + 1 === codes[n].fontCharCode) {
              codeIndices.push(codes[n].glyphId);
              ++end;
              ++n;
              if (end === 0xffff) {
                break;
              }
            }
            ranges.push([start, end, codeIndices]);
          }
          return ranges;
        }
        function createCmapTable(glyphs, toUnicodeExtraMap, numGlyphs) {
          const ranges = getRanges(glyphs, toUnicodeExtraMap, numGlyphs);
          const numTables = ranges.at(-1)[1] > 0xffff ? 2 : 1;
          let cmap =
            "\x00\x00" +
            string16(numTables) +
            "\x00\x03" +
            "\x00\x01" +
            (0, _util.string32)(4 + numTables * 8);
          let i, ii, j, jj;
          for (i = ranges.length - 1; i >= 0; --i) {
            if (ranges[i][0] <= 0xffff) {
              break;
            }
          }
          const bmpLength = i + 1;
          if (ranges[i][0] < 0xffff && ranges[i][1] === 0xffff) {
            ranges[i][1] = 0xfffe;
          }
          const trailingRangesCount = ranges[i][1] < 0xffff ? 1 : 0;
          const segCount = bmpLength + trailingRangesCount;
          const searchParams =
            _opentype_file_builder.OpenTypeFileBuilder.getSearchParams(
              segCount,
              2
            );
          let startCount = "";
          let endCount = "";
          let idDeltas = "";
          let idRangeOffsets = "";
          let glyphsIds = "";
          let bias = 0;
          let range, start, end, codes;
          for (i = 0, ii = bmpLength; i < ii; i++) {
            range = ranges[i];
            start = range[0];
            end = range[1];
            startCount += string16(start);
            endCount += string16(end);
            codes = range[2];
            let contiguous = true;
            for (j = 1, jj = codes.length; j < jj; ++j) {
              if (codes[j] !== codes[j - 1] + 1) {
                contiguous = false;
                break;
              }
            }
            if (!contiguous) {
              const offset = (segCount - i) * 2 + bias * 2;
              bias += end - start + 1;
              idDeltas += string16(0);
              idRangeOffsets += string16(offset);
              for (j = 0, jj = codes.length; j < jj; ++j) {
                glyphsIds += string16(codes[j]);
              }
            } else {
              const startCode = codes[0];
              idDeltas += string16((startCode - start) & 0xffff);
              idRangeOffsets += string16(0);
            }
          }
          if (trailingRangesCount > 0) {
            endCount += "\xFF\xFF";
            startCount += "\xFF\xFF";
            idDeltas += "\x00\x01";
            idRangeOffsets += "\x00\x00";
          }
          const format314 =
            "\x00\x00" +
            string16(2 * segCount) +
            string16(searchParams.range) +
            string16(searchParams.entry) +
            string16(searchParams.rangeShift) +
            endCount +
            "\x00\x00" +
            startCount +
            idDeltas +
            idRangeOffsets +
            glyphsIds;
          let format31012 = "";
          let header31012 = "";
          if (numTables > 1) {
            cmap +=
              "\x00\x03" +
              "\x00\x0A" +
              (0, _util.string32)(4 + numTables * 8 + 4 + format314.length);
            format31012 = "";
            for (i = 0, ii = ranges.length; i < ii; i++) {
              range = ranges[i];
              start = range[0];
              codes = range[2];
              let code = codes[0];
              for (j = 1, jj = codes.length; j < jj; ++j) {
                if (codes[j] !== codes[j - 1] + 1) {
                  end = range[0] + j - 1;
                  format31012 +=
                    (0, _util.string32)(start) +
                    (0, _util.string32)(end) +
                    (0, _util.string32)(code);
                  start = end + 1;
                  code = codes[j];
                }
              }
              format31012 +=
                (0, _util.string32)(start) +
                (0, _util.string32)(range[1]) +
                (0, _util.string32)(code);
            }
            header31012 =
              "\x00\x0C" +
              "\x00\x00" +
              (0, _util.string32)(format31012.length + 16) +
              "\x00\x00\x00\x00" +
              (0, _util.string32)(format31012.length / 12);
          }
          return (
            cmap +
            "\x00\x04" +
            string16(format314.length + 4) +
            format314 +
            header31012 +
            format31012
          );
        }
        function validateOS2Table(os2, file) {
          file.pos = (file.start || 0) + os2.offset;
          const version = file.getUint16();
          file.skip(60);
          const selection = file.getUint16();
          if (version < 4 && selection & 0x0300) {
            return false;
          }
          const firstChar = file.getUint16();
          const lastChar = file.getUint16();
          if (firstChar > lastChar) {
            return false;
          }
          file.skip(6);
          const usWinAscent = file.getUint16();
          if (usWinAscent === 0) {
            return false;
          }
          os2.data[8] = os2.data[9] = 0;
          return true;
        }
        function createOS2Table(properties, charstrings, override) {
          override ||= {
            unitsPerEm: 0,
            yMax: 0,
            yMin: 0,
            ascent: 0,
            descent: 0,
          };
          let ulUnicodeRange1 = 0;
          let ulUnicodeRange2 = 0;
          let ulUnicodeRange3 = 0;
          let ulUnicodeRange4 = 0;
          let firstCharIndex = null;
          let lastCharIndex = 0;
          let position = -1;
          if (charstrings) {
            for (let code in charstrings) {
              code |= 0;
              if (firstCharIndex > code || !firstCharIndex) {
                firstCharIndex = code;
              }
              if (lastCharIndex < code) {
                lastCharIndex = code;
              }
              position = (0, _unicode.getUnicodeRangeFor)(code, position);
              if (position < 32) {
                ulUnicodeRange1 |= 1 << position;
              } else if (position < 64) {
                ulUnicodeRange2 |= 1 << (position - 32);
              } else if (position < 96) {
                ulUnicodeRange3 |= 1 << (position - 64);
              } else if (position < 123) {
                ulUnicodeRange4 |= 1 << (position - 96);
              } else {
                throw new _util.FormatError(
                  "Unicode ranges Bits > 123 are reserved for internal usage"
                );
              }
            }
            if (lastCharIndex > 0xffff) {
              lastCharIndex = 0xffff;
            }
          } else {
            firstCharIndex = 0;
            lastCharIndex = 255;
          }
          const bbox = properties.bbox || [0, 0, 0, 0];
          const unitsPerEm =
            override.unitsPerEm ||
            1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];
          const scale = properties.ascentScaled
            ? 1.0
            : unitsPerEm / PDF_GLYPH_SPACE_UNITS;
          const typoAscent =
            override.ascent ||
            Math.round(scale * (properties.ascent || bbox[3]));
          let typoDescent =
            override.descent ||
            Math.round(scale * (properties.descent || bbox[1]));
          if (typoDescent > 0 && properties.descent > 0 && bbox[1] < 0) {
            typoDescent = -typoDescent;
          }
          const winAscent = override.yMax || typoAscent;
          const winDescent = -override.yMin || -typoDescent;
          return (
            "\x00\x03" +
            "\x02\x24" +
            "\x01\xF4" +
            "\x00\x05" +
            "\x00\x00" +
            "\x02\x8A" +
            "\x02\xBB" +
            "\x00\x00" +
            "\x00\x8C" +
            "\x02\x8A" +
            "\x02\xBB" +
            "\x00\x00" +
            "\x01\xDF" +
            "\x00\x31" +
            "\x01\x02" +
            "\x00\x00" +
            "\x00\x00\x06" +
            String.fromCharCode(properties.fixedPitch ? 0x09 : 0x00) +
            "\x00\x00\x00\x00\x00\x00" +
            (0, _util.string32)(ulUnicodeRange1) +
            (0, _util.string32)(ulUnicodeRange2) +
            (0, _util.string32)(ulUnicodeRange3) +
            (0, _util.string32)(ulUnicodeRange4) +
            "\x2A\x32\x31\x2A" +
            string16(properties.italicAngle ? 1 : 0) +
            string16(firstCharIndex || properties.firstChar) +
            string16(lastCharIndex || properties.lastChar) +
            string16(typoAscent) +
            string16(typoDescent) +
            "\x00\x64" +
            string16(winAscent) +
            string16(winDescent) +
            "\x00\x00\x00\x00" +
            "\x00\x00\x00\x00" +
            string16(properties.xHeight) +
            string16(properties.capHeight) +
            string16(0) +
            string16(firstCharIndex || properties.firstChar) +
            "\x00\x03"
          );
        }
        function createPostTable(properties) {
          const angle = Math.floor(properties.italicAngle * 2 ** 16);
          return (
            "\x00\x03\x00\x00" +
            (0, _util.string32)(angle) +
            "\x00\x00" +
            "\x00\x00" +
            (0, _util.string32)(properties.fixedPitch ? 1 : 0) +
            "\x00\x00\x00\x00" +
            "\x00\x00\x00\x00" +
            "\x00\x00\x00\x00" +
            "\x00\x00\x00\x00"
          );
        }
        function createPostscriptName(name) {
          return name
            .replaceAll(/[^\x21-\x7E]|[[\](){}<>/%]/g, "")
            .slice(0, 63);
        }
        function createNameTable(name, proto) {
          if (!proto) {
            proto = [[], []];
          }
          const strings = [
            proto[0][0] || "Original licence",
            proto[0][1] || name,
            proto[0][2] || "Unknown",
            proto[0][3] || "uniqueID",
            proto[0][4] || name,
            proto[0][5] || "Version 0.11",
            proto[0][6] || createPostscriptName(name),
            proto[0][7] || "Unknown",
            proto[0][8] || "Unknown",
            proto[0][9] || "Unknown",
          ];
          const stringsUnicode = [];
          let i, ii, j, jj, str;
          for (i = 0, ii = strings.length; i < ii; i++) {
            str = proto[1][i] || strings[i];
            const strBufUnicode = [];
            for (j = 0, jj = str.length; j < jj; j++) {
              strBufUnicode.push(string16(str.charCodeAt(j)));
            }
            stringsUnicode.push(strBufUnicode.join(""));
          }
          const names = [strings, stringsUnicode];
          const platforms = ["\x00\x01", "\x00\x03"];
          const encodings = ["\x00\x00", "\x00\x01"];
          const languages = ["\x00\x00", "\x04\x09"];
          const namesRecordCount = strings.length * platforms.length;
          let nameTable =
            "\x00\x00" +
            string16(namesRecordCount) +
            string16(namesRecordCount * 12 + 6);
          let strOffset = 0;
          for (i = 0, ii = platforms.length; i < ii; i++) {
            const strs = names[i];
            for (j = 0, jj = strs.length; j < jj; j++) {
              str = strs[j];
              const nameRecord =
                platforms[i] +
                encodings[i] +
                languages[i] +
                string16(j) +
                string16(str.length) +
                string16(strOffset);
              nameTable += nameRecord;
              strOffset += str.length;
            }
          }
          nameTable += strings.join("") + stringsUnicode.join("");
          return nameTable;
        }
        class Font {
          constructor(name, file, properties) {
            this.name = name;
            this.psName = null;
            this.mimetype = null;
            this.disableFontFace = false;
            this.loadedName = properties.loadedName;
            this.isType3Font = properties.isType3Font;
            this.missingFile = false;
            this.cssFontInfo = properties.cssFontInfo;
            this._charsCache = Object.create(null);
            this._glyphCache = Object.create(null);
            let isSerifFont = !!(
              properties.flags & _fonts_utils.FontFlags.Serif
            );
            if (!isSerifFont && !properties.isSimulatedFlags) {
              const baseName = name.replaceAll(/[,_]/g, "-").split("-")[0],
                serifFonts = (0, _standard_fonts.getSerifFonts)();
              for (const namePart of baseName.split("+")) {
                if (serifFonts[namePart]) {
                  isSerifFont = true;
                  break;
                }
              }
            }
            this.isSerifFont = isSerifFont;
            this.isSymbolicFont = !!(
              properties.flags & _fonts_utils.FontFlags.Symbolic
            );
            this.isMonospace = !!(
              properties.flags & _fonts_utils.FontFlags.FixedPitch
            );
            let { type, subtype } = properties;
            this.type = type;
            this.subtype = subtype;
            this.systemFontInfo = properties.systemFontInfo;
            const matches = name.match(/^InvalidPDFjsFont_(.*)_\d+$/);
            this.isInvalidPDFjsFont = !!matches;
            if (this.isInvalidPDFjsFont) {
              this.fallbackName = matches[1];
            } else if (this.isMonospace) {
              this.fallbackName = "monospace";
            } else if (this.isSerifFont) {
              this.fallbackName = "serif";
            } else {
              this.fallbackName = "sans-serif";
            }
            if (this.systemFontInfo?.guessFallback) {
              this.systemFontInfo.guessFallback = false;
              this.systemFontInfo.css += `,${this.fallbackName}`;
            }
            this.differences = properties.differences;
            this.widths = properties.widths;
            this.defaultWidth = properties.defaultWidth;
            this.composite = properties.composite;
            this.cMap = properties.cMap;
            this.capHeight = properties.capHeight / PDF_GLYPH_SPACE_UNITS;
            this.ascent = properties.ascent / PDF_GLYPH_SPACE_UNITS;
            this.descent = properties.descent / PDF_GLYPH_SPACE_UNITS;
            this.lineHeight = this.ascent - this.descent;
            this.fontMatrix = properties.fontMatrix;
            this.bbox = properties.bbox;
            this.defaultEncoding = properties.defaultEncoding;
            this.toUnicode = properties.toUnicode;
            this.toFontChar = [];
            if (properties.type === "Type3") {
              for (let charCode = 0; charCode < 256; charCode++) {
                this.toFontChar[charCode] =
                  this.differences[charCode] ||
                  properties.defaultEncoding[charCode];
              }
              return;
            }
            this.cidEncoding = properties.cidEncoding || "";
            this.vertical = !!properties.vertical;
            if (this.vertical) {
              this.vmetrics = properties.vmetrics;
              this.defaultVMetrics = properties.defaultVMetrics;
            }
            if (!file || file.isEmpty) {
              if (file) {
                (0, _util.warn)(
                  'Font file is empty in "' +
                    name +
                    '" (' +
                    this.loadedName +
                    ")"
                );
              }
              this.fallbackToSystemFont(properties);
              return;
            }
            [type, subtype] = getFontFileType(file, properties);
            if (type !== this.type || subtype !== this.subtype) {
              (0, _util.info)(
                "Inconsistent font file Type/SubType, expected: " +
                  `${this.type}/${this.subtype} but found: ${type}/${subtype}.`
              );
            }
            let data;
            try {
              switch (type) {
                case "MMType1":
                  (0, _util.info)(
                    "MMType1 font (" + name + "), falling back to Type1."
                  );
                case "Type1":
                case "CIDFontType0":
                  this.mimetype = "font/opentype";
                  const cff =
                    subtype === "Type1C" || subtype === "CIDFontType0C"
                      ? new _cff_font.CFFFont(file, properties)
                      : new _type1_font.Type1Font(name, file, properties);
                  adjustWidths(properties);
                  data = this.convert(name, cff, properties);
                  break;
                case "OpenType":
                case "TrueType":
                case "CIDFontType2":
                  this.mimetype = "font/opentype";
                  data = this.checkAndRepair(name, file, properties);
                  if (this.isOpenType) {
                    adjustWidths(properties);
                    type = "OpenType";
                  }
                  break;
                default:
                  throw new _util.FormatError(`Font ${type} is not supported`);
              }
            } catch (e) {
              (0, _util.warn)(e);
              this.fallbackToSystemFont(properties);
              return;
            }
            amendFallbackToUnicode(properties);
            this.data = data;
            this.type = type;
            this.subtype = subtype;
            this.fontMatrix = properties.fontMatrix;
            this.widths = properties.widths;
            this.defaultWidth = properties.defaultWidth;
            this.toUnicode = properties.toUnicode;
            this.seacMap = properties.seacMap;
          }
          get renderer() {
            const renderer = _font_renderer.FontRendererFactory.create(
              this,
              _fonts_utils.SEAC_ANALYSIS_ENABLED
            );
            return (0, _util.shadow)(this, "renderer", renderer);
          }
          exportData(extraProperties = false) {
            const exportDataProperties = extraProperties
              ? [...EXPORT_DATA_PROPERTIES, ...EXPORT_DATA_EXTRA_PROPERTIES]
              : EXPORT_DATA_PROPERTIES;
            const data = Object.create(null);
            let property, value;
            for (property of exportDataProperties) {
              value = this[property];
              if (value !== undefined) {
                data[property] = value;
              }
            }
            return data;
          }
          fallbackToSystemFont(properties) {
            this.missingFile = true;
            const { name, type } = this;
            let fontName = (0, _fonts_utils.normalizeFontName)(name);
            const stdFontMap = (0, _standard_fonts.getStdFontMap)(),
              nonStdFontMap = (0, _standard_fonts.getNonStdFontMap)();
            const isStandardFont = !!stdFontMap[fontName];
            const isMappedToStandardFont = !!(
              nonStdFontMap[fontName] && stdFontMap[nonStdFontMap[fontName]]
            );
            fontName =
              stdFontMap[fontName] || nonStdFontMap[fontName] || fontName;
            const fontBasicMetricsMap = (0, _metrics.getFontBasicMetrics)();
            const metrics = fontBasicMetricsMap[fontName];
            if (metrics) {
              if (isNaN(this.ascent)) {
                this.ascent = metrics.ascent / PDF_GLYPH_SPACE_UNITS;
              }
              if (isNaN(this.descent)) {
                this.descent = metrics.descent / PDF_GLYPH_SPACE_UNITS;
              }
              if (isNaN(this.capHeight)) {
                this.capHeight = metrics.capHeight / PDF_GLYPH_SPACE_UNITS;
              }
            }
            this.bold = /bold/gi.test(fontName);
            this.italic = /oblique|italic/gi.test(fontName);
            this.black = /Black/g.test(name);
            const isNarrow = /Narrow/g.test(name);
            this.remeasure =
              (!isStandardFont || isNarrow) &&
              Object.keys(this.widths).length > 0;
            if (
              (isStandardFont || isMappedToStandardFont) &&
              type === "CIDFontType2" &&
              this.cidEncoding.startsWith("Identity-")
            ) {
              const cidToGidMap = properties.cidToGidMap;
              const map = [];
              applyStandardFontGlyphMap(
                map,
                (0, _standard_fonts.getGlyphMapForStandardFonts)()
              );
              if (/Arial-?Black/i.test(name)) {
                applyStandardFontGlyphMap(
                  map,
                  (0, _standard_fonts.getSupplementalGlyphMapForArialBlack)()
                );
              } else if (/Calibri/i.test(name)) {
                applyStandardFontGlyphMap(
                  map,
                  (0, _standard_fonts.getSupplementalGlyphMapForCalibri)()
                );
              }
              if (cidToGidMap) {
                for (const charCode in map) {
                  const cid = map[charCode];
                  if (cidToGidMap[cid] !== undefined) {
                    map[+charCode] = cidToGidMap[cid];
                  }
                }
                if (
                  cidToGidMap.length !== this.toUnicode.length &&
                  properties.hasIncludedToUnicodeMap &&
                  this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap
                ) {
                  this.toUnicode.forEach(function (charCode, unicodeCharCode) {
                    const cid = map[charCode];
                    if (cidToGidMap[cid] === undefined) {
                      map[+charCode] = unicodeCharCode;
                    }
                  });
                }
              }
              if (
                !(
                  this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap
                )
              ) {
                this.toUnicode.forEach(function (charCode, unicodeCharCode) {
                  map[+charCode] = unicodeCharCode;
                });
              }
              this.toFontChar = map;
              this.toUnicode = new _to_unicode_map.ToUnicodeMap(map);
            } else if (/Symbol/i.test(fontName)) {
              this.toFontChar = buildToFontChar(
                _encodings.SymbolSetEncoding,
                (0, _glyphlist.getGlyphsUnicode)(),
                this.differences
              );
            } else if (/Dingbats/i.test(fontName)) {
              this.toFontChar = buildToFontChar(
                _encodings.ZapfDingbatsEncoding,
                (0, _glyphlist.getDingbatsGlyphsUnicode)(),
                this.differences
              );
            } else if (isStandardFont) {
              const map = buildToFontChar(
                this.defaultEncoding,
                (0, _glyphlist.getGlyphsUnicode)(),
                this.differences
              );
              if (
                type === "CIDFontType2" &&
                !this.cidEncoding.startsWith("Identity-") &&
                !(
                  this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap
                )
              ) {
                this.toUnicode.forEach(function (charCode, unicodeCharCode) {
                  map[+charCode] = unicodeCharCode;
                });
              }
              this.toFontChar = map;
            } else {
              const glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();
              const map = [];
              this.toUnicode.forEach((charCode, unicodeCharCode) => {
                if (!this.composite) {
                  const glyphName =
                    this.differences[charCode] ||
                    this.defaultEncoding[charCode];
                  const unicode = (0, _unicode.getUnicodeForGlyph)(
                    glyphName,
                    glyphsUnicodeMap
                  );
                  if (unicode !== -1) {
                    unicodeCharCode = unicode;
                  }
                }
                map[+charCode] = unicodeCharCode;
              });
              if (
                this.composite &&
                this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap
              ) {
                if (/Tahoma|Verdana/i.test(name)) {
                  applyStandardFontGlyphMap(
                    map,
                    (0, _standard_fonts.getGlyphMapForStandardFonts)()
                  );
                }
              }
              this.toFontChar = map;
            }
            amendFallbackToUnicode(properties);
            this.loadedName = fontName.split("-")[0];
          }
          checkAndRepair(name, font, properties) {
            const VALID_TABLES = [
              "OS/2",
              "cmap",
              "head",
              "hhea",
              "hmtx",
              "maxp",
              "name",
              "post",
              "loca",
              "glyf",
              "fpgm",
              "prep",
              "cvt ",
              "CFF ",
            ];
            function readTables(file, numTables) {
              const tables = Object.create(null);
              tables["OS/2"] = null;
              tables.cmap = null;
              tables.head = null;
              tables.hhea = null;
              tables.hmtx = null;
              tables.maxp = null;
              tables.name = null;
              tables.post = null;
              for (let i = 0; i < numTables; i++) {
                const table = readTableEntry(file);
                if (!VALID_TABLES.includes(table.tag)) {
                  continue;
                }
                if (table.length === 0) {
                  continue;
                }
                tables[table.tag] = table;
              }
              return tables;
            }
            function readTableEntry(file) {
              const tag = file.getString(4);
              const checksum = file.getInt32() >>> 0;
              const offset = file.getInt32() >>> 0;
              const length = file.getInt32() >>> 0;
              const previousPosition = file.pos;
              file.pos = file.start || 0;
              file.skip(offset);
              const data = file.getBytes(length);
              file.pos = previousPosition;
              if (tag === "head") {
                data[8] = data[9] = data[10] = data[11] = 0;
                data[17] |= 0x20;
              }
              return {
                tag,
                checksum,
                length,
                offset,
                data,
              };
            }
            function readOpenTypeHeader(ttf) {
              return {
                version: ttf.getString(4),
                numTables: ttf.getUint16(),
                searchRange: ttf.getUint16(),
                entrySelector: ttf.getUint16(),
                rangeShift: ttf.getUint16(),
              };
            }
            function readTrueTypeCollectionHeader(ttc) {
              const ttcTag = ttc.getString(4);
              (0, _util.assert)(
                ttcTag === "ttcf",
                "Must be a TrueType Collection font."
              );
              const majorVersion = ttc.getUint16();
              const minorVersion = ttc.getUint16();
              const numFonts = ttc.getInt32() >>> 0;
              const offsetTable = [];
              for (let i = 0; i < numFonts; i++) {
                offsetTable.push(ttc.getInt32() >>> 0);
              }
              const header = {
                ttcTag,
                majorVersion,
                minorVersion,
                numFonts,
                offsetTable,
              };
              switch (majorVersion) {
                case 1:
                  return header;
                case 2:
                  header.dsigTag = ttc.getInt32() >>> 0;
                  header.dsigLength = ttc.getInt32() >>> 0;
                  header.dsigOffset = ttc.getInt32() >>> 0;
                  return header;
              }
              throw new _util.FormatError(
                `Invalid TrueType Collection majorVersion: ${majorVersion}.`
              );
            }
            function readTrueTypeCollectionData(ttc, fontName) {
              const { numFonts, offsetTable } =
                readTrueTypeCollectionHeader(ttc);
              const fontNameParts = fontName.split("+");
              let fallbackData;
              for (let i = 0; i < numFonts; i++) {
                ttc.pos = (ttc.start || 0) + offsetTable[i];
                const potentialHeader = readOpenTypeHeader(ttc);
                const potentialTables = readTables(
                  ttc,
                  potentialHeader.numTables
                );
                if (!potentialTables.name) {
                  throw new _util.FormatError(
                    'TrueType Collection font must contain a "name" table.'
                  );
                }
                const [nameTable] = readNameTable(potentialTables.name);
                for (let j = 0, jj = nameTable.length; j < jj; j++) {
                  for (let k = 0, kk = nameTable[j].length; k < kk; k++) {
                    const nameEntry = nameTable[j][k]?.replaceAll(/\s/g, "");
                    if (!nameEntry) {
                      continue;
                    }
                    if (nameEntry === fontName) {
                      return {
                        header: potentialHeader,
                        tables: potentialTables,
                      };
                    }
                    if (fontNameParts.length < 2) {
                      continue;
                    }
                    for (const part of fontNameParts) {
                      if (nameEntry === part) {
                        fallbackData = {
                          name: part,
                          header: potentialHeader,
                          tables: potentialTables,
                        };
                      }
                    }
                  }
                }
              }
              if (fallbackData) {
                (0, _util.warn)(
                  `TrueType Collection does not contain "${fontName}" font, ` +
                    `falling back to "${fallbackData.name}" font instead.`
                );
                return {
                  header: fallbackData.header,
                  tables: fallbackData.tables,
                };
              }
              throw new _util.FormatError(
                `TrueType Collection does not contain "${fontName}" font.`
              );
            }
            function readCmapTable(cmap, file, isSymbolicFont, hasEncoding) {
              if (!cmap) {
                (0, _util.warn)("No cmap table available.");
                return {
                  platformId: -1,
                  encodingId: -1,
                  mappings: [],
                  hasShortCmap: false,
                };
              }
              let segment;
              let start = (file.start || 0) + cmap.offset;
              file.pos = start;
              file.skip(2);
              const numTables = file.getUint16();
              let potentialTable;
              let canBreak = false;
              for (let i = 0; i < numTables; i++) {
                const platformId = file.getUint16();
                const encodingId = file.getUint16();
                const offset = file.getInt32() >>> 0;
                let useTable = false;
                if (
                  potentialTable?.platformId === platformId &&
                  potentialTable?.encodingId === encodingId
                ) {
                  continue;
                }
                if (
                  platformId === 0 &&
                  (encodingId === 0 || encodingId === 1 || encodingId === 3)
                ) {
                  useTable = true;
                } else if (platformId === 1 && encodingId === 0) {
                  useTable = true;
                } else if (
                  platformId === 3 &&
                  encodingId === 1 &&
                  (hasEncoding || !potentialTable)
                ) {
                  useTable = true;
                  if (!isSymbolicFont) {
                    canBreak = true;
                  }
                } else if (
                  isSymbolicFont &&
                  platformId === 3 &&
                  encodingId === 0
                ) {
                  useTable = true;
                  let correctlySorted = true;
                  if (i < numTables - 1) {
                    const nextBytes = file.peekBytes(2),
                      nextPlatformId = int16(nextBytes[0], nextBytes[1]);
                    if (nextPlatformId < platformId) {
                      correctlySorted = false;
                    }
                  }
                  if (correctlySorted) {
                    canBreak = true;
                  }
                }
                if (useTable) {
                  potentialTable = {
                    platformId,
                    encodingId,
                    offset,
                  };
                }
                if (canBreak) {
                  break;
                }
              }
              if (potentialTable) {
                file.pos = start + potentialTable.offset;
              }
              if (!potentialTable || file.peekByte() === -1) {
                (0, _util.warn)("Could not find a preferred cmap table.");
                return {
                  platformId: -1,
                  encodingId: -1,
                  mappings: [],
                  hasShortCmap: false,
                };
              }
              const format = file.getUint16();
              let hasShortCmap = false;
              const mappings = [];
              let j, glyphId;
              if (format === 0) {
                file.skip(2 + 2);
                for (j = 0; j < 256; j++) {
                  const index = file.getByte();
                  if (!index) {
                    continue;
                  }
                  mappings.push({
                    charCode: j,
                    glyphId: index,
                  });
                }
                hasShortCmap = true;
              } else if (format === 2) {
                file.skip(2 + 2);
                const subHeaderKeys = [];
                let maxSubHeaderKey = 0;
                for (let i = 0; i < 256; i++) {
                  const subHeaderKey = file.getUint16() >> 3;
                  subHeaderKeys.push(subHeaderKey);
                  maxSubHeaderKey = Math.max(subHeaderKey, maxSubHeaderKey);
                }
                const subHeaders = [];
                for (let i = 0; i <= maxSubHeaderKey; i++) {
                  subHeaders.push({
                    firstCode: file.getUint16(),
                    entryCount: file.getUint16(),
                    idDelta: signedInt16(file.getByte(), file.getByte()),
                    idRangePos: file.pos + file.getUint16(),
                  });
                }
                for (let i = 0; i < 256; i++) {
                  if (subHeaderKeys[i] === 0) {
                    file.pos = subHeaders[0].idRangePos + 2 * i;
                    glyphId = file.getUint16();
                    mappings.push({
                      charCode: i,
                      glyphId,
                    });
                  } else {
                    const s = subHeaders[subHeaderKeys[i]];
                    for (j = 0; j < s.entryCount; j++) {
                      const charCode = (i << 8) + j + s.firstCode;
                      file.pos = s.idRangePos + 2 * j;
                      glyphId = file.getUint16();
                      if (glyphId !== 0) {
                        glyphId = (glyphId + s.idDelta) % 65536;
                      }
                      mappings.push({
                        charCode,
                        glyphId,
                      });
                    }
                  }
                }
              } else if (format === 4) {
                file.skip(2 + 2);
                const segCount = file.getUint16() >> 1;
                file.skip(6);
                const segments = [];
                let segIndex;
                for (segIndex = 0; segIndex < segCount; segIndex++) {
                  segments.push({
                    end: file.getUint16(),
                  });
                }
                file.skip(2);
                for (segIndex = 0; segIndex < segCount; segIndex++) {
                  segments[segIndex].start = file.getUint16();
                }
                for (segIndex = 0; segIndex < segCount; segIndex++) {
                  segments[segIndex].delta = file.getUint16();
                }
                let offsetsCount = 0,
                  offsetIndex;
                for (segIndex = 0; segIndex < segCount; segIndex++) {
                  segment = segments[segIndex];
                  const rangeOffset = file.getUint16();
                  if (!rangeOffset) {
                    segment.offsetIndex = -1;
                    continue;
                  }
                  offsetIndex = (rangeOffset >> 1) - (segCount - segIndex);
                  segment.offsetIndex = offsetIndex;
                  offsetsCount = Math.max(
                    offsetsCount,
                    offsetIndex + segment.end - segment.start + 1
                  );
                }
                const offsets = [];
                for (j = 0; j < offsetsCount; j++) {
                  offsets.push(file.getUint16());
                }
                for (segIndex = 0; segIndex < segCount; segIndex++) {
                  segment = segments[segIndex];
                  start = segment.start;
                  const end = segment.end;
                  const delta = segment.delta;
                  offsetIndex = segment.offsetIndex;
                  for (j = start; j <= end; j++) {
                    if (j === 0xffff) {
                      continue;
                    }
                    glyphId =
                      offsetIndex < 0 ? j : offsets[offsetIndex + j - start];
                    glyphId = (glyphId + delta) & 0xffff;
                    mappings.push({
                      charCode: j,
                      glyphId,
                    });
                  }
                }
              } else if (format === 6) {
                file.skip(2 + 2);
                const firstCode = file.getUint16();
                const entryCount = file.getUint16();
                for (j = 0; j < entryCount; j++) {
                  glyphId = file.getUint16();
                  const charCode = firstCode + j;
                  mappings.push({
                    charCode,
                    glyphId,
                  });
                }
              } else if (format === 12) {
                file.skip(2 + 4 + 4);
                const nGroups = file.getInt32() >>> 0;
                for (j = 0; j < nGroups; j++) {
                  const startCharCode = file.getInt32() >>> 0;
                  const endCharCode = file.getInt32() >>> 0;
                  let glyphCode = file.getInt32() >>> 0;
                  for (
                    let charCode = startCharCode;
                    charCode <= endCharCode;
                    charCode++
                  ) {
                    mappings.push({
                      charCode,
                      glyphId: glyphCode++,
                    });
                  }
                }
              } else {
                (0, _util.warn)("cmap table has unsupported format: " + format);
                return {
                  platformId: -1,
                  encodingId: -1,
                  mappings: [],
                  hasShortCmap: false,
                };
              }
              mappings.sort(function (a, b) {
                return a.charCode - b.charCode;
              });
              for (let i = 1; i < mappings.length; i++) {
                if (mappings[i - 1].charCode === mappings[i].charCode) {
                  mappings.splice(i, 1);
                  i--;
                }
              }
              return {
                platformId: potentialTable.platformId,
                encodingId: potentialTable.encodingId,
                mappings,
                hasShortCmap,
              };
            }
            function sanitizeMetrics(
              file,
              header,
              metrics,
              headTable,
              numGlyphs,
              dupFirstEntry
            ) {
              if (!header) {
                if (metrics) {
                  metrics.data = null;
                }
                return;
              }
              file.pos = (file.start || 0) + header.offset;
              file.pos += 4;
              file.pos += 2;
              file.pos += 2;
              file.pos += 2;
              file.pos += 2;
              file.pos += 2;
              file.pos += 2;
              file.pos += 2;
              file.pos += 2;
              file.pos += 2;
              const caretOffset = file.getUint16();
              file.pos += 8;
              file.pos += 2;
              let numOfMetrics = file.getUint16();
              if (caretOffset !== 0) {
                const macStyle = int16(headTable.data[44], headTable.data[45]);
                if (!(macStyle & 2)) {
                  header.data[22] = 0;
                  header.data[23] = 0;
                }
              }
              if (numOfMetrics > numGlyphs) {
                (0, _util.info)(
                  `The numOfMetrics (${numOfMetrics}) should not be ` +
                    `greater than the numGlyphs (${numGlyphs}).`
                );
                numOfMetrics = numGlyphs;
                header.data[34] = (numOfMetrics & 0xff00) >> 8;
                header.data[35] = numOfMetrics & 0x00ff;
              }
              const numOfSidebearings = numGlyphs - numOfMetrics;
              const numMissing =
                numOfSidebearings - ((metrics.length - numOfMetrics * 4) >> 1);
              if (numMissing > 0) {
                const entries = new Uint8Array(metrics.length + numMissing * 2);
                entries.set(metrics.data);
                if (dupFirstEntry) {
                  entries[metrics.length] = metrics.data[2];
                  entries[metrics.length + 1] = metrics.data[3];
                }
                metrics.data = entries;
              }
            }
            function sanitizeGlyph(
              source,
              sourceStart,
              sourceEnd,
              dest,
              destStart,
              hintsValid
            ) {
              const glyphProfile = {
                length: 0,
                sizeOfInstructions: 0,
              };
              if (
                sourceStart < 0 ||
                sourceStart >= source.length ||
                sourceEnd > source.length ||
                sourceEnd - sourceStart <= 12
              ) {
                return glyphProfile;
              }
              const glyf = source.subarray(sourceStart, sourceEnd);
              const xMin = signedInt16(glyf[2], glyf[3]);
              const yMin = signedInt16(glyf[4], glyf[5]);
              const xMax = signedInt16(glyf[6], glyf[7]);
              const yMax = signedInt16(glyf[8], glyf[9]);
              if (xMin > xMax) {
                writeSignedInt16(glyf, 2, xMax);
                writeSignedInt16(glyf, 6, xMin);
              }
              if (yMin > yMax) {
                writeSignedInt16(glyf, 4, yMax);
                writeSignedInt16(glyf, 8, yMin);
              }
              const contoursCount = signedInt16(glyf[0], glyf[1]);
              if (contoursCount < 0) {
                if (contoursCount < -1) {
                  return glyphProfile;
                }
                dest.set(glyf, destStart);
                glyphProfile.length = glyf.length;
                return glyphProfile;
              }
              let i,
                j = 10,
                flagsCount = 0;
              for (i = 0; i < contoursCount; i++) {
                const endPoint = (glyf[j] << 8) | glyf[j + 1];
                flagsCount = endPoint + 1;
                j += 2;
              }
              const instructionsStart = j;
              const instructionsLength = (glyf[j] << 8) | glyf[j + 1];
              glyphProfile.sizeOfInstructions = instructionsLength;
              j += 2 + instructionsLength;
              const instructionsEnd = j;
              let coordinatesLength = 0;
              for (i = 0; i < flagsCount; i++) {
                const flag = glyf[j++];
                if (flag & 0xc0) {
                  glyf[j - 1] = flag & 0x3f;
                }
                let xLength = 2;
                if (flag & 2) {
                  xLength = 1;
                } else if (flag & 16) {
                  xLength = 0;
                }
                let yLength = 2;
                if (flag & 4) {
                  yLength = 1;
                } else if (flag & 32) {
                  yLength = 0;
                }
                const xyLength = xLength + yLength;
                coordinatesLength += xyLength;
                if (flag & 8) {
                  const repeat = glyf[j++];
                  if (repeat === 0) {
                    glyf[j - 1] ^= 8;
                  }
                  i += repeat;
                  coordinatesLength += repeat * xyLength;
                }
              }
              if (coordinatesLength === 0) {
                return glyphProfile;
              }
              let glyphDataLength = j + coordinatesLength;
              if (glyphDataLength > glyf.length) {
                return glyphProfile;
              }
              if (!hintsValid && instructionsLength > 0) {
                dest.set(glyf.subarray(0, instructionsStart), destStart);
                dest.set([0, 0], destStart + instructionsStart);
                dest.set(
                  glyf.subarray(instructionsEnd, glyphDataLength),
                  destStart + instructionsStart + 2
                );
                glyphDataLength -= instructionsLength;
                if (glyf.length - glyphDataLength > 3) {
                  glyphDataLength = (glyphDataLength + 3) & ~3;
                }
                glyphProfile.length = glyphDataLength;
                return glyphProfile;
              }
              if (glyf.length - glyphDataLength > 3) {
                glyphDataLength = (glyphDataLength + 3) & ~3;
                dest.set(glyf.subarray(0, glyphDataLength), destStart);
                glyphProfile.length = glyphDataLength;
                return glyphProfile;
              }
              dest.set(glyf, destStart);
              glyphProfile.length = glyf.length;
              return glyphProfile;
            }
            function sanitizeHead(head, numGlyphs, locaLength) {
              const data = head.data;
              const version = int32(data[0], data[1], data[2], data[3]);
              if (version >> 16 !== 1) {
                (0, _util.info)(
                  "Attempting to fix invalid version in head table: " + version
                );
                data[0] = 0;
                data[1] = 1;
                data[2] = 0;
                data[3] = 0;
              }
              const indexToLocFormat = int16(data[50], data[51]);
              if (indexToLocFormat < 0 || indexToLocFormat > 1) {
                (0, _util.info)(
                  "Attempting to fix invalid indexToLocFormat in head table: " +
                    indexToLocFormat
                );
                const numGlyphsPlusOne = numGlyphs + 1;
                if (locaLength === numGlyphsPlusOne << 1) {
                  data[50] = 0;
                  data[51] = 0;
                } else if (locaLength === numGlyphsPlusOne << 2) {
                  data[50] = 0;
                  data[51] = 1;
                } else {
                  throw new _util.FormatError(
                    "Could not fix indexToLocFormat: " + indexToLocFormat
                  );
                }
              }
            }
            function sanitizeGlyphLocations(
              loca,
              glyf,
              numGlyphs,
              isGlyphLocationsLong,
              hintsValid,
              dupFirstEntry,
              maxSizeOfInstructions
            ) {
              let itemSize, itemDecode, itemEncode;
              if (isGlyphLocationsLong) {
                itemSize = 4;
                itemDecode = function fontItemDecodeLong(data, offset) {
                  return (
                    (data[offset] << 24) |
                    (data[offset + 1] << 16) |
                    (data[offset + 2] << 8) |
                    data[offset + 3]
                  );
                };
                itemEncode = function fontItemEncodeLong(data, offset, value) {
                  data[offset] = (value >>> 24) & 0xff;
                  data[offset + 1] = (value >> 16) & 0xff;
                  data[offset + 2] = (value >> 8) & 0xff;
                  data[offset + 3] = value & 0xff;
                };
              } else {
                itemSize = 2;
                itemDecode = function fontItemDecode(data, offset) {
                  return (data[offset] << 9) | (data[offset + 1] << 1);
                };
                itemEncode = function fontItemEncode(data, offset, value) {
                  data[offset] = (value >> 9) & 0xff;
                  data[offset + 1] = (value >> 1) & 0xff;
                };
              }
              const numGlyphsOut = dupFirstEntry ? numGlyphs + 1 : numGlyphs;
              const locaDataSize = itemSize * (1 + numGlyphsOut);
              const locaData = new Uint8Array(locaDataSize);
              locaData.set(loca.data.subarray(0, locaDataSize));
              loca.data = locaData;
              const oldGlyfData = glyf.data;
              const oldGlyfDataLength = oldGlyfData.length;
              const newGlyfData = new Uint8Array(oldGlyfDataLength);
              let i, j;
              const locaEntries = [];
              for (i = 0, j = 0; i < numGlyphs + 1; i++, j += itemSize) {
                let offset = itemDecode(locaData, j);
                if (offset > oldGlyfDataLength) {
                  offset = oldGlyfDataLength;
                }
                locaEntries.push({
                  index: i,
                  offset,
                  endOffset: 0,
                });
              }
              locaEntries.sort((a, b) => {
                return a.offset - b.offset;
              });
              for (i = 0; i < numGlyphs; i++) {
                locaEntries[i].endOffset = locaEntries[i + 1].offset;
              }
              locaEntries.sort((a, b) => {
                return a.index - b.index;
              });
              for (i = 0; i < numGlyphs; i++) {
                const { offset, endOffset } = locaEntries[i];
                if (offset !== 0 || endOffset !== 0) {
                  break;
                }
                const nextOffset = locaEntries[i + 1].offset;
                if (nextOffset === 0) {
                  continue;
                }
                locaEntries[i].endOffset = nextOffset;
                break;
              }
              const missingGlyphs = Object.create(null);
              let writeOffset = 0;
              itemEncode(locaData, 0, writeOffset);
              for (i = 0, j = itemSize; i < numGlyphs; i++, j += itemSize) {
                const glyphProfile = sanitizeGlyph(
                  oldGlyfData,
                  locaEntries[i].offset,
                  locaEntries[i].endOffset,
                  newGlyfData,
                  writeOffset,
                  hintsValid
                );
                const newLength = glyphProfile.length;
                if (newLength === 0) {
                  missingGlyphs[i] = true;
                }
                if (glyphProfile.sizeOfInstructions > maxSizeOfInstructions) {
                  maxSizeOfInstructions = glyphProfile.sizeOfInstructions;
                }
                writeOffset += newLength;
                itemEncode(locaData, j, writeOffset);
              }
              if (writeOffset === 0) {
                const simpleGlyph = new Uint8Array([
                  0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
                ]);
                for (
                  i = 0, j = itemSize;
                  i < numGlyphsOut;
                  i++, j += itemSize
                ) {
                  itemEncode(locaData, j, simpleGlyph.length);
                }
                glyf.data = simpleGlyph;
              } else if (dupFirstEntry) {
                const firstEntryLength = itemDecode(locaData, itemSize);
                if (newGlyfData.length > firstEntryLength + writeOffset) {
                  glyf.data = newGlyfData.subarray(
                    0,
                    firstEntryLength + writeOffset
                  );
                } else {
                  glyf.data = new Uint8Array(firstEntryLength + writeOffset);
                  glyf.data.set(newGlyfData.subarray(0, writeOffset));
                }
                glyf.data.set(
                  newGlyfData.subarray(0, firstEntryLength),
                  writeOffset
                );
                itemEncode(
                  loca.data,
                  locaData.length - itemSize,
                  writeOffset + firstEntryLength
                );
              } else {
                glyf.data = newGlyfData.subarray(0, writeOffset);
              }
              return {
                missingGlyphs,
                maxSizeOfInstructions,
              };
            }
            function readPostScriptTable(post, propertiesObj, maxpNumGlyphs) {
              const start = (font.start || 0) + post.offset;
              font.pos = start;
              const length = post.length,
                end = start + length;
              const version = font.getInt32();
              font.skip(28);
              let glyphNames;
              let valid = true;
              let i;
              switch (version) {
                case 0x00010000:
                  glyphNames = _fonts_utils.MacStandardGlyphOrdering;
                  break;
                case 0x00020000:
                  const numGlyphs = font.getUint16();
                  if (numGlyphs !== maxpNumGlyphs) {
                    valid = false;
                    break;
                  }
                  const glyphNameIndexes = [];
                  for (i = 0; i < numGlyphs; ++i) {
                    const index = font.getUint16();
                    if (index >= 32768) {
                      valid = false;
                      break;
                    }
                    glyphNameIndexes.push(index);
                  }
                  if (!valid) {
                    break;
                  }
                  const customNames = [],
                    strBuf = [];
                  while (font.pos < end) {
                    const stringLength = font.getByte();
                    strBuf.length = stringLength;
                    for (i = 0; i < stringLength; ++i) {
                      strBuf[i] = String.fromCharCode(font.getByte());
                    }
                    customNames.push(strBuf.join(""));
                  }
                  glyphNames = [];
                  for (i = 0; i < numGlyphs; ++i) {
                    const j = glyphNameIndexes[i];
                    if (j < 258) {
                      glyphNames.push(_fonts_utils.MacStandardGlyphOrdering[j]);
                      continue;
                    }
                    glyphNames.push(customNames[j - 258]);
                  }
                  break;
                case 0x00030000:
                  break;
                default:
                  (0, _util.warn)(
                    "Unknown/unsupported post table version " + version
                  );
                  valid = false;
                  if (propertiesObj.defaultEncoding) {
                    glyphNames = propertiesObj.defaultEncoding;
                  }
                  break;
              }
              propertiesObj.glyphNames = glyphNames;
              return valid;
            }
            function readNameTable(nameTable) {
              const start = (font.start || 0) + nameTable.offset;
              font.pos = start;
              const names = [[], []],
                records = [];
              const length = nameTable.length,
                end = start + length;
              const format = font.getUint16();
              const FORMAT_0_HEADER_LENGTH = 6;
              if (format !== 0 || length < FORMAT_0_HEADER_LENGTH) {
                return [names, records];
              }
              const numRecords = font.getUint16();
              const stringsStart = font.getUint16();
              const NAME_RECORD_LENGTH = 12;
              let i, ii;
              for (
                i = 0;
                i < numRecords && font.pos + NAME_RECORD_LENGTH <= end;
                i++
              ) {
                const r = {
                  platform: font.getUint16(),
                  encoding: font.getUint16(),
                  language: font.getUint16(),
                  name: font.getUint16(),
                  length: font.getUint16(),
                  offset: font.getUint16(),
                };
                if (isMacNameRecord(r) || isWinNameRecord(r)) {
                  records.push(r);
                }
              }
              for (i = 0, ii = records.length; i < ii; i++) {
                const record = records[i];
                if (record.length <= 0) {
                  continue;
                }
                const pos = start + stringsStart + record.offset;
                if (pos + record.length > end) {
                  continue;
                }
                font.pos = pos;
                const nameIndex = record.name;
                if (record.encoding) {
                  let str = "";
                  for (let j = 0, jj = record.length; j < jj; j += 2) {
                    str += String.fromCharCode(font.getUint16());
                  }
                  names[1][nameIndex] = str;
                } else {
                  names[0][nameIndex] = font.getString(record.length);
                }
              }
              return [names, records];
            }
            const TTOpsStackDeltas = [
              0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5, -1, -1, -1,
              -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, -999, 0,
              1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1, 0, 0, -999, -999, -1,
              -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2, 0, 0, -2, 0, -2, 0,
              0, 0, -2, -1, -1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0,
              -1, 0, -1, -1, 0, -999, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, -2, -999, -999, -999, -999, -999, -1, -1, -2,
              -2, 0, 0, 0, 0, -1, -1, -999, -2, -2, 0, 0, -1, -2, -2, 0, 0, 0,
              -1, -1, -1, -2,
            ];
            function sanitizeTTProgram(table, ttContext) {
              let data = table.data;
              let i = 0,
                j,
                n,
                b,
                funcId,
                pc,
                lastEndf = 0,
                lastDeff = 0;
              const stack = [];
              const callstack = [];
              const functionsCalled = [];
              let tooComplexToFollowFunctions =
                ttContext.tooComplexToFollowFunctions;
              let inFDEF = false,
                ifLevel = 0,
                inELSE = 0;
              for (let ii = data.length; i < ii; ) {
                const op = data[i++];
                if (op === 0x40) {
                  n = data[i++];
                  if (inFDEF || inELSE) {
                    i += n;
                  } else {
                    for (j = 0; j < n; j++) {
                      stack.push(data[i++]);
                    }
                  }
                } else if (op === 0x41) {
                  n = data[i++];
                  if (inFDEF || inELSE) {
                    i += n * 2;
                  } else {
                    for (j = 0; j < n; j++) {
                      b = data[i++];
                      stack.push((b << 8) | data[i++]);
                    }
                  }
                } else if ((op & 0xf8) === 0xb0) {
                  n = op - 0xb0 + 1;
                  if (inFDEF || inELSE) {
                    i += n;
                  } else {
                    for (j = 0; j < n; j++) {
                      stack.push(data[i++]);
                    }
                  }
                } else if ((op & 0xf8) === 0xb8) {
                  n = op - 0xb8 + 1;
                  if (inFDEF || inELSE) {
                    i += n * 2;
                  } else {
                    for (j = 0; j < n; j++) {
                      b = data[i++];
                      stack.push((b << 8) | data[i++]);
                    }
                  }
                } else if (op === 0x2b && !tooComplexToFollowFunctions) {
                  if (!inFDEF && !inELSE) {
                    funcId = stack.at(-1);
                    if (isNaN(funcId)) {
                      (0, _util.info)(
                        "TT: CALL empty stack (or invalid entry)."
                      );
                    } else {
                      ttContext.functionsUsed[funcId] = true;
                      if (funcId in ttContext.functionsStackDeltas) {
                        const newStackLength =
                          stack.length + ttContext.functionsStackDeltas[funcId];
                        if (newStackLength < 0) {
                          (0, _util.warn)(
                            "TT: CALL invalid functions stack delta."
                          );
                          ttContext.hintsValid = false;
                          return;
                        }
                        stack.length = newStackLength;
                      } else if (
                        funcId in ttContext.functionsDefined &&
                        !functionsCalled.includes(funcId)
                      ) {
                        callstack.push({
                          data,
                          i,
                          stackTop: stack.length - 1,
                        });
                        functionsCalled.push(funcId);
                        pc = ttContext.functionsDefined[funcId];
                        if (!pc) {
                          (0, _util.warn)("TT: CALL non-existent function");
                          ttContext.hintsValid = false;
                          return;
                        }
                        data = pc.data;
                        i = pc.i;
                      }
                    }
                  }
                } else if (op === 0x2c && !tooComplexToFollowFunctions) {
                  if (inFDEF || inELSE) {
                    (0, _util.warn)("TT: nested FDEFs not allowed");
                    tooComplexToFollowFunctions = true;
                  }
                  inFDEF = true;
                  lastDeff = i;
                  funcId = stack.pop();
                  ttContext.functionsDefined[funcId] = {
                    data,
                    i,
                  };
                } else if (op === 0x2d) {
                  if (inFDEF) {
                    inFDEF = false;
                    lastEndf = i;
                  } else {
                    pc = callstack.pop();
                    if (!pc) {
                      (0, _util.warn)("TT: ENDF bad stack");
                      ttContext.hintsValid = false;
                      return;
                    }
                    funcId = functionsCalled.pop();
                    data = pc.data;
                    i = pc.i;
                    ttContext.functionsStackDeltas[funcId] =
                      stack.length - pc.stackTop;
                  }
                } else if (op === 0x89) {
                  if (inFDEF || inELSE) {
                    (0, _util.warn)("TT: nested IDEFs not allowed");
                    tooComplexToFollowFunctions = true;
                  }
                  inFDEF = true;
                  lastDeff = i;
                } else if (op === 0x58) {
                  ++ifLevel;
                } else if (op === 0x1b) {
                  inELSE = ifLevel;
                } else if (op === 0x59) {
                  if (inELSE === ifLevel) {
                    inELSE = 0;
                  }
                  --ifLevel;
                } else if (op === 0x1c) {
                  if (!inFDEF && !inELSE) {
                    const offset = stack.at(-1);
                    if (offset > 0) {
                      i += offset - 1;
                    }
                  }
                }
                if (!inFDEF && !inELSE) {
                  let stackDelta = 0;
                  if (op <= 0x8e) {
                    stackDelta = TTOpsStackDeltas[op];
                  } else if (op >= 0xc0 && op <= 0xdf) {
                    stackDelta = -1;
                  } else if (op >= 0xe0) {
                    stackDelta = -2;
                  }
                  if (op >= 0x71 && op <= 0x75) {
                    n = stack.pop();
                    if (!isNaN(n)) {
                      stackDelta = -n * 2;
                    }
                  }
                  while (stackDelta < 0 && stack.length > 0) {
                    stack.pop();
                    stackDelta++;
                  }
                  while (stackDelta > 0) {
                    stack.push(NaN);
                    stackDelta--;
                  }
                }
              }
              ttContext.tooComplexToFollowFunctions =
                tooComplexToFollowFunctions;
              const content = [data];
              if (i > data.length) {
                content.push(new Uint8Array(i - data.length));
              }
              if (lastDeff > lastEndf) {
                (0, _util.warn)("TT: complementing a missing function tail");
                content.push(new Uint8Array([0x22, 0x2d]));
              }
              foldTTTable(table, content);
            }
            function checkInvalidFunctions(ttContext, maxFunctionDefs) {
              if (ttContext.tooComplexToFollowFunctions) {
                return;
              }
              if (ttContext.functionsDefined.length > maxFunctionDefs) {
                (0, _util.warn)("TT: more functions defined than expected");
                ttContext.hintsValid = false;
                return;
              }
              for (
                let j = 0, jj = ttContext.functionsUsed.length;
                j < jj;
                j++
              ) {
                if (j > maxFunctionDefs) {
                  (0, _util.warn)("TT: invalid function id: " + j);
                  ttContext.hintsValid = false;
                  return;
                }
                if (
                  ttContext.functionsUsed[j] &&
                  !ttContext.functionsDefined[j]
                ) {
                  (0, _util.warn)("TT: undefined function: " + j);
                  ttContext.hintsValid = false;
                  return;
                }
              }
            }
            function foldTTTable(table, content) {
              if (content.length > 1) {
                let newLength = 0;
                let j, jj;
                for (j = 0, jj = content.length; j < jj; j++) {
                  newLength += content[j].length;
                }
                newLength = (newLength + 3) & ~3;
                const result = new Uint8Array(newLength);
                let pos = 0;
                for (j = 0, jj = content.length; j < jj; j++) {
                  result.set(content[j], pos);
                  pos += content[j].length;
                }
                table.data = result;
                table.length = newLength;
              }
            }
            function sanitizeTTPrograms(fpgm, prep, cvt, maxFunctionDefs) {
              const ttContext = {
                functionsDefined: [],
                functionsUsed: [],
                functionsStackDeltas: [],
                tooComplexToFollowFunctions: false,
                hintsValid: true,
              };
              if (fpgm) {
                sanitizeTTProgram(fpgm, ttContext);
              }
              if (prep) {
                sanitizeTTProgram(prep, ttContext);
              }
              if (fpgm) {
                checkInvalidFunctions(ttContext, maxFunctionDefs);
              }
              if (cvt && cvt.length & 1) {
                const cvtData = new Uint8Array(cvt.length + 1);
                cvtData.set(cvt.data);
                cvt.data = cvtData;
              }
              return ttContext.hintsValid;
            }
            font = new _stream.Stream(new Uint8Array(font.getBytes()));
            let header, tables;
            if (isTrueTypeCollectionFile(font)) {
              const ttcData = readTrueTypeCollectionData(font, this.name);
              header = ttcData.header;
              tables = ttcData.tables;
            } else {
              header = readOpenTypeHeader(font);
              tables = readTables(font, header.numTables);
            }
            let cff, cffFile;
            const isTrueType = !tables["CFF "];
            if (!isTrueType) {
              const isComposite =
                properties.composite &&
                (properties.cidToGidMap?.length > 0 ||
                  !(properties.cMap instanceof _cmap.IdentityCMap));
              if (
                (header.version === "OTTO" && !isComposite) ||
                !tables.head ||
                !tables.hhea ||
                !tables.maxp ||
                !tables.post
              ) {
                cffFile = new _stream.Stream(tables["CFF "].data);
                cff = new _cff_font.CFFFont(cffFile, properties);
                adjustWidths(properties);
                return this.convert(name, cff, properties);
              }
              delete tables.glyf;
              delete tables.loca;
              delete tables.fpgm;
              delete tables.prep;
              delete tables["cvt "];
              this.isOpenType = true;
            } else {
              if (!tables.loca) {
                throw new _util.FormatError(
                  'Required "loca" table is not found'
                );
              }
              if (!tables.glyf) {
                (0, _util.warn)(
                  'Required "glyf" table is not found -- trying to recover.'
                );
                tables.glyf = {
                  tag: "glyf",
                  data: new Uint8Array(0),
                };
              }
              this.isOpenType = false;
            }
            if (!tables.maxp) {
              throw new _util.FormatError('Required "maxp" table is not found');
            }
            font.pos = (font.start || 0) + tables.maxp.offset;
            const version = font.getInt32();
            const numGlyphs = font.getUint16();
            if (properties.scaleFactors?.length === numGlyphs && isTrueType) {
              const { scaleFactors } = properties;
              const isGlyphLocationsLong = int16(
                tables.head.data[50],
                tables.head.data[51]
              );
              const glyphs = new _glyf.GlyfTable({
                glyfTable: tables.glyf.data,
                isGlyphLocationsLong,
                locaTable: tables.loca.data,
                numGlyphs,
              });
              glyphs.scale(scaleFactors);
              const { glyf, loca, isLocationLong } = glyphs.write();
              tables.glyf.data = glyf;
              tables.loca.data = loca;
              if (isLocationLong !== !!isGlyphLocationsLong) {
                tables.head.data[50] = 0;
                tables.head.data[51] = isLocationLong ? 1 : 0;
              }
              const metrics = tables.hmtx.data;
              for (let i = 0; i < numGlyphs; i++) {
                const j = 4 * i;
                const advanceWidth = Math.round(
                  scaleFactors[i] * int16(metrics[j], metrics[j + 1])
                );
                metrics[j] = (advanceWidth >> 8) & 0xff;
                metrics[j + 1] = advanceWidth & 0xff;
                const lsb = Math.round(
                  scaleFactors[i] * signedInt16(metrics[j + 2], metrics[j + 3])
                );
                writeSignedInt16(metrics, j + 2, lsb);
              }
            }
            let numGlyphsOut = numGlyphs + 1;
            let dupFirstEntry = true;
            if (numGlyphsOut > 0xffff) {
              dupFirstEntry = false;
              numGlyphsOut = numGlyphs;
              (0, _util.warn)(
                "Not enough space in glyfs to duplicate first glyph."
              );
            }
            let maxFunctionDefs = 0;
            let maxSizeOfInstructions = 0;
            if (version >= 0x00010000 && tables.maxp.length >= 22) {
              font.pos += 8;
              const maxZones = font.getUint16();
              if (maxZones > 2) {
                tables.maxp.data[14] = 0;
                tables.maxp.data[15] = 2;
              }
              font.pos += 4;
              maxFunctionDefs = font.getUint16();
              font.pos += 4;
              maxSizeOfInstructions = font.getUint16();
            }
            tables.maxp.data[4] = numGlyphsOut >> 8;
            tables.maxp.data[5] = numGlyphsOut & 255;
            const hintsValid = sanitizeTTPrograms(
              tables.fpgm,
              tables.prep,
              tables["cvt "],
              maxFunctionDefs
            );
            if (!hintsValid) {
              delete tables.fpgm;
              delete tables.prep;
              delete tables["cvt "];
            }
            sanitizeMetrics(
              font,
              tables.hhea,
              tables.hmtx,
              tables.head,
              numGlyphsOut,
              dupFirstEntry
            );
            if (!tables.head) {
              throw new _util.FormatError('Required "head" table is not found');
            }
            sanitizeHead(
              tables.head,
              numGlyphs,
              isTrueType ? tables.loca.length : 0
            );
            let missingGlyphs = Object.create(null);
            if (isTrueType) {
              const isGlyphLocationsLong = int16(
                tables.head.data[50],
                tables.head.data[51]
              );
              const glyphsInfo = sanitizeGlyphLocations(
                tables.loca,
                tables.glyf,
                numGlyphs,
                isGlyphLocationsLong,
                hintsValid,
                dupFirstEntry,
                maxSizeOfInstructions
              );
              missingGlyphs = glyphsInfo.missingGlyphs;
              if (version >= 0x00010000 && tables.maxp.length >= 22) {
                tables.maxp.data[26] = glyphsInfo.maxSizeOfInstructions >> 8;
                tables.maxp.data[27] = glyphsInfo.maxSizeOfInstructions & 255;
              }
            }
            if (!tables.hhea) {
              throw new _util.FormatError('Required "hhea" table is not found');
            }
            if (tables.hhea.data[10] === 0 && tables.hhea.data[11] === 0) {
              tables.hhea.data[10] = 0xff;
              tables.hhea.data[11] = 0xff;
            }
            const metricsOverride = {
              unitsPerEm: int16(tables.head.data[18], tables.head.data[19]),
              yMax: signedInt16(tables.head.data[42], tables.head.data[43]),
              yMin: signedInt16(tables.head.data[38], tables.head.data[39]),
              ascent: signedInt16(tables.hhea.data[4], tables.hhea.data[5]),
              descent: signedInt16(tables.hhea.data[6], tables.hhea.data[7]),
              lineGap: signedInt16(tables.hhea.data[8], tables.hhea.data[9]),
            };
            this.ascent = metricsOverride.ascent / metricsOverride.unitsPerEm;
            this.descent = metricsOverride.descent / metricsOverride.unitsPerEm;
            this.lineGap = metricsOverride.lineGap / metricsOverride.unitsPerEm;
            if (this.cssFontInfo?.lineHeight) {
              this.lineHeight = this.cssFontInfo.metrics.lineHeight;
              this.lineGap = this.cssFontInfo.metrics.lineGap;
            } else {
              this.lineHeight = this.ascent - this.descent + this.lineGap;
            }
            if (tables.post) {
              readPostScriptTable(tables.post, properties, numGlyphs);
            }
            tables.post = {
              tag: "post",
              data: createPostTable(properties),
            };
            const charCodeToGlyphId = [];
            function hasGlyph(glyphId) {
              return !missingGlyphs[glyphId];
            }
            if (properties.composite) {
              const cidToGidMap = properties.cidToGidMap || [];
              const isCidToGidMapEmpty = cidToGidMap.length === 0;
              properties.cMap.forEach(function (charCode, cid) {
                if (typeof cid === "string") {
                  cid = convertCidString(charCode, cid, true);
                }
                if (cid > 0xffff) {
                  throw new _util.FormatError("Max size of CID is 65,535");
                }
                let glyphId = -1;
                if (isCidToGidMapEmpty) {
                  glyphId = cid;
                } else if (cidToGidMap[cid] !== undefined) {
                  glyphId = cidToGidMap[cid];
                }
                if (glyphId >= 0 && glyphId < numGlyphs && hasGlyph(glyphId)) {
                  charCodeToGlyphId[charCode] = glyphId;
                }
              });
            } else {
              const cmapTable = readCmapTable(
                tables.cmap,
                font,
                this.isSymbolicFont,
                properties.hasEncoding
              );
              const cmapPlatformId = cmapTable.platformId;
              const cmapEncodingId = cmapTable.encodingId;
              const cmapMappings = cmapTable.mappings;
              let baseEncoding = [],
                forcePostTable = false;
              if (
                properties.hasEncoding &&
                (properties.baseEncodingName === "MacRomanEncoding" ||
                  properties.baseEncodingName === "WinAnsiEncoding")
              ) {
                baseEncoding = (0, _encodings.getEncoding)(
                  properties.baseEncodingName
                );
              }
              if (
                properties.hasEncoding &&
                !this.isSymbolicFont &&
                ((cmapPlatformId === 3 && cmapEncodingId === 1) ||
                  (cmapPlatformId === 1 && cmapEncodingId === 0))
              ) {
                const glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();
                for (let charCode = 0; charCode < 256; charCode++) {
                  let glyphName;
                  if (this.differences[charCode] !== undefined) {
                    glyphName = this.differences[charCode];
                  } else if (
                    baseEncoding.length &&
                    baseEncoding[charCode] !== ""
                  ) {
                    glyphName = baseEncoding[charCode];
                  } else {
                    glyphName = _encodings.StandardEncoding[charCode];
                  }
                  if (!glyphName) {
                    continue;
                  }
                  const standardGlyphName = (0, _fonts_utils.recoverGlyphName)(
                    glyphName,
                    glyphsUnicodeMap
                  );
                  let unicodeOrCharCode;
                  if (cmapPlatformId === 3 && cmapEncodingId === 1) {
                    unicodeOrCharCode = glyphsUnicodeMap[standardGlyphName];
                  } else if (cmapPlatformId === 1 && cmapEncodingId === 0) {
                    unicodeOrCharCode =
                      _encodings.MacRomanEncoding.indexOf(standardGlyphName);
                  }
                  if (unicodeOrCharCode === undefined) {
                    if (
                      !properties.glyphNames &&
                      properties.hasIncludedToUnicodeMap &&
                      !(
                        this.toUnicode instanceof
                        _to_unicode_map.IdentityToUnicodeMap
                      )
                    ) {
                      const unicode = this.toUnicode.get(charCode);
                      if (unicode) {
                        unicodeOrCharCode = unicode.codePointAt(0);
                      }
                    }
                    if (unicodeOrCharCode === undefined) {
                      continue;
                    }
                  }
                  for (const mapping of cmapMappings) {
                    if (mapping.charCode !== unicodeOrCharCode) {
                      continue;
                    }
                    charCodeToGlyphId[charCode] = mapping.glyphId;
                    break;
                  }
                }
              } else if (cmapPlatformId === 0) {
                for (const mapping of cmapMappings) {
                  charCodeToGlyphId[mapping.charCode] = mapping.glyphId;
                }
                forcePostTable = true;
              } else {
                for (const mapping of cmapMappings) {
                  let charCode = mapping.charCode;
                  if (
                    cmapPlatformId === 3 &&
                    charCode >= 0xf000 &&
                    charCode <= 0xf0ff
                  ) {
                    charCode &= 0xff;
                  }
                  charCodeToGlyphId[charCode] = mapping.glyphId;
                }
              }
              if (
                properties.glyphNames &&
                (baseEncoding.length || this.differences.length)
              ) {
                for (let i = 0; i < 256; ++i) {
                  if (!forcePostTable && charCodeToGlyphId[i] !== undefined) {
                    continue;
                  }
                  const glyphName = this.differences[i] || baseEncoding[i];
                  if (!glyphName) {
                    continue;
                  }
                  const glyphId = properties.glyphNames.indexOf(glyphName);
                  if (glyphId > 0 && hasGlyph(glyphId)) {
                    charCodeToGlyphId[i] = glyphId;
                  }
                }
              }
            }
            if (charCodeToGlyphId.length === 0) {
              charCodeToGlyphId[0] = 0;
            }
            let glyphZeroId = numGlyphsOut - 1;
            if (!dupFirstEntry) {
              glyphZeroId = 0;
            }
            if (!properties.cssFontInfo) {
              const newMapping = adjustMapping(
                charCodeToGlyphId,
                hasGlyph,
                glyphZeroId,
                this.toUnicode
              );
              this.toFontChar = newMapping.toFontChar;
              tables.cmap = {
                tag: "cmap",
                data: createCmapTable(
                  newMapping.charCodeToGlyphId,
                  newMapping.toUnicodeExtraMap,
                  numGlyphsOut
                ),
              };
              if (!tables["OS/2"] || !validateOS2Table(tables["OS/2"], font)) {
                tables["OS/2"] = {
                  tag: "OS/2",
                  data: createOS2Table(
                    properties,
                    newMapping.charCodeToGlyphId,
                    metricsOverride
                  ),
                };
              }
            }
            if (!isTrueType) {
              try {
                cffFile = new _stream.Stream(tables["CFF "].data);
                const parser = new _cff_parser.CFFParser(
                  cffFile,
                  properties,
                  _fonts_utils.SEAC_ANALYSIS_ENABLED
                );
                cff = parser.parse();
                cff.duplicateFirstGlyph();
                const compiler = new _cff_parser.CFFCompiler(cff);
                tables["CFF "].data = compiler.compile();
              } catch {
                (0, _util.warn)(
                  "Failed to compile font " + properties.loadedName
                );
              }
            }
            if (!tables.name) {
              tables.name = {
                tag: "name",
                data: createNameTable(this.name),
              };
            } else {
              const [namePrototype, nameRecords] = readNameTable(tables.name);
              tables.name.data = createNameTable(name, namePrototype);
              this.psName = namePrototype[0][6] || null;
              if (!properties.composite) {
                adjustTrueTypeToUnicode(
                  properties,
                  this.isSymbolicFont,
                  nameRecords
                );
              }
            }
            const builder = new _opentype_file_builder.OpenTypeFileBuilder(
              header.version
            );
            for (const tableTag in tables) {
              builder.addTable(tableTag, tables[tableTag].data);
            }
            return builder.toArray();
          }
          convert(fontName, font, properties) {
            properties.fixedPitch = false;
            if (properties.builtInEncoding) {
              adjustType1ToUnicode(properties, properties.builtInEncoding);
            }
            let glyphZeroId = 1;
            if (font instanceof _cff_font.CFFFont) {
              glyphZeroId = font.numGlyphs - 1;
            }
            const mapping = font.getGlyphMapping(properties);
            let newMapping = null;
            let newCharCodeToGlyphId = mapping;
            let toUnicodeExtraMap = null;
            if (!properties.cssFontInfo) {
              newMapping = adjustMapping(
                mapping,
                font.hasGlyphId.bind(font),
                glyphZeroId,
                this.toUnicode
              );
              this.toFontChar = newMapping.toFontChar;
              newCharCodeToGlyphId = newMapping.charCodeToGlyphId;
              toUnicodeExtraMap = newMapping.toUnicodeExtraMap;
            }
            const numGlyphs = font.numGlyphs;
            function getCharCodes(charCodeToGlyphId, glyphId) {
              let charCodes = null;
              for (const charCode in charCodeToGlyphId) {
                if (glyphId === charCodeToGlyphId[charCode]) {
                  (charCodes ||= []).push(charCode | 0);
                }
              }
              return charCodes;
            }
            function createCharCode(charCodeToGlyphId, glyphId) {
              for (const charCode in charCodeToGlyphId) {
                if (glyphId === charCodeToGlyphId[charCode]) {
                  return charCode | 0;
                }
              }
              newMapping.charCodeToGlyphId[
                newMapping.nextAvailableFontCharCode
              ] = glyphId;
              return newMapping.nextAvailableFontCharCode++;
            }
            const seacs = font.seacs;
            if (
              newMapping &&
              _fonts_utils.SEAC_ANALYSIS_ENABLED &&
              seacs?.length
            ) {
              const matrix =
                properties.fontMatrix || _util.FONT_IDENTITY_MATRIX;
              const charset = font.getCharset();
              const seacMap = Object.create(null);
              for (let glyphId in seacs) {
                glyphId |= 0;
                const seac = seacs[glyphId];
                const baseGlyphName = _encodings.StandardEncoding[seac[2]];
                const accentGlyphName = _encodings.StandardEncoding[seac[3]];
                const baseGlyphId = charset.indexOf(baseGlyphName);
                const accentGlyphId = charset.indexOf(accentGlyphName);
                if (baseGlyphId < 0 || accentGlyphId < 0) {
                  continue;
                }
                const accentOffset = {
                  x: seac[0] * matrix[0] + seac[1] * matrix[2] + matrix[4],
                  y: seac[0] * matrix[1] + seac[1] * matrix[3] + matrix[5],
                };
                const charCodes = getCharCodes(mapping, glyphId);
                if (!charCodes) {
                  continue;
                }
                for (const charCode of charCodes) {
                  const charCodeToGlyphId = newMapping.charCodeToGlyphId;
                  const baseFontCharCode = createCharCode(
                    charCodeToGlyphId,
                    baseGlyphId
                  );
                  const accentFontCharCode = createCharCode(
                    charCodeToGlyphId,
                    accentGlyphId
                  );
                  seacMap[charCode] = {
                    baseFontCharCode,
                    accentFontCharCode,
                    accentOffset,
                  };
                }
              }
              properties.seacMap = seacMap;
            }
            const unitsPerEm =
              1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];
            const builder = new _opentype_file_builder.OpenTypeFileBuilder(
              "\x4F\x54\x54\x4F"
            );
            builder.addTable("CFF ", font.data);
            builder.addTable(
              "OS/2",
              createOS2Table(properties, newCharCodeToGlyphId)
            );
            builder.addTable(
              "cmap",
              createCmapTable(
                newCharCodeToGlyphId,
                toUnicodeExtraMap,
                numGlyphs
              )
            );
            builder.addTable(
              "head",
              "\x00\x01\x00\x00" +
                "\x00\x00\x10\x00" +
                "\x00\x00\x00\x00" +
                "\x5F\x0F\x3C\xF5" +
                "\x00\x00" +
                safeString16(unitsPerEm) +
                "\x00\x00\x00\x00\x9e\x0b\x7e\x27" +
                "\x00\x00\x00\x00\x9e\x0b\x7e\x27" +
                "\x00\x00" +
                safeString16(properties.descent) +
                "\x0F\xFF" +
                safeString16(properties.ascent) +
                string16(properties.italicAngle ? 2 : 0) +
                "\x00\x11" +
                "\x00\x00" +
                "\x00\x00" +
                "\x00\x00"
            );
            builder.addTable(
              "hhea",
              "\x00\x01\x00\x00" +
                safeString16(properties.ascent) +
                safeString16(properties.descent) +
                "\x00\x00" +
                "\xFF\xFF" +
                "\x00\x00" +
                "\x00\x00" +
                "\x00\x00" +
                safeString16(properties.capHeight) +
                safeString16(
                  Math.tan(properties.italicAngle) * properties.xHeight
                ) +
                "\x00\x00" +
                "\x00\x00" +
                "\x00\x00" +
                "\x00\x00" +
                "\x00\x00" +
                "\x00\x00" +
                string16(numGlyphs)
            );
            builder.addTable(
              "hmtx",
              (function fontFieldsHmtx() {
                const charstrings = font.charstrings;
                const cffWidths = font.cff ? font.cff.widths : null;
                let hmtx = "\x00\x00\x00\x00";
                for (let i = 1, ii = numGlyphs; i < ii; i++) {
                  let width = 0;
                  if (charstrings) {
                    const charstring = charstrings[i - 1];
                    width = "width" in charstring ? charstring.width : 0;
                  } else if (cffWidths) {
                    width = Math.ceil(cffWidths[i] || 0);
                  }
                  hmtx += string16(width) + string16(0);
                }
                return hmtx;
              })()
            );
            builder.addTable("maxp", "\x00\x00\x50\x00" + string16(numGlyphs));
            builder.addTable("name", createNameTable(fontName));
            builder.addTable("post", createPostTable(properties));
            return builder.toArray();
          }
          get spaceWidth() {
            const possibleSpaceReplacements = [
              "space",
              "minus",
              "one",
              "i",
              "I",
            ];
            let width;
            for (const glyphName of possibleSpaceReplacements) {
              if (glyphName in this.widths) {
                width = this.widths[glyphName];
                break;
              }
              const glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();
              const glyphUnicode = glyphsUnicodeMap[glyphName];
              let charcode = 0;
              if (this.composite && this.cMap.contains(glyphUnicode)) {
                charcode = this.cMap.lookup(glyphUnicode);
                if (typeof charcode === "string") {
                  charcode = convertCidString(glyphUnicode, charcode);
                }
              }
              if (!charcode && this.toUnicode) {
                charcode = this.toUnicode.charCodeOf(glyphUnicode);
              }
              if (charcode <= 0) {
                charcode = glyphUnicode;
              }
              width = this.widths[charcode];
              if (width) {
                break;
              }
            }
            return (0, _util.shadow)(
              this,
              "spaceWidth",
              width || this.defaultWidth
            );
          }
          _charToGlyph(charcode, isSpace = false) {
            let glyph = this._glyphCache[charcode];
            if (glyph?.isSpace === isSpace) {
              return glyph;
            }
            let fontCharCode, width, operatorListId;
            let widthCode = charcode;
            if (this.cMap?.contains(charcode)) {
              widthCode = this.cMap.lookup(charcode);
              if (typeof widthCode === "string") {
                widthCode = convertCidString(charcode, widthCode);
              }
            }
            width = this.widths[widthCode];
            if (typeof width !== "number") {
              width = this.defaultWidth;
            }
            const vmetric = this.vmetrics?.[widthCode];
            let unicode = this.toUnicode.get(charcode) || charcode;
            if (typeof unicode === "number") {
              unicode = String.fromCharCode(unicode);
            }
            let isInFont = this.toFontChar[charcode] !== undefined;
            fontCharCode = this.toFontChar[charcode] || charcode;
            if (this.missingFile) {
              const glyphName =
                this.differences[charcode] || this.defaultEncoding[charcode];
              if (
                (glyphName === ".notdef" || glyphName === "") &&
                this.type === "Type1"
              ) {
                fontCharCode = 0x20;
              }
              fontCharCode = (0, _unicode.mapSpecialUnicodeValues)(
                fontCharCode
              );
            }
            if (this.isType3Font) {
              operatorListId = fontCharCode;
            }
            let accent = null;
            if (this.seacMap?.[charcode]) {
              isInFont = true;
              const seac = this.seacMap[charcode];
              fontCharCode = seac.baseFontCharCode;
              accent = {
                fontChar: String.fromCodePoint(seac.accentFontCharCode),
                offset: seac.accentOffset,
              };
            }
            let fontChar = "";
            if (typeof fontCharCode === "number") {
              if (fontCharCode <= 0x10ffff) {
                fontChar = String.fromCodePoint(fontCharCode);
              } else {
                (0, _util.warn)(
                  `charToGlyph - invalid fontCharCode: ${fontCharCode}`
                );
              }
            }
            glyph = new Glyph(
              charcode,
              fontChar,
              unicode,
              accent,
              width,
              vmetric,
              operatorListId,
              isSpace,
              isInFont
            );
            return (this._glyphCache[charcode] = glyph);
          }
          charsToGlyphs(chars) {
            let glyphs = this._charsCache[chars];
            if (glyphs) {
              return glyphs;
            }
            glyphs = [];
            if (this.cMap) {
              const c = Object.create(null),
                ii = chars.length;
              let i = 0;
              while (i < ii) {
                this.cMap.readCharCode(chars, i, c);
                const { charcode, length } = c;
                i += length;
                const glyph = this._charToGlyph(
                  charcode,
                  length === 1 && chars.charCodeAt(i - 1) === 0x20
                );
                glyphs.push(glyph);
              }
            } else {
              for (let i = 0, ii = chars.length; i < ii; ++i) {
                const charcode = chars.charCodeAt(i);
                const glyph = this._charToGlyph(charcode, charcode === 0x20);
                glyphs.push(glyph);
              }
            }
            return (this._charsCache[chars] = glyphs);
          }
          getCharPositions(chars) {
            const positions = [];
            if (this.cMap) {
              const c = Object.create(null);
              let i = 0;
              while (i < chars.length) {
                this.cMap.readCharCode(chars, i, c);
                const length = c.length;
                positions.push([i, i + length]);
                i += length;
              }
            } else {
              for (let i = 0, ii = chars.length; i < ii; ++i) {
                positions.push([i, i + 1]);
              }
            }
            return positions;
          }
          get glyphCacheValues() {
            return Object.values(this._glyphCache);
          }
          encodeString(str) {
            const buffers = [];
            const currentBuf = [];
            const hasCurrentBufErrors = () => buffers.length % 2 === 1;
            const getCharCode =
              this.toUnicode instanceof _to_unicode_map.IdentityToUnicodeMap
                ? (unicode) => this.toUnicode.charCodeOf(unicode)
                : (unicode) =>
                    this.toUnicode.charCodeOf(String.fromCodePoint(unicode));
            for (let i = 0, ii = str.length; i < ii; i++) {
              const unicode = str.codePointAt(i);
              if (unicode > 0xd7ff && (unicode < 0xe000 || unicode > 0xfffd)) {
                i++;
              }
              if (this.toUnicode) {
                const charCode = getCharCode(unicode);
                if (charCode !== -1) {
                  if (hasCurrentBufErrors()) {
                    buffers.push(currentBuf.join(""));
                    currentBuf.length = 0;
                  }
                  const charCodeLength = this.cMap
                    ? this.cMap.getCharCodeLength(charCode)
                    : 1;
                  for (let j = charCodeLength - 1; j >= 0; j--) {
                    currentBuf.push(
                      String.fromCharCode((charCode >> (8 * j)) & 0xff)
                    );
                  }
                  continue;
                }
              }
              if (!hasCurrentBufErrors()) {
                buffers.push(currentBuf.join(""));
                currentBuf.length = 0;
              }
              currentBuf.push(String.fromCodePoint(unicode));
            }
            buffers.push(currentBuf.join(""));
            return buffers;
          }
        }
        exports.Font = Font;
        class ErrorFont {
          constructor(error) {
            this.error = error;
            this.loadedName = "g_font_error";
            this.missingFile = true;
          }
          charsToGlyphs() {
            return [];
          }
          encodeString(chars) {
            return [chars];
          }
          exportData(extraProperties = false) {
            return {
              error: this.error,
            };
          }
        }
        exports.ErrorFont = ErrorFont;

        /***/
      },
      /* 35 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.CFFTopDict =
          exports.CFFStrings =
          exports.CFFStandardStrings =
          exports.CFFPrivateDict =
          exports.CFFParser =
          exports.CFFIndex =
          exports.CFFHeader =
          exports.CFFFDSelect =
          exports.CFFCompiler =
          exports.CFFCharset =
          exports.CFF =
            void 0;
        var _util = __w_pdfjs_require__(2);
        var _charsets = __w_pdfjs_require__(36);
        var _encodings = __w_pdfjs_require__(37);
        const MAX_SUBR_NESTING = 10;
        const CFFStandardStrings = [
          ".notdef",
          "space",
          "exclam",
          "quotedbl",
          "numbersign",
          "dollar",
          "percent",
          "ampersand",
          "quoteright",
          "parenleft",
          "parenright",
          "asterisk",
          "plus",
          "comma",
          "hyphen",
          "period",
          "slash",
          "zero",
          "one",
          "two",
          "three",
          "four",
          "five",
          "six",
          "seven",
          "eight",
          "nine",
          "colon",
          "semicolon",
          "less",
          "equal",
          "greater",
          "question",
          "at",
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "H",
          "I",
          "J",
          "K",
          "L",
          "M",
          "N",
          "O",
          "P",
          "Q",
          "R",
          "S",
          "T",
          "U",
          "V",
          "W",
          "X",
          "Y",
          "Z",
          "bracketleft",
          "backslash",
          "bracketright",
          "asciicircum",
          "underscore",
          "quoteleft",
          "a",
          "b",
          "c",
          "d",
          "e",
          "f",
          "g",
          "h",
          "i",
          "j",
          "k",
          "l",
          "m",
          "n",
          "o",
          "p",
          "q",
          "r",
          "s",
          "t",
          "u",
          "v",
          "w",
          "x",
          "y",
          "z",
          "braceleft",
          "bar",
          "braceright",
          "asciitilde",
          "exclamdown",
          "cent",
          "sterling",
          "fraction",
          "yen",
          "florin",
          "section",
          "currency",
          "quotesingle",
          "quotedblleft",
          "guillemotleft",
          "guilsinglleft",
          "guilsinglright",
          "fi",
          "fl",
          "endash",
          "dagger",
          "daggerdbl",
          "periodcentered",
          "paragraph",
          "bullet",
          "quotesinglbase",
          "quotedblbase",
          "quotedblright",
          "guillemotright",
          "ellipsis",
          "perthousand",
          "questiondown",
          "grave",
          "acute",
          "circumflex",
          "tilde",
          "macron",
          "breve",
          "dotaccent",
          "dieresis",
          "ring",
          "cedilla",
          "hungarumlaut",
          "ogonek",
          "caron",
          "emdash",
          "AE",
          "ordfeminine",
          "Lslash",
          "Oslash",
          "OE",
          "ordmasculine",
          "ae",
          "dotlessi",
          "lslash",
          "oslash",
          "oe",
          "germandbls",
          "onesuperior",
          "logicalnot",
          "mu",
          "trademark",
          "Eth",
          "onehalf",
          "plusminus",
          "Thorn",
          "onequarter",
          "divide",
          "brokenbar",
          "degree",
          "thorn",
          "threequarters",
          "twosuperior",
          "registered",
          "minus",
          "eth",
          "multiply",
          "threesuperior",
          "copyright",
          "Aacute",
          "Acircumflex",
          "Adieresis",
          "Agrave",
          "Aring",
          "Atilde",
          "Ccedilla",
          "Eacute",
          "Ecircumflex",
          "Edieresis",
          "Egrave",
          "Iacute",
          "Icircumflex",
          "Idieresis",
          "Igrave",
          "Ntilde",
          "Oacute",
          "Ocircumflex",
          "Odieresis",
          "Ograve",
          "Otilde",
          "Scaron",
          "Uacute",
          "Ucircumflex",
          "Udieresis",
          "Ugrave",
          "Yacute",
          "Ydieresis",
          "Zcaron",
          "aacute",
          "acircumflex",
          "adieresis",
          "agrave",
          "aring",
          "atilde",
          "ccedilla",
          "eacute",
          "ecircumflex",
          "edieresis",
          "egrave",
          "iacute",
          "icircumflex",
          "idieresis",
          "igrave",
          "ntilde",
          "oacute",
          "ocircumflex",
          "odieresis",
          "ograve",
          "otilde",
          "scaron",
          "uacute",
          "ucircumflex",
          "udieresis",
          "ugrave",
          "yacute",
          "ydieresis",
          "zcaron",
          "exclamsmall",
          "Hungarumlautsmall",
          "dollaroldstyle",
          "dollarsuperior",
          "ampersandsmall",
          "Acutesmall",
          "parenleftsuperior",
          "parenrightsuperior",
          "twodotenleader",
          "onedotenleader",
          "zerooldstyle",
          "oneoldstyle",
          "twooldstyle",
          "threeoldstyle",
          "fouroldstyle",
          "fiveoldstyle",
          "sixoldstyle",
          "sevenoldstyle",
          "eightoldstyle",
          "nineoldstyle",
          "commasuperior",
          "threequartersemdash",
          "periodsuperior",
          "questionsmall",
          "asuperior",
          "bsuperior",
          "centsuperior",
          "dsuperior",
          "esuperior",
          "isuperior",
          "lsuperior",
          "msuperior",
          "nsuperior",
          "osuperior",
          "rsuperior",
          "ssuperior",
          "tsuperior",
          "ff",
          "ffi",
          "ffl",
          "parenleftinferior",
          "parenrightinferior",
          "Circumflexsmall",
          "hyphensuperior",
          "Gravesmall",
          "Asmall",
          "Bsmall",
          "Csmall",
          "Dsmall",
          "Esmall",
          "Fsmall",
          "Gsmall",
          "Hsmall",
          "Ismall",
          "Jsmall",
          "Ksmall",
          "Lsmall",
          "Msmall",
          "Nsmall",
          "Osmall",
          "Psmall",
          "Qsmall",
          "Rsmall",
          "Ssmall",
          "Tsmall",
          "Usmall",
          "Vsmall",
          "Wsmall",
          "Xsmall",
          "Ysmall",
          "Zsmall",
          "colonmonetary",
          "onefitted",
          "rupiah",
          "Tildesmall",
          "exclamdownsmall",
          "centoldstyle",
          "Lslashsmall",
          "Scaronsmall",
          "Zcaronsmall",
          "Dieresissmall",
          "Brevesmall",
          "Caronsmall",
          "Dotaccentsmall",
          "Macronsmall",
          "figuredash",
          "hypheninferior",
          "Ogoneksmall",
          "Ringsmall",
          "Cedillasmall",
          "questiondownsmall",
          "oneeighth",
          "threeeighths",
          "fiveeighths",
          "seveneighths",
          "onethird",
          "twothirds",
          "zerosuperior",
          "foursuperior",
          "fivesuperior",
          "sixsuperior",
          "sevensuperior",
          "eightsuperior",
          "ninesuperior",
          "zeroinferior",
          "oneinferior",
          "twoinferior",
          "threeinferior",
          "fourinferior",
          "fiveinferior",
          "sixinferior",
          "seveninferior",
          "eightinferior",
          "nineinferior",
          "centinferior",
          "dollarinferior",
          "periodinferior",
          "commainferior",
          "Agravesmall",
          "Aacutesmall",
          "Acircumflexsmall",
          "Atildesmall",
          "Adieresissmall",
          "Aringsmall",
          "AEsmall",
          "Ccedillasmall",
          "Egravesmall",
          "Eacutesmall",
          "Ecircumflexsmall",
          "Edieresissmall",
          "Igravesmall",
          "Iacutesmall",
          "Icircumflexsmall",
          "Idieresissmall",
          "Ethsmall",
          "Ntildesmall",
          "Ogravesmall",
          "Oacutesmall",
          "Ocircumflexsmall",
          "Otildesmall",
          "Odieresissmall",
          "OEsmall",
          "Oslashsmall",
          "Ugravesmall",
          "Uacutesmall",
          "Ucircumflexsmall",
          "Udieresissmall",
          "Yacutesmall",
          "Thornsmall",
          "Ydieresissmall",
          "001.000",
          "001.001",
          "001.002",
          "001.003",
          "Black",
          "Bold",
          "Book",
          "Light",
          "Medium",
          "Regular",
          "Roman",
          "Semibold",
        ];
        exports.CFFStandardStrings = CFFStandardStrings;
        const NUM_STANDARD_CFF_STRINGS = 391;
        const CharstringValidationData = [
          null,
          {
            id: "hstem",
            min: 2,
            stackClearing: true,
            stem: true,
          },
          null,
          {
            id: "vstem",
            min: 2,
            stackClearing: true,
            stem: true,
          },
          {
            id: "vmoveto",
            min: 1,
            stackClearing: true,
          },
          {
            id: "rlineto",
            min: 2,
            resetStack: true,
          },
          {
            id: "hlineto",
            min: 1,
            resetStack: true,
          },
          {
            id: "vlineto",
            min: 1,
            resetStack: true,
          },
          {
            id: "rrcurveto",
            min: 6,
            resetStack: true,
          },
          null,
          {
            id: "callsubr",
            min: 1,
            undefStack: true,
          },
          {
            id: "return",
            min: 0,
            undefStack: true,
          },
          null,
          null,
          {
            id: "endchar",
            min: 0,
            stackClearing: true,
          },
          null,
          null,
          null,
          {
            id: "hstemhm",
            min: 2,
            stackClearing: true,
            stem: true,
          },
          {
            id: "hintmask",
            min: 0,
            stackClearing: true,
          },
          {
            id: "cntrmask",
            min: 0,
            stackClearing: true,
          },
          {
            id: "rmoveto",
            min: 2,
            stackClearing: true,
          },
          {
            id: "hmoveto",
            min: 1,
            stackClearing: true,
          },
          {
            id: "vstemhm",
            min: 2,
            stackClearing: true,
            stem: true,
          },
          {
            id: "rcurveline",
            min: 8,
            resetStack: true,
          },
          {
            id: "rlinecurve",
            min: 8,
            resetStack: true,
          },
          {
            id: "vvcurveto",
            min: 4,
            resetStack: true,
          },
          {
            id: "hhcurveto",
            min: 4,
            resetStack: true,
          },
          null,
          {
            id: "callgsubr",
            min: 1,
            undefStack: true,
          },
          {
            id: "vhcurveto",
            min: 4,
            resetStack: true,
          },
          {
            id: "hvcurveto",
            min: 4,
            resetStack: true,
          },
        ];
        const CharstringValidationData12 = [
          null,
          null,
          null,
          {
            id: "and",
            min: 2,
            stackDelta: -1,
          },
          {
            id: "or",
            min: 2,
            stackDelta: -1,
          },
          {
            id: "not",
            min: 1,
            stackDelta: 0,
          },
          null,
          null,
          null,
          {
            id: "abs",
            min: 1,
            stackDelta: 0,
          },
          {
            id: "add",
            min: 2,
            stackDelta: -1,
            stackFn(stack, index) {
              stack[index - 2] = stack[index - 2] + stack[index - 1];
            },
          },
          {
            id: "sub",
            min: 2,
            stackDelta: -1,
            stackFn(stack, index) {
              stack[index - 2] = stack[index - 2] - stack[index - 1];
            },
          },
          {
            id: "div",
            min: 2,
            stackDelta: -1,
            stackFn(stack, index) {
              stack[index - 2] = stack[index - 2] / stack[index - 1];
            },
          },
          null,
          {
            id: "neg",
            min: 1,
            stackDelta: 0,
            stackFn(stack, index) {
              stack[index - 1] = -stack[index - 1];
            },
          },
          {
            id: "eq",
            min: 2,
            stackDelta: -1,
          },
          null,
          null,
          {
            id: "drop",
            min: 1,
            stackDelta: -1,
          },
          null,
          {
            id: "put",
            min: 2,
            stackDelta: -2,
          },
          {
            id: "get",
            min: 1,
            stackDelta: 0,
          },
          {
            id: "ifelse",
            min: 4,
            stackDelta: -3,
          },
          {
            id: "random",
            min: 0,
            stackDelta: 1,
          },
          {
            id: "mul",
            min: 2,
            stackDelta: -1,
            stackFn(stack, index) {
              stack[index - 2] = stack[index - 2] * stack[index - 1];
            },
          },
          null,
          {
            id: "sqrt",
            min: 1,
            stackDelta: 0,
          },
          {
            id: "dup",
            min: 1,
            stackDelta: 1,
          },
          {
            id: "exch",
            min: 2,
            stackDelta: 0,
          },
          {
            id: "index",
            min: 2,
            stackDelta: 0,
          },
          {
            id: "roll",
            min: 3,
            stackDelta: -2,
          },
          null,
          null,
          null,
          {
            id: "hflex",
            min: 7,
            resetStack: true,
          },
          {
            id: "flex",
            min: 13,
            resetStack: true,
          },
          {
            id: "hflex1",
            min: 9,
            resetStack: true,
          },
          {
            id: "flex1",
            min: 11,
            resetStack: true,
          },
        ];
        class CFFParser {
          constructor(file, properties, seacAnalysisEnabled) {
            this.bytes = file.getBytes();
            this.properties = properties;
            this.seacAnalysisEnabled = !!seacAnalysisEnabled;
          }
          parse() {
            const properties = this.properties;
            const cff = new CFF();
            this.cff = cff;
            const header = this.parseHeader();
            const nameIndex = this.parseIndex(header.endPos);
            const topDictIndex = this.parseIndex(nameIndex.endPos);
            const stringIndex = this.parseIndex(topDictIndex.endPos);
            const globalSubrIndex = this.parseIndex(stringIndex.endPos);
            const topDictParsed = this.parseDict(topDictIndex.obj.get(0));
            const topDict = this.createDict(
              CFFTopDict,
              topDictParsed,
              cff.strings
            );
            cff.header = header.obj;
            cff.names = this.parseNameIndex(nameIndex.obj);
            cff.strings = this.parseStringIndex(stringIndex.obj);
            cff.topDict = topDict;
            cff.globalSubrIndex = globalSubrIndex.obj;
            this.parsePrivateDict(cff.topDict);
            cff.isCIDFont = topDict.hasName("ROS");
            const charStringOffset = topDict.getByName("CharStrings");
            const charStringIndex = this.parseIndex(charStringOffset).obj;
            const fontMatrix = topDict.getByName("FontMatrix");
            if (fontMatrix) {
              properties.fontMatrix = fontMatrix;
            }
            const fontBBox = topDict.getByName("FontBBox");
            if (fontBBox) {
              properties.ascent = Math.max(fontBBox[3], fontBBox[1]);
              properties.descent = Math.min(fontBBox[1], fontBBox[3]);
              properties.ascentScaled = true;
            }
            let charset, encoding;
            if (cff.isCIDFont) {
              const fdArrayIndex = this.parseIndex(
                topDict.getByName("FDArray")
              ).obj;
              for (let i = 0, ii = fdArrayIndex.count; i < ii; ++i) {
                const dictRaw = fdArrayIndex.get(i);
                const fontDict = this.createDict(
                  CFFTopDict,
                  this.parseDict(dictRaw),
                  cff.strings
                );
                this.parsePrivateDict(fontDict);
                cff.fdArray.push(fontDict);
              }
              encoding = null;
              charset = this.parseCharsets(
                topDict.getByName("charset"),
                charStringIndex.count,
                cff.strings,
                true
              );
              cff.fdSelect = this.parseFDSelect(
                topDict.getByName("FDSelect"),
                charStringIndex.count
              );
            } else {
              charset = this.parseCharsets(
                topDict.getByName("charset"),
                charStringIndex.count,
                cff.strings,
                false
              );
              encoding = this.parseEncoding(
                topDict.getByName("Encoding"),
                properties,
                cff.strings,
                charset.charset
              );
            }
            cff.charset = charset;
            cff.encoding = encoding;
            const charStringsAndSeacs = this.parseCharStrings({
              charStrings: charStringIndex,
              localSubrIndex: topDict.privateDict.subrsIndex,
              globalSubrIndex: globalSubrIndex.obj,
              fdSelect: cff.fdSelect,
              fdArray: cff.fdArray,
              privateDict: topDict.privateDict,
            });
            cff.charStrings = charStringsAndSeacs.charStrings;
            cff.seacs = charStringsAndSeacs.seacs;
            cff.widths = charStringsAndSeacs.widths;
            return cff;
          }
          parseHeader() {
            let bytes = this.bytes;
            const bytesLength = bytes.length;
            let offset = 0;
            while (offset < bytesLength && bytes[offset] !== 1) {
              ++offset;
            }
            if (offset >= bytesLength) {
              throw new _util.FormatError("Invalid CFF header");
            }
            if (offset !== 0) {
              (0, _util.info)("cff data is shifted");
              bytes = bytes.subarray(offset);
              this.bytes = bytes;
            }
            const major = bytes[0];
            const minor = bytes[1];
            const hdrSize = bytes[2];
            const offSize = bytes[3];
            const header = new CFFHeader(major, minor, hdrSize, offSize);
            return {
              obj: header,
              endPos: hdrSize,
            };
          }
          parseDict(dict) {
            let pos = 0;
            function parseOperand() {
              let value = dict[pos++];
              if (value === 30) {
                return parseFloatOperand();
              } else if (value === 28) {
                value = dict[pos++];
                value = ((value << 24) | (dict[pos++] << 16)) >> 16;
                return value;
              } else if (value === 29) {
                value = dict[pos++];
                value = (value << 8) | dict[pos++];
                value = (value << 8) | dict[pos++];
                value = (value << 8) | dict[pos++];
                return value;
              } else if (value >= 32 && value <= 246) {
                return value - 139;
              } else if (value >= 247 && value <= 250) {
                return (value - 247) * 256 + dict[pos++] + 108;
              } else if (value >= 251 && value <= 254) {
                return -((value - 251) * 256) - dict[pos++] - 108;
              }
              (0, _util.warn)(
                'CFFParser_parseDict: "' + value + '" is a reserved command.'
              );
              return NaN;
            }
            function parseFloatOperand() {
              let str = "";
              const eof = 15;
              const lookup = [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                ".",
                "E",
                "E-",
                null,
                "-",
              ];
              const length = dict.length;
              while (pos < length) {
                const b = dict[pos++];
                const b1 = b >> 4;
                const b2 = b & 15;
                if (b1 === eof) {
                  break;
                }
                str += lookup[b1];
                if (b2 === eof) {
                  break;
                }
                str += lookup[b2];
              }
              return parseFloat(str);
            }
            let operands = [];
            const entries = [];
            pos = 0;
            const end = dict.length;
            while (pos < end) {
              let b = dict[pos];
              if (b <= 21) {
                if (b === 12) {
                  b = (b << 8) | dict[++pos];
                }
                entries.push([b, operands]);
                operands = [];
                ++pos;
              } else {
                operands.push(parseOperand());
              }
            }
            return entries;
          }
          parseIndex(pos) {
            const cffIndex = new CFFIndex();
            const bytes = this.bytes;
            const count = (bytes[pos++] << 8) | bytes[pos++];
            const offsets = [];
            let end = pos;
            let i, ii;
            if (count !== 0) {
              const offsetSize = bytes[pos++];
              const startPos = pos + (count + 1) * offsetSize - 1;
              for (i = 0, ii = count + 1; i < ii; ++i) {
                let offset = 0;
                for (let j = 0; j < offsetSize; ++j) {
                  offset <<= 8;
                  offset += bytes[pos++];
                }
                offsets.push(startPos + offset);
              }
              end = offsets[count];
            }
            for (i = 0, ii = offsets.length - 1; i < ii; ++i) {
              const offsetStart = offsets[i];
              const offsetEnd = offsets[i + 1];
              cffIndex.add(bytes.subarray(offsetStart, offsetEnd));
            }
            return {
              obj: cffIndex,
              endPos: end,
            };
          }
          parseNameIndex(index) {
            const names = [];
            for (let i = 0, ii = index.count; i < ii; ++i) {
              const name = index.get(i);
              names.push((0, _util.bytesToString)(name));
            }
            return names;
          }
          parseStringIndex(index) {
            const strings = new CFFStrings();
            for (let i = 0, ii = index.count; i < ii; ++i) {
              const data = index.get(i);
              strings.add((0, _util.bytesToString)(data));
            }
            return strings;
          }
          createDict(Type, dict, strings) {
            const cffDict = new Type(strings);
            for (const [key, value] of dict) {
              cffDict.setByKey(key, value);
            }
            return cffDict;
          }
          parseCharString(state, data, localSubrIndex, globalSubrIndex) {
            if (!data || state.callDepth > MAX_SUBR_NESTING) {
              return false;
            }
            let stackSize = state.stackSize;
            const stack = state.stack;
            let length = data.length;
            for (let j = 0; j < length; ) {
              const value = data[j++];
              let validationCommand = null;
              if (value === 12) {
                const q = data[j++];
                if (q === 0) {
                  data[j - 2] = 139;
                  data[j - 1] = 22;
                  stackSize = 0;
                } else {
                  validationCommand = CharstringValidationData12[q];
                }
              } else if (value === 28) {
                stack[stackSize] =
                  ((data[j] << 24) | (data[j + 1] << 16)) >> 16;
                j += 2;
                stackSize++;
              } else if (value === 14) {
                if (stackSize >= 4) {
                  stackSize -= 4;
                  if (this.seacAnalysisEnabled) {
                    state.seac = stack.slice(stackSize, stackSize + 4);
                    return false;
                  }
                }
                validationCommand = CharstringValidationData[value];
              } else if (value >= 32 && value <= 246) {
                stack[stackSize] = value - 139;
                stackSize++;
              } else if (value >= 247 && value <= 254) {
                stack[stackSize] =
                  value < 251
                    ? ((value - 247) << 8) + data[j] + 108
                    : -((value - 251) << 8) - data[j] - 108;
                j++;
                stackSize++;
              } else if (value === 255) {
                stack[stackSize] =
                  ((data[j] << 24) |
                    (data[j + 1] << 16) |
                    (data[j + 2] << 8) |
                    data[j + 3]) /
                  65536;
                j += 4;
                stackSize++;
              } else if (value === 19 || value === 20) {
                state.hints += stackSize >> 1;
                if (state.hints === 0) {
                  data.copyWithin(j - 1, j, -1);
                  j -= 1;
                  length -= 1;
                  continue;
                }
                j += (state.hints + 7) >> 3;
                stackSize %= 2;
                validationCommand = CharstringValidationData[value];
              } else if (value === 10 || value === 29) {
                const subrsIndex =
                  value === 10 ? localSubrIndex : globalSubrIndex;
                if (!subrsIndex) {
                  validationCommand = CharstringValidationData[value];
                  (0, _util.warn)(
                    "Missing subrsIndex for " + validationCommand.id
                  );
                  return false;
                }
                let bias = 32768;
                if (subrsIndex.count < 1240) {
                  bias = 107;
                } else if (subrsIndex.count < 33900) {
                  bias = 1131;
                }
                const subrNumber = stack[--stackSize] + bias;
                if (
                  subrNumber < 0 ||
                  subrNumber >= subrsIndex.count ||
                  isNaN(subrNumber)
                ) {
                  validationCommand = CharstringValidationData[value];
                  (0, _util.warn)(
                    "Out of bounds subrIndex for " + validationCommand.id
                  );
                  return false;
                }
                state.stackSize = stackSize;
                state.callDepth++;
                const valid = this.parseCharString(
                  state,
                  subrsIndex.get(subrNumber),
                  localSubrIndex,
                  globalSubrIndex
                );
                if (!valid) {
                  return false;
                }
                state.callDepth--;
                stackSize = state.stackSize;
                continue;
              } else if (value === 11) {
                state.stackSize = stackSize;
                return true;
              } else if (value === 0 && j === data.length) {
                data[j - 1] = 14;
                validationCommand = CharstringValidationData[14];
              } else if (value === 9) {
                data.copyWithin(j - 1, j, -1);
                j -= 1;
                length -= 1;
                continue;
              } else {
                validationCommand = CharstringValidationData[value];
              }
              if (validationCommand) {
                if (validationCommand.stem) {
                  state.hints += stackSize >> 1;
                  if (value === 3 || value === 23) {
                    state.hasVStems = true;
                  } else if (state.hasVStems && (value === 1 || value === 18)) {
                    (0, _util.warn)("CFF stem hints are in wrong order");
                    data[j - 1] = value === 1 ? 3 : 23;
                  }
                }
                if ("min" in validationCommand) {
                  if (!state.undefStack && stackSize < validationCommand.min) {
                    (0, _util.warn)(
                      "Not enough parameters for " +
                        validationCommand.id +
                        "; actual: " +
                        stackSize +
                        ", expected: " +
                        validationCommand.min
                    );
                    if (stackSize === 0) {
                      data[j - 1] = 14;
                      return true;
                    }
                    return false;
                  }
                }
                if (
                  state.firstStackClearing &&
                  validationCommand.stackClearing
                ) {
                  state.firstStackClearing = false;
                  stackSize -= validationCommand.min;
                  if (stackSize >= 2 && validationCommand.stem) {
                    stackSize %= 2;
                  } else if (stackSize > 1) {
                    (0, _util.warn)(
                      "Found too many parameters for stack-clearing command"
                    );
                  }
                  if (stackSize > 0) {
                    state.width = stack[stackSize - 1];
                  }
                }
                if ("stackDelta" in validationCommand) {
                  if ("stackFn" in validationCommand) {
                    validationCommand.stackFn(stack, stackSize);
                  }
                  stackSize += validationCommand.stackDelta;
                } else if (validationCommand.stackClearing) {
                  stackSize = 0;
                } else if (validationCommand.resetStack) {
                  stackSize = 0;
                  state.undefStack = false;
                } else if (validationCommand.undefStack) {
                  stackSize = 0;
                  state.undefStack = true;
                  state.firstStackClearing = false;
                }
              }
            }
            if (length < data.length) {
              data.fill(14, length);
            }
            state.stackSize = stackSize;
            return true;
          }
          parseCharStrings({
            charStrings,
            localSubrIndex,
            globalSubrIndex,
            fdSelect,
            fdArray,
            privateDict,
          }) {
            const seacs = [];
            const widths = [];
            const count = charStrings.count;
            for (let i = 0; i < count; i++) {
              const charstring = charStrings.get(i);
              const state = {
                callDepth: 0,
                stackSize: 0,
                stack: [],
                undefStack: true,
                hints: 0,
                firstStackClearing: true,
                seac: null,
                width: null,
                hasVStems: false,
              };
              let valid = true;
              let localSubrToUse = null;
              let privateDictToUse = privateDict;
              if (fdSelect && fdArray.length) {
                const fdIndex = fdSelect.getFDIndex(i);
                if (fdIndex === -1) {
                  (0, _util.warn)("Glyph index is not in fd select.");
                  valid = false;
                }
                if (fdIndex >= fdArray.length) {
                  (0, _util.warn)("Invalid fd index for glyph index.");
                  valid = false;
                }
                if (valid) {
                  privateDictToUse = fdArray[fdIndex].privateDict;
                  localSubrToUse = privateDictToUse.subrsIndex;
                }
              } else if (localSubrIndex) {
                localSubrToUse = localSubrIndex;
              }
              if (valid) {
                valid = this.parseCharString(
                  state,
                  charstring,
                  localSubrToUse,
                  globalSubrIndex
                );
              }
              if (state.width !== null) {
                const nominalWidth =
                  privateDictToUse.getByName("nominalWidthX");
                widths[i] = nominalWidth + state.width;
              } else {
                const defaultWidth =
                  privateDictToUse.getByName("defaultWidthX");
                widths[i] = defaultWidth;
              }
              if (state.seac !== null) {
                seacs[i] = state.seac;
              }
              if (!valid) {
                charStrings.set(i, new Uint8Array([14]));
              }
            }
            return {
              charStrings,
              seacs,
              widths,
            };
          }
          emptyPrivateDictionary(parentDict) {
            const privateDict = this.createDict(
              CFFPrivateDict,
              [],
              parentDict.strings
            );
            parentDict.setByKey(18, [0, 0]);
            parentDict.privateDict = privateDict;
          }
          parsePrivateDict(parentDict) {
            if (!parentDict.hasName("Private")) {
              this.emptyPrivateDictionary(parentDict);
              return;
            }
            const privateOffset = parentDict.getByName("Private");
            if (!Array.isArray(privateOffset) || privateOffset.length !== 2) {
              parentDict.removeByName("Private");
              return;
            }
            const size = privateOffset[0];
            const offset = privateOffset[1];
            if (size === 0 || offset >= this.bytes.length) {
              this.emptyPrivateDictionary(parentDict);
              return;
            }
            const privateDictEnd = offset + size;
            const dictData = this.bytes.subarray(offset, privateDictEnd);
            const dict = this.parseDict(dictData);
            const privateDict = this.createDict(
              CFFPrivateDict,
              dict,
              parentDict.strings
            );
            parentDict.privateDict = privateDict;
            if (privateDict.getByName("ExpansionFactor") === 0) {
              privateDict.setByName("ExpansionFactor", 0.06);
            }
            if (!privateDict.getByName("Subrs")) {
              return;
            }
            const subrsOffset = privateDict.getByName("Subrs");
            const relativeOffset = offset + subrsOffset;
            if (subrsOffset === 0 || relativeOffset >= this.bytes.length) {
              this.emptyPrivateDictionary(parentDict);
              return;
            }
            const subrsIndex = this.parseIndex(relativeOffset);
            privateDict.subrsIndex = subrsIndex.obj;
          }
          parseCharsets(pos, length, strings, cid) {
            if (pos === 0) {
              return new CFFCharset(
                true,
                CFFCharsetPredefinedTypes.ISO_ADOBE,
                _charsets.ISOAdobeCharset
              );
            } else if (pos === 1) {
              return new CFFCharset(
                true,
                CFFCharsetPredefinedTypes.EXPERT,
                _charsets.ExpertCharset
              );
            } else if (pos === 2) {
              return new CFFCharset(
                true,
                CFFCharsetPredefinedTypes.EXPERT_SUBSET,
                _charsets.ExpertSubsetCharset
              );
            }
            const bytes = this.bytes;
            const start = pos;
            const format = bytes[pos++];
            const charset = [cid ? 0 : ".notdef"];
            let id, count, i;
            length -= 1;
            switch (format) {
              case 0:
                for (i = 0; i < length; i++) {
                  id = (bytes[pos++] << 8) | bytes[pos++];
                  charset.push(cid ? id : strings.get(id));
                }
                break;
              case 1:
                while (charset.length <= length) {
                  id = (bytes[pos++] << 8) | bytes[pos++];
                  count = bytes[pos++];
                  for (i = 0; i <= count; i++) {
                    charset.push(cid ? id++ : strings.get(id++));
                  }
                }
                break;
              case 2:
                while (charset.length <= length) {
                  id = (bytes[pos++] << 8) | bytes[pos++];
                  count = (bytes[pos++] << 8) | bytes[pos++];
                  for (i = 0; i <= count; i++) {
                    charset.push(cid ? id++ : strings.get(id++));
                  }
                }
                break;
              default:
                throw new _util.FormatError("Unknown charset format");
            }
            const end = pos;
            const raw = bytes.subarray(start, end);
            return new CFFCharset(false, format, charset, raw);
          }
          parseEncoding(pos, properties, strings, charset) {
            const encoding = Object.create(null);
            const bytes = this.bytes;
            let predefined = false;
            let format, i, ii;
            let raw = null;
            function readSupplement() {
              const supplementsCount = bytes[pos++];
              for (i = 0; i < supplementsCount; i++) {
                const code = bytes[pos++];
                const sid = (bytes[pos++] << 8) + (bytes[pos++] & 0xff);
                encoding[code] = charset.indexOf(strings.get(sid));
              }
            }
            if (pos === 0 || pos === 1) {
              predefined = true;
              format = pos;
              const baseEncoding = pos
                ? _encodings.ExpertEncoding
                : _encodings.StandardEncoding;
              for (i = 0, ii = charset.length; i < ii; i++) {
                const index = baseEncoding.indexOf(charset[i]);
                if (index !== -1) {
                  encoding[index] = i;
                }
              }
            } else {
              const dataStart = pos;
              format = bytes[pos++];
              switch (format & 0x7f) {
                case 0:
                  const glyphsCount = bytes[pos++];
                  for (i = 1; i <= glyphsCount; i++) {
                    encoding[bytes[pos++]] = i;
                  }
                  break;
                case 1:
                  const rangesCount = bytes[pos++];
                  let gid = 1;
                  for (i = 0; i < rangesCount; i++) {
                    const start = bytes[pos++];
                    const left = bytes[pos++];
                    for (let j = start; j <= start + left; j++) {
                      encoding[j] = gid++;
                    }
                  }
                  break;
                default:
                  throw new _util.FormatError(
                    `Unknown encoding format: ${format} in CFF`
                  );
              }
              const dataEnd = pos;
              if (format & 0x80) {
                bytes[dataStart] &= 0x7f;
                readSupplement();
              }
              raw = bytes.subarray(dataStart, dataEnd);
            }
            format &= 0x7f;
            return new CFFEncoding(predefined, format, encoding, raw);
          }
          parseFDSelect(pos, length) {
            const bytes = this.bytes;
            const format = bytes[pos++];
            const fdSelect = [];
            let i;
            switch (format) {
              case 0:
                for (i = 0; i < length; ++i) {
                  const id = bytes[pos++];
                  fdSelect.push(id);
                }
                break;
              case 3:
                const rangesCount = (bytes[pos++] << 8) | bytes[pos++];
                for (i = 0; i < rangesCount; ++i) {
                  let first = (bytes[pos++] << 8) | bytes[pos++];
                  if (i === 0 && first !== 0) {
                    (0, _util.warn)(
                      "parseFDSelect: The first range must have a first GID of 0" +
                        " -- trying to recover."
                    );
                    first = 0;
                  }
                  const fdIndex = bytes[pos++];
                  const next = (bytes[pos] << 8) | bytes[pos + 1];
                  for (let j = first; j < next; ++j) {
                    fdSelect.push(fdIndex);
                  }
                }
                pos += 2;
                break;
              default:
                throw new _util.FormatError(
                  `parseFDSelect: Unknown format "${format}".`
                );
            }
            if (fdSelect.length !== length) {
              throw new _util.FormatError("parseFDSelect: Invalid font data.");
            }
            return new CFFFDSelect(format, fdSelect);
          }
        }
        exports.CFFParser = CFFParser;
        class CFF {
          constructor() {
            this.header = null;
            this.names = [];
            this.topDict = null;
            this.strings = new CFFStrings();
            this.globalSubrIndex = null;
            this.encoding = null;
            this.charset = null;
            this.charStrings = null;
            this.fdArray = [];
            this.fdSelect = null;
            this.isCIDFont = false;
          }
          duplicateFirstGlyph() {
            if (this.charStrings.count >= 65535) {
              (0, _util.warn)(
                "Not enough space in charstrings to duplicate first glyph."
              );
              return;
            }
            const glyphZero = this.charStrings.get(0);
            this.charStrings.add(glyphZero);
            if (this.isCIDFont) {
              this.fdSelect.fdSelect.push(this.fdSelect.fdSelect[0]);
            }
          }
          hasGlyphId(id) {
            if (id < 0 || id >= this.charStrings.count) {
              return false;
            }
            const glyph = this.charStrings.get(id);
            return glyph.length > 0;
          }
        }
        exports.CFF = CFF;
        class CFFHeader {
          constructor(major, minor, hdrSize, offSize) {
            this.major = major;
            this.minor = minor;
            this.hdrSize = hdrSize;
            this.offSize = offSize;
          }
        }
        exports.CFFHeader = CFFHeader;
        class CFFStrings {
          constructor() {
            this.strings = [];
          }
          get(index) {
            if (index >= 0 && index <= NUM_STANDARD_CFF_STRINGS - 1) {
              return CFFStandardStrings[index];
            }
            if (index - NUM_STANDARD_CFF_STRINGS <= this.strings.length) {
              return this.strings[index - NUM_STANDARD_CFF_STRINGS];
            }
            return CFFStandardStrings[0];
          }
          getSID(str) {
            let index = CFFStandardStrings.indexOf(str);
            if (index !== -1) {
              return index;
            }
            index = this.strings.indexOf(str);
            if (index !== -1) {
              return index + NUM_STANDARD_CFF_STRINGS;
            }
            return -1;
          }
          add(value) {
            this.strings.push(value);
          }
          get count() {
            return this.strings.length;
          }
        }
        exports.CFFStrings = CFFStrings;
        class CFFIndex {
          constructor() {
            this.objects = [];
            this.length = 0;
          }
          add(data) {
            this.length += data.length;
            this.objects.push(data);
          }
          set(index, data) {
            this.length += data.length - this.objects[index].length;
            this.objects[index] = data;
          }
          get(index) {
            return this.objects[index];
          }
          get count() {
            return this.objects.length;
          }
        }
        exports.CFFIndex = CFFIndex;
        class CFFDict {
          constructor(tables, strings) {
            this.keyToNameMap = tables.keyToNameMap;
            this.nameToKeyMap = tables.nameToKeyMap;
            this.defaults = tables.defaults;
            this.types = tables.types;
            this.opcodes = tables.opcodes;
            this.order = tables.order;
            this.strings = strings;
            this.values = Object.create(null);
          }
          setByKey(key, value) {
            if (!(key in this.keyToNameMap)) {
              return false;
            }
            if (value.length === 0) {
              return true;
            }
            for (const val of value) {
              if (isNaN(val)) {
                (0, _util.warn)(
                  `Invalid CFFDict value: "${value}" for key "${key}".`
                );
                return true;
              }
            }
            const type = this.types[key];
            if (type === "num" || type === "sid" || type === "offset") {
              value = value[0];
            }
            this.values[key] = value;
            return true;
          }
          setByName(name, value) {
            if (!(name in this.nameToKeyMap)) {
              throw new _util.FormatError(`Invalid dictionary name "${name}"`);
            }
            this.values[this.nameToKeyMap[name]] = value;
          }
          hasName(name) {
            return this.nameToKeyMap[name] in this.values;
          }
          getByName(name) {
            if (!(name in this.nameToKeyMap)) {
              throw new _util.FormatError(`Invalid dictionary name ${name}"`);
            }
            const key = this.nameToKeyMap[name];
            if (!(key in this.values)) {
              return this.defaults[key];
            }
            return this.values[key];
          }
          removeByName(name) {
            delete this.values[this.nameToKeyMap[name]];
          }
          static createTables(layout) {
            const tables = {
              keyToNameMap: {},
              nameToKeyMap: {},
              defaults: {},
              types: {},
              opcodes: {},
              order: [],
            };
            for (const entry of layout) {
              const key = Array.isArray(entry[0])
                ? (entry[0][0] << 8) + entry[0][1]
                : entry[0];
              tables.keyToNameMap[key] = entry[1];
              tables.nameToKeyMap[entry[1]] = key;
              tables.types[key] = entry[2];
              tables.defaults[key] = entry[3];
              tables.opcodes[key] = Array.isArray(entry[0])
                ? entry[0]
                : [entry[0]];
              tables.order.push(key);
            }
            return tables;
          }
        }
        const CFFTopDictLayout = [
          [[12, 30], "ROS", ["sid", "sid", "num"], null],
          [[12, 20], "SyntheticBase", "num", null],
          [0, "version", "sid", null],
          [1, "Notice", "sid", null],
          [[12, 0], "Copyright", "sid", null],
          [2, "FullName", "sid", null],
          [3, "FamilyName", "sid", null],
          [4, "Weight", "sid", null],
          [[12, 1], "isFixedPitch", "num", 0],
          [[12, 2], "ItalicAngle", "num", 0],
          [[12, 3], "UnderlinePosition", "num", -100],
          [[12, 4], "UnderlineThickness", "num", 50],
          [[12, 5], "PaintType", "num", 0],
          [[12, 6], "CharstringType", "num", 2],
          [
            [12, 7],
            "FontMatrix",
            ["num", "num", "num", "num", "num", "num"],
            [0.001, 0, 0, 0.001, 0, 0],
          ],
          [13, "UniqueID", "num", null],
          [5, "FontBBox", ["num", "num", "num", "num"], [0, 0, 0, 0]],
          [[12, 8], "StrokeWidth", "num", 0],
          [14, "XUID", "array", null],
          [15, "charset", "offset", 0],
          [16, "Encoding", "offset", 0],
          [17, "CharStrings", "offset", 0],
          [18, "Private", ["offset", "offset"], null],
          [[12, 21], "PostScript", "sid", null],
          [[12, 22], "BaseFontName", "sid", null],
          [[12, 23], "BaseFontBlend", "delta", null],
          [[12, 31], "CIDFontVersion", "num", 0],
          [[12, 32], "CIDFontRevision", "num", 0],
          [[12, 33], "CIDFontType", "num", 0],
          [[12, 34], "CIDCount", "num", 8720],
          [[12, 35], "UIDBase", "num", null],
          [[12, 37], "FDSelect", "offset", null],
          [[12, 36], "FDArray", "offset", null],
          [[12, 38], "FontName", "sid", null],
        ];
        class CFFTopDict extends CFFDict {
          static get tables() {
            return (0, _util.shadow)(
              this,
              "tables",
              this.createTables(CFFTopDictLayout)
            );
          }
          constructor(strings) {
            super(CFFTopDict.tables, strings);
            this.privateDict = null;
          }
        }
        exports.CFFTopDict = CFFTopDict;
        const CFFPrivateDictLayout = [
          [6, "BlueValues", "delta", null],
          [7, "OtherBlues", "delta", null],
          [8, "FamilyBlues", "delta", null],
          [9, "FamilyOtherBlues", "delta", null],
          [[12, 9], "BlueScale", "num", 0.039625],
          [[12, 10], "BlueShift", "num", 7],
          [[12, 11], "BlueFuzz", "num", 1],
          [10, "StdHW", "num", null],
          [11, "StdVW", "num", null],
          [[12, 12], "StemSnapH", "delta", null],
          [[12, 13], "StemSnapV", "delta", null],
          [[12, 14], "ForceBold", "num", 0],
          [[12, 17], "LanguageGroup", "num", 0],
          [[12, 18], "ExpansionFactor", "num", 0.06],
          [[12, 19], "initialRandomSeed", "num", 0],
          [20, "defaultWidthX", "num", 0],
          [21, "nominalWidthX", "num", 0],
          [19, "Subrs", "offset", null],
        ];
        class CFFPrivateDict extends CFFDict {
          static get tables() {
            return (0, _util.shadow)(
              this,
              "tables",
              this.createTables(CFFPrivateDictLayout)
            );
          }
          constructor(strings) {
            super(CFFPrivateDict.tables, strings);
            this.subrsIndex = null;
          }
        }
        exports.CFFPrivateDict = CFFPrivateDict;
        const CFFCharsetPredefinedTypes = {
          ISO_ADOBE: 0,
          EXPERT: 1,
          EXPERT_SUBSET: 2,
        };
        class CFFCharset {
          constructor(predefined, format, charset, raw) {
            this.predefined = predefined;
            this.format = format;
            this.charset = charset;
            this.raw = raw;
          }
        }
        exports.CFFCharset = CFFCharset;
        class CFFEncoding {
          constructor(predefined, format, encoding, raw) {
            this.predefined = predefined;
            this.format = format;
            this.encoding = encoding;
            this.raw = raw;
          }
        }
        class CFFFDSelect {
          constructor(format, fdSelect) {
            this.format = format;
            this.fdSelect = fdSelect;
          }
          getFDIndex(glyphIndex) {
            if (glyphIndex < 0 || glyphIndex >= this.fdSelect.length) {
              return -1;
            }
            return this.fdSelect[glyphIndex];
          }
        }
        exports.CFFFDSelect = CFFFDSelect;
        class CFFOffsetTracker {
          constructor() {
            this.offsets = Object.create(null);
          }
          isTracking(key) {
            return key in this.offsets;
          }
          track(key, location) {
            if (key in this.offsets) {
              throw new _util.FormatError(
                `Already tracking location of ${key}`
              );
            }
            this.offsets[key] = location;
          }
          offset(value) {
            for (const key in this.offsets) {
              this.offsets[key] += value;
            }
          }
          setEntryLocation(key, values, output) {
            if (!(key in this.offsets)) {
              throw new _util.FormatError(`Not tracking location of ${key}`);
            }
            const data = output.data;
            const dataOffset = this.offsets[key];
            const size = 5;
            for (let i = 0, ii = values.length; i < ii; ++i) {
              const offset0 = i * size + dataOffset;
              const offset1 = offset0 + 1;
              const offset2 = offset0 + 2;
              const offset3 = offset0 + 3;
              const offset4 = offset0 + 4;
              if (
                data[offset0] !== 0x1d ||
                data[offset1] !== 0 ||
                data[offset2] !== 0 ||
                data[offset3] !== 0 ||
                data[offset4] !== 0
              ) {
                throw new _util.FormatError(
                  "writing to an offset that is not empty"
                );
              }
              const value = values[i];
              data[offset0] = 0x1d;
              data[offset1] = (value >> 24) & 0xff;
              data[offset2] = (value >> 16) & 0xff;
              data[offset3] = (value >> 8) & 0xff;
              data[offset4] = value & 0xff;
            }
          }
        }
        class CFFCompiler {
          constructor(cff) {
            this.cff = cff;
          }
          compile() {
            const cff = this.cff;
            const output = {
              data: [],
              length: 0,
              add(data) {
                try {
                  this.data.push(...data);
                } catch {
                  this.data = this.data.concat(data);
                }
                this.length = this.data.length;
              },
            };
            const header = this.compileHeader(cff.header);
            output.add(header);
            const nameIndex = this.compileNameIndex(cff.names);
            output.add(nameIndex);
            if (cff.isCIDFont) {
              if (cff.topDict.hasName("FontMatrix")) {
                const base = cff.topDict.getByName("FontMatrix");
                cff.topDict.removeByName("FontMatrix");
                for (const subDict of cff.fdArray) {
                  let matrix = base.slice(0);
                  if (subDict.hasName("FontMatrix")) {
                    matrix = _util.Util.transform(
                      matrix,
                      subDict.getByName("FontMatrix")
                    );
                  }
                  subDict.setByName("FontMatrix", matrix);
                }
              }
            }
            const xuid = cff.topDict.getByName("XUID");
            if (xuid?.length > 16) {
              cff.topDict.removeByName("XUID");
            }
            cff.topDict.setByName("charset", 0);
            let compiled = this.compileTopDicts(
              [cff.topDict],
              output.length,
              cff.isCIDFont
            );
            output.add(compiled.output);
            const topDictTracker = compiled.trackers[0];
            const stringIndex = this.compileStringIndex(cff.strings.strings);
            output.add(stringIndex);
            const globalSubrIndex = this.compileIndex(cff.globalSubrIndex);
            output.add(globalSubrIndex);
            if (cff.encoding && cff.topDict.hasName("Encoding")) {
              if (cff.encoding.predefined) {
                topDictTracker.setEntryLocation(
                  "Encoding",
                  [cff.encoding.format],
                  output
                );
              } else {
                const encoding = this.compileEncoding(cff.encoding);
                topDictTracker.setEntryLocation(
                  "Encoding",
                  [output.length],
                  output
                );
                output.add(encoding);
              }
            }
            const charset = this.compileCharset(
              cff.charset,
              cff.charStrings.count,
              cff.strings,
              cff.isCIDFont
            );
            topDictTracker.setEntryLocation("charset", [output.length], output);
            output.add(charset);
            const charStrings = this.compileCharStrings(cff.charStrings);
            topDictTracker.setEntryLocation(
              "CharStrings",
              [output.length],
              output
            );
            output.add(charStrings);
            if (cff.isCIDFont) {
              topDictTracker.setEntryLocation(
                "FDSelect",
                [output.length],
                output
              );
              const fdSelect = this.compileFDSelect(cff.fdSelect);
              output.add(fdSelect);
              compiled = this.compileTopDicts(cff.fdArray, output.length, true);
              topDictTracker.setEntryLocation(
                "FDArray",
                [output.length],
                output
              );
              output.add(compiled.output);
              const fontDictTrackers = compiled.trackers;
              this.compilePrivateDicts(cff.fdArray, fontDictTrackers, output);
            }
            this.compilePrivateDicts([cff.topDict], [topDictTracker], output);
            output.add([0]);
            return output.data;
          }
          encodeNumber(value) {
            if (Number.isInteger(value)) {
              return this.encodeInteger(value);
            }
            return this.encodeFloat(value);
          }
          static get EncodeFloatRegExp() {
            return (0, _util.shadow)(
              this,
              "EncodeFloatRegExp",
              /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/
            );
          }
          encodeFloat(num) {
            let value = num.toString();
            const m = CFFCompiler.EncodeFloatRegExp.exec(value);
            if (m) {
              const epsilon = parseFloat(
                "1e" + ((m[2] ? +m[2] : 0) + m[1].length)
              );
              value = (Math.round(num * epsilon) / epsilon).toString();
            }
            let nibbles = "";
            let i, ii;
            for (i = 0, ii = value.length; i < ii; ++i) {
              const a = value[i];
              if (a === "e") {
                nibbles += value[++i] === "-" ? "c" : "b";
              } else if (a === ".") {
                nibbles += "a";
              } else if (a === "-") {
                nibbles += "e";
              } else {
                nibbles += a;
              }
            }
            nibbles += nibbles.length & 1 ? "f" : "ff";
            const out = [30];
            for (i = 0, ii = nibbles.length; i < ii; i += 2) {
              out.push(parseInt(nibbles.substring(i, i + 2), 16));
            }
            return out;
          }
          encodeInteger(value) {
            let code;
            if (value >= -107 && value <= 107) {
              code = [value + 139];
            } else if (value >= 108 && value <= 1131) {
              value -= 108;
              code = [(value >> 8) + 247, value & 0xff];
            } else if (value >= -1131 && value <= -108) {
              value = -value - 108;
              code = [(value >> 8) + 251, value & 0xff];
            } else if (value >= -32768 && value <= 32767) {
              code = [0x1c, (value >> 8) & 0xff, value & 0xff];
            } else {
              code = [
                0x1d,
                (value >> 24) & 0xff,
                (value >> 16) & 0xff,
                (value >> 8) & 0xff,
                value & 0xff,
              ];
            }
            return code;
          }
          compileHeader(header) {
            return [header.major, header.minor, 4, header.offSize];
          }
          compileNameIndex(names) {
            const nameIndex = new CFFIndex();
            for (const name of names) {
              const length = Math.min(name.length, 127);
              let sanitizedName = new Array(length);
              for (let j = 0; j < length; j++) {
                let char = name[j];
                if (
                  char < "!" ||
                  char > "~" ||
                  char === "[" ||
                  char === "]" ||
                  char === "(" ||
                  char === ")" ||
                  char === "{" ||
                  char === "}" ||
                  char === "<" ||
                  char === ">" ||
                  char === "/" ||
                  char === "%"
                ) {
                  char = "_";
                }
                sanitizedName[j] = char;
              }
              sanitizedName = sanitizedName.join("");
              if (sanitizedName === "") {
                sanitizedName = "Bad_Font_Name";
              }
              nameIndex.add((0, _util.stringToBytes)(sanitizedName));
            }
            return this.compileIndex(nameIndex);
          }
          compileTopDicts(dicts, length, removeCidKeys) {
            const fontDictTrackers = [];
            let fdArrayIndex = new CFFIndex();
            for (const fontDict of dicts) {
              if (removeCidKeys) {
                fontDict.removeByName("CIDFontVersion");
                fontDict.removeByName("CIDFontRevision");
                fontDict.removeByName("CIDFontType");
                fontDict.removeByName("CIDCount");
                fontDict.removeByName("UIDBase");
              }
              const fontDictTracker = new CFFOffsetTracker();
              const fontDictData = this.compileDict(fontDict, fontDictTracker);
              fontDictTrackers.push(fontDictTracker);
              fdArrayIndex.add(fontDictData);
              fontDictTracker.offset(length);
            }
            fdArrayIndex = this.compileIndex(fdArrayIndex, fontDictTrackers);
            return {
              trackers: fontDictTrackers,
              output: fdArrayIndex,
            };
          }
          compilePrivateDicts(dicts, trackers, output) {
            for (let i = 0, ii = dicts.length; i < ii; ++i) {
              const fontDict = dicts[i];
              const privateDict = fontDict.privateDict;
              if (!privateDict || !fontDict.hasName("Private")) {
                throw new _util.FormatError(
                  "There must be a private dictionary."
                );
              }
              const privateDictTracker = new CFFOffsetTracker();
              const privateDictData = this.compileDict(
                privateDict,
                privateDictTracker
              );
              let outputLength = output.length;
              privateDictTracker.offset(outputLength);
              if (!privateDictData.length) {
                outputLength = 0;
              }
              trackers[i].setEntryLocation(
                "Private",
                [privateDictData.length, outputLength],
                output
              );
              output.add(privateDictData);
              if (privateDict.subrsIndex && privateDict.hasName("Subrs")) {
                const subrs = this.compileIndex(privateDict.subrsIndex);
                privateDictTracker.setEntryLocation(
                  "Subrs",
                  [privateDictData.length],
                  output
                );
                output.add(subrs);
              }
            }
          }
          compileDict(dict, offsetTracker) {
            const out = [];
            for (const key of dict.order) {
              if (!(key in dict.values)) {
                continue;
              }
              let values = dict.values[key];
              let types = dict.types[key];
              if (!Array.isArray(types)) {
                types = [types];
              }
              if (!Array.isArray(values)) {
                values = [values];
              }
              if (values.length === 0) {
                continue;
              }
              for (let j = 0, jj = types.length; j < jj; ++j) {
                const type = types[j];
                const value = values[j];
                switch (type) {
                  case "num":
                  case "sid":
                    out.push(...this.encodeNumber(value));
                    break;
                  case "offset":
                    const name = dict.keyToNameMap[key];
                    if (!offsetTracker.isTracking(name)) {
                      offsetTracker.track(name, out.length);
                    }
                    out.push(0x1d, 0, 0, 0, 0);
                    break;
                  case "array":
                  case "delta":
                    out.push(...this.encodeNumber(value));
                    for (let k = 1, kk = values.length; k < kk; ++k) {
                      out.push(...this.encodeNumber(values[k]));
                    }
                    break;
                  default:
                    throw new _util.FormatError(`Unknown data type of ${type}`);
                }
              }
              out.push(...dict.opcodes[key]);
            }
            return out;
          }
          compileStringIndex(strings) {
            const stringIndex = new CFFIndex();
            for (const string of strings) {
              stringIndex.add((0, _util.stringToBytes)(string));
            }
            return this.compileIndex(stringIndex);
          }
          compileCharStrings(charStrings) {
            const charStringsIndex = new CFFIndex();
            for (let i = 0; i < charStrings.count; i++) {
              const glyph = charStrings.get(i);
              if (glyph.length === 0) {
                charStringsIndex.add(new Uint8Array([0x8b, 0x0e]));
                continue;
              }
              charStringsIndex.add(glyph);
            }
            return this.compileIndex(charStringsIndex);
          }
          compileCharset(charset, numGlyphs, strings, isCIDFont) {
            let out;
            const numGlyphsLessNotDef = numGlyphs - 1;
            if (isCIDFont) {
              out = new Uint8Array([
                2,
                0,
                0,
                (numGlyphsLessNotDef >> 8) & 0xff,
                numGlyphsLessNotDef & 0xff,
              ]);
            } else {
              const length = 1 + numGlyphsLessNotDef * 2;
              out = new Uint8Array(length);
              out[0] = 0;
              let charsetIndex = 0;
              const numCharsets = charset.charset.length;
              let warned = false;
              for (let i = 1; i < out.length; i += 2) {
                let sid = 0;
                if (charsetIndex < numCharsets) {
                  const name = charset.charset[charsetIndex++];
                  sid = strings.getSID(name);
                  if (sid === -1) {
                    sid = 0;
                    if (!warned) {
                      warned = true;
                      (0, _util.warn)(`Couldn't find ${name} in CFF strings`);
                    }
                  }
                }
                out[i] = (sid >> 8) & 0xff;
                out[i + 1] = sid & 0xff;
              }
            }
            return this.compileTypedArray(out);
          }
          compileEncoding(encoding) {
            return this.compileTypedArray(encoding.raw);
          }
          compileFDSelect(fdSelect) {
            const format = fdSelect.format;
            let out, i;
            switch (format) {
              case 0:
                out = new Uint8Array(1 + fdSelect.fdSelect.length);
                out[0] = format;
                for (i = 0; i < fdSelect.fdSelect.length; i++) {
                  out[i + 1] = fdSelect.fdSelect[i];
                }
                break;
              case 3:
                const start = 0;
                let lastFD = fdSelect.fdSelect[0];
                const ranges = [
                  format,
                  0,
                  0,
                  (start >> 8) & 0xff,
                  start & 0xff,
                  lastFD,
                ];
                for (i = 1; i < fdSelect.fdSelect.length; i++) {
                  const currentFD = fdSelect.fdSelect[i];
                  if (currentFD !== lastFD) {
                    ranges.push((i >> 8) & 0xff, i & 0xff, currentFD);
                    lastFD = currentFD;
                  }
                }
                const numRanges = (ranges.length - 3) / 3;
                ranges[1] = (numRanges >> 8) & 0xff;
                ranges[2] = numRanges & 0xff;
                ranges.push((i >> 8) & 0xff, i & 0xff);
                out = new Uint8Array(ranges);
                break;
            }
            return this.compileTypedArray(out);
          }
          compileTypedArray(data) {
            return Array.from(data);
          }
          compileIndex(index, trackers = []) {
            const objects = index.objects;
            const count = objects.length;
            if (count === 0) {
              return [0, 0];
            }
            const data = [(count >> 8) & 0xff, count & 0xff];
            let lastOffset = 1,
              i;
            for (i = 0; i < count; ++i) {
              lastOffset += objects[i].length;
            }
            let offsetSize;
            if (lastOffset < 0x100) {
              offsetSize = 1;
            } else if (lastOffset < 0x10000) {
              offsetSize = 2;
            } else if (lastOffset < 0x1000000) {
              offsetSize = 3;
            } else {
              offsetSize = 4;
            }
            data.push(offsetSize);
            let relativeOffset = 1;
            for (i = 0; i < count + 1; i++) {
              if (offsetSize === 1) {
                data.push(relativeOffset & 0xff);
              } else if (offsetSize === 2) {
                data.push((relativeOffset >> 8) & 0xff, relativeOffset & 0xff);
              } else if (offsetSize === 3) {
                data.push(
                  (relativeOffset >> 16) & 0xff,
                  (relativeOffset >> 8) & 0xff,
                  relativeOffset & 0xff
                );
              } else {
                data.push(
                  (relativeOffset >>> 24) & 0xff,
                  (relativeOffset >> 16) & 0xff,
                  (relativeOffset >> 8) & 0xff,
                  relativeOffset & 0xff
                );
              }
              if (objects[i]) {
                relativeOffset += objects[i].length;
              }
            }
            for (i = 0; i < count; i++) {
              if (trackers[i]) {
                trackers[i].offset(data.length);
              }
              data.push(...objects[i]);
            }
            return data;
          }
        }
        exports.CFFCompiler = CFFCompiler;

        /***/
      },
      /* 36 */
      /***/ (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.ISOAdobeCharset =
          exports.ExpertSubsetCharset =
          exports.ExpertCharset =
            void 0;
        const ISOAdobeCharset = [
          ".notdef",
          "space",
          "exclam",
          "quotedbl",
          "numbersign",
          "dollar",
          "percent",
          "ampersand",
          "quoteright",
          "parenleft",
          "parenright",
          "asterisk",
          "plus",
          "comma",
          "hyphen",
          "period",
          "slash",
          "zero",
          "one",
          "two",
          "three",
          "four",
          "five",
          "six",
          "seven",
          "eight",
          "nine",
          "colon",
          "semicolon",
          "less",
          "equal",
          "greater",
          "question",
          "at",
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "H",
          "I",
          "J",
          "K",
          "L",
          "M",
          "N",
          "O",
          "P",
          "Q",
          "R",
          "S",
          "T",
          "U",
          "V",
          "W",
          "X",
          "Y",
          "Z",
          "bracketleft",
          "backslash",
          "bracketright",
          "asciicircum",
          "underscore",
          "quoteleft",
          "a",
          "b",
          "c",
          "d",
          "e",
          "f",
          "g",
          "h",
          "i",
          "j",
          "k",
          "l",
          "m",
          "n",
          "o",
          "p",
          "q",
          "r",
          "s",
          "t",
          "u",
          "v",
          "w",
          "x",
          "y",
          "z",
          "braceleft",
          "bar",
          "braceright",
          "asciitilde",
          "exclamdown",
          "cent",
          "sterling",
          "fraction",
          "yen",
          "florin",
          "section",
          "currency",
          "quotesingle",
          "quotedblleft",
          "guillemotleft",
          "guilsinglleft",
          "guilsinglright",
          "fi",
          "fl",
          "endash",
          "dagger",
          "daggerdbl",
          "periodcentered",
          "paragraph",
          "bullet",
          "quotesinglbase",
          "quotedblbase",
          "quotedblright",
          "guillemotright",
          "ellipsis",
          "perthousand",
          "questiondown",
          "grave",
          "acute",
          "circumflex",
          "tilde",
          "macron",
          "breve",
          "dotaccent",
          "dieresis",
          "ring",
          "cedilla",
          "hungarumlaut",
          "ogonek",
          "caron",
          "emdash",
          "AE",
          "ordfeminine",
          "Lslash",
          "Oslash",
          "OE",
          "ordmasculine",
          "ae",
          "dotlessi",
          "lslash",
          "oslash",
          "oe",
          "germandbls",
          "onesuperior",
          "logicalnot",
          "mu",
          "trademark",
          "Eth",
          "onehalf",
          "plusminus",
          "Thorn",
          "onequarter",
          "divide",
          "brokenbar",
          "degree",
          "thorn",
          "threequarters",
          "twosuperior",
          "registered",
          "minus",
          "eth",
          "multiply",
          "threesuperior",
          "copyright",
          "Aacute",
          "Acircumflex",
          "Adieresis",
          "Agrave",
          "Aring",
          "Atilde",
          "Ccedilla",
          "Eacute",
          "Ecircumflex",
          "Edieresis",
          "Egrave",
          "Iacute",
          "Icircumflex",
          "Idieresis",
          "Igrave",
          "Ntilde",
          "Oacute",
          "Ocircumflex",
          "Odieresis",
          "Ograve",
          "Otilde",
          "Scaron",
          "Uacute",
          "Ucircumflex",
          "Udieresis",
          "Ugrave",
          "Yacute",
          "Ydieresis",
          "Zcaron",
          "aacute",
          "acircumflex",
          "adieresis",
          "agrave",
          "aring",
          "atilde",
          "ccedilla",
          "eacute",
          "ecircumflex",
          "edieresis",
          "egrave",
          "iacute",
          "icircumflex",
          "idieresis",
          "igrave",
          "ntilde",
          "oacute",
          "ocircumflex",
          "odieresis",
          "ograve",
          "otilde",
          "scaron",
          "uacute",
          "ucircumflex",
          "udieresis",
          "ugrave",
          "yacute",
          "ydieresis",
          "zcaron",
        ];
        exports.ISOAdobeCharset = ISOAdobeCharset;
        const ExpertCharset = [
          ".notdef",
          "space",
          "exclamsmall",
          "Hungarumlautsmall",
          "dollaroldstyle",
          "dollarsuperior",
          "ampersandsmall",
          "Acutesmall",
          "parenleftsuperior",
          "parenrightsuperior",
          "twodotenleader",
          "onedotenleader",
          "comma",
          "hyphen",
          "period",
          "fraction",
          "zerooldstyle",
          "oneoldstyle",
          "twooldstyle",
          "threeoldstyle",
          "fouroldstyle",
          "fiveoldstyle",
          "sixoldstyle",
          "sevenoldstyle",
          "eightoldstyle",
          "nineoldstyle",
          "colon",
          "semicolon",
          "commasuperior",
          "threequartersemdash",
          "periodsuperior",
          "questionsmall",
          "asuperior",
          "bsuperior",
          "centsuperior",
          "dsuperior",
          "esuperior",
          "isuperior",
          "lsuperior",
          "msuperior",
          "nsuperior",
          "osuperior",
          "rsuperior",
          "ssuperior",
          "tsuperior",
          "ff",
          "fi",
          "fl",
          "ffi",
          "ffl",
          "parenleftinferior",
          "parenrightinferior",
          "Circumflexsmall",
          "hyphensuperior",
          "Gravesmall",
          "Asmall",
          "Bsmall",
          "Csmall",
          "Dsmall",
          "Esmall",
          "Fsmall",
          "Gsmall",
          "Hsmall",
          "Ismall",
          "Jsmall",
          "Ksmall",
          "Lsmall",
          "Msmall",
          "Nsmall",
          "Osmall",
          "Psmall",
          "Qsmall",
          "Rsmall",
          "Ssmall",
          "Tsmall",
          "Usmall",
          "Vsmall",
          "Wsmall",
          "Xsmall",
          "Ysmall",
          "Zsmall",
          "colonmonetary",
          "onefitted",
          "rupiah",
          "Tildesmall",
          "exclamdownsmall",
          "centoldstyle",
          "Lslashsmall",
          "Scaronsmall",
          "Zcaronsmall",
          "Dieresissmall",
          "Brevesmall",
          "Caronsmall",
          "Dotaccentsmall",
          "Macronsmall",
          "figuredash",
          "hypheninferior",
          "Ogoneksmall",
          "Ringsmall",
          "Cedillasmall",
          "onequarter",
          "onehalf",
          "threequarters",
          "questiondownsmall",
          "oneeighth",
          "threeeighths",
          "fiveeighths",
          "seveneighths",
          "onethird",
          "twothirds",
          "zerosuperior",
          "onesuperior",
          "twosuperior",
          "threesuperior",
          "foursuperior",
          "fivesuperior",
          "sixsuperior",
          "sevensuperior",
          "eightsuperior",
          "ninesuperior",
          "zeroinferior",
          "oneinferior",
          "twoinferior",
          "threeinferior",
          "fourinferior",
          "fiveinferior",
          "sixinferior",
          "seveninferior",
          "eightinferior",
          "nineinferior",
          "centinferior",
          "dollarinferior",
          "periodinferior",
          "commainferior",
          "Agravesmall",
          "Aacutesmall",
          "Acircumflexsmall",
          "Atildesmall",
          "Adieresissmall",
          "Aringsmall",
          "AEsmall",
          "Ccedillasmall",
          "Egravesmall",
          "Eacutesmall",
          "Ecircumflexsmall",
          "Edieresissmall",
          "Igravesmall",
          "Iacutesmall",
          "Icircumflexsmall",
          "Idieresissmall",
          "Ethsmall",
          "Ntildesmall",
          "Ogravesmall",
          "Oacutesmall",
          "Ocircumflexsmall",
          "Otildesmall",
          "Odieresissmall",
          "OEsmall",
          "Oslashsmall",
          "Ugravesmall",
          "Uacutesmall",
          "Ucircumflexsmall",
          "Udieresissmall",
          "Yacutesmall",
          "Thornsmall",
          "Ydieresissmall",
        ];
        exports.ExpertCharset = ExpertCharset;
        const ExpertSubsetCharset = [
          ".notdef",
          "space",
          "dollaroldstyle",
          "dollarsuperior",
          "parenleftsuperior",
          "parenrightsuperior",
          "twodotenleader",
          "onedotenleader",
          "comma",
          "hyphen",
          "period",
          "fraction",
          "zerooldstyle",
          "oneoldstyle",
          "twooldstyle",
          "threeoldstyle",
          "fouroldstyle",
          "fiveoldstyle",
          "sixoldstyle",
          "sevenoldstyle",
          "eightoldstyle",
          "nineoldstyle",
          "colon",
          "semicolon",
          "commasuperior",
          "threequartersemdash",
          "periodsuperior",
          "asuperior",
          "bsuperior",
          "centsuperior",
          "dsuperior",
          "esuperior",
          "isuperior",
          "lsuperior",
          "msuperior",
          "nsuperior",
          "osuperior",
          "rsuperior",
          "ssuperior",
          "tsuperior",
          "ff",
          "fi",
          "fl",
          "ffi",
          "ffl",
          "parenleftinferior",
          "parenrightinferior",
          "hyphensuperior",
          "colonmonetary",
          "onefitted",
          "rupiah",
          "centoldstyle",
          "figuredash",
          "hypheninferior",
          "onequarter",
          "onehalf",
          "threequarters",
          "oneeighth",
          "threeeighths",
          "fiveeighths",
          "seveneighths",
          "onethird",
          "twothirds",
          "zerosuperior",
          "onesuperior",
          "twosuperior",
          "threesuperior",
          "foursuperior",
          "fivesuperior",
          "sixsuperior",
          "sevensuperior",
          "eightsuperior",
          "ninesuperior",
          "zeroinferior",
          "oneinferior",
          "twoinferior",
          "threeinferior",
          "fourinferior",
          "fiveinferior",
          "sixinferior",
          "seveninferior",
          "eightinferior",
          "nineinferior",
          "centinferior",
          "dollarinferior",
          "periodinferior",
          "commainferior",
        ];
        exports.ExpertSubsetCharset = ExpertSubsetCharset;

        /***/
      },
      /* 37 */
      /***/ (__unused_webpack_module, exports) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.ZapfDingbatsEncoding =
          exports.WinAnsiEncoding =
          exports.SymbolSetEncoding =
          exports.StandardEncoding =
          exports.MacRomanEncoding =
          exports.ExpertEncoding =
            void 0;
        exports.getEncoding = getEncoding;
        const ExpertEncoding = [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "space",
          "exclamsmall",
          "Hungarumlautsmall",
          "",
          "dollaroldstyle",
          "dollarsuperior",
          "ampersandsmall",
          "Acutesmall",
          "parenleftsuperior",
          "parenrightsuperior",
          "twodotenleader",
          "onedotenleader",
          "comma",
          "hyphen",
          "period",
          "fraction",
          "zerooldstyle",
          "oneoldstyle",
          "twooldstyle",
          "threeoldstyle",
          "fouroldstyle",
          "fiveoldstyle",
          "sixoldstyle",
          "sevenoldstyle",
          "eightoldstyle",
          "nineoldstyle",
          "colon",
          "semicolon",
          "commasuperior",
          "threequartersemdash",
          "periodsuperior",
          "questionsmall",
          "",
          "asuperior",
          "bsuperior",
          "centsuperior",
          "dsuperior",
          "esuperior",
          "",
          "",
          "",
          "isuperior",
          "",
          "",
          "lsuperior",
          "msuperior",
          "nsuperior",
          "osuperior",
          "",
          "",
          "rsuperior",
          "ssuperior",
          "tsuperior",
          "",
          "ff",
          "fi",
          "fl",
          "ffi",
          "ffl",
          "parenleftinferior",
          "",
          "parenrightinferior",
          "Circumflexsmall",
          "hyphensuperior",
          "Gravesmall",
          "Asmall",
          "Bsmall",
          "Csmall",
          "Dsmall",
          "Esmall",
          "Fsmall",
          "Gsmall",
          "Hsmall",
          "Ismall",
          "Jsmall",
          "Ksmall",
          "Lsmall",
          "Msmall",
          "Nsmall",
          "Osmall",
          "Psmall",
          "Qsmall",
          "Rsmall",
          "Ssmall",
          "Tsmall",
          "Usmall",
          "Vsmall",
          "Wsmall",
          "Xsmall",
          "Ysmall",
          "Zsmall",
          "colonmonetary",
          "onefitted",
          "rupiah",
          "Tildesmall",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "exclamdownsmall",
          "centoldstyle",
          "Lslashsmall",
          "",
          "",
          "Scaronsmall",
          "Zcaronsmall",
          "Dieresissmall",
          "Brevesmall",
          "Caronsmall",
          "",
          "Dotaccentsmall",
          "",
          "",
          "Macronsmall",
          "",
          "",
          "figuredash",
          "hypheninferior",
          "",
          "",
          "Ogoneksmall",
          "Ringsmall",
          "Cedillasmall",
          "",
          "",
          "",
          "onequarter",
          "onehalf",
          "threequarters",
          "questiondownsmall",
          "oneeighth",
          "threeeighths",
          "fiveeighths",
          "seveneighths",
          "onethird",
          "twothirds",
          "",
          "",
          "zerosuperior",
          "onesuperior",
          "twosuperior",
          "threesuperior",
          "foursuperior",
          "fivesuperior",
          "sixsuperior",
          "sevensuperior",
          "eightsuperior",
          "ninesuperior",
          "zeroinferior",
          "oneinferior",
          "twoinferior",
          "threeinferior",
          "fourinferior",
          "fiveinferior",
          "sixinferior",
          "seveninferior",
          "eightinferior",
          "nineinferior",
          "centinferior",
          "dollarinferior",
          "periodinferior",
          "commainferior",
          "Agravesmall",
          "Aacutesmall",
          "Acircumflexsmall",
          "Atildesmall",
          "Adieresissmall",
          "Aringsmall",
          "AEsmall",
          "Ccedillasmall",
          "Egravesmall",
          "Eacutesmall",
          "Ecircumflexsmall",
          "Edieresissmall",
          "Igravesmall",
          "Iacutesmall",
          "Icircumflexsmall",
          "Idieresissmall",
          "Ethsmall",
          "Ntildesmall",
          "Ogravesmall",
          "Oacutesmall",
          "Ocircumflexsmall",
          "Otildesmall",
          "Odieresissmall",
          "OEsmall",
          "Oslashsmall",
          "Ugravesmall",
          "Uacutesmall",
          "Ucircumflexsmall",
          "Udieresissmall",
          "Yacutesmall",
          "Thornsmall",
          "Ydieresissmall",
        ];
        exports.ExpertEncoding = ExpertEncoding;
        const MacExpertEncoding = [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "space",
          "exclamsmall",
          "Hungarumlautsmall",
          "centoldstyle",
          "dollaroldstyle",
          "dollarsuperior",
          "ampersandsmall",
          "Acutesmall",
          "parenleftsuperior",
          "parenrightsuperior",
          "twodotenleader",
          "onedotenleader",
          "comma",
          "hyphen",
          "period",
          "fraction",
          "zerooldstyle",
          "oneoldstyle",
          "twooldstyle",
          "threeoldstyle",
          "fouroldstyle",
          "fiveoldstyle",
          "sixoldstyle",
          "sevenoldstyle",
          "eightoldstyle",
          "nineoldstyle",
          "colon",
          "semicolon",
          "",
          "threequartersemdash",
          "",
          "questionsmall",
          "",
          "",
          "",
          "",
          "Ethsmall",
          "",
          "",
          "onequarter",
          "onehalf",
          "threequarters",
          "oneeighth",
          "threeeighths",
          "fiveeighths",
          "seveneighths",
          "onethird",
          "twothirds",
          "",
          "",
          "",
          "",
          "",
          "",
          "ff",
          "fi",
          "fl",
          "ffi",
          "ffl",
          "parenleftinferior",
          "",
          "parenrightinferior",
          "Circumflexsmall",
          "hypheninferior",
          "Gravesmall",
          "Asmall",
          "Bsmall",
          "Csmall",
          "Dsmall",
          "Esmall",
          "Fsmall",
          "Gsmall",
          "Hsmall",
          "Ismall",
          "Jsmall",
          "Ksmall",
          "Lsmall",
          "Msmall",
          "Nsmall",
          "Osmall",
          "Psmall",
          "Qsmall",
          "Rsmall",
          "Ssmall",
          "Tsmall",
          "Usmall",
          "Vsmall",
          "Wsmall",
          "Xsmall",
          "Ysmall",
          "Zsmall",
          "colonmonetary",
          "onefitted",
          "rupiah",
          "Tildesmall",
          "",
          "",
          "asuperior",
          "centsuperior",
          "",
          "",
          "",
          "",
          "Aacutesmall",
          "Agravesmall",
          "Acircumflexsmall",
          "Adieresissmall",
          "Atildesmall",
          "Aringsmall",
          "Ccedillasmall",
          "Eacutesmall",
          "Egravesmall",
          "Ecircumflexsmall",
          "Edieresissmall",
          "Iacutesmall",
          "Igravesmall",
          "Icircumflexsmall",
          "Idieresissmall",
          "Ntildesmall",
          "Oacutesmall",
          "Ogravesmall",
          "Ocircumflexsmall",
          "Odieresissmall",
          "Otildesmall",
          "Uacutesmall",
          "Ugravesmall",
          "Ucircumflexsmall",
          "Udieresissmall",
          "",
          "eightsuperior",
          "fourinferior",
          "threeinferior",
          "sixinferior",
          "eightinferior",
          "seveninferior",
          "Scaronsmall",
          "",
          "centinferior",
          "twoinferior",
          "",
          "Dieresissmall",
          "",
          "Caronsmall",
          "osuperior",
          "fiveinferior",
          "",
          "commainferior",
          "periodinferior",
          "Yacutesmall",
          "",
          "dollarinferior",
          "",
          "",
          "Thornsmall",
          "",
          "nineinferior",
          "zeroinferior",
          "Zcaronsmall",
          "AEsmall",
          "Oslashsmall",
          "questiondownsmall",
          "oneinferior",
          "Lslashsmall",
          "",
          "",
          "",
          "",
          "",
          "",
          "Cedillasmall",
          "",
          "",
          "",
          "",
          "",
          "OEsmall",
          "figuredash",
          "hyphensuperior",
          "",
          "",
          "",
          "",
          "exclamdownsmall",
          "",
          "Ydieresissmall",
          "",
          "onesuperior",
          "twosuperior",
          "threesuperior",
          "foursuperior",
          "fivesuperior",
          "sixsuperior",
          "sevensuperior",
          "ninesuperior",
          "zerosuperior",
          "",
          "esuperior",
          "rsuperior",
          "tsuperior",
          "",
          "",
          "isuperior",
          "ssuperior",
          "dsuperior",
          "",
          "",
          "",
          "",
          "",
          "lsuperior",
          "Ogoneksmall",
          "Brevesmall",
          "Macronsmall",
          "bsuperior",
          "nsuperior",
          "msuperior",
          "commasuperior",
          "periodsuperior",
          "Dotaccentsmall",
          "Ringsmall",
          "",
          "",
          "",
          "",
        ];
        const MacRomanEncoding = [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "space",
          "exclam",
          "quotedbl",
          "numbersign",
          "dollar",
          "percent",
          "ampersand",
          "quotesingle",
          "parenleft",
          "parenright",
          "asterisk",
          "plus",
          "comma",
          "hyphen",
          "period",
          "slash",
          "zero",
          "one",
          "two",
          "three",
          "four",
          "five",
          "six",
          "seven",
          "eight",
          "nine",
          "colon",
          "semicolon",
          "less",
          "equal",
          "greater",
          "question",
          "at",
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "H",
          "I",
          "J",
          "K",
          "L",
          "M",
          "N",
          "O",
          "P",
          "Q",
          "R",
          "S",
          "T",
          "U",
          "V",
          "W",
          "X",
          "Y",
          "Z",
          "bracketleft",
          "backslash",
          "bracketright",
          "asciicircum",
          "underscore",
          "grave",
          "a",
          "b",
          "c",
          "d",
          "e",
          "f",
          "g",
          "h",
          "i",
          "j",
          "k",
          "l",
          "m",
          "n",
          "o",
          "p",
          "q",
          "r",
          "s",
          "t",
          "u",
          "v",
          "w",
          "x",
          "y",
          "z",
          "braceleft",
          "bar",
          "braceright",
          "asciitilde",
          "",
          "Adieresis",
          "Aring",
          "Ccedilla",
          "Eacute",
          "Ntilde",
          "Odieresis",
          "Udieresis",
          "aacute",
          "agrave",
          "acircumflex",
          "adieresis",
          "atilde",
          "aring",
          "ccedilla",
          "eacute",
          "egrave",
          "ecircumflex",
          "edieresis",
          "iacute",
          "igrave",
          "icircumflex",
          "idieresis",
          "ntilde",
          "oacute",
          "ograve",
          "ocircumflex",
          "odieresis",
          "otilde",
          "uacute",
          "ugrave",
          "ucircumflex",
          "udieresis",
          "dagger",
          "degree",
          "cent",
          "sterling",
          "section",
          "bullet",
          "paragraph",
          "germandbls",
          "registered",
          "copyright",
          "trademark",
          "acute",
          "dieresis",
          "notequal",
          "AE",
          "Oslash",
          "infinity",
          "plusminus",
          "lessequal",
          "greaterequal",
          "yen",
          "mu",
          "partialdiff",
          "summation",
          "product",
          "pi",
          "integral",
          "ordfeminine",
          "ordmasculine",
          "Omega",
          "ae",
          "oslash",
          "questiondown",
          "exclamdown",
          "logicalnot",
          "radical",
          "florin",
          "approxequal",
          "Delta",
          "guillemotleft",
          "guillemotright",
          "ellipsis",
          "space",
          "Agrave",
          "Atilde",
          "Otilde",
          "OE",
          "oe",
          "endash",
          "emdash",
          "quotedblleft",
          "quotedblright",
          "quoteleft",
          "quoteright",
          "divide",
          "lozenge",
          "ydieresis",
          "Ydieresis",
          "fraction",
          "currency",
          "guilsinglleft",
          "guilsinglright",
          "fi",
          "fl",
          "daggerdbl",
          "periodcentered",
          "quotesinglbase",
          "quotedblbase",
          "perthousand",
          "Acircumflex",
          "Ecircumflex",
          "Aacute",
          "Edieresis",
          "Egrave",
          "Iacute",
          "Icircumflex",
          "Idieresis",
          "Igrave",
          "Oacute",
          "Ocircumflex",
          "apple",
          "Ograve",
          "Uacute",
          "Ucircumflex",
          "Ugrave",
          "dotlessi",
          "circumflex",
          "tilde",
          "macron",
          "breve",
          "dotaccent",
          "ring",
          "cedilla",
          "hungarumlaut",
          "ogonek",
          "caron",
        ];
        exports.MacRomanEncoding = MacRomanEncoding;
        const StandardEncoding = [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "space",
          "exclam",
          "quotedbl",
          "numbersign",
          "dollar",
          "percent",
          "ampersand",
          "quoteright",
          "parenleft",
          "parenright",
          "asterisk",
          "plus",
          "comma",
          "hyphen",
          "period",
          "slash",
          "zero",
          "one",
          "two",
          "three",
          "four",
          "five",
          "six",
          "seven",
          "eight",
          "nine",
          "colon",
          "semicolon",
          "less",
          "equal",
          "greater",
          "question",
          "at",
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "H",
          "I",
          "J",
          "K",
          "L",
          "M",
          "N",
          "O",
          "P",
          "Q",
          "R",
          "S",
          "T",
          "U",
          "V",
          "W",
          "X",
          "Y",
          "Z",
          "bracketleft",
          "backslash",
          "bracketright",
          "asciicircum",
          "underscore",
          "quoteleft",
          "a",
          "b",
          "c",
          "d",
          "e",
          "f",
          "g",
          "h",
          "i",
          "j",
          "k",
          "l",
          "m",
          "n",
          "o",
          "p",
          "q",
          "r",
          "s",
          "t",
          "u",
          "v",
          "w",
          "x",
          "y",
          "z",
          "braceleft",
          "bar",
          "braceright",
          "asciitilde",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "exclamdown",
          "cent",
          "sterling",
          "fraction",
          "yen",
          "florin",
          "section",
          "currency",
          "quotesingle",
          "quotedblleft",
          "guillemotleft",
          "guilsinglleft",
          "guilsinglright",
          "fi",
          "fl",
          "",
          "endash",
          "dagger",
          "daggerdbl",
          "periodcentered",
          "",
          "paragraph",
          "bullet",
          "quotesinglbase",
          "quotedblbase",
          "quotedblright",
          "guillemotright",
          "ellipsis",
          "perthousand",
          "",
          "questiondown",
          "",
          "grave",
          "acute",
          "circumflex",
          "tilde",
          "macron",
          "breve",
          "dotaccent",
          "dieresis",
          "",
          "ring",
          "cedilla",
          "",
          "hungarumlaut",
          "ogonek",
          "caron",
          "emdash",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "AE",
          "",
          "ordfeminine",
          "",
          "",
          "",
          "",
          "Lslash",
          "Oslash",
          "OE",
          "ordmasculine",
          "",
          "",
          "",
          "",
          "",
          "ae",
          "",
          "",
          "",
          "dotlessi",
          "",
          "",
          "lslash",
          "oslash",
          "oe",
          "germandbls",
          "",
          "",
          "",
          "",
        ];
        exports.StandardEncoding = StandardEncoding;
        const WinAnsiEncoding = [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "space",
          "exclam",
          "quotedbl",
          "numbersign",
          "dollar",
          "percent",
          "ampersand",
          "quotesingle",
          "parenleft",
          "parenright",
          "asterisk",
          "plus",
          "comma",
          "hyphen",
          "period",
          "slash",
          "zero",
          "one",
          "two",
          "three",
          "four",
          "five",
          "six",
          "seven",
          "eight",
          "nine",
          "colon",
          "semicolon",
          "less",
          "equal",
          "greater",
          "question",
          "at",
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "H",
          "I",
          "J",
          "K",
          "L",
          "M",
          "N",
          "O",
          "P",
          "Q",
          "R",
          "S",
          "T",
          "U",
          "V",
          "W",
          "X",
          "Y",
          "Z",
          "bracketleft",
          "backslash",
          "bracketright",
          "asciicircum",
          "underscore",
          "grave",
          "a",
          "b",
          "c",
          "d",
          "e",
          "f",
          "g",
          "h",
          "i",
          "j",
          "k",
          "l",
          "m",
          "n",
          "o",
          "p",
          "q",
          "r",
          "s",
          "t",
          "u",
          "v",
          "w",
          "x",
          "y",
          "z",
          "braceleft",
          "bar",
          "braceright",
          "asciitilde",
          "bullet",
          "Euro",
          "bullet",
          "quotesinglbase",
          "florin",
          "quotedblbase",
          "ellipsis",
          "dagger",
          "daggerdbl",
          "circumflex",
          "perthousand",
          "Scaron",
          "guilsinglleft",
          "OE",
          "bullet",
          "Zcaron",
          "bullet",
          "bullet",
          "quoteleft",
          "quoteright",
          "quotedblleft",
          "quotedblright",
          "bullet",
          "endash",
          "emdash",
          "tilde",
          "trademark",
          "scaron",
          "guilsinglright",
          "oe",
          "bullet",
          "zcaron",
          "Ydieresis",
          "space",
          "exclamdown",
          "cent",
          "sterling",
          "currency",
          "yen",
          "brokenbar",
          "section",
          "dieresis",
          "copyright",
          "ordfeminine",
          "guillemotleft",
          "logicalnot",
          "hyphen",
          "registered",
          "macron",
          "degree",
          "plusminus",
          "twosuperior",
          "threesuperior",
          "acute",
          "mu",
          "paragraph",
          "periodcentered",
          "cedilla",
          "onesuperior",
          "ordmasculine",
          "guillemotright",
          "onequarter",
          "onehalf",
          "threequarters",
          "questiondown",
          "Agrave",
          "Aacute",
          "Acircumflex",
          "Atilde",
          "Adieresis",
          "Aring",
          "AE",
          "Ccedilla",
          "Egrave",
          "Eacute",
          "Ecircumflex",
          "Edieresis",
          "Igrave",
          "Iacute",
          "Icircumflex",
          "Idieresis",
          "Eth",
          "Ntilde",
          "Ograve",
          "Oacute",
          "Ocircumflex",
          "Otilde",
          "Odieresis",
          "multiply",
          "Oslash",
          "Ugrave",
          "Uacute",
          "Ucircumflex",
          "Udieresis",
          "Yacute",
          "Thorn",
          "germandbls",
          "agrave",
          "aacute",
          "acircumflex",
          "atilde",
          "adieresis",
          "aring",
          "ae",
          "ccedilla",
          "egrave",
          "eacute",
          "ecircumflex",
          "edieresis",
          "igrave",
          "iacute",
          "icircumflex",
          "idieresis",
          "eth",
          "ntilde",
          "ograve",
          "oacute",
          "ocircumflex",
          "otilde",
          "odieresis",
          "divide",
          "oslash",
          "ugrave",
          "uacute",
          "ucircumflex",
          "udieresis",
          "yacute",
          "thorn",
          "ydieresis",
        ];
        exports.WinAnsiEncoding = WinAnsiEncoding;
        const SymbolSetEncoding = [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "space",
          "exclam",
          "universal",
          "numbersign",
          "existential",
          "percent",
          "ampersand",
          "suchthat",
          "parenleft",
          "parenright",
          "asteriskmath",
          "plus",
          "comma",
          "minus",
          "period",
          "slash",
          "zero",
          "one",
          "two",
          "three",
          "four",
          "five",
          "six",
          "seven",
          "eight",
          "nine",
          "colon",
          "semicolon",
          "less",
          "equal",
          "greater",
          "question",
          "congruent",
          "Alpha",
          "Beta",
          "Chi",
          "Delta",
          "Epsilon",
          "Phi",
          "Gamma",
          "Eta",
          "Iota",
          "theta1",
          "Kappa",
          "Lambda",
          "Mu",
          "Nu",
          "Omicron",
          "Pi",
          "Theta",
          "Rho",
          "Sigma",
          "Tau",
          "Upsilon",
          "sigma1",
          "Omega",
          "Xi",
          "Psi",
          "Zeta",
          "bracketleft",
          "therefore",
          "bracketright",
          "perpendicular",
          "underscore",
          "radicalex",
          "alpha",
          "beta",
          "chi",
          "delta",
          "epsilon",
          "phi",
          "gamma",
          "eta",
          "iota",
          "phi1",
          "kappa",
          "lambda",
          "mu",
          "nu",
          "omicron",
          "pi",
          "theta",
          "rho",
          "sigma",
          "tau",
          "upsilon",
          "omega1",
          "omega",
          "xi",
          "psi",
          "zeta",
          "braceleft",
          "bar",
          "braceright",
          "similar",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "Euro",
          "Upsilon1",
          "minute",
          "lessequal",
          "fraction",
          "infinity",
          "florin",
          "club",
          "diamond",
          "heart",
          "spade",
          "arrowboth",
          "arrowleft",
          "arrowup",
          "arrowright",
          "arrowdown",
          "degree",
          "plusminus",
          "second",
          "greaterequal",
          "multiply",
          "proportional",
          "partialdiff",
          "bullet",
          "divide",
          "notequal",
          "equivalence",
          "approxequal",
          "ellipsis",
          "arrowvertex",
          "arrowhorizex",
          "carriagereturn",
          "aleph",
          "Ifraktur",
          "Rfraktur",
          "weierstrass",
          "circlemultiply",
          "circleplus",
          "emptyset",
          "intersection",
          "union",
          "propersuperset",
          "reflexsuperset",
          "notsubset",
          "propersubset",
          "reflexsubset",
          "element",
          "notelement",
          "angle",
          "gradient",
          "registerserif",
          "copyrightserif",
          "trademarkserif",
          "product",
          "radical",
          "dotmath",
          "logicalnot",
          "logicaland",
          "logicalor",
          "arrowdblboth",
          "arrowdblleft",
          "arrowdblup",
          "arrowdblright",
          "arrowdbldown",
          "lozenge",
          "angleleft",
          "registersans",
          "copyrightsans",
          "trademarksans",
          "summation",
          "parenlefttp",
          "parenleftex",
          "parenleftbt",
          "bracketlefttp",
          "bracketleftex",
          "bracketleftbt",
          "bracelefttp",
          "braceleftmid",
          "braceleftbt",
          "braceex",
          "",
          "angleright",
          "integral",
          "integraltp",
          "integralex",
          "integralbt",
          "parenrighttp",
          "parenrightex",
          "parenrightbt",
          "bracketrighttp",
          "bracketrightex",
          "bracketrightbt",
          "bracerighttp",
          "bracerightmid",
          "bracerightbt",
          "",
        ];
        exports.SymbolSetEncoding = SymbolSetEncoding;
        const ZapfDingbatsEncoding = [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "space",
          "a1",
          "a2",
          "a202",
          "a3",
          "a4",
          "a5",
          "a119",
          "a118",
          "a117",
          "a11",
          "a12",
          "a13",
          "a14",
          "a15",
          "a16",
          "a105",
          "a17",
          "a18",
          "a19",
          "a20",
          "a21",
          "a22",
          "a23",
          "a24",
          "a25",
          "a26",
          "a27",
          "a28",
          "a6",
          "a7",
          "a8",
          "a9",
          "a10",
          "a29",
          "a30",
          "a31",
          "a32",
          "a33",
          "a34",
          "a35",
          "a36",
          "a37",
          "a38",
          "a39",
          "a40",
          "a41",
          "a42",
          "a43",
          "a44",
          "a45",
          "a46",
          "a47",
          "a48",
          "a49",
          "a50",
          "a51",
          "a52",
          "a53",
          "a54",
          "a55",
          "a56",
          "a57",
          "a58",
          "a59",
          "a60",
          "a61",
          "a62",
          "a63",
          "a64",
          "a65",
          "a66",
          "a67",
          "a68",
          "a69",
          "a70",
          "a71",
          "a72",
          "a73",
          "a74",
          "a203",
          "a75",
          "a204",
          "a76",
          "a77",
          "a78",
          "a79",
          "a81",
          "a82",
          "a83",
          "a84",
          "a97",
          "a98",
          "a99",
          "a100",
          "",
          "a89",
          "a90",
          "a93",
          "a94",
          "a91",
          "a92",
          "a205",
          "a85",
          "a206",
          "a86",
          "a87",
          "a88",
          "a95",
          "a96",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "a101",
          "a102",
          "a103",
          "a104",
          "a106",
          "a107",
          "a108",
          "a112",
          "a111",
          "a110",
          "a109",
          "a120",
          "a121",
          "a122",
          "a123",
          "a124",
          "a125",
          "a126",
          "a127",
          "a128",
          "a129",
          "a130",
          "a131",
          "a132",
          "a133",
          "a134",
          "a135",
          "a136",
          "a137",
          "a138",
          "a139",
          "a140",
          "a141",
          "a142",
          "a143",
          "a144",
          "a145",
          "a146",
          "a147",
          "a148",
          "a149",
          "a150",
          "a151",
          "a152",
          "a153",
          "a154",
          "a155",
          "a156",
          "a157",
          "a158",
          "a159",
          "a160",
          "a161",
          "a163",
          "a164",
          "a196",
          "a165",
          "a192",
          "a166",
          "a167",
          "a168",
          "a169",
          "a170",
          "a171",
          "a172",
          "a173",
          "a162",
          "a174",
          "a175",
          "a176",
          "a177",
          "a178",
          "a179",
          "a193",
          "a180",
          "a199",
          "a181",
          "a200",
          "a182",
          "",
          "a201",
          "a183",
          "a184",
          "a197",
          "a185",
          "a194",
          "a198",
          "a186",
          "a195",
          "a187",
          "a188",
          "a189",
          "a190",
          "a191",
          "",
        ];
        exports.ZapfDingbatsEncoding = ZapfDingbatsEncoding;
        function getEncoding(encodingName) {
          switch (encodingName) {
            case "WinAnsiEncoding":
              return WinAnsiEncoding;
            case "StandardEncoding":
              return StandardEncoding;
            case "MacRomanEncoding":
              return MacRomanEncoding;
            case "SymbolSetEncoding":
              return SymbolSetEncoding;
            case "ZapfDingbatsEncoding":
              return ZapfDingbatsEncoding;
            case "ExpertEncoding":
              return ExpertEncoding;
            case "MacExpertEncoding":
              return MacExpertEncoding;
            default:
              return null;
          }
        }

        /***/
      },
      /* 38 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.SEAC_ANALYSIS_ENABLED =
          exports.MacStandardGlyphOrdering =
          exports.FontFlags =
            void 0;
        exports.normalizeFontName = normalizeFontName;
        exports.recoverGlyphName = recoverGlyphName;
        exports.type1FontGlyphMapping = type1FontGlyphMapping;
        var _encodings = __w_pdfjs_require__(37);
        var _glyphlist = __w_pdfjs_require__(39);
        var _unicode = __w_pdfjs_require__(40);
        var _util = __w_pdfjs_require__(2);
        const SEAC_ANALYSIS_ENABLED = true;
        exports.SEAC_ANALYSIS_ENABLED = SEAC_ANALYSIS_ENABLED;
        const FontFlags = {
          FixedPitch: 1,
          Serif: 2,
          Symbolic: 4,
          Script: 8,
          Nonsymbolic: 32,
          Italic: 64,
          AllCap: 65536,
          SmallCap: 131072,
          ForceBold: 262144,
        };
        exports.FontFlags = FontFlags;
        const MacStandardGlyphOrdering = [
          ".notdef",
          ".null",
          "nonmarkingreturn",
          "space",
          "exclam",
          "quotedbl",
          "numbersign",
          "dollar",
          "percent",
          "ampersand",
          "quotesingle",
          "parenleft",
          "parenright",
          "asterisk",
          "plus",
          "comma",
          "hyphen",
          "period",
          "slash",
          "zero",
          "one",
          "two",
          "three",
          "four",
          "five",
          "six",
          "seven",
          "eight",
          "nine",
          "colon",
          "semicolon",
          "less",
          "equal",
          "greater",
          "question",
          "at",
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "H",
          "I",
          "J",
          "K",
          "L",
          "M",
          "N",
          "O",
          "P",
          "Q",
          "R",
          "S",
          "T",
          "U",
          "V",
          "W",
          "X",
          "Y",
          "Z",
          "bracketleft",
          "backslash",
          "bracketright",
          "asciicircum",
          "underscore",
          "grave",
          "a",
          "b",
          "c",
          "d",
          "e",
          "f",
          "g",
          "h",
          "i",
          "j",
          "k",
          "l",
          "m",
          "n",
          "o",
          "p",
          "q",
          "r",
          "s",
          "t",
          "u",
          "v",
          "w",
          "x",
          "y",
          "z",
          "braceleft",
          "bar",
          "braceright",
          "asciitilde",
          "Adieresis",
          "Aring",
          "Ccedilla",
          "Eacute",
          "Ntilde",
          "Odieresis",
          "Udieresis",
          "aacute",
          "agrave",
          "acircumflex",
          "adieresis",
          "atilde",
          "aring",
          "ccedilla",
          "eacute",
          "egrave",
          "ecircumflex",
          "edieresis",
          "iacute",
          "igrave",
          "icircumflex",
          "idieresis",
          "ntilde",
          "oacute",
          "ograve",
          "ocircumflex",
          "odieresis",
          "otilde",
          "uacute",
          "ugrave",
          "ucircumflex",
          "udieresis",
          "dagger",
          "degree",
          "cent",
          "sterling",
          "section",
          "bullet",
          "paragraph",
          "germandbls",
          "registered",
          "copyright",
          "trademark",
          "acute",
          "dieresis",
          "notequal",
          "AE",
          "Oslash",
          "infinity",
          "plusminus",
          "lessequal",
          "greaterequal",
          "yen",
          "mu",
          "partialdiff",
          "summation",
          "product",
          "pi",
          "integral",
          "ordfeminine",
          "ordmasculine",
          "Omega",
          "ae",
          "oslash",
          "questiondown",
          "exclamdown",
          "logicalnot",
          "radical",
          "florin",
          "approxequal",
          "Delta",
          "guillemotleft",
          "guillemotright",
          "ellipsis",
          "nonbreakingspace",
          "Agrave",
          "Atilde",
          "Otilde",
          "OE",
          "oe",
          "endash",
          "emdash",
          "quotedblleft",
          "quotedblright",
          "quoteleft",
          "quoteright",
          "divide",
          "lozenge",
          "ydieresis",
          "Ydieresis",
          "fraction",
          "currency",
          "guilsinglleft",
          "guilsinglright",
          "fi",
          "fl",
          "daggerdbl",
          "periodcentered",
          "quotesinglbase",
          "quotedblbase",
          "perthousand",
          "Acircumflex",
          "Ecircumflex",
          "Aacute",
          "Edieresis",
          "Egrave",
          "Iacute",
          "Icircumflex",
          "Idieresis",
          "Igrave",
          "Oacute",
          "Ocircumflex",
          "apple",
          "Ograve",
          "Uacute",
          "Ucircumflex",
          "Ugrave",
          "dotlessi",
          "circumflex",
          "tilde",
          "macron",
          "breve",
          "dotaccent",
          "ring",
          "cedilla",
          "hungarumlaut",
          "ogonek",
          "caron",
          "Lslash",
          "lslash",
          "Scaron",
          "scaron",
          "Zcaron",
          "zcaron",
          "brokenbar",
          "Eth",
          "eth",
          "Yacute",
          "yacute",
          "Thorn",
          "thorn",
          "minus",
          "multiply",
          "onesuperior",
          "twosuperior",
          "threesuperior",
          "onehalf",
          "onequarter",
          "threequarters",
          "franc",
          "Gbreve",
          "gbreve",
          "Idotaccent",
          "Scedilla",
          "scedilla",
          "Cacute",
          "cacute",
          "Ccaron",
          "ccaron",
          "dcroat",
        ];
        exports.MacStandardGlyphOrdering = MacStandardGlyphOrdering;
        function recoverGlyphName(name, glyphsUnicodeMap) {
          if (glyphsUnicodeMap[name] !== undefined) {
            return name;
          }
          const unicode = (0, _unicode.getUnicodeForGlyph)(
            name,
            glyphsUnicodeMap
          );
          if (unicode !== -1) {
            for (const key in glyphsUnicodeMap) {
              if (glyphsUnicodeMap[key] === unicode) {
                return key;
              }
            }
          }
          (0, _util.info)(
            "Unable to recover a standard glyph name for: " + name
          );
          return name;
        }
        function type1FontGlyphMapping(
          properties,
          builtInEncoding,
          glyphNames
        ) {
          const charCodeToGlyphId = Object.create(null);
          let glyphId, charCode, baseEncoding;
          const isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);
          if (properties.isInternalFont) {
            baseEncoding = builtInEncoding;
            for (charCode = 0; charCode < baseEncoding.length; charCode++) {
              glyphId = glyphNames.indexOf(baseEncoding[charCode]);
              charCodeToGlyphId[charCode] = glyphId >= 0 ? glyphId : 0;
            }
          } else if (properties.baseEncodingName) {
            baseEncoding = (0, _encodings.getEncoding)(
              properties.baseEncodingName
            );
            for (charCode = 0; charCode < baseEncoding.length; charCode++) {
              glyphId = glyphNames.indexOf(baseEncoding[charCode]);
              charCodeToGlyphId[charCode] = glyphId >= 0 ? glyphId : 0;
            }
          } else if (isSymbolicFont) {
            for (charCode in builtInEncoding) {
              charCodeToGlyphId[charCode] = builtInEncoding[charCode];
            }
          } else {
            baseEncoding = _encodings.StandardEncoding;
            for (charCode = 0; charCode < baseEncoding.length; charCode++) {
              glyphId = glyphNames.indexOf(baseEncoding[charCode]);
              charCodeToGlyphId[charCode] = glyphId >= 0 ? glyphId : 0;
            }
          }
          const differences = properties.differences;
          let glyphsUnicodeMap;
          if (differences) {
            for (charCode in differences) {
              const glyphName = differences[charCode];
              glyphId = glyphNames.indexOf(glyphName);
              if (glyphId === -1) {
                if (!glyphsUnicodeMap) {
                  glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();
                }
                const standardGlyphName = recoverGlyphName(
                  glyphName,
                  glyphsUnicodeMap
                );
                if (standardGlyphName !== glyphName) {
                  glyphId = glyphNames.indexOf(standardGlyphName);
                }
              }
              charCodeToGlyphId[charCode] = glyphId >= 0 ? glyphId : 0;
            }
          }
          return charCodeToGlyphId;
        }
        function normalizeFontName(name) {
          return name.replaceAll(/[,_]/g, "-").replaceAll(/\s/g, "");
        }

        /***/
      },
      /* 39 */
      /***/ (__unused_webpack_module, exports, __w_pdfjs_require__) => {
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.getGlyphsUnicode = exports.getDingbatsGlyphsUnicode = void 0;
        var _core_utils = __w_pdfjs_require__(3);
        const getGlyphsUnicode = (0, _core_utils.getLookupTableFactory)(
          function (t) {
            t.A = 0x0041;
            t.AE = 0x00c6;
            t.AEacute = 0x01fc;
            t.AEmacron = 0x01e2;
            t.AEsmall = 0xf7e6;
            t.Aacute = 0x00c1;
            t.Aacutesmall = 0xf7e1;
            t.Abreve = 0x0102;
            t.Abreveacute = 0x1eae;
            t.Abrevecyrillic = 0x04d0;
            t.Abrevedotbelow = 0x1eb6;
            t.Abrevegrave = 0x1eb0;
            t.Abrevehookabove = 0x1eb2;
            t.Abrevetilde = 0x1eb4;
            t.Acaron = 0x01cd;
            t.Acircle = 0x24b6;
            t.Acircumflex = 0x00c2;
            t.Acircumflexacute = 0x1ea4;
            t.Acircumflexdotbelow = 0x1eac;
            t.Acircumflexgrave = 0x1ea6;
            t.Acircumflexhookabove = 0x1ea8;
            t.Acircumflexsmall = 0xf7e2;
            t.Acircumflextilde = 0x1eaa;
            t.Acute = 0xf6c9;
            t.Acutesmall = 0xf7b4;
            t.Acyrillic = 0x0410;
            t.Adblgrave = 0x0200;
            t.Adieresis = 0x00c4;
            t.Adieresiscyrillic = 0x04d2;
            t.Adieresismacron = 0x01de;
            t.Adieresissmall = 0xf7e4;
            t.Adotbelow = 0x1ea0;
            t.Adotmacron = 0x01e0;
            t.Agrave = 0x00c0;
            t.Agravesmall = 0xf7e0;
            t.Ahookabove = 0x1ea2;
            t.Aiecyrillic = 0x04d4;
            t.Ainvertedbreve = 0x0202;
            t.Alpha = 0x0391;
            t.Alphatonos = 0x0386;
            t.Amacron = 0x0100;
            t.Amonospace = 0xff21;
            t.Aogonek = 0x0104;
            t.Aring = 0x00c5;
            t.Aringacute = 0x01fa;
            t.Aringbelow = 0x1e00;
            t.Aringsmall = 0xf7e5;
            t.Asmall = 0xf761;
            t.Atilde = 0x00c3;
            t.Atildesmall = 0xf7e3;
            t.Aybarmenian = 0x0531;
            t.B = 0x0042;
            t.Bcircle = 0x24b7;
            t.Bdotaccent = 0x1e02;
            t.Bdotbelow = 0x1e04;
            t.Becyrillic = 0x0411;
            t.Benarmenian = 0x0532;
            t.Beta = 0x0392;
            t.Bhook = 0x0181;
            t.Blinebelow = 0x1e06;
            t.Bmonospace = 0xff22;
            t.Brevesmall = 0xf6f4;
            t.Bsmall = 0xf762;
            t.Btopbar = 0x0182;
            t.C = 0x0043;
            t.Caarmenian = 0x053e;
            t.Cacute = 0x0106;
            t.Caron = 0xf6ca;
            t.Caronsmall = 0xf6f5;
            t.Ccaron = 0x010c;
            t.Ccedilla = 0x00c7;
            t.Ccedillaacute = 0x1e08;
            t.Ccedillasmall = 0xf7e7;
            t.Ccircle = 0x24b8;
            t.Ccircumflex = 0x0108;
            t.Cdot = 0x010a;
            t.Cdotaccent = 0x010a;
            t.Cedillasmall = 0xf7b8;
            t.Chaarmenian = 0x0549;
            t.Cheabkhasiancyrillic = 0x04bc;
            t.Checyrillic = 0x0427;
            t.Chedescenderabkhasiancyrillic = 0x04be;
            t.Chedescendercyrillic = 0x04b6;
            t.Chedieresiscyrillic = 0x04f4;
            t.Cheharmenian = 0x0543;
            t.Chekhakassiancyrillic = 0x04cb;
            t.Cheverticalstrokecyrillic = 0x04b8;
            t.Chi = 0x03a7;
            t.Chook = 0x0187;
            t.Circumflexsmall = 0xf6f6;
            t.Cmonospace = 0xff23;
            t.Coarmenian = 0x0551;
            t.Csmall = 0xf763;
            t.D = 0x0044;
            t.DZ = 0x01f1;
            t.DZcaron = 0x01c4;
            t.Daarmenian = 0x0534;
            t.Dafrican = 0x0189;
            t.Dcaron = 0x010e;
            t.Dcedilla = 0x1e10;
            t.Dcircle = 0x24b9;
            t.Dcircumflexbelow = 0x1e12;
            t.Dcroat = 0x0110;
            t.Ddotaccent = 0x1e0a;
            t.Ddotbelow = 0x1e0c;
            t.Decyrillic = 0x0414;
            t.Deicoptic = 0x03ee;
            t.Delta = 0x2206;
            t.Deltagreek = 0x0394;
            t.Dhook = 0x018a;
            t.Dieresis = 0xf6cb;
            t.DieresisAcute = 0xf6cc;
            t.DieresisGrave = 0xf6cd;
            t.Dieresissmall = 0xf7a8;
            t.Digammagreek = 0x03dc;
            t.Djecyrillic = 0x0402;
            t.Dlinebelow = 0x1e0e;
            t.Dmonospace = 0xff24;
            t.Dotaccentsmall = 0xf6f7;
            t.Dslash = 0x0110;
            t.Dsmall = 0xf764;
            t.Dtopbar = 0x018b;
            t.Dz = 0x01f2;
            t.Dzcaron = 0x01c5;
            t.Dzeabkhasiancyrillic = 0x04e0;
            t.Dzecyrillic = 0x0405;
            t.Dzhecyrillic = 0x040f;
            t.E = 0x0045;
            t.Eacute = 0x00c9;
            t.Eacutesmall = 0xf7e9;
            t.Ebreve = 0x0114;
            t.Ecaron = 0x011a;
            t.Ecedillabreve = 0x1e1c;
            t.Echarmenian = 0x0535;
            t.Ecircle = 0x24ba;
            t.Ecircumflex = 0x00ca;
            t.Ecircumflexacute = 0x1ebe;
            t.Ecircumflexbelow = 0x1e18;
            t.Ecircumflexdotbelow = 0x1ec6;
            t.Ecircumflexgrave = 0x1ec0;
            t.Ecircumflexhookabove = 0x1ec2;
            t.Ecircumflexsmall = 0xf7ea;
            t.Ecircumflextilde = 0x1ec4;
            t.Ecyrillic = 0x0404;
            t.Edblgrave = 0x0204;
            t.Edieresis = 0x00cb;
            t.Edieresissmall = 0xf7eb;
            t.Edot = 0x0116;
            t.Edotaccent = 0x0116;
            t.Edotbelow = 0x1eb8;
            t.Efcyrillic = 0x0424;
            t.Egrave = 0x00c8;
            t.Egravesmall = 0xf7e8;
            t.Eharmenian = 0x0537;
            t.Ehookabove = 0x1eba;
            t.Eightroman = 0x2167;
            t.Einvertedbreve = 0x0206;
            t.Eiotifiedcyrillic = 0x0464;
            t.Elcyrillic = 0x041b;
            t.Elevenroman = 0x216a;
            t.Emacron = 0x0112;
            t.Emacronacute = 0x1e16;
            t.Emacrongrave = 0x1e14;
            t.Emcyrillic = 0x041c;
            t.Emonospace = 0xff25;
            t.Encyrillic = 0x041d;
            t.Endescendercyrillic = 0x04a2;
            t.Eng = 0x014a;
            t.Enghecyrillic = 0x04a4;
            t.Enhookcyrillic = 0x04c7;
            t.Eogonek = 0x0118;
            t.Eopen = 0x0190;
            t.Epsilon = 0x0395;
            t.Epsilontonos = 0x0388;
            t.Ercyrillic = 0x0420;
            t.Ereversed = 0x018e;
            t.Ereversedcyrillic = 0x042d;
            t.Escyrillic = 0x0421;
            t.Esdescendercyrillic = 0x04aa;
            t.Esh = 0x01a9;
            t.Esmall = 0xf765;
            t.Eta = 0x0397;
            t.Etarmenian = 0x0538;
            t.Etatonos = 0x0389;
            t.Eth = 0x00d0;
            t.Ethsmall = 0xf7f0;
            t.Etilde = 0x1ebc;
            t.Etildebelow = 0x1e1a;
            t.Euro = 0x20ac;
            t.Ezh = 0x01b7;
            t.Ezhcaron = 0x01ee;
            t.Ezhreversed = 0x01b8;
            t.F = 0x0046;
            t.Fcircle = 0x24bb;
            t.Fdotaccent = 0x1e1e;
            t.Feharmenian = 0x0556;
            t.Feicoptic = 0x03e4;
            t.Fhook = 0x0191;
            t.Fitacyrillic = 0x0472;
            t.Fiveroman = 0x2164;
            t.Fmonospace = 0xff26;
            t.Fourroman = 0x2163;
            t.Fsmall = 0xf766;
            t.G = 0x0047;
            t.GBsquare = 0x3387;
            t.Gacute = 0x01f4;
            t.Gamma = 0x0393;
            t.Gammaafrican = 0x0194;
            t.Gangiacoptic = 0x03ea;
            t.Gbreve = 0x011e;
            t.Gcaron = 0x01e6;
            t.Gcedilla = 0x0122;
            t.Gcircle = 0x24bc;
            t.Gcircumflex = 0x011c;
            t.Gcommaaccent = 0x0122;
            t.Gdot = 0x0120;
            t.Gdotaccent = 0x0120;
            t.Gecyrillic = 0x0413;
            t.Ghadarmenian = 0x0542;
            t.Ghemiddlehookcyrillic = 0x0494;
            t.Ghestrokecyrillic = 0x0492;
            t.Gheupturncyrillic = 0x0490;
            t.Ghook = 0x0193;
            t.Gimarmenian = 0x0533;
            t.Gjecyrillic = 0x0403;
            t.Gmacron = 0x1e20;
            t.Gmonospace = 0xff27;
            t.Grave = 0xf6ce;
            t.Gravesmall = 0xf760;
            t.Gsmall = 0xf767;
            t.Gsmallhook = 0x029b;
            t.Gstroke = 0x01e4;
            t.H = 0x0048;
            t.H18533 = 0x25cf;
            t.H18543 = 0x25aa;
            t.H18551 = 0x25ab;
            t.H22073 = 0x25a1;
            t.HPsquare = 0x33cb;
            t.Haabkhasiancyrillic = 0x04a8;
            t.Hadescendercyrillic = 0x04b2;
            t.Hardsigncyrillic = 0x042a;
            t.Hbar = 0x0126;
            t.Hbrevebelow = 0x1e2a;
            t.Hcedilla = 0x1e28;
            t.Hcircle = 0x24bd;
            t.Hcircumflex = 0x0124;
            t.Hdieresis = 0x1e26;
            t.Hdotaccent = 0x1e22;
            t.Hdotbelow = 0x1e24;
            t.Hmonospace = 0xff28;
            t.Hoarmenian = 0x0540;
            t.Horicoptic = 0x03e8;
            t.Hsmall = 0xf768;
            t.Hungarumlaut = 0xf6cf;
            t.Hungarumlautsmall = 0xf6f8;
            t.Hzsquare = 0x3390;
            t.I = 0x0049;
            t.IAcyrillic = 0x042f;
            t.IJ = 0x0132;
            t.IUcyrillic = 0x042e;
            t.Iacute = 0x00cd;
            t.Iacutesmall = 0xf7ed;
            t.Ibreve = 0x012c;
            t.Icaron = 0x01cf;
            t.Icircle = 0x24be;
            t.Icircumflex = 0x00ce;
            t.Icircumflexsmall = 0xf7ee;
            t.Icyrillic = 0x0406;
            t.Idblgrave = 0x0208;
            t.Idieresis = 0x00cf;
            t.Idieresisacute = 0x1e2e;
            t.Idieresiscyrillic = 0x04e4;
            t.Idieresissmall = 0xf7ef;
            t.Idot = 0x0130;
            t.Idotaccent = 0x0130;
            t.Idotbelow = 0x1eca;
            t.Iebrevecyrillic = 0x04d6;
            t.Iecyrillic = 0x0415;
            t.Ifraktur = 0x2111;
            t.Igrave = 0x00cc;
            t.Igravesmall = 0xf7ec;
            t.Ihookabove = 0x1ec8;
            t.Iicyrillic = 0x0418;
            t.Iinvertedbreve = 0x020a;
            t.Iishortcyrillic = 0x0419;
            t.Imacron = 0x012a;
            t.Imacroncyrillic = 0x04e2;
            t.Imonospace = 0xff29;
            t.Iniarmenian = 0x053b;
            t.Iocyrillic = 0x0401;
            t.Iogonek = 0x012e;
            t.Iota = 0x0399;
            t.Iotaafrican = 0x0196;
            t.Iotadieresis = 0x03aa;
            t.Iotatonos = 0x038a;
            t.Ismall = 0xf769;
            t.Istroke = 0x0197;
            t.Itilde = 0x0128;
            t.Itildebelow = 0x1e2c;
            t.Izhitsacyrillic = 0x0474;
            t.Izhitsadblgravecyrillic = 0x0476;
            t.J = 0x004a;
            t.Jaarmenian = 0x0541;
            t.Jcircle = 0x24bf;
            t.Jcircumflex = 0x0134;
            t.Jecyrillic = 0x0408;
            t.Jheharmenian = 0x054b;
            t.Jmonospace = 0xff2a;
            t.Jsmall = 0xf76a;
            t.K = 0x004b;
            t.KBsquare = 0x3385;
            t.KKsquare = 0x33cd;
            t.Kabashkircyrillic = 0x04a0;
            t.Kacute = 0x1e30;
            t.Kacyrillic = 0x041a;
            t.Kadescendercyrillic = 0x049a;
            t.Kahookcyrillic = 0x04c3;
            t.Kappa = 0x039a;
            t.Kastrokecyrillic = 0x049e;
            t.Kaverticalstrokecyrillic = 0x049c;
            t.Kcaron = 0x01e8;
            t.Kcedilla = 0x0136;
            t.Kcircle = 0x24c0;
            t.Kcommaaccent = 0x0136;
            t.Kdotbelow = 0x1e32;
            t.Keharmenian = 0x0554;
            t.Kenarmenian = 0x053f;
            t.Khacyrillic = 0x0425;
            t.Kheicoptic = 0x03e6;
            t.Khook = 0x0198;
            t.Kjecyrillic = 0x040c;
            t.Klinebelow = 0x1e34;
            t.Kmonospace = 0xff2b;
            t.Koppacyrillic = 0x0480;
            t.Koppagreek = 0x03de;
            t.Ksicyrillic = 0x046e;
            t.Ksmall = 0xf76b;
            t.L = 0x004c;
            t.LJ = 0x01c7;
            t.LL = 0xf6bf;
            t.Lacute = 0x0139;
            t.Lambda = 0x039b;
            t.Lcaron = 0x013d;
            t.Lcedilla = 0x013b;
            t.Lcircle = 0x24c1;
            t.Lcircumflexbelow = 0x1e3c;
            t.Lcommaaccent = 0x013b;
            t.Ldot = 0x013f;
            t.Ldotaccent = 0x013f;
            t.Ldotbelow = 0x1e36;
            t.Ldotbelowmacron = 0x1e38;
            t.Liwnarmenian = 0x053c;
            t.Lj = 0x01c8;
            t.Ljecyrillic = 0x0409;
            t.Llinebelow = 0x1e3a;
            t.Lmonospace = 0xff2c;
            t.Lslash = 0x0141;
            t.Lslashsmall = 0xf6f9;
            t.Lsmall = 0xf76c;
            t.M = 0x004d;
            t.MBsquare = 0x3386;
            t.Macron = 0xf6d0;
            t.Macronsmall = 0xf7af;
            t.Macute = 0x1e3e;
            t.Mcircle = 0x24c2;
            t.Mdotaccent = 0x1e40;
            t.Mdotbelow = 0x1e42;
            t.Menarmenian = 0x0544;
            t.Mmonospace = 0xff2d;
            t.Msmall = 0xf76d;
            t.Mturned = 0x019c;
            t.Mu = 0x039c;
            t.N = 0x004e;
            t.NJ = 0x01ca;
            t.Nacute = 0x0143;
            t.Ncaron = 0x0147;
            t.Ncedilla = 0x0145;
            t.Ncircle = 0x24c3;
            t.Ncircumflexbelow = 0x1e4a;
            t.Ncommaaccent = 0x0145;
            t.Ndotaccent = 0x1e44;
            t.Ndotbelow = 0x1e46;
            t.Nhookleft = 0x019d;
            t.Nineroman = 0x2168;
            t.Nj = 0x01cb;
            t.Njecyrillic = 0x040a;
            t.Nlinebelow = 0x1e48;
            t.Nmonospace = 0xff2e;
            t.Nowarmenian = 0x0546;
            t.Nsmall = 0xf76e;
            t.Ntilde = 0x00d1;
            t.Ntildesmall = 0xf7f1;
            t.Nu = 0x039d;
            t.O = 0x004f;
            t.OE = 0x0152;
            t.OEsmall = 0xf6fa;
            t.Oacute = 0x00d3;
            t.Oacutesmall = 0xf7f3;
            t.Obarredcyrillic = 0x04e8;
            t.Obarreddieresiscyrillic = 0x04ea;
            t.Obreve = 0x014e;
            t.Ocaron = 0x01d1;
            t.Ocenteredtilde = 0x019f;
            t.Ocircle = 0x24c4;
            t.Ocircumflex = 0x00d4;
            t.Ocircumflexacute = 0x1ed0;
            t.Ocircumflexdotbelow = 0x1ed8;
            t.Ocircumflexgrave = 0x1ed2;
            t.Ocircumflexhookabove = 0x1ed4;
            t.Ocircumflexsmall = 0xf7f4;
            t.Ocircumflextilde = 0x1ed6;
            t.Ocyrillic = 0x041e;
            t.Odblacute = 0x0150;
            t.Odblgrave = 0x020c;
            t.Odieresis = 0x00d6;
            t.Odieresiscyrillic = 0x04e6;
            t.Odieresissmall = 0xf7f6;
            t.Odotbelow = 0x1ecc;
            t.Ogoneksmall = 0xf6fb;
            t.Ograve = 0x00d2;
            t.Ogravesmall = 0xf7f2;
            t.Oharmenian = 0x0555;
            t.Ohm = 0x2126;
            t.Ohookabove = 0x1ece;
            t.Ohorn = 0x01a0;
            t.Ohornacute = 0x1eda;
            t.Ohorndotbelow = 0x1ee2;
            t.Ohorngrave = 0x1edc;
            t.Ohornhookabove = 0x1ede;
            t.Ohorntilde = 0x1ee0;
            t.Ohungarumlaut = 0x0150;
            t.Oi = 0x01a2;
            t.Oinvertedbreve = 0x020e;
            t.Omacron = 0x014c;
            t.Omacronacute = 0x1e52;
            t.Omacrongrave = 0x1e50;
            t.Omega = 0x2126;
            t.Omegacyrillic = 0x0460;
            t.Omegagreek = 0x03a9;
            t.Omegaroundcyrillic = 0x047a;
            t.Omegatitlocyrillic = 0x047c;
            t.Omegatonos = 0x038f;
            t.Omicron = 0x039f;
            t.Omicrontonos = 0x038c;
            t.Omonospace = 0xff2f;
            t.Oneroman = 0x2160;
            t.Oogonek = 0x01ea;
            t.Oogonekmacron = 0x01ec;
            t.Oopen = 0x0186;
            t.Oslash = 0x00d8;
            t.Oslashacute = 0x01fe;
            t.Oslashsmall = 0xf7f8;
            t.Osmall = 0xf76f;
            t.Ostrokeacute = 0x01fe;
            t.Otcyrillic = 0x047e;
            t.Otilde = 0x00d5;
            t.Otildeacute = 0x1e4c;
            t.Otildedieresis = 0x1e4e;
            t.Otildesmall = 0xf7f5;
            t.P = 0x0050;
            t.Pacute = 0x1e54;
            t.Pcircle = 0x24c5;
            t.Pdotaccent = 0x1e56;
            t.Pecyrillic = 0x041f;
            t.Peharmenian = 0x054a;
            t.Pemiddlehookcyrillic = 0x04a6;
            t.Phi = 0x03a6;
            t.Phook = 0x01a4;
            t.Pi = 0x03a0;
            t.Piwrarmenian = 0x0553;
            t.Pmonospace = 0xff30;
            t.Psi = 0x03a8;
            t.Psicyrillic = 0x0470;
            t.Psmall = 0xf770;
            t.Q = 0x0051;
            t.Qcircle = 0x24c6;
            t.Qmonospace = 0xff31;
            t.Qsmall = 0xf771;
            t.R = 0x0052;
            t.Raarmenian = 0x054c;
            t.Racute = 0x0154;
            t.Rcaron = 0x0158;
            t.Rcedilla = 0x0156;
            t.Rcircle = 0x24c7;
            t.Rcommaaccent = 0x0156;
            t.Rdblgrave = 0x0210;
            t.Rdotaccent = 0x1e58;
            t.Rdotbelow = 0x1e5a;
            t.Rdotbelowmacron = 0x1e5c;
            t.Reharmenian = 0x0550;
            t.Rfraktur = 0x211c;
            t.Rho = 0x03a1;
            t.Ringsmall = 0xf6fc;
            t.Rinvertedbreve = 0x0212;
            t.Rlinebelow = 0x1e5e;
            t.Rmonospace = 0xff32;
            t.Rsmall = 0xf772;
            t.Rsmallinverted = 0x0281;
            t.Rsmallinvertedsuperior = 0x02b6;
            t.S = 0x0053;
            t.SF010000 = 0x250c;
            t.SF020000 = 0x2514;
            t.SF030000 = 0x2510;
            t.SF040000 = 0x2518;
            t.SF050000 = 0x253c;
            t.SF060000 = 0x252c;
            t.SF070000 = 0x2534;
            t.SF080000 = 0x251c;
            t.SF090000 = 0x2524;
            t.SF100000 = 0x2500;
            t.SF110000 = 0x2502;
            t.SF190000 = 0x2561;
            t.SF200000 = 0x2562;
            t.SF210000 = 0x2556;
            t.SF220000 = 0x2555;
            t.SF230000 = 0x2563;
            t.SF240000 = 0x2551;
            t.SF250000 = 0x2557;
            t.SF260000 = 0x255d;
            t.SF270000 = 0x255c;
            t.SF280000 = 0x255b;
            t.SF360000 = 0x255e;
            t.SF370000 = 0x255f;
            t.SF380000 = 0x255a;
            t.SF390000 = 0x2554;
            t.SF400000 = 0x2569;
            t.SF410000 = 0x2566;
            t.SF420000 = 0x2560;
            t.SF430000 = 0x2550;
            t.SF440000 = 0x256c;
            t.SF450000 = 0x2567;
            t.SF460000 = 0x2568;
            t.SF470000 = 0x2564;
            t.SF480000 = 0x2565;
            t.SF490000 = 0x2559;
            t.SF500000 = 0x2558;
            t.SF510000 = 0x2552;
            t.SF520000 = 0x2553;
            t.SF530000 = 0x256b;
            t.SF540000 = 0x256a;
            t.Sacute = 0x015a;
            t.Sacutedotaccent = 0x1e64;
            t.Sampigreek = 0x03e0;
            t.Scaron = 0x0160;
            t.Scarondotaccent = 0x1e66;
            t.Scaronsmall = 0xf6fd;
            t.Scedilla = 0x015e;
            t.Schwa = 0x018f;
            t.Schwacyrillic = 0x04d8;
            t.Schwadieresiscyrillic = 0x04da;
            t.Scircle = 0x24c8;
            t.Scircumflex = 0x015c;
            t.Scommaaccent = 0x0218;
            t.Sdotaccent = 0x1e60;
            t.Sdotbelow = 0x1e62;
            t.Sdotbelowdotaccent = 0x1e68;
            t.Seharmenian = 0x054d;
            t.Sevenroman = 0x2166;
            t.Shaarmenian = 0x0547;
            t.Shacyrillic = 0x0428;
            t.Shchacyrillic = 0x0429;
            t.Sheicoptic = 0x03e2;
            t.Shhacyrillic = 0x04ba;
            t.Shimacoptic = 0x03ec;
            t.Sigma = 0x03a3;
            t.Sixroman = 0x2165;
            t.Smonospace = 0xff33;
            t.Softsigncyrillic = 0x042c;
            t.Ssmall = 0xf773;
            t.Stigmagreek = 0x03da;
            t.T = 0x0054;
            t.Tau = 0x03a4;
            t.Tbar = 0x0166;
            t.Tcaron = 0x0164;
            t.Tcedilla = 0x0162;
            t.Tcircle = 0x24c9;
            t.Tcircumflexbelow = 0x1e70;
            t.Tcommaaccent = 0x0162;
            t.Tdotaccent = 0x1e6a;
            t.Tdotbelow = 0x1e6c;
            t.Tecyrillic = 0x0422;
            t.Tedescendercyrillic = 0x04ac;
            t.Tenroman = 0x2169;
            t.Tetsecyrillic = 0x04b4;
            t.Theta = 0x0398;
            t.Thook = 0x01ac;
            t.Thorn = 0x00de;
            t.Thornsmall = 0xf7fe;
            t.Threeroman = 0x2162;
            t.Tildesmall = 0xf6fe;
            t.Tiwnarmenian = 0x054f;
            t.Tlinebelow = 0x1e6e;
            t.Tmonospace = 0xff34;
            t.Toarmenian = 0x0539;
            t.Tonefive = 0x01bc;
            t.Tonesix = 0x0184;
            t.Tonetwo = 0x01a7;
            t.Tretroflexhook = 0x01ae;
            t.Tsecyrillic = 0x0426;
            t.Tshecyrillic = 0x040b;
            t.Tsmall = 0xf774;
            t.Twelveroman = 0x216b;
            t.Tworoman = 0x2161;
            t.U = 0x0055;
            t.Uacute = 0x00da;
            t.Uacutesmall = 0xf7fa;
            t.Ubreve = 0x016c;
            t.Ucaron = 0x01d3;
            t.Ucircle = 0x24ca;
            t.Ucircumflex = 0x00db;
            t.Ucircumflexbelow = 0x1e76;
            t.Ucircumflexsmall = 0xf7fb;
            t.Ucyrillic = 0x0423;
            t.Udblacute = 0x0170;
            t.Udblgrave = 0x0214;
            t.Udieresis = 0x00dc;
            t.Udieresisacute = 0x01d7;
            t.Udieresisbelow = 0x1e72;
            t.Udieresiscaron = 0x01d9;
            t.Udieresiscyrillic = 0x04f0;
            t.Udieresisgrave = 0x01db;
            t.Udieresismacron = 0x01d5;
            t.Udieresissmall = 0xf7fc;
            t.Udotbelow = 0x1ee4;
            t.Ugrave = 0x00d9;
            t.Ugravesmall = 0xf7f9;
            t.Uhookabove = 0x1ee6;
            t.Uhorn = 0x01af;
            t.Uhornacute = 0x1ee8;
            t.Uhorndotbelow = 0x1ef0;
            t.Uhorngrave = 0x1eea;
            t.Uhornhookabove = 0x1eec;
            t.Uhorntilde = 0x1eee;
            t.Uhungarumlaut = 0x0170;
            t.Uhungarumlautcyrillic = 0x04f2;
            t.Uinvertedbreve = 0x0216;
            t.Ukcyrillic = 0x0478;
            t.Umacron = 0x016a;
            t.Umacroncyrillic = 0x04ee;
            t.Umacrondieresis = 0x1e7a;
            t.Umonospace = 0xff35;
            t.Uogonek = 0x0172;
            t.Upsilon = 0x03a5;
            t.Upsilon1 = 0x03d2;
            t.Upsilonacutehooksymbolgreek = 0x03d3;
            t.Upsilonafrican = 0x01b1;
            t.Upsilondieresis = 0x03ab;
            t.Upsilondieresishooksymbolgreek = 0x03d4;
            t.Upsilonhooksymbol = 0x03d2;
            t.Upsilontonos = 0x038e;
            t.Uring = 0x016e;
            t.Ushortcyrillic = 0x040e;
            t.Usmall = 0xf775;
            t.Ustraightcyrillic = 0x04ae;
            t.Ustraightstrokecyrillic = 0x04b0;
            t.Utilde = 0x0168;
            t.Utildeacute = 0x1e78;
            t.Utildebelow = 0x1e74;
            t.V = 0x0056;
            t.Vcircle = 0x24cb;
            t.Vdotbelow = 0x1e7e;
            t.Vecyrillic = 0x0412;
            t.Vewarmenian = 0x054e;
            t.Vhook = 0x01b2;
            t.Vmonospace = 0xff36;
            t.Voarmenian = 0x0548;
            t.Vsmall = 0xf776;
            t.Vtilde = 0x1e7c;
            t.W = 0x0057;
            t.Wacute = 0x1e82;
            t.Wcircle = 0x24cc;
            t.Wcircumflex = 0x0174;
            t.Wdieresis = 0x1e84;
            t.Wdotaccent = 0x1e86;
            t.Wdotbelow = 0x1e88;
            t.Wgrave = 0x1e80;
            t.Wmonospace = 0xff37;
            t.Wsmall = 0xf777;
            t.X = 0x0058;
            t.Xcircle = 0x24cd;
            t.Xdieresis = 0x1e8c;
            t.Xdotaccent = 0x1e8a;
            t.Xeharmenian = 0x053d;
            t.Xi = 0x039e;
            t.Xmonospace = 0xff38;
            t.Xsmall = 0xf778;
            t.Y = 0x0059;
            t.Yacute = 0x00dd;
            t.Yacutesmall = 0xf7fd;
            t.Yatcyrillic = 0x0462;
            t.Ycircle = 0x24ce;
            t.Ycircumflex = 0x0176;
            t.Ydieresis = 0x0178;
            t.Ydieresissmall = 0xf7ff;
            t.Ydotaccent = 0x1e8e;
            t.Ydotbelow = 0x1ef4;
            t.Yericyrillic = 0x042b;
            t.Yerudieresiscyrillic = 0x04f8;
            t.Ygrave = 0x1ef2;
            t.Yhook = 0x01b3;
            t.Yhookabove = 0x1ef6;
            t.Yiarmenian = 0x0545;
            t.Yicyrillic = 0x0407;
            t.Yiwnarmenian = 0x0552;
            t.Ymonospace = 0xff39;
            t.Ysmall = 0xf779;
            t.Ytilde = 0x1ef8;
            t.Yusbigcyrillic = 0x046a;
            t.Yusbigiotifiedcyrillic = 0x046c;
            t.Yuslittlecyrillic = 0x0466;
            t.Yuslittleiotifiedcyrillic = 0x0468;
            t.Z = 0x005a;
            t.Zaarmenian = 0x0536;
            t.Zacute = 0x0179;
            t.Zcaron = 0x017d;
            t.Zcaronsmall = 0xf6ff;
            t.Zcircle = 0x24cf;
            t.Zcircumflex = 0x1e90;
            t.Zdot = 0x017b;
            t.Zdotaccent = 0x017b;
            t.Zdotbelow = 0x1e92;
            t.Zecyrillic = 0x0417;
            t.Zedescendercyrillic = 0x0498;
            t.Zedieresiscyrillic = 0x04de;
            t.Zeta = 0x0396;
            t.Zhearmenian = 0x053a;
            t.Zhebrevecyrillic = 0x04c1;
            t.Zhecyrillic = 0x0416;
            t.Zhedescendercyrillic = 0x0496;
            t.Zhedieresiscyrillic = 0x04dc;
            t.Zlinebelow = 0x1e94;
            t.Zmonospace = 0xff3a;
            t.Zsmall = 0xf77a;
            t.Zstroke = 0x01b5;
            t.a = 0x0061;
            t.aabengali = 0x0986;
            t.aacute = 0x00e1;
            t.aadeva = 0x0906;
            t.aagujarati = 0x0a86;
            t.aagurmukhi = 0x0a06;
            t.aamatragurmukhi = 0x0a3e;
            t.aarusquare = 0x3303;
            t.aavowelsignbengali = 0x09be;
            t.aavowelsigndeva = 0x093e;
            t.aavowelsigngujarati = 0x0abe;
            t.abbreviationmarkarmenian = 0x055f;
            t.abbreviationsigndeva = 0x0970;
            t.abengali = 0x0985;
            t.abopomofo = 0x311a;
            t.abreve = 0x0103;
            t.abreveacute = 0x1eaf;
            t.abrevecyrillic = 0x04d1;
            t.abrevedotbelow = 0x1eb7;
            t.abrevegrave = 0x1eb1;
            t.abrevehookabove = 0x1eb3;
            t.abrevetilde = 0x1eb5;
            t.acaron = 0x01ce;
            t.acircle = 0x24d0;
            t.acircumflex = 0x00e2;
            t.acircumflexacute = 0x1ea5;
            t.acircumflexdotbelow = 0x1ead;
            t.acircumflexgrave = 0x1ea7;
            t.acircumflexhookabove = 0x1ea9;
            t.acircumflextilde = 0x1eab;
            t.acute = 0x00b4;
            t.acutebelowcmb = 0x0317;
            t.acutecmb = 0x0301;
            t.acutecomb = 0x0301;
            t.acutedeva = 0x0954;
            t.acutelowmod = 0x02cf;
            t.acutetonecmb = 0x0341;
            t.acyrillic = 0x0430;
            t.adblgrave = 0x0201;
            t.addakgurmukhi = 0x0a71;
            t.adeva = 0x0905;
            t.adieresis = 0x00e4;
            t.adieresiscyrillic = 0x04d3;
            t.adieresismacron = 0x01df;
            t.adotbelow = 0x1ea1;
            t.adotmacron = 0x01e1;
            t.ae = 0x00e6;
            t.aeacute = 0x01fd;
            t.aekorean = 0x3150;
            t.aemacron = 0x01e3;
            t.afii00208 = 0x2015;
            t.afii08941 = 0x20a4;
            t.afii10017 = 0x0410;
            t.afii10018 = 0x0411;
            t.afii10019 = 0x0412;
            t.afii10020 = 0x0413;
            t.afii10021 = 0x0414;
            t.afii10022 = 0x0415;
            t.afii10023 = 0x0401;
            t.afii10024 = 0x0416;
            t.afii10025 = 0x0417;
            t.afii10026 = 0x0418;
            t.afii10027 = 0x0419;
            t.afii10028 = 0x041a;
            t.afii10029 = 0x041b;
            t.afii10030 = 0x041c;
            t.afii10031 = 0x041d;
            t.afii10032 = 0x041e;
            t.afii10033 = 0x041f;
            t.afii10034 = 0x0420;
            t.afii10035 = 0x0421;
            t.afii10036 = 0x0422;
            t.afii10037 = 0x0423;
            t.afii10038 = 0x0424;
            t.afii10039 = 0x0425;
            t.afii10040 = 0x0426;
            t.afii10041 = 0x0427;
            t.afii10042 = 0x0428;
            t.afii10043 = 0x0429;
            t.afii10044 = 0x042a;
            t.afii10045 = 0x042b;
            t.afii10046 = 0x042c;
            t.afii10047 = 0x042d;
            t.afii10048 = 0x042e;
            t.afii10049 = 0x042f;
            t.afii10050 = 0x0490;
            t.afii10051 = 0x0402;
            t.afii10052 = 0x0403;
            t.afii10053 = 0x0404;
            t.afii10054 = 0x0405;
            t.afii10055 = 0x0406;
            t.afii10056 = 0x0407;
            t.afii10057 = 0x0408;
            t.afii10058 = 0x0409;
            t.afii10059 = 0x040a;
            t.afii10060 = 0x040b;
            t.afii10061 = 0x040c;
            t.afii10062 = 0x040e;
            t.afii10063 = 0xf6c4;
            t.afii10064 = 0xf6c5;
            t.afii10065 = 0x0430;
            t.afii10066 = 0x0431;
            t.afii10067 = 0x0432;
            t.afii10068 = 0x0433;
            t.afii10069 = 0x0434;
            t.afii10070 = 0x0435;
            t.afii10071 = 0x0451;
            t.afii10072 = 0x0436;
            t.afii10073 = 0x0437;
            t.afii10074 = 0x0438;
            t.afii10075 = 0x0439;
            t.afii10076 = 0x043a;
            t.afii10077 = 0x043b;
            t.afii10078 = 0x043c;
            t.afii10079 = 0x043d;
            t.afii10080 = 0x043e;
            t.afii10081 = 0x043f;
            t.afii10082 = 0x0440;
            t.afii10083 = 0x0441;
            t.afii10084 = 0x0442;
            t.afii10085 = 0x0443;
            t.afii10086 = 0x0444;
            t.afii10087 = 0x0445;
            t.afii10088 = 0x0446;
            t.afii10089 = 0x0447;
            t.afii10090 = 0x0448;
            t.afii10091 = 0x0449;
            t.afii10092 = 0x044a;
            t.afii10093 = 0x044b;
            t.afii10094 = 0x044c;
            t.afii10095 = 0x044d;
            t.afii10096 = 0x044e;
            t.afii10097 = 0x044f;
            t.afii10098 = 0x0491;
            t.afii10099 = 0x0452;
            t.afii10100 = 0x0453;
            t.afii10101 = 0x0454;
            t.afii10102 = 0x0455;
            t.afii10103 = 0x0456;
            t.afii10104 = 0x0457;
            t.afii10105 = 0x0458;
            t.afii10106 = 0x0459;
            t.afii10107 = 0x045a;
            t.afii10108 = 0x045b;
            t.afii10109 = 0x045c;
            t.afii10110 = 0x045e;
            t.afii10145 = 0x040f;
            t.afii10146 = 0x0462;
            t.afii10147 = 0x0472;
            t.afii10148 = 0x0474;
            t.afii10192 = 0xf6c6;
            t.afii10193 = 0x045f;
            t.afii10194 = 0x0463;
            t.afii10195 = 0x0473;
            t.afii10196 = 0x0475;
            t.afii10831 = 0xf6c7;
            t.afii10832 = 0xf6c8;
            t.afii10846 = 0x04d9;
            t.afii299 = 0x200e;
            t.afii300 = 0x200f;
            t.afii301 = 0x200d;
            t.afii57381 = 0x066a;
            t.afii57388 = 0x060c;
            t.afii57392 = 0x0660;
            t.afii57393 = 0x0661;
            t.afii57394 = 0x0662;
            t.afii57395 = 0x0663;
            t.afii57396 = 0x0664;
            t.afii57397 = 0x0665;
            t.afii57398 = 0x0666;
            t.afii57399 = 0x0667;
            t.afii57400 = 0x0668;
            t.afii57401 = 0x0669;
            t.afii57403 = 0x061b;
            t.afii57407 = 0x061f;
            t.afii57409 = 0x0621;
            t.afii57410 = 0x0622;
            t.afii57411 = 0x0623;
            t.afii57412 = 0x0624;
            t.afii57413 = 0x0625;
            t.afii57414 = 0x0626;
            t.afii57415 = 0x0627;
            t.afii57416 = 0x0628;
            t.afii57417 = 0x0629;
            t.afii57418 = 0x062a;
            t.afii57419 = 0x062b;
            t.afii57420 = 0x062c;
            t.afii57421 = 0x062d;
            t.afii57422 = 0x062e;
            t.afii57423 = 0x062f;
            t.afii57424 = 0x0630;
            t.afii57425 = 0x0631;
            t.afii57426 = 0x0632;
            t.afii57427 = 0x0633;
            t.afii57428 = 0x0634;
            t.afii57429 = 0x0635;
            t.afii57430 = 0x0636;
            t.afii57431 = 0x0637;
            t.afii57432 = 0x0638;
            t.afii57433 = 0x0639;
            t.afii57434 = 0x063a;
            t.afii57440 = 0x0640;
            t.afii57441 = 0x0641;
            t.afii57442 = 0x0642;
            t.afii57443 = 0x0643;
            t.afii57444 = 0x0644;
            t.afii57445 = 0x0645;
            t.afii57446 = 0x0646;
            t.afii57448 = 0x0648;
            t.afii57449 = 0x0649;
            t.afii57450 = 0x064a;
            t.afii57451 = 0x064b;
            t.afii57452 = 0x064c;
            t.afii57453 = 0x064d;
            t.afii57454 = 0x064e;
            t.afii57455 = 0x064f;
            t.afii57456 = 0x0650;
            t.afii57457 = 0x0651;
            t.afii57458 = 0x0652;
            t.afii57470 = 0x0647;
            t.afii57505 = 0x06a4;
            t.afii57506 = 0x067e;
            t.afii57507 = 0x0686;
            t.afii57508 = 0x0698;
            t.afii57509 = 0x06af;
            t.afii57511 = 0x0679;
            t.afii57512 = 0x0688;
            t.afii57513 = 0x0691;
            t.afii57514 = 0x06ba;
            t.afii57519 = 0x06d2;
            t.afii57534 = 0x06d5;
            t.afii57636 = 0x20aa;
            t.afii57645 = 0x05be;
            t.afii57658 = 0x05c3;
            t.afii57664 = 0x05d0;
            t.afii57665 = 0x05d1;
            t.afii57666 = 0x05d2;
            t.afii57667 = 0x05d3;
            t.afii57668 = 0x05d4;
            t.afii57669 = 0x05d5;
            t.afii57670 = 0x05d6;
            t.afii57671 = 0x05d7;
            t.afii57672 = 0x05d8;
            t.afii57673 = 0x05d9;
            t.afii57674 = 0x05da;
            t.afii57675 = 0x05db;
            t.afii57676 = 0x05dc;
            t.afii57677 = 0x05dd;
            t.afii57678 = 0x05de;
            t.afii57679 = 0x05df;
            t.afii57680 = 0x05e0;
            t.afii57681 = 0x05e1;
            t.afii57682 = 0x05e2;
            t.afii57683 = 0x05e3;
            t.afii57684 = 0x05e4;
            t.afii57685 = 0x05e5;
            t.afii57686 = 0x05e6;
            t.afii57687 = 0x05e7;
            t.afii57688 = 0x05e8;
            t.afii57689 = 0x05e9;
            t.afii57690 = 0x05ea;
            t.afii57694 = 0xfb2a;
            t.afii57695 = 0xfb2b;
            t.afii57700 = 0xfb4b;
            t.afii57705 = 0xfb1f;
            t.afii57716 = 0x05f0;
            t.afii57717 = 0x05f1;
            t.afii57718 = 0x05f2;
            t.afii57723 = 0xfb35;
            t.afii57793 = 0x05b4;
            t.afii57794 = 0x05b5;
            t.afii57795 = 0x05b6;
            t.afii57796 = 0x05bb;
            t.afii57797 = 0x05b8;
            t.afii57798 = 0x05b7;
            t.afii57799 = 0x05b0;
            t.afii57800 = 0x05b2;
            t.afii57801 = 0x05b1;
            t.afii57802 = 0x05b3;
            t.afii57803 = 0x05c2;
            t.afii57804 = 0x05c1;
            t.afii57806 = 0x05b9;
            t.afii57807 = 0x05bc;
            t.afii57839 = 0x05bd;
            t.afii57841 = 0x05bf;
            t.afii57842 = 0x05c0;
            t.afii57929 = 0x02bc;
            t.afii61248 = 0x2105;
            t.afii61289 = 0x2113;
            t.afii61352 = 0x2116;
            t.afii61573 = 0x202c;
            t.afii61574 = 0x202d;
            t.afii61575 = 0x202e;
            t.afii61664 = 0x200c;
            t.afii63167 = 0x066d;
            t.afii64937 = 0x02bd;
            t.agrave = 0x00e0;
            t.agujarati = 0x0a85;
            t.agurmukhi = 0x0a05;
            t.ahiragana = 0x3042;
            t.ahookabove = 0x1ea3;
            t.aibengali = 0x0990;
            t.aibopomofo = 0x311e;
            t.aideva = 0x0910;
            t.aiecyrillic = 0x04d5;
            t.aigujarati = 0x0a90;
            t.aigurmukhi = 0x0a10;
            t.aimatragurmukhi = 0x0a48;
            t.ainarabic = 0x0639;
            t.ainfinalarabic = 0xfeca;
            t.aininitialarabic = 0xfecb;
            t.ainmedialarabic = 0xfecc;
            t.ainvertedbreve = 0x0203;
            t.aivowelsignbengali = 0x09c8;
            t.aivowelsigndeva = 0x0948;
            t.aivowelsigngujarati = 0x0ac8;
            t.akatakana = 0x30a2;
            t.akatakanahalfwidth = 0xff71;
            t.akorean = 0x314f;
            t.alef = 0x05d0;
            t.alefarabic = 0x0627;
            t.alefdageshhebrew = 0xfb30;
            t.aleffinalarabic = 0xfe8e;
            t.alefhamzaabovearabic = 0x0623;
            t.alefhamzaabovefinalarabic = 0xfe84;
            t.alefhamzabelowarabic = 0x0625;
            t.alefhamzabelowfinalarabic = 0xfe88;
            t.alefhebrew = 0x05d0;
            t.aleflamedhebrew = 0xfb4f;
            t.alefmaddaabovearabic = 0x0622;
            t.alefmaddaabovefinalarabic = 0xfe82;
            t.alefmaksuraarabic = 0x0649;
            t.alefmaksurafinalarabic = 0xfef0;
            t.alefmaksurainitialarabic = 0xfef3;
            t.alefmaksuramedialarabic = 0xfef4;
            t.alefpatahhebrew = 0xfb2e;
            t.alefqamatshebrew = 0xfb2f;
            t.aleph = 0x2135;
            t.allequal = 0x224c;
            t.alpha = 0x03b1;
            t.alphatonos = 0x03ac;
            t.amacron = 0x0101;
            t.amonospace = 0xff41;
            t.ampersand = 0x0026;
            t.ampersandmonospace = 0xff06;
            t.ampersandsmall = 0xf726;
            t.amsquare = 0x33c2;
            t.anbopomofo = 0x3122;
            t.angbopomofo = 0x3124;
            t.angbracketleft = 0x3008;
            t.angbracketright = 0x3009;
            t.angkhankhuthai = 0x0e5a;
            t.angle = 0x2220;
            t.anglebracketleft = 0x3008;
            t.anglebracketleftvertical = 0xfe3f;
            t.anglebracketright = 0x3009;
            t.anglebracketrightvertical = 0xfe40;
            t.angleleft = 0x2329;
            t.angleright = 0x232a;
            t.angstrom = 0x212b;
            t.anoteleia = 0x0387;
            t.anudattadeva = 0x0952;
            t.anusvarabengali = 0x0982;
            t.anusvaradeva = 0x0902;
            t.anusvaragujarati = 0x0a82;
            t.aogonek = 0x0105;
            t.apaatosquare = 0x3300;
            t.aparen = 0x249c;
            t.apostrophearmenian = 0x055a;
            t.apostrophemod = 0x02bc;
            t.apple = 0xf8ff;
            t.approaches = 0x2250;
            t.approxequal = 0x2248;
            t.approxequalorimage = 0x2252;
            t.approximatelyequal = 0x2245;
            t.araeaekorean = 0x318e;
            t.araeakorean = 0x318d;
            t.arc = 0x2312;
            t.arighthalfring = 0x1e9a;
            t.aring = 0x00e5;
            t.aringacute = 0x01fb;
            t.aringbelow = 0x1e01;
            t.arrowboth = 0x2194;
            t.arrowdashdown = 0x21e3;
            t.arrowdashleft = 0x21e0;
            t.arrowdashright = 0x21e2;
            t.arrowdashup = 0x21e1;
            t.arrowdblboth = 0x21d4;
            t.arrowdbldown = 0x21d3;
            t.arrowdblleft = 0x21d0;
            t.arrowdblright = 0x21d2;
            t.arrowdblup = 0x21d1;
            t.arrowdown = 0x2193;
            t.arrowdownleft = 0x2199;
            t.arrowdownright = 0x2198;
            t.arrowdownwhite = 0x21e9;
            t.arrowheaddownmod = 0x02c5;
            t.arrowheadleftmod = 0x02c2;
            t.arrowheadrightmod = 0x02c3;
            t.arrowheadupmod = 0x02c4;
            t.arrowhorizex = 0xf8e7;
            t.arrowleft = 0x2190;
            t.arrowleftdbl = 0x21d0;
            t.arrowleftdblstroke = 0x21cd;
            t.arrowleftoverright = 0x21c6;
            t.arrowleftwhite = 0x21e6;
            t.arrowright = 0x2192;
            t.arrowrightdblstroke = 0x21cf;
            t.arrowrightheavy = 0x279e;
            t.arrowrightoverleft = 0x21c4;
            t.arrowrightwhite = 0x21e8;
            t.arrowtableft = 0x21e4;
            t.arrowtabright = 0x21e5;
            t.arrowup = 0x2191;
            t.arrowupdn = 0x2195;
            t.arrowupdnbse = 0x21a8;
            t.arrowupdownbase = 0x21a8;
            t.arrowupleft = 0x2196;
            t.arrowupleftofdown = 0x21c5;
            t.arrowupright = 0x2197;
            t.arrowupwhite = 0x21e7;
            t.arrowvertex = 0xf8e6;
            t.asciicircum = 0x005e;
            t.asciicircummonospace = 0xff3e;
            t.asciitilde = 0x007e;
            t.asciitildemonospace = 0xff5e;
            t.ascript = 0x0251;
            t.ascriptturned = 0x0252;
            t.asmallhiragana = 0x3041;
            t.asmallkatakana = 0x30a1;
            t.asmallkatakanahalfwidth = 0xff67;
            t.asterisk = 0x002a;
            t.asteriskaltonearabic = 0x066d;
            t.asteriskarabic = 0x066d;
            t.asteriskmath = 0x2217;
            t.asteriskmonospace = 0xff0a;
            t.asterisksmall = 0xfe61;
            t.asterism = 0x2042;
            t.asuperior = 0xf6e9;
            t.asymptoticallyequal = 0x2243;
            t.at = 0x0040;
            t.atilde = 0x00e3;
            t.atmonospace = 0xff20;
            t.atsmall = 0xfe6b;
            t.aturned = 0x0250;
            t.aubengali = 0x0994;
            t.aubopomofo = 0x3120;
            t.audeva = 0x0914;
            t.augujarati = 0x0a94;
            t.augurmukhi = 0x0a14;
            t.aulengthmarkbengali = 0x09d7;
            t.aumatragurmukhi = 0x0a4c;
            t.auvowelsignbengali = 0x09cc;
            t.auvowelsigndeva = 0x094c;
            t.auvowelsigngujarati = 0x0acc;
            t.avagrahadeva = 0x093d;
            t.aybarmenian = 0x0561;
            t.ayin = 0x05e2;
            t.ayinaltonehebrew = 0xfb20;
            t.ayinhebrew = 0x05e2;
            t.b = 0x0062;
            t.babengali = 0x09ac;
            t.backslash = 0x005c;
            t.backslashmonospace = 0xff3c;
            t.badeva = 0x092c;
            t.bagujarati = 0x0aac;
            t.bagurmukhi = 0x0a2c;
            t.bahiragana = 0x3070;
            t.bahtthai = 0x0e3f;
            t.bakatakana = 0x30d0;
            t.bar = 0x007c;
            t.barmonospace = 0xff5c;
            t.bbopomofo = 0x3105;
            t.bcircle = 0x24d1;
            t.bdotaccent = 0x1e03;
            t.bdotbelow = 0x1e05;
            t.beamedsixteenthnotes = 0x266c;
            t.because = 0x2235;
            t.becyrillic = 0x0431;
            t.beharabic = 0x0628;
            t.behfinalarabic = 0xfe90;
            t.behinitialarabic = 0xfe91;
            t.behiragana = 0x3079;
            t.behmedialarabic = 0xfe92;
            t.behmeeminitialarabic = 0xfc9f;
            t.behmeemisolatedarabic = 0xfc08;
            t.behnoonfinalarabic = 0xfc6d;
            t.bekatakana = 0x30d9;
            t.benarmenian = 0x0562;
            t.bet = 0x05d1;
            t.beta = 0x03b2;
            t.betasymbolgreek = 0x03d0;
            t.betdagesh = 0xfb31;
            t.betdageshhebrew = 0xfb31;
            t.bethebrew = 0x05d1;
            t.betrafehebrew = 0xfb4c;
            t.bhabengali = 0x09ad;
            t.bhadeva = 0x092d;
            t.bhagujarati = 0x0aad;
            t.bhagurmukhi = 0x0a2d;
            t.bhook = 0x0253;
            t.bihiragana = 0x3073;
            t.bikatakana = 0x30d3;
            t.bilabialclick = 0x0298;
            t.bindigurmukhi = 0x0a02;
            t.birusquare = 0x3331;
            t.blackcircle = 0x25cf;
            t.blackdiamond = 0x25c6;
            t.blackdownpointingtriangle = 0x25bc;
            t.blackleftpointingpointer = 0x25c4;
            t.blackleftpointingtriangle = 0x25c0;
            t.blacklenticularbracketleft = 0x3010;
            t.blacklenticularbracketleftvertical = 0xfe3b;
            t.blacklenticularbracketright = 0x3011;
            t.blacklenticularbracketrightvertical = 0xfe3c;
            t.blacklowerlefttriangle = 0x25e3;
            t.blacklowerrighttriangle = 0x25e2;
            t.blackrectangle = 0x25ac;
            t.blackrightpointingpointer = 0x25ba;
            t.blackrightpointingtriangle = 0x25b6;
            t.blacksmallsquare = 0x25aa;
            t.blacksmilingface = 0x263b;
            t.blacksquare = 0x25a0;
            t.blackstar = 0x2605;
            t.blackupperlefttriangle = 0x25e4;
            t.blackupperrighttriangle = 0x25e5;
            t.blackuppointingsmalltriangle = 0x25b4;
            t.blackuppointingtriangle = 0x25b2;
            t.blank = 0x2423;
            t.blinebelow = 0x1e07;
            t.block = 0x2588;
            t.bmonospace = 0xff42;
            t.bobaimaithai = 0x0e1a;
            t.bohiragana = 0x307c;
            t.bokatakana = 0x30dc;
            t.bparen = 0x249d;
            t.bqsquare = 0x33c3;
            t.braceex = 0xf8f4;
            t.braceleft = 0x007b;
            t.braceleftbt = 0xf8f3;
            t.braceleftmid = 0xf8f2;
            t.braceleftmonospace = 0xff5b;
            t.braceleftsmall = 0xfe5b;
            t.bracelefttp = 0xf8f1;
            t.braceleftvertical = 0xfe37;
            t.braceright = 0x007d;
            t.bracerightbt = 0xf8fe;
            t.bracerightmid = 0xf8fd;
            t.bracerightmonospace = 0xff5d;
            t.bracerightsmall = 0xfe5c;
            t.bracerighttp = 0xf8fc;
            t.bracerightvertical = 0xfe38;
            t.bracketleft = 0x005b;
            t.bracketleftbt = 0xf8f0;
            t.bracketleftex = 0xf8ef;
            t.bracketleftmonospace = 0xff3b;
            t.bracketlefttp = 0xf8ee;
            t.bracketright = 0x005d;
            t.bracketrightbt = 0xf8fb;
            t.bracketrightex = 0xf8fa;
            t.bracketrightmonospace = 0xff3d;
            t.bracketrighttp = 0xf8f9;
            t.breve = 0x02d8;
            t.brevebelowcmb = 0x032e;
            t.brevecmb = 0x0306;
            t.breveinvertedbelowcmb = 0x032f;
            t.breveinvertedcmb = 0x0311;
            t.breveinverteddoublecmb = 0x0361;
            t.bridgebelowcmb = 0x032a;
            t.bridgeinvertedbelowcmb = 0x033a;
            t.brokenbar = 0x00a6;
            t.bstroke = 0x0180;
            t.bsuperior = 0xf6ea;
            t.btopbar = 0x0183;
            t.buhiragana = 0x3076;
            t.bukatakana = 0x30d6;
            t.bullet = 0x2022;
            t.bulletinverse = 0x25d8;
            t.bulletoperator = 0x2219;
            t.bullseye = 0x25ce;
            t.c = 0x0063;
            t.caarmenian = 0x056e;
            t.cabengali = 0x099a;
            t.cacute = 0x0107;
            t.cadeva = 0x091a;
            t.cagujarati = 0x0a9a;
            t.cagurmukhi = 0x0a1a;
            t.calsquare = 0x3388;
            t.candrabindubengali = 0x0981;
            t.candrabinducmb = 0x0310;
            t.candrabindudeva = 0x0901;
            t.candrabindugujarati = 0x0a81;
            t.capslock = 0x21ea;
            t.careof = 0x2105;
            t.caron = 0x02c7;
            t.caronbelowcmb = 0x032c;
            t.caroncmb = 0x030c;
            t.carriagereturn = 0x21b5;
            t.cbopomofo = 0x3118;
            t.ccaron = 0x010d;
            t.ccedilla = 0x00e7;
            t.ccedillaacute = 0x1e09;
            t.ccircle = 0x24d2;
            t.ccircumflex = 0x0109;
            t.ccurl = 0x0255;
            t.cdot = 0x010b;
            t.cdotaccent = 0x010b;
            t.cdsquare = 0x33c5;
            t.cedilla = 0x00b8;
            t.cedillacmb = 0x0327;
            t.cent = 0x00a2;
            t.centigrade = 0x2103;
            t.centinferior = 0xf6df;
            t.centmonospace = 0xffe0;
            t.centoldstyle = 0xf7a2;
            t.centsuperior = 0xf6e0;
            t.chaarmenian = 0x0579;
            t.chabengali = 0x099b;
            t.chadeva = 0x091b;
            t.chagujarati = 0x0a9b;
            t.chagurmukhi = 0x0a1b;
            t.chbopomofo = 0x3114;
            t.cheabkhasiancyrillic = 0x04bd;
            t.checkmark = 0x2713;
            t.checyrillic = 0x0447;
            t.chedescenderabkhasiancyrillic = 0x04bf;
            t.chedescendercyrillic = 0x04b7;
            t.chedieresiscyrillic = 0x04f5;
            t.cheharmenian = 0x0573;
            t.chekhakassiancyrillic = 0x04cc;
            t.cheverticalstrokecyrillic = 0x04b9;
            t.chi = 0x03c7;
            t.chieuchacirclekorean = 0x3277;
            t.chieuchaparenkorean = 0x3217;
            t.chieuchcirclekorean = 0x3269;
            t.chieuchkorean = 0x314a;
            t.chieuchparenkorean = 0x3209;
            t.chochangthai = 0x0e0a;
            t.chochanthai = 0x0e08;
            t.chochingthai = 0x0e09;
            t.chochoethai = 0x0e0c;
            t.chook = 0x0188;
            t.cieucacirclekorean = 0x3276;
            t.cieucaparenkorean = 0x3216;
            t.cieuccirclekorean = 0x3268;
            t.cieuckorean = 0x3148;
            t.cieucparenkorean = 0x3208;
            t.cieucuparenkorean = 0x321c;
            t.circle = 0x25cb;
            t.circlecopyrt = 0x00a9;
            t.circlemultiply = 0x2297;
            t.circleot = 0x2299;
            t.circleplus = 0x2295;
            t.circlepostalmark = 0x3036;
            t.circlewithlefthalfblack = 0x25d0;
            t.circlewithrighthalfblack = 0x25d1;
            t.circumflex = 0x02c6;
            t.circumflexbelowcmb = 0x032d;
            t.circumflexcmb = 0x0302;
            t.clear = 0x2327;
            t.clickalveolar = 0x01c2;
            t.clickdental = 0x01c0;
            t.clicklateral = 0x01c1;
            t.clickretroflex = 0x01c3;
            t.club = 0x2663;
            t.clubsuitblack = 0x2663;
            t.clubsuitwhite = 0x2667;
            t.cmcubedsquare = 0x33a4;
            t.cmonospace = 0xff43;
            t.cmsquaredsquare = 0x33a0;
            t.coarmenian = 0x0581;
            t.colon = 0x003a;
            t.colonmonetary = 0x20a1;
            t.colonmonospace = 0xff1a;
            t.colonsign = 0x20a1;
            t.colonsmall = 0xfe55;
            t.colontriangularhalfmod = 0x02d1;
            t.colontriangularmod = 0x02d0;
            t.comma = 0x002c;
            t.commaabovecmb = 0x0313;
            t.commaaboverightcmb = 0x0315;
            t.commaaccent = 0xf6c3;
            t.commaarabic = 0x060c;
            t.commaarmenian = 0x055d;
            t.commainferior = 0xf6e1;
            t.commamonospace = 0xff0c;
            t.commareversedabovecmb = 0x0314;
            t.commareversedmod = 0x02bd;
            t.commasmall = 0xfe50;
            t.commasuperior = 0xf6e2;
            t.commaturnedabovecmb = 0x0312;
            t.commaturnedmod = 0x02bb;
            t.compass = 0x263c;
            t.congruent = 0x2245;
            t.contourintegral = 0x222e;
            t.control = 0x2303;
            t.controlACK = 0x0006;
            t.controlBEL = 0x0007;
            t.controlBS = 0x0008;
            t.controlCAN = 0x0018;
            t.controlCR = 0x000d;
            t.controlDC1 = 0x0011;
            t.controlDC2 = 0x0012;
            t.controlDC3 = 0x0013;
            t.controlDC4 = 0x0014;
            t.controlDEL = 0x007f;
            t.controlDLE = 0x0010;
            t.controlEM = 0x0019;
            t.controlENQ = 0x0005;
            t.controlEOT = 0x0004;
            t.controlESC = 0x001b;
            t.controlETB = 0x0017;
            t.controlETX = 0x0003;
            t.controlFF = 0x000c;
            t.controlFS = 0x001c;
            t.controlGS = 0x001d;
            t.controlHT = 0x0009;
            t.controlLF = 0x000a;
            t.controlNAK = 0x0015;
            t.controlNULL = 0x0000;
            t.controlRS = 0x001e;
            t.controlSI = 0x000f;
            t.controlSO = 0x000e;
            t.controlSOT = 0x0002;
            t.controlSTX = 0x0001;
            t.controlSUB = 0x001a;
            t.controlSYN = 0x0016;
            t.controlUS = 0x001f;
            t.controlVT = 0x000b;
            t.copyright = 0x00a9;
            t.copyrightsans = 0xf8e9;
            t.copyrightserif = 0xf6d9;
            t.cornerbracketleft = 0x300c;
            t.cornerbracketlefthalfwidth = 0xff62;
            t.cornerbracketleftvertical = 0xfe41;
            t.cornerbracketright = 0x300d;
            t.cornerbracketrighthalfwidth = 0xff63;
            t.cornerbracketrightvertical = 0xfe42;
            t.corporationsquare = 0x337f;
            t.cosquare = 0x33c7;
            t.coverkgsquare = 0x33c6;
            t.cparen = 0x249e;
            t.cruzeiro = 0x20a2;
            t.cstretched = 0x0297;
            t.curlyand = 0x22cf;
            t.curlyor = 0x22ce;
            t.currency = 0x00a4;
            t.cyrBreve = 0xf6d1;
            t.cyrFlex = 0xf6d2;
            t.cyrbreve = 0xf6d4;
            t.cyrflex = 0xf6d5;
            t.d = 0x0064;
            t.daarmenian = 0x0564;
            t.dabengali = 0x09a6;
            t.dadarabic = 0x0636;
            t.dadeva = 0x0926;
            t.dadfinalarabic = 0xfebe;
            t.dadinitialarabic = 0xfebf;
            t.dadmedialarabic = 0xfec0;
            t.dagesh = 0x05bc;
            t.dageshhebrew = 0x05bc;
            t.dagger = 0x2020;
            t.daggerdbl = 0x2021;
            t.dagujarati = 0x0aa6;
            t.dagurmukhi = 0x0a26;
            t.dahiragana = 0x3060;
            t.dakatakana = 0x30c0;
            t.dalarabic = 0x062f;
            t.dalet = 0x05d3;
            t.daletdagesh = 0xfb33;
            t.daletdageshhebrew = 0xfb33;
            t.dalethebrew = 0x05d3;
            t.dalfinalarabic = 0xfeaa;
            t.dammaarabic = 0x064f;
            t.dammalowarabic = 0x064f;
            t.dammatanaltonearabic = 0x064c;
            t.dammatanarabic = 0x064c;
            t.danda = 0x0964;
            t.dargahebrew = 0x05a7;
            t.dargalefthebrew = 0x05a7;
            t.dasiapneumatacyrilliccmb = 0x0485;
            t.dblGrave = 0xf6d3;
            t.dblanglebracketleft = 0x300a;
            t.dblanglebracketleftvertical = 0xfe3d;
            t.dblanglebracketright = 0x300b;
            t.dblanglebracketrightvertical = 0xfe3e;
            t.dblarchinvertedbelowcmb = 0x032b;
            t.dblarrowleft = 0x21d4;
            t.dblarrowright = 0x21d2;
            t.dbldanda = 0x0965;
            t.dblgrave = 0xf6d6;
            t.dblgravecmb = 0x030f;
            t.dblintegral = 0x222c;
            t.dbllowline = 0x2017;
            t.dbllowlinecmb = 0x0333;
            t.dbloverlinecmb = 0x033f;
            t.dblprimemod = 0x02ba;
            t.dblverticalbar = 0x2016;
            t.dblverticallineabovecmb = 0x030e;
            t.dbopomofo = 0x3109;
            t.dbsquare = 0x33c8;
            t.dcaron = 0x010f;
            t.dcedilla = 0x1e11;
            t.dcircle = 0x24d3;
            t.dcircumflexbelow = 0x1e13;
            t.dcroat = 0x0111;
            t.ddabengali = 0x09a1;
            t.ddadeva = 0x0921;
            t.ddagujarati = 0x0aa1;
            t.ddagurmukhi = 0x0a21;
            t.ddalarabic = 0x0688;
            t.ddalfinalarabic = 0xfb89;
            t.dddhadeva = 0x095c;
            t.ddhabengali = 0x09a2;
            t.ddhadeva = 0x0922;
            t.ddhagujarati = 0x0aa2;
            t.ddhagurmukhi = 0x0a22;
            t.ddotaccent = 0x1e0b;
            t.ddotbelow = 0x1e0d;
            t.decimalseparatorarabic = 0x066b;
            t.decimalseparatorpersian = 0x066b;
            t.decyrillic = 0x0434;
            t.degree = 0x00b0;
            t.dehihebrew = 0x05ad;
            t.dehiragana = 0x3067;
            t.deicoptic = 0x03ef;
            t.dekatakana = 0x30c7;
            t.deleteleft = 0x232b;
            t.deleteright = 0x2326;
            t.delta = 0x03b4;
            t.deltaturned = 0x018d;
            t.denominatorminusonenumeratorbengali = 0x09f8;
            t.dezh = 0x02a4;
            t.dhabengali = 0x09a7;
            t.dhadeva = 0x0927;
            t.dhagujarati = 0x0aa7;
            t.dhagurmukhi = 0x0a27;
            t.dhook = 0x0257;
            t.dialytikatonos = 0x0385;
            t.dialytikatonoscmb = 0x0344;
            t.diamond = 0x2666;
            t.diamondsuitwhite = 0x2662;
            t.dieresis = 0x00a8;
            t.dieresisacute = 0xf6d7;
            t.dieresisbelowcmb = 0x0324;
            t.dieresiscmb = 0x0308;
            t.dieresisgrave = 0xf6d8;
            t.dieresistonos = 0x0385;
            t.dihiragana = 0x3062;
            t.dikatakana = 0x30c2;
            t.dittomark = 0x3003;
            t.divide = 0x00f7;
            t.divides = 0x2223;
            t.divisionslash = 0x2215;
            t.djecyrillic = 0x0452;
            t.dkshade = 0x2593;
            t.dlinebelow = 0x1e0f;
            t.dlsquare = 0x3397;
            t.dmacron = 0x0111;
            t.dmonospace = 0xff44;
            t.dnblock = 0x2584;
            t.dochadathai = 0x0e0e;
            t.dodekthai = 0x0e14;
            t.dohiragana = 0x3069;
            t.dokatakana = 0x30c9;
            t.dollar = 0x0024;
            t.dollarinferior = 0xf6e3;
            t.dollarmonospace = 0xff04;
            t.dollaroldstyle = 0xf724;
            t.dollarsmall = 0xfe69;
            t.dollarsuperior = 0xf6e4;
            t.dong = 0x20ab;
            t.dorusquare = 0x3326;
            t.dotaccent = 0x02d9;
            t.dotaccentcmb = 0x0307;
            t.dotbelowcmb = 0x0323;
            t.dotbelowcomb = 0x0323;
            t.dotkatakana = 0x30fb;
            t.dotlessi = 0x0131;
            t.dotlessj = 0xf6be;
            t.dotlessjstrokehook = 0x0284;
            t.dotmath = 0x22c5;
            t.dottedcircle = 0x25cc;
            t.doubleyodpatah = 0xfb1f;
            t.doubleyodpatahhebrew = 0xfb1f;
            t.downtackbelowcmb = 0x031e;
            t.downtackmod = 0x02d5;
            t.dparen = 0x249f;
            t.dsuperior = 0xf6eb;
            t.dtail = 0x0256;
            t.dtopbar = 0x018c;
            t.duhiragana = 0x3065;
            t.dukatakana = 0x30c5;
            t.dz = 0x01f3;
            t.dzaltone = 0x02a3;
            t.dzcaron = 0x01c6;
            t.dzcurl = 0x02a5;
            t.dzeabkhasiancyrillic = 0x04e1;
            t.dzecyrillic = 0x0455;
            t.dzhecyrillic = 0x045f;
            t.e = 0x0065;
            t.eacute = 0x00e9;
            t.earth = 0x2641;
            t.ebengali = 0x098f;
            t.ebopomofo = 0x311c;
            t.ebreve = 0x0115;
            t.ecandradeva = 0x090d;
            t.ecandragujarati = 0x0a8d;
            t.ecandravowelsigndeva = 0x0945;
            t.ecandravowelsigngujarati = 0x0ac5;
            t.ecaron = 0x011b;
            t.ecedillabreve = 0x1e1d;
            t.echarmenian = 0x0565;
            t.echyiwnarmenian = 0x0587;
            t.ecircle = 0x24d4;
            t.ecircumflex = 0x00ea;
            t.ecircumflexacute = 0x1ebf;
            t.ecircumflexbelow = 0x1e19;
            t.ecircumflexdotbelow = 0x1ec7;
            t.ecircumflexgrave = 0x1ec1;
            t.ecircumflexhookabove = 0x1ec3;
            t.ecircumflextilde = 0x1ec5;
            t.ecyrillic = 0x0454;
            t.edblgrave = 0x0205;
            t.edeva = 0x090f;
            t.edieresis = 0x00eb;
            t.edot = 0x0117;
            t.edotaccent = 0x0117;
            t.edotbelow = 0x1eb9;
            t.eegurmukhi = 0x0a0f;
            t.eematragurmukhi = 0x0a47;
            t.efcyrillic = 0x0444;
            t.egrave = 0x00e8;
            t.egujarati = 0x0a8f;
            t.eharmenian = 0x0567;
            t.ehbopomofo = 0x311d;
            t.ehiragana = 0x3048;
            t.ehookabove = 0x1ebb;
            t.eibopomofo = 0x311f;
            t.eight = 0x0038;
            t.eightarabic = 0x0668;
            t.eightbengali = 0x09ee;
            t.eightcircle = 0x2467;
            t.eightcircleinversesansserif = 0x2791;
            t.eightdeva = 0x096e;
            t.eighteencircle = 0x2471;
            t.eighteenparen = 0x2485;
            t.eighteenperiod = 0x2499;
            t.eightgujarati = 0x0aee;
            t.eightgurmukhi = 0x0a6e;
            t.eighthackarabic = 0x0668;
            t.eighthangzhou = 0x3028;
            t.eighthnotebeamed = 0x266b;
            t.eightideographicparen = 0x3227;
            t.eightinferior = 0x2088;
            t.eightmonospace = 0xff18;
            t.eightoldstyle = 0xf738;
            t.eightparen = 0x247b;
            t.eightperiod = 0x248f;
            t.eightpersian = 0x06f8;
            t.eightroman = 0x2177;
            t.eightsuperior = 0x2078;
            t.eightthai = 0x0e58;
            t.einvertedbreve = 0x0207;
            t.eiotifiedcyrillic = 0x0465;
            t.ekatakana = 0x30a8;
            t.ekatakanahalfwidth = 0xff74;
            t.ekonkargurmukhi = 0x0a74;
            t.ekorean = 0x3154;
            t.elcyrillic = 0x043b;
            t.element = 0x2208;
            t.elevencircle = 0x246a;
            t.elevenparen = 0x247e;
            t.elevenperiod = 0x2492;
            t.elevenroman = 0x217a;
            t.ellipsis = 0x2026;
            t.ellipsisvertical = 0x22ee;
            t.emacron = 0x0113;
            t.emacronacute = 0x1e17;
            t.emacrongrave = 0x1e15;
            t.emcyrillic = 0x043c;
            t.emdash = 0x2014;
            t.emdashvertical = 0xfe31;
            t.emonospace = 0xff45;
            t.emphasismarkarmenian = 0x055b;
            t.emptyset = 0x2205;
            t.enbopomofo = 0x3123;
            t.encyrillic = 0x043d;
            t.endash = 0x2013;
            t.endashvertical = 0xfe32;
            t.endescendercyrillic = 0x04a3;
            t.eng = 0x014b;
            t.engbopomofo = 0x3125;
            t.enghecyrillic = 0x04a5;
            t.enhookcyrillic = 0x04c8;
            t.enspace = 0x2002;
            t.eogonek = 0x0119;
            t.eokorean = 0x3153;
            t.eopen = 0x025b;
            t.eopenclosed = 0x029a;
            t.eopenreversed = 0x025c;
            t.eopenreversedclosed = 0x025e;
            t.eopenreversedhook = 0x025d;
            t.eparen = 0x24a0;
            t.epsilon = 0x03b5;
            t.epsilontonos = 0x03ad;
            t.equal = 0x003d;
            t.equalmonospace = 0xff1d;
            t.equalsmall = 0xfe66;
            t.equalsuperior = 0x207c;
            t.equivalence = 0x2261;
            t.erbopomofo = 0x3126;
            t.ercyrillic = 0x0440;
            t.ereversed = 0x0258;
            t.ereversedcyrillic = 0x044d;
            t.escyrillic = 0x0441;
            t.esdescendercyrillic = 0x04ab;
            t.esh = 0x0283;
            t.eshcurl = 0x0286;
            t.eshortdeva = 0x090e;
            t.eshortvowelsigndeva = 0x0946;
            t.eshreversedloop = 0x01aa;
            t.eshsquatreversed = 0x0285;
            t.esmallhiragana = 0x3047;
            t.esmallkatakana = 0x30a7;
            t.esmallkatakanahalfwidth = 0xff6a;
            t.estimated = 0x212e;
            t.esuperior = 0xf6ec;
            t.eta = 0x03b7;
            t.etarmenian = 0x0568;
            t.etatonos = 0x03ae;
            t.eth = 0x00f0;
            t.etilde = 0x1ebd;
            t.etildebelow = 0x1e1b;
            t.etnahtafoukhhebrew = 0x0591;
            t.etnahtafoukhlefthebrew = 0x0591;
            t.etnahtahebrew = 0x0591;
            t.etnahtalefthebrew = 0x0591;
            t.eturned = 0x01dd;
            t.eukorean = 0x3161;
            t.euro = 0x20ac;
            t.evowelsignbengali = 0x09c7;
            t.evowelsigndeva = 0x0947;
            t.evowelsigngujarati = 0x0ac7;
            t.exclam = 0x0021;
            t.exclamarmenian = 0x055c;
            t.exclamdbl = 0x203c;
            t.exclamdown = 0x00a1;
            t.exclamdownsmall = 0xf7a1;
            t.exclammonospace = 0xff01;
            t.exclamsmall = 0xf721;
            t.existential = 0x2203;
            t.ezh = 0x0292;
            t.ezhcaron = 0x01ef;
            t.ezhcurl = 0x0293;
            t.ezhreversed = 0x01b9;
            t.ezhtail = 0x01ba;
            t.f = 0x0066;
            t.fadeva = 0x095e;
            t.fagurmukhi = 0x0a5e;
            t.fahrenheit = 0x2109;
            t.fathaarabic = 0x064e;
            t.fathalowarabic = 0x064e;
            t.fathatanarabic = 0x064b;
            t.fbopomofo = 0x3108;
            t.fcircle = 0x24d5;
            t.fdotaccent = 0x1e1f;
            t.feharabic = 0x0641;
            t.feharmenian = 0x0586;
            t.fehfinalarabic = 0xfed2;
            t.fehinitialarabic = 0xfed3;
            t.fehmedialarabic = 0xfed4;
            t.feicoptic = 0x03e5;
            t.female = 0x2640;
            t.ff = 0xfb00;
            t.f_f = 0xfb00;
            t.ffi = 0xfb03;
            t.f_f_i = 0xfb03;
            t.ffl = 0xfb04;
            t.f_f_l = 0xfb04;
            t.fi = 0xfb01;
            t.f_i = 0xfb01;
            t.fifteencircle = 0x246e;
            t.fifteenparen = 0x2482;
            t.fifteenperiod = 0x2496;
            t.figuredash = 0x2012;
            t.filledbox = 0x25a0;
            t.filledrect = 0x25ac;
            t.finalkaf = 0x05da;
            t.finalkafdagesh = 0xfb3a;
            t.finalkafdageshhebrew = 0xfb3a;
            t.finalkafhebrew = 0x05da;
            t.finalmem = 0x05dd;
            t.finalmemhebrew = 0x05dd;
            t.finalnun = 0x05df;
            t.finalnunhebrew = 0x05df;
            t.finalpe = 0x05e3;
            t.finalpehebrew = 0x05e3;
            t.finaltsadi = 0x05e5;
            t.finaltsadihebrew = 0x05e5;
            t.firsttonechinese = 0x02c9;
            t.fisheye = 0x25c9;
            t.fitacyrillic = 0x0473;
            t.five = 0x0035;
            t.fivearabic = 0x0665;
            t.fivebengali = 0x09eb;
            t.fivecircle = 0x2464;
            t.fivecircleinversesansserif = 0x278e;
            t.fivedeva = 0x096b;
            t.fiveeighths = 0x215d;
            t.fivegujarati = 0x0aeb;
            t.fivegurmukhi = 0x0a6b;
            t.fivehackarabic = 0x0665;
            t.fivehangzhou = 0x3025;
            t.fiveideographicparen = 0x3224;
            t.fiveinferior = 0x2085;
            t.fivemonospace = 0xff15;
            t.fiveoldstyle = 0xf735;
            t.fiveparen = 0x2478;
            t.fiveperiod = 0x248c;
            t.fivepersian = 0x06f5;
            t.fiveroman = 0x2174;
            t.fivesuperior = 0x2075;
            t.fivethai = 0x0e55;
            t.fl = 0xfb02;
            t.f_l = 0xfb02;
            t.florin = 0x0192;
            t.fmonospace = 0xff46;
            t.fmsquare = 0x3399;
            t.fofanthai = 0x0e1f;
            t.fofathai = 0x0e1d;
            t.fongmanthai = 0x0e4f;
            t.forall = 0x2200;
            t.four = 0x0034;
            t.fourarabic = 0x0664;
            t.fourbengali = 0x09ea;
            t.fourcircle = 0x2463;
            t.fourcircleinversesansserif = 0x278d;
            t.fourdeva = 0x096a;
            t.fourgujarati = 0x0aea;
            t.fourgurmukhi = 0x0a6a;
            t.fourhackarabic = 0x0664;
            t.fourhangzhou = 0x3024;
            t.fourideographicparen = 0x3223;
            t.fourinferior = 0x2084;
            t.fourmonospace = 0xff14;
            t.fournumeratorbengali = 0x09f7;
            t.fouroldstyle = 0xf734;
            t.fourparen = 0x2477;
            t.fourperiod = 0x248b;
            t.fourpersian = 0x06f4;
            t.fourroman = 0x2173;
            t.foursuperior = 0x2074;
            t.fourteencircle = 0x246d;
            t.fourteenparen = 0x2481;
            t.fourteenperiod = 0x2495;
            t.fourthai = 0x0e54;
            t.fourthtonechinese = 0x02cb;
            t.fparen = 0x24a1;
            t.fraction = 0x2044;
            t.franc = 0x20a3;
            t.g = 0x0067;
            t.gabengali = 0x0997;
            t.gacute = 0x01f5;
            t.gadeva = 0x0917;
            t.gafarabic = 0x06af;
            t.gaffinalarabic = 0xfb93;
            t.gafinitialarabic = 0xfb94;
            t.gafmedialarabic = 0xfb95;
            t.gagujarati = 0x0a97;
            t.gagurmukhi = 0x0a17;
            t.gahiragana = 0x304c;
            t.gakatakana = 0x30ac;
            t.gamma = 0x03b3;
            t.gammalatinsmall = 0x0263;
            t.gammasuperior = 0x02e0;
            t.gangiacoptic = 0x03eb;
            t.gbopomofo = 0x310d;
            t.gbreve = 0x011f;
            t.gcaron = 0x01e7;
            t.gcedilla = 0x0123;
            t.gcircle = 0x24d6;
            t.gcircumflex = 0x011d;
            t.gcommaaccent = 0x0123;
            t.gdot = 0x0121;
            t.gdotaccent = 0x0121;
            t.gecyrillic = 0x0433;
            t.gehiragana = 0x3052;
            t.gekatakana = 0x30b2;
            t.geometricallyequal = 0x2251;
            t.gereshaccenthebrew = 0x059c;
            t.gereshhebrew = 0x05f3;
            t.gereshmuqdamhebrew = 0x059d;
            t.germandbls = 0x00df;
            t.gershayimaccenthebrew = 0x059e;
            t.gershayimhebrew = 0x05f4;
            t.getamark = 0x3013;
            t.ghabengali = 0x0998;
            t.ghadarmenian = 0x0572;
            t.ghadeva = 0x0918;
            t.ghagujarati = 0x0a98;
            t.ghagurmukhi = 0x0a18;
            t.ghainarabic = 0x063a;
            t.ghainfinalarabic = 0xfece;
            t.ghaininitialarabic = 0xfecf;
            t.ghainmedialarabic = 0xfed0;
            t.ghemiddlehookcyrillic = 0x0495;
            t.ghestrokecyrillic = 0x0493;
            t.gheupturncyrillic = 0x0491;
            t.ghhadeva = 0x095a;
            t.ghhagurmukhi = 0x0a5a;
            t.ghook = 0x0260;
            t.ghzsquare = 0x3393;
            t.gihiragana = 0x304e;
            t.gikatakana = 0x30ae;
            t.gimarmenian = 0x0563;
            t.gimel = 0x05d2;
            t.gimeldagesh = 0xfb32;
            t.gimeldageshhebrew = 0xfb32;
            t.gimelhebrew = 0x05d2;
            t.gjecyrillic = 0x0453;
            t.glottalinvertedstroke = 0x01be;
            t.glottalstop = 0x0294;
            t.glottalstopinverted = 0x0296;
            t.glottalstopmod = 0x02c0;
            t.glottalstopreversed = 0x0295;
            t.glottalstopreversedmod = 0x02c1;
            t.glottalstopreversedsuperior = 0x02e4;
            t.glottalstopstroke = 0x02a1;
            t.glottalstopstrokereversed = 0x02a2;
            t.gmacron = 0x1e21;
            t.gmonospace = 0xff47;
            t.gohiragana = 0x3054;
            t.gokatakana = 0x30b4;
            t.gparen = 0x24a2;
            t.gpasquare = 0x33ac;
            t.gradient = 0x2207;
            t.grave = 0x0060;
            t.gravebelowcmb = 0x0316;
            t.gravecmb = 0x0300;
            t.gravecomb = 0x0300;
            t.gravedeva = 0x0953;
            t.gravelowmod = 0x02ce;
            t.gravemonospace = 0xff40;
            t.gravetonecmb = 0x0340;
            t.greater = 0x003e;
            t.greaterequal = 0x2265;
            t.greaterequalorless = 0x22db;
            t.greatermonospace = 0xff1e;
            t.greaterorequivalent = 0x2273;
            t.greaterorless = 0x2277;
            t.greateroverequal = 0x2267;
            t.greatersmall = 0xfe65;
            t.gscript = 0x0261;
            t.gstroke = 0x01e5;
            t.guhiragana = 0x3050;
            t.guillemotleft = 0x00ab;
            t.guillemotright = 0x00bb;
            t.guilsinglleft = 0x2039;
            t.guilsinglright = 0x203a;
            t.gukatakana = 0x30b0;
            t.guramusquare = 0x3318;
            t.gysquare = 0x33c9;
            t.h = 0x0068;
            t.haabkhasiancyrillic = 0x04a9;
            t.haaltonearabic = 0x06c1;
            t.habengali = 0x09b9;
            t.hadescendercyrillic = 0x04b3;
            t.hadeva = 0x0939;
            t.hagujarati = 0x0ab9;
            t.hagurmukhi = 0x0a39;
            t.haharabic = 0x062d;
            t.hahfinalarabic = 0xfea2;
            t.hahinitialarabic = 0xfea3;
            t.hahiragana = 0x306f;
            t.hahmedialarabic = 0xfea4;
            t.haitusquare = 0x332a;
            t.hakatakana = 0x30cf;
            t.hakatakanahalfwidth = 0xff8a;
            t.halantgurmukhi = 0x0a4d;
            t.hamzaarabic = 0x0621;
            t.hamzalowarabic = 0x0621;
            t.hangulfiller = 0x3164;
            t.hardsigncyrillic = 0x044a;
            t.harpoonleftbarbup = 0x21bc;
            t.harpoonrightbarbup = 0x21c0;
            t.hasquare = 0x33ca;
            t.hatafpatah = 0x05b2;
            t.hatafpatah16 = 0x05b2;
            t.hatafpatah23 = 0x05b2;
            t.hatafpatah2f = 0x05b2;
            t.hatafpatahhebrew = 0x05b2;
            t.hatafpatahnarrowhebrew = 0x05b2;
            t.hatafpatahquarterhebrew = 0x05b2;
            t.hatafpatahwidehebrew = 0x05b2;
            t.hatafqamats = 0x05b3;
            t.hatafqamats1b = 0x05b3;
            t.hatafqamats28 = 0x05b3;
            t.hatafqamats34 = 0x05b3;
            t.hatafqamatshebrew = 0x05b3;
            t.hatafqamatsnarrowhebrew = 0x05b3;
            t.hatafqamatsquarterhebrew = 0x05b3;
            t.hatafqamatswidehebrew = 0x05b3;
            t.hatafsegol = 0x05b1;
            t.hatafsegol17 = 0x05b1;
            t.hatafsegol24 = 0x05b1;
            t.hatafsegol30 = 0x05b1;
            t.hatafsegolhebrew = 0x05b1;
            t.hatafsegolnarrowhebrew = 0x05b1;
            t.hatafsegolquarterhebrew = 0x05b1;
            t.hatafsegolwidehebrew = 0x05b1;
            t.hbar = 0x0127;
            t.hbopomofo = 0x310f;
            t.hbrevebelow = 0x1e2b;
            t.hcedilla = 0x1e29;
            t.hcircle = 0x24d7;
            t.hcircumflex = 0x0125;
            t.hdieresis = 0x1e27;
            t.hdotaccent = 0x1e23;
            t.hdotbelow = 0x1e25;
            t.he = 0x05d4;
            t.heart = 0x2665;
            t.heartsuitblack = 0x2665;
            t.heartsuitwhite = 0x2661;
            t.hedagesh = 0xfb34;
            t.hedageshhebrew = 0xfb34;
            t.hehaltonearabic = 0x06c1;
            t.heharabic = 0x0647;
            t.hehebrew = 0x05d4;
            t.hehfinalaltonearabic = 0xfba7;
            t.hehfinalalttwoarabic = 0xfeea;
            t.hehfinalarabic = 0xfeea;
            t.hehhamzaabovefinalarabic = 0xfba5;
            t.hehhamzaaboveisolatedarabic = 0xfba4;
            t.hehinitialaltonearabic = 0xfba8;
            t.hehinitialarabic = 0xfeeb;
            t.hehiragana = 0x3078;
            t.hehmedialaltonearabic = 0xfba9;
            t.hehmedialarabic = 0xfeec;
            t.heiseierasquare = 0x337b;
            t.hekatakana = 0x30d8;
            t.hekatakanahalfwidth = 0xff8d;
            t.hekutaarusquare = 0x3336;
            t.henghook = 0x0267;
            t.herutusquare = 0x3339;
            t.het = 0x05d7;
            t.hethebrew = 0x05d7;
            t.hhook = 0x0266;
            t.hhooksuperior = 0x02b1;
            t.hieuhacirclekorean = 0x327b;
            t.hieuhaparenkorean = 0x321b;
            t.hieuhcirclekorean = 0x326d;
            t.hieuhkorean = 0x314e;
            t.hieuhparenkorean = 0x320d;
            t.hihiragana = 0x3072;
            t.hikatakana = 0x30d2;
            t.hikatakanahalfwidth = 0xff8b;
            t.hiriq = 0x05b4;
            t.hiriq14 = 0x05b4;
            t.hiriq21 = 0x05b4;
            t.hiriq2d = 0x05b4;
            t.hiriqhebrew = 0x05b4;
            t.hiriqnarrowhebrew = 0x05b4;
            t.hiriqquarterhebrew = 0x05b4;
            t.hiriqwidehebrew = 0x05b4;
            t.hlinebelow = 0x1e96;
            t.hmonospace = 0xff48;
            t.hoarmenian = 0x0570;
            t.hohipthai = 0x0e2b;
            t.hohiragana = 0x307b;
            t.hokatakana = 0x30db;
            t.hokatakanahalfwidth = 0xff8e;
            t.holam = 0x05b9;
            t.holam19 = 0x05b9;
            t.holam26 = 0x05b9;
            t.holam32 = 0x05b9;
            t.holamhebrew = 0x05b9;
            t.holamnarrowhebrew = 0x05b9;
            t.holamquarterhebrew = 0x05b9;
            t.holamwidehebrew = 0x05b9;
            t.honokhukthai = 0x0e2e;
            t.hookabovecomb = 0x0309;
            t.hookcmb = 0x0309;
            t.hookpalatalizedbelowcmb = 0x0321;
            t.hookretroflexbelowcmb = 0x0322;
            t.hoonsquare = 0x3342;
            t.horicoptic = 0x03e9;
            t.horizontalbar = 0x2015;
            t.horncmb = 0x031b;
            t.hotsprings = 0x2668;
            t.house = 0x2302;
            t.hparen = 0x24a3;
            t.hsuperior = 0x02b0;
            t.hturned = 0x0265;
            t.huhiragana = 0x3075;
            t.huiitosquare = 0x3333;
            t.hukatakana = 0x30d5;
            t.hukatakanahalfwidth = 0xff8c;
            t.hungarumlaut = 0x02dd;
            t.hungarumlautcmb = 0x030b;
            t.hv = 0x0195;
            t.hyphen = 0x002d;
            t.hypheninferior = 0xf6e5;
            t.hyphenmonospace = 0xff0d;
            t.hyphensmall = 0xfe63;
            t.hyphensuperior = 0xf6e6;
            t.hyphentwo = 0x2010;
            t.i = 0x0069;
            t.iacute = 0x00ed;
            t.iacyrillic = 0x044f;
            t.ibengali = 0x0987;
            t.ibopomofo = 0x3127;
            t.ibreve = 0x012d;
            t.icaron = 0x01d0;
            t.icircle = 0x24d8;
            t.icircumflex = 0x00ee;
            t.icyrillic = 0x0456;
            t.idblgrave = 0x0209;
            t.ideographearthcircle = 0x328f;
            t.ideographfirecircle = 0x328b;
            t.ideographicallianceparen = 0x323f;
            t.ideographiccallparen = 0x323a;
            t.ideographiccentrecircle = 0x32a5;
            t.ideographicclose = 0x3006;
            t.ideographiccomma = 0x3001;
            t.ideographiccommaleft = 0xff64;
            t.ideographiccongratulationparen = 0x3237;
            t.ideographiccorrectcircle = 0x32a3;
            t.ideographicearthparen = 0x322f;
            t.ideographicenterpriseparen = 0x323d;
            t.ideographicexcellentcircle = 0x329d;
            t.ideographicfestivalparen = 0x3240;
            t.ideographicfinancialcircle = 0x3296;
            t.ideographicfinancialparen = 0x3236;
            t.ideographicfireparen = 0x322b;
            t.ideographichaveparen = 0x3232;
            t.ideographichighcircle = 0x32a4;
            t.ideographiciterationmark = 0x3005;
            t.ideographiclaborcircle = 0x3298;
            t.ideographiclaborparen = 0x3238;
            t.ideographicleftcircle = 0x32a7;
            t.ideographiclowcircle = 0x32a6;
            t.ideographicmedicinecircle = 0x32a9;
            t.ideographicmetalparen = 0x322e;
            t.ideographicmoonparen = 0x322a;
            t.ideographicnameparen = 0x3234;
            t.ideographicperiod = 0x3002;
            t.ideographicprintcircle = 0x329e;
            t.ideographicreachparen = 0x3243;
            t.ideographicrepresentparen = 0x3239;
            t.ideographicresourceparen = 0x323e;
            t.ideographicrightcircle = 0x32a8;
            t.ideographicsecretcircle = 0x3299;
            t.ideographicselfparen = 0x3242;
            t.ideographicsocietyparen = 0x3233;
            t.ideographicspace = 0x3000;
            t.ideographicspecialparen = 0x3235;
            t.ideographicstockparen = 0x3231;
            t.ideographicstudyparen = 0x323b;
            t.ideographicsunparen = 0x3230;
            t.ideographicsuperviseparen = 0x323c;
            t.ideographicwaterparen = 0x322c;
            t.ideographicwoodparen = 0x322d;
            t.ideographiczero = 0x3007;
            t.ideographmetalcircle = 0x328e;
            t.ideographmooncircle = 0x328a;
            t.ideographnamecircle = 0x3294;
            t.ideographsuncircle = 0x3290;
            t.ideographwatercircle = 0x328c;
            t.ideographwoodcircle = 0x328d;
            t.ideva = 0x0907;
            t.idieresis = 0x00ef;
            t.idieresisacute = 0x1e2f;
            t.idieresiscyrillic = 0x04e5;
            t.idotbelow = 0x1ecb;
            t.iebrevecyrillic = 0x04d7;
            t.iecyrillic = 0x0435;
            t.ieungacirclekorean = 0x3275;
            t.ieungaparenkorean = 0x3215;
            t.ieungcirclekorean = 0x3267;
            t.ieungkorean = 0x3147;
            t.ieungparenkorean = 0x3207;
            t.igrave = 0x00ec;
            t.igujarati = 0x0a87;
            t.igurmukhi = 0x0a07;
            t.ihiragana = 0x3044;
            t.ihookabove = 0x1ec9;
            t.iibengali = 0x0988;
            t.iicyrillic = 0x0438;
            t.iideva = 0x0908;
            t.iigujarati = 0x0a88;
            t.iigurmukhi = 0x0a08;
            t.iimatragurmukhi = 0x0a40;
            t.iinvertedbreve = 0x020b;
            t.iishortcyrillic = 0x0439;
            t.iivowelsignbengali = 0x09c0;
            t.iivowelsigndeva = 0x0940;
            t.iivowelsigngujarati = 0x0ac0;
            t.ij = 0x0133;
            t.ikatakana = 0x30a4;
            t.ikatakanahalfwidth = 0xff72;
            t.ikorean = 0x3163;
            t.ilde = 0x02dc;
            t.iluyhebrew = 0x05ac;
            t.imacron = 0x012b;
            t.imacroncyrillic = 0x04e3;
            t.imageorapproximatelyequal = 0x2253;
            t.imatragurmukhi = 0x0a3f;
            t.imonospace = 0xff49;
            t.increment = 0x2206;
            t.infinity = 0x221e;
            t.iniarmenian = 0x056b;
            t.integral = 0x222b;
            t.integralbottom = 0x2321;
            t.integralbt = 0x2321;
            t.integralex = 0xf8f5;
            t.integraltop = 0x2320;
            t.integraltp = 0x2320;
            t.intersection = 0x2229;
            t.intisquare = 0x3305;
            t.invbullet = 0x25d8;
            t.invcircle = 0x25d9;
            t.invsmileface = 0x263b;
            t.iocyrillic = 0x0451;
            t.iogonek = 0x012f;
            t.iota = 0x03b9;
            t.iotadieresis = 0x03ca;
            t.iotadieresistonos = 0x0390;
            t.iotalatin = 0x0269;
            t.iotatonos = 0x03af;
            t.iparen = 0x24a4;
            t.irigurmukhi = 0x0a72;
            t.ismallhiragana = 0x3043;
            t.ismallkatakana = 0x30a3;
            t.ismallkatakanahalfwidth = 0xff68;
            t.issharbengali = 0x09fa;
            t.istroke = 0x0268;
            t.isuperior = 0xf6ed;
            t.iterationhiragana = 0x309d;
            t.iterationkatakana = 0x30fd;
            t.itilde = 0x0129;
            t.itildebelow = 0x1e2d;
            t.iubopomofo = 0x3129;
            t.iucyrillic = 0x044e;
            t.ivowelsignbengali = 0x09bf;
            t.ivowelsigndeva = 0x093f;
            t.ivowelsigngujarati = 0x0abf;
            t.izhitsacyrillic = 0x0475;
            t.izhitsadblgravecyrillic = 0x0477;
            t.j = 0x006a;
            t.jaarmenian = 0x0571;
            t.jabengali = 0x099c;
            t.jadeva = 0x091c;
            t.jagujarati = 0x0a9c;
            t.jagurmukhi = 0x0a1c;
            t.jbopomofo = 0x3110;
            t.jcaron = 0x01f0;
            t.jcircle = 0x24d9;
            t.jcircumflex = 0x0135;
            t.jcrossedtail = 0x029d;
            t.jdotlessstroke = 0x025f;
            t.jecyrillic = 0x0458;
            t.jeemarabic = 0x062c;
            t.jeemfinalarabic = 0xfe9e;
            t.jeeminitialarabic = 0xfe9f;
            t.jeemmedialarabic = 0xfea0;
            t.jeharabic = 0x0698;
            t.jehfinalarabic = 0xfb8b;
            t.jhabengali = 0x099d;
            t.jhadeva = 0x091d;
            t.jhagujarati = 0x0a9d;
            t.jhagurmukhi = 0x0a1d;
            t.jheharmenian = 0x057b;
            t.jis = 0x3004;
            t.jmonospace = 0xff4a;
            t.jparen = 0x24a5;
            t.jsuperior = 0x02b2;
            t.k = 0x006b;
            t.kabashkircyrillic = 0x04a1;
            t.kabengali = 0x0995;
            t.kacute = 0x1e31;
            t.kacyrillic = 0x043a;
            t.kadescendercyrillic = 0x049b;
            t.kadeva = 0x0915;
            t.kaf = 0x05db;
            t.kafarabic = 0x0643;
            t.kafdagesh = 0xfb3b;
            t.kafdageshhebrew = 0xfb3b;
            t.kaffinalarabic = 0xfeda;
            t.kafhebrew = 0x05db;
            t.kafinitialarabic = 0xfedb;
            t.kafmedialarabic = 0xfedc;
            t.kafrafehebrew = 0xfb4d;
            t.kagujarati = 0x0a95;
            t.kagurmukhi = 0x0a15;
            t.kahiragana = 0x304b;
            t.kahookcyrillic = 0x04c4;
            t.kakatakana = 0x30ab;
            t.kakatakanahalfwidth = 0xff76;
            t.kappa = 0x03ba;
            t.kappasymbolgreek = 0x03f0;
            t.kapyeounmieumkorean = 0x3171;
            t.kapyeounphieuphkorean = 0x3184;
            t.kapyeounpieupkorean = 0x3178;
            t.kapyeounssangpieupkorean = 0x3179;
            t.karoriisquare = 0x330d;
            t.kashidaautoarabic = 0x0640;
            t.kashidaautonosidebearingarabic = 0x0640;
            t.kasmallkatakana = 0x30f5;
            t.kasquare = 0x3384;
            t.kasraarabic = 0x0650;
            t.kasratanarabic = 0x064d;
            t.kastrokecyrillic = 0x049f;
            t.katahiraprolongmarkhalfwidth = 0xff70;
            t.kaverticalstrokecyrillic = 0x049d;
            t.kbopomofo = 0x310e;
            t.kcalsquare = 0x3389;
            t.kcaron = 0x01e9;
            t.kcedilla = 0x0137;
            t.kcircle = 0x24da;
            t.kcommaaccent = 0x0137;
            t.kdotbelow = 0x1e33;
            t.keharmenian = 0x0584;
            t.kehiragana = 0x3051;
            t.kekatakana = 0x30b1;
            t.kekatakanahalfwidth = 0xff79;
            t.kenarmenian = 0x056f;
            t.kesmallkatakana = 0x30f6;
            t.kgreenlandic = 0x0138;
            t.khabengali = 0x0996;
            t.khacyrillic = 0x0445;
            t.khadeva = 0x0916;
            t.khagujarati = 0x0a96;
            t.khagurmukhi = 0x0a16;
            t.khaharabic = 0x062e;
            t.khahfinalarabic = 0xfea6;
            t.khahinitialarabic = 0xfea7;
            t.khahmedialarabic = 0xfea8;
            t.kheicoptic = 0x03e7;
            t.khhadeva = 0x0959;
            t.khhagurmukhi = 0x0a59;
            t.khieukhacirclekorean = 0x3278;
            t.khieukhaparenkorean = 0x3218;
            t.khieukhcirclekorean = 0x326a;
            t.khieukhkorean = 0x314b;
            t.khieukhparenkorean = 0x320a;
            t.khokhaithai = 0x0e02;
            t.khokhonthai = 0x0e05;
            t.khokhuatthai = 0x0e03;
            t.khokhwaithai = 0x0e04;
            t.khomutthai = 0x0e5b;
            t.khook = 0x0199;
            t.khorakhangthai = 0x0e06;
            t.khzsquare = 0x3391;
            t.kihiragana = 0x304d;
            t.kikatakana = 0x30ad;
            t.kikatakanahalfwidth = 0xff77;
            t.kiroguramusquare = 0x3315;
            t.kiromeetorusquare = 0x3316;
            t.kirosquare = 0x3314;
            t.kiyeokacirclekorean = 0x326e;
            t.kiyeokaparenkorean = 0x320e;
            t.kiyeokcirclekorean = 0x3260;
            t.kiyeokkorean = 0x3131;
            t.kiyeokparenkorean = 0x3200;
            t.kiyeoksioskorean = 0x3133;
            t.kjecyrillic = 0x045c;
            t.klinebelow = 0x1e35;
            t.klsquare = 0x3398;
            t.kmcubedsquare = 0x33a6;
            t.kmonospace = 0xff4b;
            t.kmsquaredsquare = 0x33a2;
            t.kohiragana = 0x3053;
            t.kohmsquare = 0x33c0;
            t.kokaithai = 0x0e01;
            t.kokatakana = 0x30b3;
            t.kokatakanahalfwidth = 0xff7a;
            t.kooposquare = 0x331e;
            t.koppacyrillic = 0x0481;
            t.koreanstandardsymbol = 0x327f;
            t.koroniscmb = 0x0343;
            t.kparen = 0x24a6;
            t.kpasquare = 0x33aa;
            t.ksicyrillic = 0x046f;
            t.ktsquare = 0x33cf;
            t.kturned = 0x029e;
            t.kuhiragana = 0x304f;
            t.kukatakana = 0x30af;
            t.kukatakanahalfwidth = 0xff78;
            t.kvsquare = 0x33b8;
            t.kwsquare = 0x33be;
            t.l = 0x006c;
            t.labengali = 0x09b2;
            t.lacute = 0x013a;
            t.ladeva = 0x0932;
            t.lagujarati = 0x0ab2;
            t.lagurmukhi = 0x0a32;
            t.lakkhangyaothai = 0x0e45;
            t.lamaleffinalarabic = 0xfefc;
            t.lamalefhamzaabovefinalarabic = 0xfef8;
            t.lamalefhamzaaboveisolatedarabic = 0xfef7;
            t.lamalefhamzabelowfinalarabic = 0xfefa;
            t.lamalefhamzabelowisolatedarabic = 0xfef9;
            t.lamalefisolatedarabic = 0xfefb;
            t.lamalefmaddaabovefinalarabic = 0xfef6;
            t.lamalefmaddaaboveisolatedarabic = 0xfef5;
            t.lamarabic = 0x0644;
            t.lambda = 0x03bb;
            t.lambdastroke = 0x019b;
            t.lamed = 0x05dc;
            t.lameddagesh = 0xfb3c;
            t.lameddageshhebrew = 0xfb3c;
            t.lamedhebrew = 0x05dc;
            t.lamfinalarabic = 0xfede;
            t.lamhahinitialarabic = 0xfcca;
            t.laminitialarabic = 0xfedf;
            t.lamjeeminitialarabic = 0xfcc9;
            t.lamkhahinitialarabic = 0xfccb;
            t.lamlamhehisolatedarabic = 0xfdf2;
            t.lammedialarabic = 0xfee0;
            t.lammeemhahinitialarabic = 0xfd88;
            t.lammeeminitialarabic = 0xfccc;
            t.largecircle = 0x25ef;
            t.lbar = 0x019a;
            t.lbelt = 0x026c;
            t.lbopomofo = 0x310c;
            t.lcaron = 0x013e;
            t.lcedilla = 0x013c;
            t.lcircle = 0x24db;
            t.lcircumflexbelow = 0x1e3d;
            t.lcommaaccent = 0x013c;
            t.ldot = 0x0140;
            t.ldotaccent = 0x0140;
            t.ldotbelow = 0x1e37;
            t.ldotbelowmacron = 0x1e39;
            t.leftangleabovecmb = 0x031a;
            t.lefttackbelowcmb = 0x0318;
            t.less = 0x003c;
            t.lessequal = 0x2264;
            t.lessequalorgreater = 0x22da;
            t.lessmonospace = 0xff1c;
            t.lessorequivalent = 0x2272;
            t.lessorgreater = 0x2276;
            t.lessoverequal = 0x2266;
            t.lesssmall = 0xfe64;
            t.lezh = 0x026e;
            t.lfblock = 0x258c;
            t.lhookretroflex = 0x026d;
            t.lira = 0x20a4;
            t.liwnarmenian = 0x056c;
            t.lj = 0x01c9;
            t.ljecyrillic = 0x0459;
            t.ll = 0xf6c0;
            t.lladeva = 0x0933;
            t.llagujarati = 0x0ab3;
            t.llinebelow = 0x1e3b;
            t.llladeva = 0x0934;
            t.llvocalicbengali = 0x09e1;
            t.llvocalicdeva = 0x0961;
            t.llvocalicvowelsignbengali = 0x09e3;
            t.llvocalicvowelsigndeva = 0x0963;
            t.lmiddletilde = 0x026b;
            t.lmonospace = 0xff4c;
            t.lmsquare = 0x33d0;
            t.lochulathai = 0x0e2c;
            t.logicaland = 0x2227;
            t.logicalnot = 0x00ac;
            t.logicalnotreversed = 0x2310;
            t.logicalor = 0x2228;
            t.lolingthai = 0x0e25;
            t.longs = 0x017f;
            t.lowlinecenterline = 0xfe4e;
            t.lowlinecmb = 0x0332;
            t.lowlinedashed = 0xfe4d;
            t.lozenge = 0x25ca;
            t.lparen = 0x24a7;
            t.lslash = 0x0142;
            t.lsquare = 0x2113;
            t.lsuperior = 0xf6ee;
            t.ltshade = 0x2591;
            t.luthai = 0x0e26;
            t.lvocalicbengali = 0x098c;
            t.lvocalicdeva = 0x090c;
            t.lvocalicvowelsignbengali = 0x09e2;
            t.lvocalicvowelsigndeva = 0x0962;
            t.lxsquare = 0x33d3;
            t.m = 0x006d;
            t.mabengali = 0x09ae;
            t.macron = 0x00af;
            t.macronbelowcmb = 0x0331;
            t.macroncmb = 0x0304;
            t.macronlowmod = 0x02cd;
            t.macronmonospace = 0xffe3;
            t.macute = 0x1e3f;
            t.madeva = 0x092e;
            t.magujarati = 0x0aae;
            t.magurmukhi = 0x0a2e;
            t.mahapakhhebrew = 0x05a4;
            t.mahapakhlefthebrew = 0x05a4;
            t.mahiragana = 0x307e;
            t.maichattawalowleftthai = 0xf895;
            t.maichattawalowrightthai = 0xf894;
            t.maichattawathai = 0x0e4b;
            t.maichattawaupperleftthai = 0xf893;
            t.maieklowleftthai = 0xf88c;
            t.maieklowrightthai = 0xf88b;
            t.maiekthai = 0x0e48;
            t.maiekupperleftthai = 0xf88a;
            t.maihanakatleftthai = 0xf884;
            t.maihanakatthai = 0x0e31;
            t.maitaikhuleftthai = 0xf889;
            t.maitaikhuthai = 0x0e47;
            t.maitholowleftthai = 0xf88f;
            t.maitholowrightthai = 0xf88e;
            t.maithothai = 0x0e49;
            t.maithoupperleftthai = 0xf88d;
            t.maitrilowleftthai = 0xf892;
            t.maitrilowrightthai = 0xf891;
            t.maitrithai = 0x0e4a;
            t.maitriupperleftthai = 0xf890;
            t.maiyamokthai = 0x0e46;
            t.makatakana = 0x30de;
            t.makatakanahalfwidth = 0xff8f;
            t.male = 0x2642;
            t.mansyonsquare = 0x3347;
            t.maqafhebrew = 0x05be;
            t.mars = 0x2642;
            t.masoracirclehebrew = 0x05af;
            t.masquare = 0x3383;
            t.mbopomofo = 0x3107;
            t.mbsquare = 0x33d4;
            t.mcircle = 0x24dc;
            t.mcubedsquare = 0x33a5;
            t.mdotaccent = 0x1e41;
            t.mdotbelow = 0x1e43;
            t.meemarabic = 0x0645;
            t.meemfinalarabic = 0xfee2;
            t.meeminitialarabic = 0xfee3;
            t.meemmedialarabic = 0xfee4;
            t.meemmeeminitialarabic = 0xfcd1;
            t.meemmeemisolatedarabic = 0xfc48;
            t.meetorusquare = 0x334d;
            t.mehiragana = 0x3081;
            t.meizierasquare = 0x337e;
            t.mekatakana = 0x30e1;
            t.mekatakanahalfwidth = 0xff92;
            t.mem = 0x05de;
            t.memdagesh = 0xfb3e;
            t.memdageshhebrew = 0xfb3e;
            t.memhebrew = 0x05de;
            t.menarmenian = 0x0574;
            t.merkhahebrew = 0x05a5;
            t.merkhakefulahebrew = 0x05a6;
            t.merkhakefulalefthebrew = 0x05a6;
            t.merkhalefthebrew = 0x05a5;
            t.mhook = 0x0271;
            t.mhzsquare = 0x3392;
            t.middledotkatakanahalfwidth = 0xff65;
            t.middot = 0x00b7;
            t.mieumacirclekorean = 0x3272;
            t.mieumaparenkorean = 0x3212;
            t.mieumcirclekorean = 0x3264;
            t.mieumkorean = 0x3141;
            t.mieumpansioskorean = 0x3170;
            t.mieumparenkorean = 0x3204;
            t.mieumpieupkorean = 0x316e;
            t.mieumsioskorean = 0x316f;
            t.mihiragana = 0x307f;
            t.mikatakana = 0x30df;
            t.mikatakanahalfwidth = 0xff90;
            t.minus = 0x2212;
            t.minusbelowcmb = 0x0320;
            t.minuscircle = 0x2296;
            t.minusmod = 0x02d7;
            t.minusplus = 0x2213;
            t.minute = 0x2032;
            t.miribaarusquare = 0x334a;
            t.mirisquare = 0x3349;
            t.mlonglegturned = 0x0270;
            t.mlsquare = 0x3396;
            t.mmcubedsquare = 0x33a3;
            t.mmonospace = 0xff4d;
            t.mmsquaredsquare = 0x339f;
            t.mohiragana = 0x3082;
            t.mohmsquare = 0x33c1;
            t.mokatakana = 0x30e2;
            t.mokatakanahalfwidth = 0xff93;
            t.molsquare = 0x33d6;
            t.momathai = 0x0e21;
            t.moverssquare = 0x33a7;
            t.moverssquaredsquare = 0x33a8;
            t.mparen = 0x24a8;
            t.mpasquare = 0x33ab;
            t.mssquare = 0x33b3;
            t.msuperior = 0xf6ef;
            t.mturned = 0x026f;
            t.mu = 0x00b5;
            t.mu1 = 0x00b5;
            t.muasquare = 0x3382;
            t.muchgreater = 0x226b;
            t.muchless = 0x226a;
            t.mufsquare = 0x338c;
            t.mugreek = 0x03bc;
            t.mugsquare = 0x338d;
            t.muhiragana = 0x3080;
            t.mukatakana = 0x30e0;
            t.mukatakanahalfwidth = 0xff91;
            t.mulsquare = 0x3395;
            t.multiply = 0x00d7;
            t.mumsquare = 0x339b;
            t.munahhebrew = 0x05a3;
            t.munahlefthebrew = 0x05a3;
            t.musicalnote = 0x266a;
            t.musicalnotedbl = 0x266b;
            t.musicflatsign = 0x266d;
            t.musicsharpsign = 0x266f;
            t.mussquare = 0x33b2;
            t.muvsquare = 0x33b6;
            t.muwsquare = 0x33bc;
            t.mvmegasquare = 0x33b9;
            t.mvsquare = 0x33b7;
            t.mwmegasquare = 0x33bf;
            t.mwsquare = 0x33bd;
            t.n = 0x006e;
            t.nabengali = 0x09a8;
            t.nabla = 0x2207;
            t.nacute = 0x0144;
            t.nadeva = 0x0928;
            t.nagujarati = 0x0aa8;
            t.nagurmukhi = 0x0a28;
            t.nahiragana = 0x306a;
            t.nakatakana = 0x30ca;
            t.nakatakanahalfwidth = 0xff85;
            t.napostrophe = 0x0149;
            t.nasquare = 0x3381;
            t.nbopomofo = 0x310b;
            t.nbspace = 0x00a0;
            t.ncaron = 0x0148;
            t.ncedilla = 0x0146;
            t.ncircle = 0x24dd;
            t.ncircumflexbelow = 0x1e4b;
            t.ncommaaccent = 0x0146;
            t.ndotaccent = 0x1e45;
            t.ndotbelow = 0x1e47;
            t.nehiragana = 0x306d;
            t.nekatakana = 0x30cd;
            t.nekatakanahalfwidth = 0xff88;
            t.newsheqelsign = 0x20aa;
            t.nfsquare = 0x338b;
            t.ngabengali = 0x0999;
            t.ngadeva = 0x0919;
            t.ngagujarati = 0x0a99;
            t.ngagurmukhi = 0x0a19;
            t.ngonguthai = 0x0e07;
            t.nhiragana = 0x3093;
            t.nhookleft = 0x0272;
            t.nhookretroflex = 0x0273;
            t.nieunacirclekorean = 0x326f;
            t.nieunaparenkorean = 0x320f;
            t.nieuncieuckorean = 0x3135;
            t.nieuncirclekorean = 0x3261;
            t.nieunhieuhkorean = 0x3136;
            t.nieunkorean = 0x3134;
            t.nieunpansioskorean = 0x3168;
            t.nieunparenkorean = 0x3201;
            t.nieunsioskorean = 0x3167;
            t.nieuntikeutkorean = 0x3166;
            t.nihiragana = 0x306b;
            t.nikatakana = 0x30cb;
            t.nikatakanahalfwidth = 0xff86;
            t.nikhahitleftthai = 0xf899;
            t.nikhahitthai = 0x0e4d;
            t.nine = 0x0039;
            t.ninearabic = 0x0669;
            t.ninebengali = 0x09ef;
            t.ninecircle = 0x2468;
            t.ninecircleinversesansserif = 0x2792;
            t.ninedeva = 0x096f;
            t.ninegujarati = 0x0aef;
            t.ninegurmukhi = 0x0a6f;
            t.ninehackarabic = 0x0669;
            t.ninehangzhou = 0x3029;
            t.nineideographicparen = 0x3228;
            t.nineinferior = 0x2089;
            t.ninemonospace = 0xff19;
            t.nineoldstyle = 0xf739;
            t.nineparen = 0x247c;
            t.nineperiod = 0x2490;
            t.ninepersian = 0x06f9;
            t.nineroman = 0x2178;
            t.ninesuperior = 0x2079;
            t.nineteencircle = 0x2472;
            t.nineteenparen = 0x2486;
            t.nineteenperiod = 0x249a;
            t.ninethai = 0x0e59;
            t.nj = 0x01cc;
            t.njecyrillic = 0x045a;
            t.nkatakana = 0x30f3;
            t.nkatakanahalfwidth = 0xff9d;
            t.nlegrightlong = 0x019e;
            t.nlinebelow = 0x1e49;
            t.nmonospace = 0xff4e;
            t.nmsquare = 0x339a;
            t.nnabengali = 0x09a3;
            t.nnadeva = 0x0923;
            t.nnagujarati = 0x0aa3;
            t.nnagurmukhi = 0x0a23;
            t.nnnadeva = 0x0929;
            t.nohiragana = 0x306e;
            t.nokatakana = 0x30ce;
            t.nokatakanahalfwidth = 0xff89;
            t.nonbreakingspace = 0x00a0;
            t.nonenthai = 0x0e13;
            t.nonuthai = 0x0e19;
            t.noonarabic = 0x0646;
            t.noonfinalarabic = 0xfee6;
            t.noonghunnaarabic = 0x06ba;
            t.noonghunnafinalarabic = 0xfb9f;
            t.nooninitialarabic = 0xfee7;
            t.noonjeeminitialarabic = 0xfcd2;
            t.noonjeemisolatedarabic = 0xfc4b;
            t.noonmedialarabic = 0xfee8;
            t.noonmeeminitialarabic = 0xfcd5;
            t.noonmeemisolatedarabic = 0xfc4e;
            t.noonnoonfinalarabic = 0xfc8d;
            t.notcontains = 0x220c;
            t.notelement = 0x2209;
            t.notelementof = 0x2209;
            t.notequal = 0x2260;
            t.notgreater = 0x226f;
            t.notgreaternorequal = 0x2271;
            t.notgreaternorless = 0x2279;
            t.notidentical = 0x2262;
            t.notless = 0x226e;
            t.notlessnorequal = 0x2270;
            t.notparallel = 0x2226;
            t.notprecedes = 0x2280;
            t.notsubset = 0x2284;
            t.notsucceeds = 0x2281;
            t.notsuperset = 0x2285;
            t.nowarmenian = 0x0576;
            t.nparen = 0x24a9;
            t.nssquare = 0x33b1;
            t.nsuperior = 0x207f;
            t.ntilde = 0x00f1;
            t.nu = 0x03bd;
            t.nuhiragana = 0x306c;
            t.nukatakana = 0x30cc;
            t.nukatakanahalfwidth = 0xff87;
            t.nuktabengali = 0x09bc;
            t.nuktadeva = 0x093c;
            t.nuktagujarati = 0x0abc;
            t.nuktagurmukhi = 0x0a3c;
            t.numbersign = 0x0023;
            t.numbersignmonospace = 0xff03;
            t.numbersignsmall = 0xfe5f;
            t.numeralsigngreek = 0x0374;
            t.numeralsignlowergreek = 0x0375;
            t.numero = 0x2116;
            t.nun = 0x05e0;
            t.nundagesh = 0xfb40;
            t.nundageshhebrew = 0xfb40;
            t.nunhebrew = 0x05e0;
            t.nvsquare = 0x33b5;
            t.nwsquare = 0x33bb;
            t.nyabengali = 0x099e;
            t.nyadeva = 0x091e;
            t.nyagujarati = 0x0a9e;
            t.nyagurmukhi = 0x0a1e;
            t.o = 0x006f;
            t.oacute = 0x00f3;
            t.oangthai = 0x0e2d;
            t.obarred = 0x0275;
            t.obarredcyrillic = 0x04e9;
            t.obarreddieresiscyrillic = 0x04eb;
            t.obengali = 0x0993;
            t.obopomofo = 0x311b;
            t.obreve = 0x014f;
            t.ocandradeva = 0x0911;
            t.ocandragujarati = 0x0a91;
            t.ocandravowelsigndeva = 0x0949;
            t.ocandravowelsigngujarati = 0x0ac9;
            t.ocaron = 0x01d2;
            t.ocircle = 0x24de;
            t.ocircumflex = 0x00f4;
            t.ocircumflexacute = 0x1ed1;
            t.ocircumflexdotbelow = 0x1ed9;
            t.ocircumflexgrave = 0x1ed3;
            t.ocircumflexhookabove = 0x1ed5;
            t.ocircumflextilde = 0x1ed7;
            t.ocyrillic = 0x043e;
            t.odblacute = 0x0151;
            t.odblgrave = 0x020d;
            t.odeva = 0x0913;
            t.odieresis = 0x00f6;
            t.odieresiscyrillic = 0x04e7;
            t.odotbelow = 0x1ecd;
            t.oe = 0x0153;
            t.oekorean = 0x315a;
            t.ogonek = 0x02db;
            t.ogonekcmb = 0x0328;
            t.ograve = 0x00f2;
            t.ogujarati = 0x0a93;
            t.oharmenian = 0x0585;
            t.ohiragana = 0x304a;
            t.ohookabove = 0x1ecf;
            t.ohorn = 0x01a1;
            t.ohornacute = 0x1edb;
            t.ohorndotbelow = 0x1ee3;
            t.ohorngrave = 0x1edd;
            t.ohornhookabove = 0x1edf;
            t.ohorntilde = 0x1ee1;
            t.ohungarumlaut = 0x0151;
            t.oi = 0x01a3;
            t.oinvertedbreve = 0x020f;
            t.okatakana = 0x30aa;
            t.okatakanahalfwidth = 0xff75;
            t.okorean = 0x3157;
            t.olehebrew = 0x05ab;
            t.omacron = 0x014d;
            t.omacronacute = 0x1e53;
            t.omacrongrave = 0x1e51;
            t.omdeva = 0x0950;
            t.omega = 0x03c9;
            t.omega1 = 0x03d6;
            t.omegacyrillic = 0x0461;
            t.omegalatinclosed = 0x0277;
            t.omegaroundcyrillic = 0x047b;
            t.omegatitlocyrillic = 0x047d;
            t.omegatonos = 0x03ce;
            t.omgujarati = 0x0ad0;
            t.omicron = 0x03bf;
            t.omicrontonos = 0x03cc;
            t.omonospace = 0xff4f;
            t.one = 0x0031;
            t.onearabic = 0x0661;
            t.onebengali = 0x09e7;
            t.onecircle = 0x2460;
            t.onecircleinversesansserif = 0x278a;
            t.onedeva = 0x0967;
            t.onedotenleader = 0x2024;
            t.oneeighth = 0x215b;
            t.onefitted = 0xf6dc;
            t.onegujarati = 0x0ae7;
            t.onegurmukhi = 0x0a67;
            t.onehackarabic = 0x0661;
            t.onehalf = 0x00bd;
            t.onehangzhou = 0x3021;
            t.oneideographicparen = 0x3220;
            t.oneinferior = 0x2081;
            t.onemonospace = 0xff11;
            t.onenumeratorbengali = 0x09f4;
            t.oneoldstyle = 0xf731;
            t.oneparen = 0x2474;
            t.oneperiod = 0x2488;
            t.onepersian = 0x06f1;
            t.onequarter = 0x00bc;
            t.oneroman = 0x2170;
            t.onesuperior = 0x00b9;
            t.onethai = 0x0e51;
            t.onethird = 0x2153;
            t.oogonek = 0x01eb;
            t.oogonekmacron = 0x01ed;
            t.oogurmukhi = 0x0a13;
            t.oomatragurmukhi = 0x0a4b;
            t.oopen = 0x0254;
            t.oparen = 0x24aa;
            t.openbullet = 0x25e6;
            t.option = 0x2325;
            t.ordfeminine = 0x00aa;
            t.ordmasculine = 0x00ba;
            t.orthogonal = 0x221f;
            t.oshortdeva = 0x0912;
            t.oshortvowelsigndeva = 0x094a;
            t.oslash = 0x00f8;
            t.oslashacute = 0x01ff;
            t.osmallhiragana = 0x3049;
            t.osmallkatakana = 0x30a9;
            t.osmallkatakanahalfwidth = 0xff6b;
            t.ostrokeacute = 0x01ff;
            t.osuperior = 0xf6f0;
            t.otcyrillic = 0x047f;
            t.otilde = 0x00f5;
            t.otildeacute = 0x1e4d;
            t.otildedieresis = 0x1e4f;
            t.oubopomofo = 0x3121;
            t.overline = 0x203e;
            t.overlinecenterline = 0xfe4a;
            t.overlinecmb = 0x0305;
            t.overlinedashed = 0xfe49;
            t.overlinedblwavy = 0xfe4c;
            t.overlinewavy = 0xfe4b;
            t.overscore = 0x00af;
            t.ovowelsignbengali = 0x09cb;
            t.ovowelsigndeva = 0x094b;
            t.ovowelsigngujarati = 0x0acb;
            t.p = 0x0070;
            t.paampssquare = 0x3380;
            t.paasentosquare = 0x332b;
            t.pabengali = 0x09aa;
            t.pacute = 0x1e55;
            t.padeva = 0x092a;
            t.pagedown = 0x21df;
            t.pageup = 0x21de;
            t.pagujarati = 0x0aaa;
            t.pagurmukhi = 0x0a2a;
            t.pahiragana = 0x3071;
            t.paiyannoithai = 0x0e2f;
            t.pakatakana = 0x30d1;
            t.palatalizationcyrilliccmb = 0x0484;
            t.palochkacyrillic = 0x04c0;
            t.pansioskorean = 0x317f;
            t.paragraph = 0x00b6;
            t.parallel = 0x2225;
            t.parenleft = 0x0028;
            t.parenleftaltonearabic = 0xfd3e;
            t.parenleftbt = 0xf8ed;
            t.parenleftex = 0xf8ec;
            t.parenleftinferior = 0x208d;
            t.parenleftmonospace = 0xff08;
            t.parenleftsmall = 0xfe59;
            t.parenleftsuperior = 0x207d;
            t.parenlefttp = 0xf8eb;
            t.parenleftvertical = 0xfe35;
            t.parenright = 0x0029;
            t.parenrightaltonearabic = 0xfd3f;
            t.parenrightbt = 0xf8f8;
            t.parenrightex = 0xf8f7;
            t.parenrightinferior = 0x208e;
            t.parenrightmonospace = 0xff09;
            t.parenrightsmall = 0xfe5a;
            t.parenrightsuperior = 0x207e;
            t.parenrighttp = 0xf8f6;
            t.parenrightvertical = 0xfe36;
            t.partialdiff = 0x2202;
            t.paseqhebrew = 0x05c0;
            t.pashtahebrew = 0x0599;
            t.pasquare = 0x33a9;
            t.patah = 0x05b7;
            t.patah11 = 0x05b7;
            t.patah1d = 0x05b7;
            t.patah2a = 0x05b7;
            t.patahhebrew = 0x05b7;
            t.patahnarrowhebrew = 0x05b7;
            t.patahquarterhebrew = 0x05b7;
            t.patahwidehebrew = 0x05b7;
            t.pazerhebrew = 0x05a1;
            t.pbopomofo = 0x3106;
            t.pcircle = 0x24df;
            t.pdotaccent = 0x1e57;
            t.pe = 0x05e4;
            t.pecyrillic = 0x043f;
            t.pedagesh = 0xfb44;
            t.pedageshhebrew = 0xfb44;
            t.peezisquare = 0x333b;
            t.pefinaldageshhebrew = 0xfb43;
            t.peharabic = 0x067e;
            t.peharmenian = 0x057a;
            t.pehebrew = 0x05e4;
            t.pehfinalarabic = 0xfb57;
            t.pehinitialarabic = 0xfb58;
            t.pehiragana = 0x307a;
            t.pehmedialarabic = 0xfb59;
            t.pekatakana = 0x30da;
            t.pemiddlehookcyrillic = 0x04a7;
            t.perafehebrew = 0xfb4e;
            t.percent = 0x0025;
            t.percentarabic = 0x066a;
            t.percentmonospace = 0xff05;
            t.percentsmall = 0xfe6a;
            t.period = 0x002e;
            t.periodarmenian = 0x0589;
            t.periodcentered = 0x00b7;
            t.periodhalfwidth = 0xff61;
            t.periodinferior = 0xf6e7;
            t.periodmonospace = 0xff0e;
            t.periodsmall = 0xfe52;
            t.periodsuperior = 0xf6e8;
            t.perispomenigreekcmb = 0x0342;
            t.perpendicular = 0x22a5;
            t.perthousand = 0x2030;
            t.peseta = 0x20a7;
            t.pfsquare = 0x338a;
            t.phabengali = 0x09ab;
            t.phadeva = 0x092b;
            t.phagujarati = 0x0aab;
            t.phagurmukhi = 0x0a2b;
            t.phi = 0x03c6;
            t.phi1 = 0x03d5;
            t.phieuphacirclekorean = 0x327a;
            t.phieuphaparenkorean = 0x321a;
            t.phieuphcirclekorean = 0x326c;
            t.phieuphkorean = 0x314d;
            t.phieuphparenkorean = 0x320c;
            t.philatin = 0x0278;
            t.phinthuthai = 0x0e3a;
            t.phisymbolgreek = 0x03d5;
            t.phook = 0x01a5;
            t.phophanthai = 0x0e1e;
            t.phophungthai = 0x0e1c;
            t.phosamphaothai = 0x0e20;
            t.pi = 0x03c0;
            t.pieupacirclekorean = 0x3273;
            t.pieupaparenkorean = 0x3213;
            t.pieupcieuckorean = 0x3176;
            t.pieupcirclekorean = 0x3265;
            t.pieupkiyeokkorean = 0x3172;
            t.pieupkorean = 0x3142;
            t.pieupparenkorean = 0x3205;
            t.pieupsioskiyeokkorean = 0x3174;
            t.pieupsioskorean = 0x3144;
            t.pieupsiostikeutkorean = 0x3175;
            t.pieupthieuthkorean = 0x3177;
            t.pieuptikeutkorean = 0x3173;
            t.pihiragana = 0x3074;
            t.pikatakana = 0x30d4;
            t.pisymbolgreek = 0x03d6;
            t.piwrarmenian = 0x0583;
            t.planckover2pi = 0x210f;
            t.planckover2pi1 = 0x210f;
            t.plus = 0x002b;
            t.plusbelowcmb = 0x031f;
            t.pluscircle = 0x2295;
            t.plusminus = 0x00b1;
            t.plusmod = 0x02d6;
            t.plusmonospace = 0xff0b;
            t.plussmall = 0xfe62;
            t.plussuperior = 0x207a;
            t.pmonospace = 0xff50;
            t.pmsquare = 0x33d8;
            t.pohiragana = 0x307d;
            t.pointingindexdownwhite = 0x261f;
            t.pointingindexleftwhite = 0x261c;
            t.pointingindexrightwhite = 0x261e;
            t.pointingindexupwhite = 0x261d;
            t.pokatakana = 0x30dd;
            t.poplathai = 0x0e1b;
            t.postalmark = 0x3012;
            t.postalmarkface = 0x3020;
            t.pparen = 0x24ab;
            t.precedes = 0x227a;
            t.prescription = 0x211e;
            t.primemod = 0x02b9;
            t.primereversed = 0x2035;
            t.product = 0x220f;
            t.projective = 0x2305;
            t.prolongedkana = 0x30fc;
            t.propellor = 0x2318;
            t.propersubset = 0x2282;
            t.propersuperset = 0x2283;
            t.proportion = 0x2237;
            t.proportional = 0x221d;
            t.psi = 0x03c8;
            t.psicyrillic = 0x0471;
            t.psilipneumatacyrilliccmb = 0x0486;
            t.pssquare = 0x33b0;
            t.puhiragana = 0x3077;
            t.pukatakana = 0x30d7;
            t.pvsquare = 0x33b4;
            t.pwsquare = 0x33ba;
            t.q = 0x0071;
            t.qadeva = 0x0958;
            t.qadmahebrew = 0x05a8;
            t.qafarabic = 0x0642;
            t.qaffinalarabic = 0xfed6;
            t.qafinitialarabic = 0xfed7;
            t.qafmedialarabic = 0xfed8;
            t.qamats = 0x05b8;
            t.qamats10 = 0x05b8;
            t.qamats1a = 0x05b8;
            t.qamats1c = 0x05b8;
            t.qamats27 = 0x05b8;
            t.qamats29 = 0x05b8;
            t.qamats33 = 0x05b8;
            t.qamatsde = 0x05b8;
            t.qamatshebrew = 0x05b8;
            t.qamatsnarrowhebrew = 0x05b8;
            t.qamatsqatanhebrew = 0x05b8;
            t.qamatsqatannarrowhebrew = 0x05b8;
            t.qamatsqatanquarterhebrew = 0x05b8;
            t.qamatsqatanwidehebrew = 0x05b8;
            t.qamatsquarterhebrew = 0x05b8;
            t.qamatswidehebrew = 0x05b8;
            t.qarneyparahebrew = 0x059f;
            t.qbopomofo = 0x3111;
            t.qcircle = 0x24e0;
            t.qhook = 0x02a0;
            t.qmonospace = 0xff51;
            t.qof = 0x05e7;
            t.qofdagesh = 0xfb47;
            t.qofdageshhebrew = 0xfb47;
            t.qofhebrew = 0x05e7;
            t.qparen = 0x24ac;
            t.quarternote = 0x2669;
            t.qubuts = 0x05bb;
            t.qubuts18 = 0x05bb;
            t.qubuts25 = 0x05bb;
            t.qubuts31 = 0x05bb;
            t.qubutshebrew = 0x05bb;
            t.qubutsnarrowhebrew = 0x05bb;
            t.qubutsquarterhebrew = 0x05bb;
            t.qubutswidehebrew = 0x05bb;
            t.question = 0x003f;
            t.questionarabic = 0x061f;
            t.questionarmenian = 0x055e;
            t.questiondown = 0x00bf;
            t.questiondownsmall = 0xf7bf;
            t.questiongreek = 0x037e;
            t.questionmonospace = 0xff1f;
            t.questionsmall = 0xf73f;
            t.quotedbl = 0x0022;
            t.quotedblbase = 0x201e;
            t.quotedblleft = 0x201c;
            t.quotedblmonospace = 0xff02;
            t.quotedblprime = 0x301e;
            t.quotedblprimereversed = 0x301d;
            t.quotedblright = 0x201d;
            t.quoteleft = 0x2018;
            t.quoteleftreversed = 0x201b;
            t.quotereversed = 0x201b;
            t.quoteright = 0x2019;
            t.quoterightn = 0x0149;
            t.quotesinglbase = 0x201a;
            t.quotesingle = 0x0027;
            t.quotesinglemonospace = 0xff07;
            t.r = 0x0072;
            t.raarmenian = 0x057c;
            t.rabengali = 0x09b0;
            t.racute = 0x0155;
            t.radeva = 0x0930;
            t.radical = 0x221a;
            t.radicalex = 0xf8e5;
            t.radoverssquare = 0x33ae;
            t.radoverssquaredsquare = 0x33af;
            t.radsquare = 0x33ad;
            t.rafe = 0x05bf;
            t.rafehebrew = 0x05bf;
            t.ragujarati = 0x0ab0;
            t.ragurmukhi = 0x0a30;
            t.rahiragana = 0x3089;
            t.rakatakana = 0x30e9;
            t.rakatakanahalfwidth = 0xff97;
            t.ralowerdiagonalbengali = 0x09f1;
            t.ramiddlediagonalbengali = 0x09f0;
            t.ramshorn = 0x0264;
            t.ratio = 0x2236;
            t.rbopomofo = 0x3116;
            t.rcaron = 0x0159;
            t.rcedilla = 0x0157;
            t.rcircle = 0x24e1;
            t.rcommaaccent = 0x0157;
            t.rdblgrave = 0x0211;
            t.rdotaccent = 0x1e59;
            t.rdotbelow = 0x1e5b;
            t.rdotbelowmacron = 0x1e5d;
            t.referencemark = 0x203b;
            t.reflexsubset = 0x2286;
            t.reflexsuperset = 0x2287;
            t.registered = 0x00ae;
            t.registersans = 0xf8e8;
            t.registerserif = 0xf6da;
            t.reharabic = 0x0631;
            t.reharmenian = 0x0580;
            t.rehfinalarabic = 0xfeae;
            t.rehiragana = 0x308c;
            t.rekatakana = 0x30ec;
            t.rekatakanahalfwidth = 0xff9a;
            t.resh = 0x05e8;
            t.reshdageshhebrew = 0xfb48;
            t.reshhebrew = 0x05e8;
            t.reversedtilde = 0x223d;
            t.reviahebrew = 0x0597;
            t.reviamugrashhebrew = 0x0597;
            t.revlogicalnot = 0x2310;
            t.rfishhook = 0x027e;
            t.rfishhookreversed = 0x027f;
            t.rhabengali = 0x09dd;
            t.rhadeva = 0x095d;
            t.rho = 0x03c1;
            t.rhook = 0x027d;
            t.rhookturned = 0x027b;
            t.rhookturnedsuperior = 0x02b5;
            t.rhosymbolgreek = 0x03f1;
            t.rhotichookmod = 0x02de;
            t.rieulacirclekorean = 0x3271;
            t.rieulaparenkorean = 0x3211;
            t.rieulcirclekorean = 0x3263;
            t.rieulhieuhkorean = 0x3140;
            t.rieulkiyeokkorean = 0x313a;
            t.rieulkiyeoksioskorean = 0x3169;
            t.rieulkorean = 0x3139;
            t.rieulmieumkorean = 0x313b;
            t.rieulpansioskorean = 0x316c;
            t.rieulparenkorean = 0x3203;
            t.rieulphieuphkorean = 0x313f;
            t.rieulpieupkorean = 0x313c;
            t.rieulpieupsioskorean = 0x316b;
            t.rieulsioskorean = 0x313d;
            t.rieulthieuthkorean = 0x313e;
            t.rieultikeutkorean = 0x316a;
            t.rieulyeorinhieuhkorean = 0x316d;
            t.rightangle = 0x221f;
            t.righttackbelowcmb = 0x0319;
            t.righttriangle = 0x22bf;
            t.rihiragana = 0x308a;
            t.rikatakana = 0x30ea;
            t.rikatakanahalfwidth = 0xff98;
            t.ring = 0x02da;
            t.ringbelowcmb = 0x0325;
            t.ringcmb = 0x030a;
            t.ringhalfleft = 0x02bf;
            t.ringhalfleftarmenian = 0x0559;
            t.ringhalfleftbelowcmb = 0x031c;
            t.ringhalfleftcentered = 0x02d3;
            t.ringhalfright = 0x02be;
            t.ringhalfrightbelowcmb = 0x0339;
            t.ringhalfrightcentered = 0x02d2;
            t.rinvertedbreve = 0x0213;
            t.rittorusquare = 0x3351;
            t.rlinebelow = 0x1e5f;
            t.rlongleg = 0x027c;
            t.rlonglegturned = 0x027a;
            t.rmonospace = 0xff52;
            t.rohiragana = 0x308d;
            t.rokatakana = 0x30ed;
            t.rokatakanahalfwidth = 0xff9b;
            t.roruathai = 0x0e23;
            t.rparen = 0x24ad;
            t.rrabengali = 0x09dc;
            t.rradeva = 0x0931;
            t.rragurmukhi = 0x0a5c;
            t.rreharabic = 0x0691;
            t.rrehfinalarabic = 0xfb8d;
            t.rrvocalicbengali = 0x09e0;
            t.rrvocalicdeva = 0x0960;
            t.rrvocalicgujarati = 0x0ae0;
            t.rrvocalicvowelsignbengali = 0x09c4;
            t.rrvocalicvowelsigndeva = 0x0944;
            t.rrvocalicvowelsigngujarati = 0x0ac4;
            t.rsuperior = 0xf6f1;
            t.rtblock = 0x2590;
            t.rturned = 0x0279;
            t.rturnedsuperior = 0x02b4;
            t.ruhiragana = 0x308b;
            t.rukatakana = 0x30eb;
            t.rukatakanahalfwidth = 0xff99;
            t.rupeemarkbengali = 0x09f2;
            t.rupeesignbengali = 0x09f3;
            t.rupiah = 0xf6dd;
            t.ruthai = 0x0e24;
            t.rvocalicbengali = 0x098b;
            t.rvocalicdeva = 0x090b;
            t.rvocalicgujarati = 0x0a8b;
            t.rvocalicvowelsignbengali = 0x09c3;
            t.rvocalicvowelsigndeva = 0x0943;
            t.rvocalicvowelsigngujarati = 0x0ac3;
            t.s = 0x0073;
            t.sabengali = 0x09b8;
            t.sacute = 0x015b;
            t.sacutedotaccent = 0x1e65;
            t.sadarabic = 0x0635;
            t.sadeva = 0x0938;
            t.sadfinalarabic = 0xfeba;
            t.sadinitialarabic = 0xfebb;
            t.sadmedialarabic = 0xfebc;
            t.sagujarati = 0x0ab8;
            t.sagurmukhi = 0x0a38;
            t.sahiragana = 0x3055;
            t.sakatakana = 0x30b5;
            t.sakatakanahalfwidth = 0xff7b;
            t.sallallahoualayhewasallamarabic = 0xfdfa;
            t.samekh = 0x05e1;
            t.samekhdagesh = 0xfb41;
            t.samekhdageshhebrew = 0xfb41;
            t.samekhhebrew = 0x05e1;
            t.saraaathai = 0x0e32;
            t.saraaethai = 0x0e41;
            t.saraaimaimalaithai = 0x0e44;
            t.saraaimaimuanthai = 0x0e43;
            t.saraamthai = 0x0e33;
            t.saraathai = 0x0e30;
            t.saraethai = 0x0e40;
            t.saraiileftthai = 0xf886;
            t.saraiithai = 0x0e35;
            t.saraileftthai = 0xf885;
            t.saraithai = 0x0e34;
            t.saraothai = 0x0e42;
            t.saraueeleftthai = 0xf888;
            t.saraueethai = 0x0e37;
            t.saraueleftthai = 0xf887;
            t.sarauethai = 0x0e36;
            t.sarauthai = 0x0e38;
            t.sarauuthai = 0x0e39;
            t.sbopomofo = 0x3119;
            t.scaron = 0x0161;
            t.scarondotaccent = 0x1e67;
            t.scedilla = 0x015f;
            t.schwa = 0x0259;
            t.schwacyrillic = 0x04d9;
            t.schwadieresiscyrillic = 0x04db;
            t.schwahook = 0x025a;
            t.scircle = 0x24e2;
            t.scircumflex = 0x015d;
            t.scommaaccent = 0x0219;
            t.sdotaccent = 0x1e61;
            t.sdotbelow = 0x1e63;
            t.sdotbelowdotaccent = 0x1e69;
            t.seagullbelowcmb = 0x033c;
            t.second = 0x2033;
            t.secondtonechinese = 0x02ca;
            t.section = 0x00a7;
            t.seenarabic = 0x0633;
            t.seenfinalarabic = 0xfeb2;
            t.seeninitialarabic = 0xfeb3;
            t.seenmedialarabic = 0xfeb4;
            t.segol = 0x05b6;
            t.segol13 = 0x05b6;
            t.segol1f = 0x05b6;
            t.segol2c = 0x05b6;
            t.segolhebrew = 0x05b6;
            t.segolnarrowhebrew = 0x05b6;
            t.segolquarterhebrew = 0x05b6;
            t.segoltahebrew = 0x0592;
            t.segolwidehebrew = 0x05b6;
            t.seharmenian = 0x057d;
            t.sehiragana = 0x305b;
            t.sekatakana = 0x30bb;
            t.sekatakanahalfwidth = 0xff7e;
            t.semicolon = 0x003b;
            t.semicolonarabic = 0x061b;
            t.semicolonmonospace = 0xff1b;
            t.semicolonsmall = 0xfe54;
            t.semivoicedmarkkana = 0x309c;
            t.semivoicedmarkkanahalfwidth = 0xff9f;
            t.sentisquare = 0x3322;
            t.sentosquare = 0x3323;
            t.seven = 0x0037;
            t.sevenarabic = 0x0667;
            t.sevenbengali = 0x09ed;
            t.sevencircle = 0x2466;
            t.sevencircleinversesansserif = 0x2790;
            t.sevendeva = 0x096d;
            t.seveneighths = 0x215e;
            t.sevengujarati = 0x0aed;
            t.sevengurmukhi = 0x0a6d;
            t.sevenhackarabic = 0x0667;
            t.sevenhangzhou = 0x3027;
            t.sevenideographicparen = 0x3226;
            t.seveninferior = 0x2087;
            t.sevenmonospace = 0xff17;
            t.sevenoldstyle = 0xf737;
            t.sevenparen = 0x247a;
            t.sevenperiod = 0x248e;
            t.sevenpersian = 0x06f7;
            t.sevenroman = 0x2176;
            t.sevensuperior = 0x2077;
            t.seventeencircle = 0x2470;
            t.seventeenparen = 0x2484;
            t.seventeenperiod = 0x2498;
            t.seventhai = 0x0e57;
            t.sfthyphen = 0x00ad;
            t.shaarmenian = 0x0577;
            t.shabengali = 0x09b6;
            t.shacyrillic = 0x0448;
            t.shaddaarabic = 0x0651;
            t.shaddadammaarabic = 0xfc61;
            t.shaddadammatanarabic = 0xfc5e;
            t.shaddafathaarabic = 0xfc60;
            t.shaddakasraarabic = 0xfc62;
            t.shaddakasratanarabic = 0xfc5f;
            t.shade = 0x2592;
            t.shadedark = 0x2593;
            t.shadelight = 0x2591;
            t.shademedium = 0x2592;
            t.shadeva = 0x0936;
            t.shagujarati = 0x0ab6;
            t.shagurmukhi = 0x0a36;
            t.shalshelethebrew = 0x0593;
            t.shbopomofo = 0x3115;
            t.shchacyrillic = 0x0449;
            t.sheenarabic = 0x0634;
            t.sheenfinalarabic = 0xfeb6;
            t.sheeninitialarabic = 0xfeb7;
            t.sheenmedialarabic = 0xfeb8;
            t.sheicoptic = 0x03e3;
            t.sheqel = 0x20aa;
            t.sheqelhebrew = 0x20aa;
            t.sheva = 0x05b0;
            t.sheva115 = 0x05b0;
            t.sheva15 = 0x05b0;
            t.sheva22 = 0x05b0;
            t.sheva2e = 0x05b0;
            t.shevahebrew = 0x05b0;
            t.shevanarrowhebrew = 0x05b0;
            t.shevaquarterhebrew = 0x05b0;
            t.shevawidehebrew = 0x05b0;
            t.shhacyrillic = 0x04bb;
            t.shimacoptic = 0x03ed;
            t.shin = 0x05e9;
            t.shindagesh = 0xfb49;
            t.shindageshhebrew = 0xfb49;
            t.shindageshshindot = 0xfb2c;
            t.shindageshshindothebrew = 0xfb2c;
            t.shindageshsindot = 0xfb2d;
            t.shindageshsindothebrew = 0xfb2d;
            t.shindothebrew = 0x05c1;
            t.shinhebrew = 0x05e9;
            t.shinshindot = 0xfb2a;
            t.shinshindothebrew = 0xfb2a;
            t.shinsindot = 0xfb2b;
            t.shinsindothebrew = 0xfb2b;
            t.shook = 0x0282;
            t.sigma = 0x03c3;
            t.sigma1 = 0x03c2;
            t.sigmafinal = 0x03c2;
            t.sigmalunatesymbolgreek = 0x03f2;
            t.sihiragana = 0x3057;
            t.sikatakana = 0x30b7;
            t.sikatakanahalfwidth = 0xff7c;
            t.siluqhebrew = 0x05bd;
            t.siluqlefthebrew = 0x05bd;
            t.similar = 0x223c;
            t.sindothebrew = 0x05c2;
            t.siosacirclekorean = 0x3274;
            t.siosaparenkorean = 0x3214;
            t.sioscieuckorean = 0x317e;
            t.sioscirclekorean = 0x3266;
            t.sioskiyeokkorean = 0x317a;
            t.sioskorean = 0x3145;
            t.siosnieunkorean = 0x317b;
            t.siosparenkorean = 0x3206;
            t.siospieupkorean = 0x317d;
            t.siostikeutkorean = 0x317c;
            t.six = 0x0036;
            t.sixarabic = 0x0666;
            t.sixbengali = 0x09ec;
            t.sixcircle = 0x2465;
            t.sixcircleinversesansserif = 0x278f;
            t.sixdeva = 0x096c;
            t.sixgujarati = 0x0aec;
            t.sixgurmukhi = 0x0a6c;
            t.sixhackarabic = 0x0666;
            t.sixhangzhou = 0x3026;
            t.sixideographicparen = 0x3225;
            t.sixinferior = 0x2086;
            t.sixmonospace = 0xff16;
            t.sixoldstyle = 0xf736;
            t.sixparen = 0x2479;
            t.sixperiod = 0x248d;
            t.sixpersian = 0x06f6;
            t.sixroman = 0x2175;
            t.sixsuperior = 0x2076;
            t.sixteencircle = 0x246f;
            t.sixteencurrencydenominatorbengali = 0x09f9;
            t.sixteenparen = 0x2483;
            t.sixteenperiod = 0x2497;
            t.sixthai = 0x0e56;
            t.slash = 0x002f;
            t.slashmonospace = 0xff0f;
            t.slong = 0x017f;
            t.slongdotaccent = 0x1e9b;
            t.smileface = 0x263a;
            t.smonospace = 0xff53;
            t.sofpasuqhebrew = 0x05c3;
            t.softhyphen = 0x00ad;
            t.softsigncyrillic = 0x044c;
            t.sohiragana = 0x305d;
            t.sokatakana = 0x30bd;
            t.sokatakanahalfwidth = 0xff7f;
            t.soliduslongoverlaycmb = 0x0338;
            t.solidusshortoverlaycmb = 0x0337;
            t.sorusithai = 0x0e29;
            t.sosalathai = 0x0e28;
            t.sosothai = 0x0e0b;
            t.sosuathai = 0x0e2a;
            t.space = 0x0020;
            t.spacehackarabic = 0x0020;
            t.spade = 0x2660;
            t.spadesuitblack = 0x2660;
            t.spadesuitwhite = 0x2664;
            t.sparen = 0x24ae;
            t.squarebelowcmb = 0x033b;
            t.squarecc = 0x33c4;
            t.squarecm = 0x339d;
            t.squarediagonalcrosshatchfill = 0x25a9;
            t.squarehorizontalfill = 0x25a4;
        
