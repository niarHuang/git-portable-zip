i = 0; i < riderWillUnSelected.value.length; i++) {
      result = result.filter((ele) => ele !== riderWillUnSelected.value[i]);
    }
    insurancePremYearRiderListSelected.value = result;
    addFormData.value.insurancePremYearList =
      insurancePremYearRiderListSelected.value;
    riderWillSelected.value = [];
    riderWillUnSelected.value = [];
  } else {
    return;
  }
};

const insuranceBasicData = computed(() => {
  return productDropdownStore.insuranceBasicData;
});
formData.value.insuranceId = insuranceBasicData.value.insuranceId;

const insurancePremYearList = computed(() => {
  return productDropdownStore.insurancePremYearList;
});

const saleChannelList = computed(() => {
  return productDropdownStore.saleChannelList;
});

/* 用 險種主檔ID 對應出 險種主檔ID+Name */
const getInsuranceYearName = (n = "") => {
  formData.value.insuranceYearName = insurancePremYearList.value.find(
    (item) => item.insuranceYearId === n
  )?.insuranceFullName;
};

/**
 * F2502B015：查詢主約對應附約資料 API
 */
interface MainRiderMappingOnlyValueModelAddBool
  extends InsuranceMainRiderMappingOnlyValueModel {
  rlhpList: Array<{
    rlhp: string;
    rlhpBool?: boolean;
  }>;
}
const queryInsuranceMainAdditionalList = ref<
  Array<MainRiderMappingOnlyValueModelAddBool>
>([]);
const doQueryInsuranceMainAdditional = async () => {
  //下拉選單險種名稱有變動時，同步更新 險種主檔ID+Name
  getInsuranceYearName(formData.value.insuranceYearId);
  queryInsuranceMainAdditional({
    ...formData.value,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      queryInsuranceMainAdditionalList.value =
        response.data.body?.insuranceMainRiderMappingList ?? [];
      dataCount.value = response.data.body?.dataCount ?? 0;

      /*
       *rlhpList 處理
       **/

      //取出 rlhpList 陣列
      const rlhpListArr = ref<Array<Array<{ rlhp: string }>>>([]);
      queryInsuranceMainAdditionalList.value.forEach(function (item) {
        rlhpListArr.value.push(item?.["rlhpList"]);
      });

      //取出 只有rlhp值 陣列
      const rlhpOnlyValue = ref<Array<Array<string>>>([]);
      rlhpListArr.value.forEach(function (item) {
        rlhpOnlyValue.value.push(item.map((value) => value.rlhp));
      });

      //轉換
      // [["1"], ["1", "2"]];
      //  =>[{ rlhp: "1", rlhpBool: true }],[{ rlhp: "1", rlhpBool: true },{ rlhp: "2", rlhpBool: true }],];
      const transferRlhpOnlyValue = rlhpOnlyValue.value.map((subArr) => {
        return subArr.map((rlhp) => {
          return { rlhp, rlhpBool: true };
        });
      });

      //沒有值的補上 rlhpBool: false
      const finalRlhp = transferRlhpOnlyValue.map((outerArr) => {
        const result: Array<{
          rlhp: string;
          rlhpBool: boolean;
        }> = [];
        ["1", "2", "3", "4", "5"].forEach((rlhp) => {
          const obj = outerArr.find((o) => o.rlhp === rlhp);
          if (obj) {
            result.push(obj);
          } else {
            result.push({ rlhp, rlhpBool: false });
          }
        });
        return result;
      });

      //把最後的結果寫回去
      queryInsuranceMainAdditionalList.value.forEach(function (item, index) {
        index += 1;
        item["rlhpList"] = finalRlhp[index - 1];
      });

      selectAllData.value = {
        rlhp1: false,
        rlhp2: false,
        rlhp3: false,
        rlhp4: false,
        rlhp5: false,
      };
    }
  });
};
doQueryInsuranceMainAdditional();

watch(insuranceBasicData, () => {
  formData.value.insuranceId = insuranceBasicData.value.insuranceId;
  addFormData.value.mainInsuranceId = insuranceBasicData.value?.insuranceId;
  doQueryInsuranceMainAdditional();
});

// emit(子傳父)時使用的function
const doQuery = ({
  insuranceYearId,
  channelId,
}: {
  insuranceYearId: string;
  channelId: string;
}): void => {
  formData.value.insuranceYearId = insuranceYearId;
  formData.value.channelId = channelId;
  addFormData.value.mainPremYear =
    insurancePremYearList.value.find(
      (item) => item.insuranceYearId === insuranceYearId
    )?.premYear || "";

  //呼叫查詢Datatable資料的function
  doQueryInsuranceMainAdditional();
};

const selectAllData = ref({
  rlhp1: false,
  rlhp2: false,
  rlhp3: false,
  rlhp4: false,
  rlhp5: false,
});

const selectAll = (rlhp: string, index: number) => {
  if (selectAllData.value[rlhp]) {
    queryInsuranceMainAdditionalList.value.forEach((item) => {
      item.rlhpList[index].rlhpBool = true;
    });
  } else {
    queryInsuranceMainAdditionalList.value.forEach((item) => {
      item.rlhpList[index].rlhpBool = false;
    });
  }
};

/**
 * F2502B016：編輯主約對應附約資料 API
 */
const doEditInsuranceMainAdditional = async () => {
  editInsuranceMainAdditional({
    ...addFormData.value,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      const { returnCode, returnDesc } = response.data.header;
      if (returnCode === MsgCodeType.SUCCESS) {
        toast.add({
          severity: "success",
          summary: COMMON_WORD.UPDATE_SUCCESS,
          detail: returnDesc,
          life: 3000,
        });
        isAddModal.value = false;
        doQueryInsuranceMainAdditional();
      } else {
        toast.add({
          severity: "error",
          summary: COMMON_WORD.ERROR,
          detail: returnDesc,
          life: 3000,
        });
      }
    } else {
      console.log(response);
    }
  });
};

/**
 * F2502B017：編輯保險對象資料 API
 */
const doEditInsuranceObject = async (data: EditInsuranceObjectReq) => {
  editInsuranceObject({ ...data }).then((response) => {
    if (response?.status === 200 && response.data) {
      const { returnCode, returnDesc } = response.data.header;
      if (returnCode === MsgCodeType.SUCCESS) {
        toast.add({
          severity: "success",
          summary: COMMON_WORD.UPDATE_SUCCESS,
          detail: returnDesc,
          life: 3000,
        });
        doQueryInsuranceMainAdditional();
      } else {
        toast.add({
          severity: "error",
          summary: COMMON_WORD.ERROR,
          detail: returnDesc,
          life: 3000,
        });
      }
    } else {
      console.log(response);
    }
  });
};
</script>
                                                                                                                         src/views/pages/insurance/InsurancePaymentSettingView.vue                                           0100777 0000000 0000000 00000113306 14665752120 021241  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div class="grid p-fluid">
    <PrimeToast />
    <div class="col-12">
      <SearchGroup @get-list="doQuery"></SearchGroup>
      <!-- 按鈕 - 新增-->
      <div class="mt-2">
        <PrimeButton
          :label="COMMON_WORD.ADD"
          class="mr-2 my-2 p-button-sm p-button-info w-auto"
          icon="pi pi-plus"
          @click="addData"
        />
      </div>

      <!-- 資料列表 -->
      <PrimeDataTable
        :lazy="true"
        :showGridlines="true"
        :value="queryPaymentMethodList"
        :paginator="true"
        class="p-datatable-customers"
        :rows="formData.pageDataCount"
        :totalRecords="dataCount"
        dataKey="id"
        :sortOrder="formData.sort"
        paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
        :rowsPerPageOptions="[10, 50, 100]"
        currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
        responsiveLayout="scroll"
        @page="onTablePageChange($event)"
      >
        <template #header>
          <div class="">
            <i class="pi pi-table" />
            <span class="mx-2">繳別繳法設定 資料列表</span>
          </div>
        </template>
        <template #empty> {{ COMMON_WORD.EMPTY }} </template>
        <template #loading> {{ COMMON_WORD.LOADING }} </template>

        <PrimeColumn header="動作" style="min-width: 180px">
          <template #body="{ data }">
            <div class="text-center flex">
              <PrimeButton
                :label="COMMON_WORD.EDIT"
                icon="pi pi-pencil"
                class="mr-2 p-button-sm p-button-outlined"
                @click="goToEdit(data)"
              />
              <PrimeButton
                :label="COMMON_WORD.DELETE"
                icon="pi pi-trash"
                class="mr-2 p-button-sm"
                @click="deleteData(data)"
              />
            </div>
          </template>
        </PrimeColumn>

        <!-- 通路別 -->
        <PrimeColumn field="channelName" style="min-width: 100px">
          <template #header>
            <div
              @click="sortModeFunction('channelName')"
              class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
            >
              <span>通路別</span>
              <span
                v-if="sortMode.channelName === 'up'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
              />
              <span
                v-else-if="sortMode.channelName === 'down'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
              />
              <span
                v-else
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
              />
            </div>
          </template>
          <template #body="slotProps">
            <span>{{ slotProps.data.channelName }} </span>
          </template>
        </PrimeColumn>
        <!-- 繳別 -->
        <PrimeColumn field="mopAllName" style="min-width: 100px">
          <template #header>
            <div
              @click="sortModeFunction('mopAllName')"
              class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
            >
              <span>繳別</span>
              <span
                v-if="sortMode.mopAllName === 'up'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
              />
              <span
                v-else-if="sortMode.mopAllName === 'down'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
              />
              <span
                v-else
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
              />
            </div>
          </template>
          <template #body="slotProps">
            <span>{{ slotProps.data.mopAllName }} </span>
          </template>
        </PrimeColumn>
        <!-- 首期繳費方式 -->
        <PrimeColumn field="fPayKindAllName" style="min-width: 140px">
          <template #header>
            <div
              @click="sortModeFunction('fPayKindAllName')"
              class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
            >
              <span>首期繳費方式</span>
              <span
                v-if="sortMode.fPayKindAllName === 'up'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
              />
              <span
                v-else-if="sortMode.fPayKindAllName === 'down'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
              />
              <span
                v-else
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
              />
            </div>
          </template>
          <template #body="slotProps">
            <span>{{ slotProps.data.fPayKindAllName }} </span>
          </template>
        </PrimeColumn>
        <!-- 續期繳費方式 -->
        <PrimeColumn field="rPayKindAllName" style="min-width: 140px">
          <template #header>
            <div
              @click="sortModeFunction('rPayKindAllName')"
              class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
            >
              <span>續期繳費方式</span>
              <span
                v-if="sortMode.rPayKindAllName === 'up'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
              />
              <span
                v-else-if="sortMode.rPayKindAllName === 'down'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
              />
              <span
                v-else
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
              />
            </div>
          </template>
          <template #body="slotProps">
            <span>{{ slotProps.data.rPayKindAllName }} </span>
          </template>
        </PrimeColumn>
        <!-- 繳費資料首期繳費方式 -->
        <PrimeColumn field="pPayKindAllName" style="min-width: 190px">
          <template #header>
            <div
              @click="sortModeFunction('pPayKindAllName')"
              class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
            >
              <span>繳費資料首期繳費方式</span>
              <span
                v-if="sortMode.pPayKindAllName === 'up'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
              />
              <span
                v-else-if="sortMode.pPayKindAllName === 'down'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
              />
              <span
                v-else
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
              />
            </div>
          </template>
          <template #body="slotProps">
            <span>{{ slotProps.data.pPayKindAllName }} </span>
          </template>
        </PrimeColumn>
        <!-- 繳費資料續期繳費方式 -->
        <PrimeColumn field="cPayKindAllName" style="min-width: 190px">
          <template #header>
            <div
              @click="sortModeFunction('cPayKindAllName')"
              class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
            >
              <span>繳費資料續期繳費方式</span>
              <span
                v-if="sortMode.cPayKindAllName === 'up'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
              />
              <span
                v-else-if="sortMode.cPayKindAllName === 'down'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
              />
              <span
                v-else
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
              />
            </div>
          </template>
          <template #body="slotProps">
            <span>{{ slotProps.data.cPayKindAllName }} </span>
          </template>
        </PrimeColumn>
        <!-- 是否集體彙繳 -->
        <PrimeColumn field="isCollectiveRemittance" style="min-width: 140px">
          <template #header>
            <div
              @click="sortModeFunction('isCollectiveRemittance')"
              class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
            >
              <span>是否集體彙繳</span>
              <span
                v-if="sortMode.isCollectiveRemittance === 'up'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
              />
              <span
                v-else-if="sortMode.isCollectiveRemittance === 'down'"
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
              />
              <span
                v-else
                class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
              />
            </div>
          </template>
          <template #body="slotProps">
            <span
              >{{ slotProps.data.isCollectiveRemittance === "Y" ? "是" : "否" }}
            </span>
          </template>
        </PrimeColumn>
      </PrimeDataTable>

      <!-- 新增彈窗 (繳別繳法設定維護) -->
      <PrimeDialog
        header="繳別繳法設定維護"
        v-model:visible="isAddModal"
        :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
        style="width: 55vw; padding-bottom: 72px"
        :modal="true"
        :draggable="false"
      >
        <Form :validation-schema="schema" @submit="addDataSend">
          <div class="grid formgrid">
            <!-- 險種名稱 -->
            <div class="col-12 mb-3 mt-3 xl:flex">
              <label style="width: 28%" class="t-label text-right pr-3"
                >險種名稱</label
              >
              <PrimeInputText
                style="width: 100%"
                class="t-inputText"
                type="text"
                label="name"
                :value="formData.insuranceYearName"
                disabled
              />
            </div>

            <!-- 通路別 -->
            <Field
              v-slot="{ field, errorMessage, handleChange }"
              v-model.trim="addFormData.channelIdList"
              name="channelName"
            >
              <div
                class="col-12 mb-3 mt-3 xl:flex align-items-baseline"
                :class="{
                  'input-mb-7px': errorMessage,
                }"
              >
                <label style="width: 28%" class="t-label text-right pr-3"
                  >通路別</label
                >
                <div class="w-full">
                  <PrimeMultiSelect
                    style="width: 100%"
                    :options="saleChannelList"
                    optionLabel="channelName"
                    placeholder="請選擇通路別"
                    display="chip"
                    :class="{ 'p-invalid': errorMessage }"
                    :model-value="field.value"
                    @update:modelValue="handleChange"
                  />
                  <small class="p-error">
                    {{ errorMessage }}
                  </small>
                </div>
              </div>
            </Field>

            <!-- 繳別 v-for + <PrimeCheckbox>-->
            <Field
              v-slot="{ field, errorMessage, handleChange }"
              v-model="addFormData.mopList"
              name="mop"
            >
              <div
                class="col-12 mb-3 mt-4"
                :class="{
                  'input-mb-7px': errorMessage,
                }"
              >
                <div class="xl:flex">
                  <label style="width: 28%" class="t-label text-right pr-3"
                    >繳別</label
                  >
                  <div class="w-full flex -mb-3 xl:mb-0">
                    <div
                      v-for="item in mopValueOnlyList"
                      :key="item.mop"
                      class="field-checkbox mr-3"
                    >
                      <PrimeCheckbox
                        :style="{ width: 'auto' }"
                        :inputId="item.mop"
                        :name="item.mop"
                        :value="item"
                        :model-value="field.value"
                        @update:modelValue="handleChange"
                      />
                      <label
                        class="t-label white-space-nowrap"
                        :for="item.mop"
                        >{{ getMopName(item.mop) }}</label
                      >
                    </div>
                  </div>
                </div>
                <div class="xl:flex">
                  <small style="width: 22%"></small>
                  <small class="p-error -mt-2"> {{ errorMessage }} </small>
                </div>
              </div>
            </Field>

            <!-- 首期繳費方式  -->
            <Field
              v-slot="{ field, errorMessage, handleChange }"
              v-model="addFormData.fPayKindList"
              name="fPayKind"
            >
              <div
                class="col-12 mb-3 mt-4"
                :class="{
                  'input-mb-7px': errorMessage,
                }"
              >
                <div class="xl:flex">
                  <label style="width: 28%" class="t-label text-right pr-3"
                    >首期繳費方式</label
                  >
                  <div class="w-full flex -mb-3 xl:mb-0">
                    <div
                      v-for="item in fPayKindValueOnlyList"
                      :key="item.payKind"
                      class="field-checkbox mr-3"
                    >
                      <PrimeCheckbox
                        :style="{ width: 'auto' }"
                        :inputId="`fPay${item.payKind}`"
                        :name="`fPay${item.payKind}`"
                        :value="item"
                        :model-value="field.value"
                        @update:modelValue="handleChange"
                        :disabled="item.disabled"
                      />
                      <label
                        class="t-label white-space-nowrap"
                        :class="{ 'text-disabled': item.disabled }"
                        :for="`fPay${item.payKind}`"
                        >{{ getFPayKindName(item.payKind) }}
                      </label>
                    </div>
                  </div>
                </div>
                <div class="xl:flex">
                  <small style="width: 22%"></small>
                  <small class="p-error -mt-2"> {{ errorMessage }} </small>
                </div>
              </div>
            </Field>

            <!-- 續期繳費方式 -->
            <Field
              v-slot="{ field, errorMessage, handleChange }"
              v-model="addFormData.rPayKindList"
              name="rPayKind"
            >
              <div
                class="col-12 mb-3 mt-4"
                :class="{
                  'input-mb-7px': errorMessage,
                }"
              >
                <div class="xl:flex">
                  <label style="width: 28%" class="t-label text-right pr-3"
                    >續期繳費方式</label
                  >
                  <div class="w-full flex -mb-3 xl:mb-0">
                    <div
                      v-for="item in rPayKindValueOnlyList"
                      :key="item.payKind"
                      class="field-checkbox mr-3"
                    >
                      <PrimeCheckbox
                        :style="{ width: 'auto' }"
                        :inputId="`rPay${item.payKind}`"
                        :name="`rPay${item.payKind}`"
                        :value="item"
                        :model-value="field.value"
                        @update:modelValue="handleChange"
                        :disabled="item.disabled"
                      />
                      <label
                        class="t-label white-space-nowrap"
                        :class="{ 'text-disabled': item.disabled }"
                        :for="`rPay${item.payKind}`"
                        >{{ getRPayKindName(item.payKind) }}</label
                      >
                    </div>
                  </div>
                </div>
                <div class="xl:flex">
                  <small style="width: 22%"></small>
                  <small class="p-error -mt-2"> {{ errorMessage }} </small>
                </div>
              </div>
            </Field>

            <!-- 繳費資料首期繳費方式 -->
            <Field
              v-slot="{ field, errorMessage, handleChange }"
              v-model="addFormData.pPayKindList"
              name="pPayKind"
            >
              <div
                class="col-12 mb-3 mt-4"
                :class="{
                  'input-mb-7px': errorMessage,
                }"
              >
                <div class="xl:flex">
                  <label style="width: 28%" class="t-label text-right pr-3"
                    >繳費資料首期繳費方式</label
                  >
                  <div class="w-full flex -mb-3 xl:mb-0 flex-wrap">
                    <div
                      v-for="item in pPayKindValueOnlyList"
                      :key="item.payKind"
                      class="field-checkbox mr-3"
                    >
                      <PrimeCheckbox
                        :style="{ width: 'auto' }"
                        :inputId="`pPay${item.payKind}`"
                        :name="`pPay${item.payKind}`"
                        :value="item"
                        :model-value="field.value"
                        @update:modelValue="handleChange"
                      />
                      <label
                        class="t-label white-space-nowrap"
                        :for="`pPay${item.payKind}`"
                        >{{ getPPayKindName(item.payKind) }}</label
                      >
                    </div>
                  </div>
                </div>
                <div class="xl:flex">
                  <small style="width: 22%"></small>
                  <small class="p-error -mt-2"> {{ errorMessage }} </small>
                </div>
              </div>
            </Field>

            <!-- 繳費資料續期繳費方式 -->
            <Field
              v-slot="{ field, errorMessage, handleChange }"
              v-model="addFormData.cPayKindList"
              name="cPayKind"
            >
              <div
                class="col-12 mb-3 mt-4"
                :class="{
                  'input-mb-7px': errorMessage,
                }"
              >
                <div class="xl:flex">
                  <label style="width: 28%" class="t-label text-right pr-3"
                    >繳費資料續期繳費方式</label
                  >
                  <div class="w-full flex -mb-3 xl:mb-0 flex-wrap">
                    <div
                      v-for="item in cPayKindValueOnlyList"
                      :key="item.payKind"
                      class="field-checkbox mr-3"
                    >
                      <PrimeCheckbox
                        :style="{ width: 'auto' }"
                        :inputId="`cPay${item.payKind}`"
                        :name="`cPay${item.payKind}`"
                        :value="item"
                        :model-value="field.value"
                        @update:modelValue="handleChange"
                      />
                      <label
                        class="t-label white-space-nowrap"
                        :for="`cPay${item.payKind}`"
                        >{{ getCPayKindName(item.payKind) }}</label
                      >
                    </div>
                  </div>
                </div>
                <div class="xl:flex">
                  <small style="width: 22%"></small>
                  <small class="p-error -mt-2"> {{ errorMessage }} </small>
                </div>
              </div>
            </Field>

            <!-- 是否集體彙繳 -->
            <div class="col-12 mb-3 mt-3">
              <div class="xl:flex">
                <label style="width: 28%" class="t-label text-right pr-3"
                  >是否集體彙繳</label
                >
                <div class="w-full flex -mb-3 xl:mb-0">
                  <div
                    v-for="yesOrNo in yesOrNoList"
                    :key="yesOrNo.menuValue"
                    class="field-radiobutton mr-3"
                  >
                    <PrimeRadioButton
                      :style="{ width: 'auto' }"
                      inputId="collectiveRemittance"
                      name="collectiveRemittance"
                      :value="yesOrNo.menuValue"
                      v-model="addFormData.isCollectiveRemittance"
                    />
                    <label
                      class="t-label white-space-nowrap"
                      for="collectiveRemittance"
                      >{{ yesOrNo.menuText }}</label
                    >
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="p-dialog-footer -mx-4 mt-4 absolute w-full bottom-0">
            <PrimeButton
              :label="COMMON_WORD.ENTER"
              class="p-button-sm"
              icon="pi pi-check"
              type="submit"
            />
            <PrimeButton
              :label="COMMON_WORD.CANCEL"
              class="p-button-outlined p-button-sm"
              icon="pi pi-times"
              @click="addDataClose"
            />
          </div>
        </Form>
      </PrimeDialog>

      <!-- 確認覆蓋彈窗 -->
      <PrimeDialog
        header="訊息"
        v-model:visible="isOverrideModal"
        :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
        :style="{ width: '50vw' }"
        :modal="true"
        :class="'msg-modal'"
      >
        <div class="text-center">
          <span
            class="pi pi-exclamation-circle text-primary"
            style="font-size: 4rem"
          />
          <h4 class="m-4">{{ overrideMsg }}</h4>
        </div>
        <template #footer>
          <PrimeButton
            :label="COMMON_WORD.NO"
            icon="pi pi-times"
            class="p-button-outlined"
            @click="(isOverrideModal = false), (isAddModal = true)"
          />
          <PrimeButton
            :label="COMMON_WORD.YES"
            icon="pi pi-check"
            @click="confirmOverride"
          />
        </template>
      </PrimeDialog>

      <!-- 刪除彈窗 -->
      <DeleteModal
        :isDeleteModal="isDeletModal"
        :reqData="reqData"
        :deleteDataFun="deletePaymentMethod"
        @changeIsDeleteVal="changeIsDeleteVal"
        @getList="doQueryPaymentMethod"
      ></DeleteModal>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref, computed, watch } from "vue";
import { useRoute } from "vue-router";
import { useToast } from "primevue/usetoast";
import * as COMMON_WORD from "@/constants/common-word";
import {
  queryPaymentMethod,
  editPaymentMethod,
  deletePaymentMethod,
} from "@/api/product-service";
import { getSystemParamList } from "@/api/shared-settings-service";
import { SysCodeType } from "@/enums/sys-code-type";
import { MsgCodeType } from "@/enums/msg-code-type";
import type { EditPaymentMethodReq } from "@/api/models/req/edit-payment-method-req";
import { Form, Field } from "vee-validate";
import DeleteModal from "@/components/DeleteModal.vue";
import SearchGroup from "@/components/SearchGroup.vue";
import { useProductDropdownStore } from "@/stores/productDropdown";

const route = useRoute();
const toast = useToast();

const dataCount = ref<number>(0);
const isAddModal = ref(false);
const isOverrideModal = ref(false);
const isDeletModal = ref(false);
const deleteMsg = ref("");
const overrideMsg = ref("");

/**
 *搜尋條件
 */
const formData = ref<{
  insuranceId: string;
  insuranceYearId: string;
  channelId: string;
  page: number;
  pageDataCount: number;
  sort: number;
  sortColumn: string;
  insuranceName: string;
  insuranceYearName?: string;
}>({
  insuranceId: "",
  insuranceYearId: "",
  channelId: "",
  page: 1,
  pageDataCount: 10,
  sort: 1,
  sortColumn: "",
  insuranceName: "",
  insuranceYearName: "",
});

/**
 *新增資料
 */
const addFormData = ref<{
  insuranceYearId: string; //險種代碼
  channelIdList: Array<{ channelId: string; channelName?: string }> | string; //通路別列表
  mopList: Array<{ mop: string }> | string; //繳別列表
  fPayKindList: Array<{ payKind: string }>; //首期繳費方式列表
  rPayKindList: Array<{ payKind: string }>; //續期繳費方式列表
  pPayKindList: Array<{ payKind: string }>; //繳費資料首期繳費方式列表
  cPayKindList: Array<{ payKind: string }>; //繳費資料續期繳費方式列表
  isCollectiveRemittance: string; //是否集體彙繳代碼
  overwriteCheck: string; //覆蓋資料確認
}>({
  insuranceYearId: "",
  channelIdList: [],
  mopList: [],
  fPayKindList: [],
  rPayKindList: [],
  pPayKindList: [],
  cPayKindList: [],
  isCollectiveRemittance: "N",
  overwriteCheck: "N",
});

/**
 * 換頁
 */
const onTablePageChange = ($event: object) => {
  //console.log("$event", $event);
  formData.value.pageDataCount = $event["rows"];
  formData.value.page = $event["page"] + 1;
  doQueryPaymentMethod();
};

/**
 * 資料列表排序
 */
const sortMode = ref({
  channelName: null,
  mopAllName: null,
  fPayKindAllName: null,
  rPayKindAllName: null,
  pPayKindAllName: null,
  cPayKindAllName: null,
  isCollectiveRemittance: null,
});

const sortModeFunction = (field: string) => {
  if (sortMode.value[field] === "up") {
    sortMode.value[field] = "down";
    formData.value.sort = 1;
    formData.value.sortColumn = field;
  } else {
    sortMode.value[field] = "up";
    formData.value.sort = 0;
    formData.value.sortColumn = field;
  }
  doQueryPaymentMethod();
};

/*
 ** 從查詢頁傳來 insuranceId
 */
const insuranceId = route.params.insuranceId as string;
formData.value.insuranceId = insuranceId;

/*
 ** 清空
 */
const clearAddFormData = () => {
  addFormData.value.channelIdList = []; //通路別
  addFormData.value.mopList = []; //繳別
  addFormData.value.fPayKindList = []; //首期繳費方式
  addFormData.value.rPayKindList = []; //續期繳費方式
  addFormData.value.pPayKindList = []; //繳費資料首期繳費方式
  addFormData.value.cPayKindList = []; //繳費資料續期繳費方式
  addFormData.value.isCollectiveRemittance = "N"; //是否集體彙繳
  addFormData.value.overwriteCheck = "N"; //覆蓋資料確認
  fPayKindValueOnlyList.value.forEach((item) => {
    item.disabled = false;
  });
  rPayKindValueOnlyList.value.forEach((item) => {
    item.disabled = false;
  });
};

/**
 * vee-velidate 驗證
 */
const schema = {
  channelName: (value: []) => {
    if (value && value.length) {
      return true;
    }
    return COMMON_WORD.VALIDATE_IS_REQUIRED;
  },
  mop: (value: []) => {
    if (value && value.length) {
      return true;
    }
    return COMMON_WORD.VALIDATE_CHECKBOX_IS_REQUIRED;
  },
};

/*
 ** 新增
 */
const addData = () => {
  clearAddFormData();
  isAddModal.value = true;
};

const addDataSend = () => {
  doEditPaymentMethod();
};

const addDataClose = () => {
  isAddModal.value = false;
  clearAddFormData();
};

/* 首期繳費方式 checkBox 第一次勾選邏輯檢查 (修改行為的資料處理) */
const fPayFirstHandle = () => {
  //把資料重新組合成符合checkbox的value格式
  addFormData.value.fPayKindList = addFormData.value.fPayKindList.map(function (
    item
  ) {
    return {
      payKind: item.payKind,
      disabled: false,
    };
  });
};

/* 續期繳費方式 checkBox 第一次勾選邏輯檢查 (修改行為的資料處理) */
const rPayFirstHandle = () => {
  //把資料重新組合成符合checkbox的value格式
  addFormData.value.rPayKindList = addFormData.value.rPayKindList.map(function (
    item
  ) {
    return {
      payKind: item.payKind,
      disabled: false,
    };
  });
};

/*
 ** 編輯
 */
const goToEdit = (data: EditPaymentMethodReq) => {
  clearAddFormData();
  console.log("data", data);
  addFormData.value = { ...data };
  addFormData.value.channelIdList = [
    {
      channelId: data["channelId"],
      channelName: data["channelName"],
    },
  ];
  addFormData.value.overwriteCheck = "N";
  fPayFirstHandle();
  rPayFirstHandle();
  isAddModal.value = true;
};

/*
 ** 是否覆蓋確認彈窗
 */
const showConfirmOverrideDialog = (returnDesc: string) => {
  isOverrideModal.value = true;
  overrideMsg.value = returnDesc;
};

/*
 ** 確認覆蓋
 */
const confirmOverride = async () => {
  addFormData.value.overwriteCheck = "Y";
  doEditPaymentMethod();
  isOverrideModal.value = false;
  addFormData.value.overwriteCheck = "N";
};

/**
 * 刪除
 */
const reqData = ref<{ insuranceYearId: string; channelId: string }>({
  insuranceYearId: "",
  channelId: "",
});

const deleteData = (data: { insuranceYearId: string; channelId: string }) => {
  isDeletModal.value = true;
  deleteMsg.value = COMMON_WORD.CONFIRM_DELETION;
  reqData.value = {
    insuranceYearId: formData.value.insuranceYearId,
    channelId: data.channelId,
  };
};

const changeIsDeleteVal = (value: boolean) => {
  isDeletModal.value = value;
};

/**
 * 取得商品資訊store
 */
const productDropdownStore = useProductDropdownStore();

const insuranceBasicData = computed(() => {
  return productDropdownStore.insuranceBasicData;
});
formData.value.insuranceId = insuranceBasicData.value.insuranceId;

const insurancePremYearList = computed(() => {
  return productDropdownStore.insurancePremYearList;
});
const saleChannelList = computed(() => {
  return productDropdownStore.saleChannelList;
});

/* 用 險種主檔ID 對應出 險種主檔ID+Name */
const getInsuranceYearName = (n = "") => {
  formData.value.insuranceYearName = insurancePremYearList.value.find(
    (item) => item.insuranceYearId === n
  )?.insuranceFullName;
};

/**
 * F2502B012：查詢繳別繳法設定 API
 */
const queryPaymentMethodList = ref<object[] | undefined>([]);
const doQueryPaymentMethod = async () => {
  //下拉選單險種名稱有變動時，同步更新 險種主檔ID+Name
  getInsuranceYearName(formData.value.insuranceYearId);
  queryPaymentMethod({
    ...formData.value,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      queryPaymentMethodList.value =
        response.data.body?.insuranceChannelList ?? [];
      dataCount.value = response.data.body?.dataCount ?? 0;
      // console.log(
      //   "查詢繳別繳法設定 queryPaymentMethodList",
      //   queryPaymentMethodList.value
      // );
    }
  });
};

watch(insuranceBasicData, () => {
  formData.value.insuranceId = insuranceBasicData.value.insuranceId;
  doQueryPaymentMethod();
});

const doQuery = ({
  insuranceYearId,
  channelId,
}: {
  insuranceYearId: string;
  channelId: string;
}): void => {
  formData.value.insuranceYearId = insuranceYearId;
  formData.value.channelId = channelId;
  doQueryPaymentMethod();
};

doQueryPaymentMethod();

/**
 * F0000B003：查詢系統下拉參數檔列表 API
 */
/*
 *繳別:codeNo:'R27'
 */
const mopList = ref<{ menuValue: string; menuText: string }[]>([]);
const mopValueOnlyList = ref<{ mop: string }[]>([]);
const doGetMopList = async () => {
  getSystemParamList({ codeNo: SysCodeType.R27 }).then((response) => {
    if (response?.status === 200 && response.data) {
      mopList.value = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      const resData = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      mopValueOnlyList.value = resData.map(function (item) {
        return {
          mop: item.menuValue,
        };
      });
    }
  });
};
doGetMopList();
const getMopName = (n = "") => {
  return mopList.value.find((item) => item.menuValue === n)?.menuText;
};

/*
 *首期繳費方式:codeNo:'R28'
 */
const fPayKindList = ref<{ menuValue: string; menuText: string }[]>([]);
const fPayKindValueOnlyList = ref<{ payKind: string; disabled: boolean }[]>([]);
const doGetFPayKindList = async () => {
  getSystemParamList({ codeNo: SysCodeType.R28 }).then((response) => {
    if (response?.status === 200 && response.data) {
      fPayKindList.value =
        response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      const resData = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      fPayKindValueOnlyList.value = resData.map(function (item) {
        return {
          payKind: item.menuValue,
          disabled: false,
        };
      });
    }
  });
};
doGetFPayKindList();
const getFPayKindName = (n = "") => {
  return fPayKindList.value.find((item) => item.menuValue === n)?.menuText;
};

/*
 *續期繳費方式:codeNo:'R29'
 */
const rPayKindList = ref<{ menuValue: string; menuText: string }[]>([]);
const rPayKindValueOnlyList = ref<{ payKind: string; disabled: boolean }[]>([]);
const doGetRPayKindList = async () => {
  getSystemParamList({ codeNo: SysCodeType.R29 }).then((response) => {
    if (response?.status === 200 && response.data) {
      rPayKindList.value =
        response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      const resData = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      rPayKindValueOnlyList.value = resData.map(function (item) {
        return {
          payKind: item.menuValue,
          disabled: false,
        };
      });
    }
  });
};
doGetRPayKindList();
const getRPayKindName = (n = "") => {
  return rPayKindList.value.find((item) => item.menuValue === n)?.menuText;
};

/*
 *繳費資料首期繳費方式:codeNo:'R308'
 */
const pPayKindList = ref<{ menuValue: string; menuText: string }[]>([]);
const pPayKindValueOnlyList = ref<{ payKind: string }[]>([]);
const doGetPPayKindList = async () => {
  getSystemParamList({ codeNo: SysCodeType.R308 }).then((response) => {
    if (response?.status === 200 && response.data) {
      pPayKindList.value =
        response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      const resData = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      pPayKindValueOnlyList.value = resData.map(function (item) {
        return {
          payKind: item.menuValue,
        };
      });
    }
  });
};
doGetPPayKindList();
const getPPayKindName = (n = "") => {
  return pPayKindList.value.find((item) => item.menuValue === n)?.menuText;
};

/*
 *繳費資料續期繳費方式:codeNo:'R309'
 */
const cPayKindList = ref<{ menuValue: string; menuText: string }[]>([]);
const cPayKindValueOnlyList = ref<{ payKind: string }[]>([]);
const doGetCPayKindList = async () => {
  getSystemParamList({ codeNo: SysCodeType.R309 }).then((response) => {
    if (response?.status === 200 && response.data) {
      cPayKindList.value =
        response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      const resData = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      cPayKindValueOnlyList.value = resData.map(function (item) {
        return {
          payKind: item.menuValue,
        };
      });
    }
  });
};
doGetCPayKindList();
const getCPayKindName = (n = "") => {
  return cPayKindList.value.find((item) => item.menuValue === n)?.menuText;
};

/*
 *是否:codeNo:'R07'
 */
const yesOrNoList = ref<
  { menuValue: string; menuText: string; menuBoolean: boolean }[]
>([]);
const doGetYesOrNoList = async () => {
  getSystemParamList({ codeNo: SysCodeType.R07 }).then((response) => {
    if (response?.status === 200 && response.data) {
      const resData = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      //把 menuValue 轉成 boolean
      yesOrNoList.value = resData.map(function (item) {
        return {
          menuValue: item.menuValue,
          menuText: item.menuText,
          menuBoolean: item.menuValue === "Y" ? true : false,
        };
      });
    }
  });
};
doGetYesOrNoList();

/**
 * F2502B013：新增/編輯繳別繳法設定 API
 */
const doEditPaymentMethod = async () => {
  editPaymentMethod({
    ...addFormData.value,
    insuranceYearId: formData.value.insuranceYearId,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      const { returnCode, returnDesc } = response.data.header;
      if (returnCode === MsgCodeType.SUCCESS) {
        toast.add({
          severity: "success",
          summary: COMMON_WORD.UPDATE_SUCCESS,
          detail: returnDesc,
          life: 3000,
        });
        isAddModal.value = false;
        doQueryPaymentMethod();
      } else if (returnCode === MsgCodeType.REWARD_EXIST_OVERRIDE_CHECK) {
        showConfirmOverrideDialog(returnDesc);
      } else {
        toast.add({
          severity: "error",
          summary: COMMON_WORD.ERROR,
          detail: returnDesc,
          life: 3000,
        });
      }
    } else {
      console.log(response);
    }
  });
};
</script>
<style scoped lang="scss">
.text-disabled {
  opacity: 0.6 !important;
}

.input-mb-7px {
  margin-bottom: 7px !important;
}
</style>
                                                                                                                                                                                                                                                                                                                          src/views/pages/insurance/InsurancePremYearSettingDocView.vue                                       0100777 0000000 0000000 00000052644 14665752120 022005  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <div class="grid p-fluid">
      <div class="col-12">
        <PrimePanel>
          <template #header>
            <div class="left-header">
              <span class="pi pi-search"></span>
              <span>險種文件對應</span>
            </div>
          </template>
          <div class="grid formgrid">
            <div class="col-12 mb-3 lg:col-6 t-form-group">
              <label class="t-label col-12 lg:col-3" for="">險種代碼</label>
              <PrimeInputText
                disabled
                v-model="insuranceDoc.insuranceYearId"
                class="t-inputText"
                type="text"
                placeholder=""
              />
            </div>
            <div class="col-12 mb-3 lg:col-6 t-form-group">
              <label class="t-label col-12 lg:col-3" for="">險種名稱</label>
              <PrimeInputText
                disabled
                v-model="insuranceDoc.insuranceName"
                class="t-inputText"
                type="text"
                placeholder=""
              />
            </div>
          </div>
        </PrimePanel>
        <div class="btn-containermb-4">
          <PrimeButton
            :label="COMMON_WORD.ADD"
            class="mr-2 my-2 p-button-sm p-button-info w-auto"
            icon="pi pi-plus"
            @click="goToEdit(true)"
          />
        </div>
        <PrimeDataTable
          :lazy="true"
          :showGridlines="true"
          :value="insuranceDoc.insuranceDocMappingList"
          :paginator="true"
          class="p-datatable-customers"
          :rows="searchData.pageDataCount"
          :totalRecords="dataCount"
          dataKey="id"
          :sortOrder="searchData.sort"
          paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
          :rowsPerPageOptions="[10, 50, 100]"
          currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
          responsiveLayout="scroll"
          @page="onTablePageChange($event)"
        >
          <template #header>
            <div class="">
              <i class="pi pi-table" />
              <span class="mx-2">險種文件對應 資料列表</span>
            </div>
          </template>
          <template #empty> {{ COMMON_WORD.EMPTY }} </template>
          <template #loading> {{ COMMON_WORD.LOADING }} </template>
          <PrimeColumn header="動作" style="min-width: 180px">
            <template #body="{ data }">
              <div class="text-center flex">
                <PrimeButton
                  :label="COMMON_WORD.EDIT"
                  icon="pi pi-pencil"
                  class="p-button-outlined mr-2 p-button-sm"
                  @click="goToEdit(false, data)"
                >
                </PrimeButton>
                <PrimeButton
                  :label="COMMON_WORD.DELETE"
                  icon="pi pi-trash"
                  class="mr-2 p-button-sm"
                  @click="deleteData(data)"
                />
              </div>
            </template>
          </PrimeColumn>
          <PrimeColumn field="docNo" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('docNo')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>文件代號</span>
                <span
                  v-if="sortMode.docNo === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.docNo === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{ slotProps.data.docNo }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="docName" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('docName')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>文件名稱</span>
                <span
                  v-if="sortMode.docName === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.docName === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{ slotProps.data.docName }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="menuId" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('menuId')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>功能頁</span>
                <span
                  v-if="sortMode.menuId === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.menuId === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{ slotProps.data.menuName }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="isRequired" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('isRequired')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>必填</span>
                <span
                  v-if="sortMode.isRequired === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.isRequired === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                slotProps.data.isRequiredName
              }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="isFromPOP" style="min-width: 120px">
            <template #header>
              <div
                @click="sortModeFunction('isFromPOP')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>建議書產生</span>
                <span
                  v-if="sortMode.isFromPOP === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.isFromPOP === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                slotProps.data.isFromPOPName
              }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="docJoinCond" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('docJoinCond')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>加入文件條件</span>
                <span
                  v-if="sortMode.docJoinCond === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.docJoinCond === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                slotProps.data.docJoinCondName
              }}</span>
            </template>
          </PrimeColumn>
        </PrimeDataTable>
        <div class="btn-container text-center mb-4">
          <PrimeButton
            :label="COMMON_WORD.GO_BACK"
            class="p-button-outlined mr-2 my-2 p-button-sm w-auto"
            icon="pi pi-arrow-left"
            @click="goBack"
          />
        </div>
      </div>
      <PrimeDialog
        header="險種文件對應維護"
        v-model:visible="isModal"
        :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
        :style="{ width: '50vw' }"
        :modal="true"
        :draggable="false"
      >
        <div class="grid formgrid p-fluid my-4">
          <div class="col-12 t-form-group my-2">
            <label class="t-label col-12 lg:col-3">險種名稱</label>
            <PrimeInputText
              disabled
              v-model="insuranceDoc.insuranceName"
              class="t-inputText"
              type="text"
              placeholder=""
            />
          </div>
          <div class="col-12 t-form-group my-2">
            <label class="t-label col-12 lg:col-3">文件名稱</label>
            <PrimeDropdown
              class="t-dropdown lg:col-9"
              :disabled="insuranceDocEdit.action === 'UPDATE'"
              v-model="insuranceDocEdit.docNo"
              :options="ContractDocMainList"
              optionLabel="docName"
              optionValue="docNo"
              :filter="true"
              placeholder="請選擇文件名稱"
            />
          </div>
          <div class="col-12 t-form-group my-2">
            <label class="t-label col-12 lg:col-3">功能頁</label>
            <PrimeDropdown
              class="t-dropdown lg:col-6"
              v-model="insuranceDocEdit.menuId"
              :options="MenuDefinitionList"
              optionLabel="menuName"
              optionValue="id"
              :filter="true"
              placeholder="請選擇功能頁"
            />
          </div>
          <div class="col-12 t-form-group my-2">
            <label class="t-label col-12 lg:col-3">必填</label>
            <PrimeDropdown
              class="t-dropdown lg:col-6"
              v-model="insuranceDocEdit.isRequired"
              :options="isYNList"
              optionLabel="menuText"
              optionValue="menuValue"
              :filter="true"
              placeholder="請選擇是否必填"
            />
          </div>
          <div class="col-12 t-form-group my-2">
            <label class="t-label col-12 lg:col-3">建議書產生</label>
            <PrimeDropdown
              class="t-dropdown lg:col-6"
              v-model="insuranceDocEdit.isFromPOP"
              :options="isYNList"
              optionLabel="menuText"
              optionValue="menuValue"
              :filter="true"
              placeholder="請選擇是否建議書產生"
            />
          </div>
          <div class="col-12 t-form-group my-2">
            <label class="t-label col-12 lg:col-3">加入文件條件</label>
            <PrimeDropdown
              class="t-dropdown lg:col-6"
              v-model="insuranceDocEdit.docJoinCond"
              :options="docJoinCondList"
              optionLabel="menuText"
              optionValue="menuValue"
              :filter="true"
              placeholder="請選擇是否加入文件條件"
            />
          </div>
        </div>
        <template #footer>
          <PrimeButton
            :label="COMMON_WORD.ENTER"
            icon="pi pi-check"
            class="p-button-sm"
            @click="updateData"
          />
          <PrimeButton
            :label="COMMON_WORD.CANCEL"
            icon="pi pi-times"
            @click="isModal = false"
            class="p-button-outlined p-button-sm"
          />
        </template>
      </PrimeDialog>
      <!-- 刪除彈窗 -->
      <DeleteModal
        :isDeleteModal="isMsgModal"
        :reqData="deleteReq"
        :deleteDataFun="deleteInsuranceDocMapping"
        @changeIsDeleteVal="changeIsDeleteVal"
        @getList="getData"
      ></DeleteModal>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref } from "vue";
import { useRouter } from "vue-router";
import { useRoute } from "vue-router";
import {
  queryInsuranceDocMapping,
  editInsuranceDocMapping,
  deleteInsuranceDocMapping,
} from "@/api/product-service";
import {
  getMenuDefinitionList,
  getSystemParamList,
  getContractDocMainList,
} from "@/api/shared-settings-service";
import type { EditInsuranceDocMappingReq } from "@/api/models/req/edit-insurance-doc-mapping-req";
import { useToast } from "primevue/usetoast";
import { SysCodeType } from "@/enums/sys-code-type";
import * as COMMON_WORD from "@/constants/common-word";
import { MsgCodeType } from "@/enums/msg-code-type";
import { useActiveIndexStore } from "@/stores/activeIndex";
import { InsuranceTabIndexType } from "@/enums/insurance-tab-index-type";

const route = useRoute();
const router = useRouter();
const toast = useToast();
const activeIndexStore = useActiveIndexStore();

const insuranceId = ref<string>("");
if (typeof route.params.insuranceId === "string") {
  insuranceId.value = route.params.insuranceId;
}
const insuranceYearId =
  typeof route.params.insuranceYearId === "string"
    ? route.params.insuranceYearId
    : "";

/**
 * 險種文件對應資料
 */
const insuranceDoc = ref<{
  insuranceYearId: string;
  insuranceName: string;
  insuranceDocMappingList: object[];
}>({
  insuranceYearId: "",
  insuranceName: "",
  insuranceDocMappingList: [],
});

/**
 * 搜尋條件
 */
const searchData = ref({
  page: 1,
  pageDataCount: 10,
  sort: 0,
  sortColumn: "",
  insuranceYearId: insuranceYearId,
});

const dataCount = ref<number>(0);

/**
 * DataTable排序
 */
const sortMode = ref({
  docNo: null,
  docName: null,
  menuId: null,
  isRequired: null,
  isFromPOP: null,
  docJoinCond: null,
});

const sortModeFunction = (field: string) => {
  if (sortMode.value[field] === "up") {
    sortMode.value[field] = "down";
    searchData.value.sort = 1;
    searchData.value.sortColumn = field;
  } else {
    sortMode.value[field] = "up";
    searchData.value.sort = 0;
    searchData.value.sortColumn = field;
  }
  getData();
};

/**
 * F2502B008：查詢文件對應設定
 */
const getData = (): void => {
  const req = searchData.value;
  queryInsuranceDocMapping(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        insuranceDoc.value = res.data.body ?? {};
        dataCount.value = res.data.body.dataCount ?? 0;
      }
    })
    .catch((err) => {
      console.log(err);
    });
};
getData();

/**
 * 新增編輯彈窗
 */
const isModal = ref<boolean>(false);

// 文件名稱
/**
 * DropDown文件名稱
 */
const ContractDocMainList = ref<{ docNo: string }[]>([]);

/**
 * DropDown功能頁
 */
const MenuDefinitionList = ref<{ id: string }[]>([]);

/**
 * DropDown是/否
 */
const isYNList = ref<{ menuValue: string }[]>([]);
/**
 * DropDown加入文件條件
 */
const docJoinCondList = ref<{ menuValue: string }[]>([]);

const insuranceDocEdit = ref<EditInsuranceDocMappingReq>({
  action: "INSERT",
  seqNo: undefined,
  insuranceYearId: insuranceYearId,
  docNo: "",
  menuId: "",
  isRequired: "",
  isFromPOP: "",
  docJoinCond: "",
});

/**
 * 取得文件名稱dropdown
 * F0000B014：查詢文件主檔列表 API
 */
const dropdownGetContractDocMainList = async () => {
  getContractDocMainList({}).then((response) => {
    if (response?.status === 200 && response.data) {
      ContractDocMainList.value = response.data.body.contractDocMainList ?? [];
      insuranceDocEdit.value.docNo =
        response.data.body.contractDocMainList[0].docNo;
    }
  });
};
dropdownGetContractDocMainList();

/**
 * 取得功能頁dropdown
 * F0000B001：查詢功能頁定義主檔列表 API
 */
const dropdownGetMenuDefinitionList = async () => {
  getMenuDefinitionList().then((response) => {
    if (response?.status === 200 && response.data) {
      MenuDefinitionList.value = response.data.body.menuDefinitionList ?? [];
      insuranceDocEdit.value.menuId =
        response.data.body.menuDefinitionList[0].id;
    }
  });
};
dropdownGetMenuDefinitionList();

/**
 * 取得必填&建議書產生dropdown
 * F0000B003：查詢系統下拉參數檔列表 API
 * codeNo:'R07'
 */
const getIsYNList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R07,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      isYNList.value = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      insuranceDocEdit.value.isRequired =
        response.data.body?.sysCodeList[0]?.sysMenuList[0]?.menuValue;
      insuranceDocEdit.value.isFromPOP =
        response.data.body?.sysCodeList[0]?.sysMenuList[1]?.menuValue;
    }
  });
};
getIsYNList();

/**
 * 取得必填&建議書產生dropdown
 * F0000B003：查詢系統下拉參數檔列表 API
 * codeNo:'R07'
 */
const getDocJoinCondList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.DocJoinCond,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      docJoinCondList.value =
        response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      insuranceDocEdit.value.docJoinCond =
        response.data.body?.sysCodeList[0]?.sysMenuList[0]?.menuValue;
    }
  });
};
getDocJoinCondList();

const goToEdit = (isNew: boolean, data?: EditInsuranceDocMappingReq) => {
  isModal.value = true;
  if (!isNew && data) {
    insuranceDocEdit.value = {
      ...insuranceDocEdit.value,
      action: "UPDATE",
      seqNo: data.seqNo,
      docNo: data.docNo,
      menuId: data.menuId,
      isRequired: data.isRequired,
      isFromPOP: data.isFromPOP,
      docJoinCond: data.docJoinCond,
    };
  } else {
    insuranceDocEdit.value = {
      ...insuranceDocEdit.value,
      action: "INSERT",
      seqNo: undefined,
      docNo: ContractDocMainList.value[0].docNo,
      menuId: MenuDefinitionList.value[0].id,
      isRequired: isYNList.value[0].menuValue,
      isFromPOP: isYNList.value[1].menuValue,
      docJoinCond: docJoinCondList.value[0].menuValue,
    };
  }
};

/**
 * F2502B009：編輯文件對應設定
 */
const updateData = (): void => {
  const req = insuranceDocEdit.value;
  editInsuranceDocMapping(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        const { returnCode, returnDesc } = res.data.header;
        if (returnCode === MsgCodeType.SUCCESS) {
          toast.add({
            severity: "success",
            summary: COMMON_WORD.UPDATE_SUCCESS,
            detail: returnDesc,
            life: 3000,
          });
          getData();
          isModal.value = false;
        } else {
          toast.add({
            severity: "error",
            summary: COMMON_WORD.ERROR,
            detail: returnDesc,
            life: 3000,
          });
        }
      }
    })
    .catch((err) => {
      console.log(err);
    });
};

/**
 * F2502B010：刪除文件對應設定
 */
const isMsgModal = ref(false);
const deleteReq = ref({});

const deleteData = (data: { seqNo: number }) => {
  isMsgModal.value = true;
  deleteReq.value = { seqNo: data.seqNo };
};

const changeIsDeleteVal = (value: boolean) => {
  isMsgModal.value = value;
};

interface Event {
  rows: number;
  page: number;
}
const onTablePageChange = ($event: Event): void => {
  searchData.value.pageDataCount = $event.rows;
  searchData.value.page = $event.page + 1;
  getData();
};

const goBack = () => {
  router.push({
    name: "insuranceSetting-edit",
    params: { insuranceId: insuranceId.value },
  });
  activeIndexStore.changeActiveIndex(InsuranceTabIndexType.INSURANCE_PREM_YEAR);
};
</script>
                                                                                            src/views/pages/insurance/InsurancePremYearSettingFundView.vue                                      0100777 0000000 0000000 00000033320 14665752120 022162  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <div class="grid p-fluid">
      <div class="col-12">
        <div class="card">
          <PrimePanel>
            <template #header>
              <div class="left-header">
                <span class="pi pi-search"></span>
                <span>險種基金維護</span>
              </div>
            </template>
            <div class="grid formgrid">
              <div class="col-12 mb-1 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-4" for="">險種代碼</label>
                <PrimeInputText
                  disabled
                  v-model="insuranceYearId"
                  class="t-inputText my-2"
                  type="text"
                  placeholder="請輸入險種代碼"
                />
              </div>
            </div>
            <div class="grid formgrid">
              <div class="col-12 mb-1 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-4" for="">險種名稱</label>
                <PrimeInputText
                  disabled
                  v-model="insuranceName"
                  class="t-inputText my-2"
                  type="text"
                  placeholder="請輸入險種名稱"
                />
              </div>
            </div>
            <!-- 關鍵字搜尋 新增的 (lg:hidden & 在<InputText><button>外包一層<div class="flex">)-->
            <div class="grid formgrid mr-1 lg:hidden">
              <div class="col-12 mb-1 lg:col-12 t-form-group">
                <label class="t-label col-12 lg:col-2" for="">關鍵字搜尋</label>
                <div class="flex">
                  <PrimeInputText
                    v-model="keyWord"
                    class="t-inputText my-2 lg:w-4"
                    type="text"
                    placeholder="關鍵字搜尋"
                  />
                  <PrimeButton
                    :label="COMMON_WORD.QUERY"
                    icon="pi pi-search"
                    class="my-2 ml-3 p-button-sm p-button-width-22 lg:w-2"
                    @click="search()"
                  />
                </div>
              </div>
            </div>
            <!-- 關鍵字搜尋 原本的 (hidden lg:block)-->
            <div class="grid formgrid mr-1 hidden lg:block">
              <div class="col-12 mb-1 lg:col-12 t-form-group">
                <label class="t-label col-12 lg:col-2" for="">關鍵字搜尋</label>
                <PrimeInputText
                  v-model="keyWord"
                  class="t-inputText my-2 lg:w-4"
                  type="text"
                  placeholder="關鍵字搜尋"
                />
                <PrimeButton
                  :label="COMMON_WORD.QUERY"
                  icon="pi pi-search"
                  class="ml-3 p-button-sm p-button-width-22 lg:w-2"
                  @click="search()"
                />
              </div>
            </div>
            <div class="grid formgrid mr-1 sm-t-pl-7">
              <div
                class="col-12 mb-1 lg:col-12 t-form-group t-setting-group d-contents"
              >
                <label class="t-label col-12 lg:col-2" for=""
                  >基金代號/名稱</label
                >
                <PrimeListbox
                  :class="{
                    'lg:my-0': fundSelected.length < 1 && isClicked,
                  }"
                  class="my-2 lg:mb-0 col-12 lg:mr-1 lg:col-4"
                  listStyle="height:250px"
                  v-model="fundWillSelected"
                  :options="fundMainList"
                  optionLabel="fundFullName"
                  :multiple="true"
                >
                  <template #header>
                    <div class="text-center p-2">
                      <span class="font-bold">未選取</span>
                    </div>
                  </template>
                </PrimeListbox>
                <div
                  class="flex align-items-center lg:flex-column m-auto lg:m-0"
                >
                  <PrimeButton
                    class="m-1"
                    icon="pi pi-angle-down lg:-rotate-90"
                    @click="selectFund"
                  />
                  <PrimeButton
                    class="m-1"
                    icon="pi pi-angle-up lg:-rotate-90"
                    @click="unSelectFund"
                  />
                </div>
                <div class="col-12 lg:col-4 justify-content-center p-0 -mb-2">
                  <PrimeListbox
                    v-model="fundWillUnSelected"
                    class="my-2 col-12 lg:ml-1"
                    :class="{
                      'p-invalid': fundSelected.length < 1 && isClicked,
                      'lg:mt-3': fundSelected.length < 1 && isClicked,
                      'lg:mb-0': fundSelected.length < 1 && isClicked,
                    }"
                    listStyle="height:250px"
                    :options="fundSelected"
                    optionLabel="fundFullName"
                    :multiple="true"
                  >
                    <template #header>
                      <div class="text-center p-2">
                        <span class="font-bold">已選取</span>
                      </div>
                    </template>
                  </PrimeListbox>
                  <small
                    class="mt-2 p-error text-center block"
                    v-if="fundSelected.length < 1 && isClicked"
                    >{{ getMesgContent(MsgCodeType.AT_LEAST_ONE) }}</small
                  >
                </div>
              </div>
            </div>
          </PrimePanel>
          <div class="btn-container text-center mb-4">
            <PrimeButton
              :label="COMMON_WORD.GO_BACK"
              class="p-button-outlined mr-2 my-2 p-button-sm w-auto"
              icon="pi pi-arrow-left"
              @click="goBack"
            />
            <PrimeButton
              :label="COMMON_WORD.SAVE"
              icon="pi pi-check"
              class="mr-2 my-2 p-button-sm p-button-info w-auto"
              @click="saveFund"
            />
          </div>
        </div>
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref } from "vue";
import { useRoute } from "vue-router";
import { useRouter } from "vue-router";
import { editInsuranceFund } from "@/api/product-service";
import { getFundMainList } from "@/api/shared-settings-service";
import { useToast } from "primevue/usetoast";
import { useActiveIndexStore } from "@/stores/activeIndex";
import * as COMMON_WORD from "@/constants/common-word";
import { getMesgContent } from "@/utils/msg-content-helper";
import { MsgCodeType } from "@/enums/msg-code-type";
import { InsuranceTabIndexType } from "@/enums/insurance-tab-index-type";

const route = useRoute();
const router = useRouter();
const toast = useToast();
const activeIndexStore = useActiveIndexStore();

const insuranceId =
  typeof route.params.insuranceId === "string" ? route.params.insuranceId : "";
const premYear = route.params.premYear;
const insuranceYearId =
  typeof route.params.insuranceYearId === "string"
    ? route.params.insuranceYearId
    : "";
const insuranceName =
  typeof route.params.insuranceName === "string"
    ? route.params.insuranceName
    : "";

/**
 * 判斷是否點擊過儲存且取得錯誤訊息
 */
const isClicked = ref(false);

/**
 * 基金列表
 */
interface FundModel {
  fundCode: string;
  fundName: string;
  fundFullName: string;
}

const fundList = ref<Array<FundModel>>([]);

const fundMainList = ref<Array<FundModel>>([]);
const fundSelected = ref<Array<FundModel>>([]);
const fundWillSelected = ref<Array<FundModel>>([]);
const fundWillUnSelected = ref<Array<FundModel>>([]);

const keyWord = ref();

/**
 * 取得未選擇基金
 */
const getUnSelectedFund = () => {
  const req = {
    insuranceId: insuranceId,
    premYear: Number(premYear),
    type: "NOTIN",
  };
  getFundMainList(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        let temp = [];
        temp = res.data.body?.fundMainList ?? [];
        fundList.value = temp.map(function (ele) {
          return {
            ...ele,
            fundFullName: ele.fundCode + " " + ele.fundName,
          };
        });
        fundMainList.value = temp.map(function (ele) {
          return {
            ...ele,
            fundFullName: ele.fundCode + " " + ele.fundName,
          };
        });
      }
    })
    .catch((err) => {
      console.log(err);
    });
};
getUnSelectedFund();

/**
 * 取得已選擇基金
 */
const getSelectedFund = () => {
  const req = {
    insuranceId: insuranceId,
    premYear: Number(premYear),
    type: "IN",
  };
  getFundMainList(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        let temp = [];
        temp = res.data.body?.fundMainList ?? [];
        fundSelected.value = temp.map(function (ele) {
          return {
            ...ele,
            fundFullName: ele.fundCode + " " + ele.fundName,
          };
        });
      }
    })
    .catch((err) => {
      console.log(err);
    });
};
getSelectedFund();

/**
 * 未選取→已選取基金
 */
const selectFund = () => {
  //找有無重複的 且 fundWillSelected必須有值
  if (fundWillSelected.value) {
    fundSelected.value = [...fundSelected.value, ...fundWillSelected.value];
    // fundList為無關鍵字過濾的陣列，fundMainList則為關鍵字過濾的陣列
    // 保險情況讓fundList&fundMainList各跑一次filter
    let tempFundMainList = fundMainList.value;
    for (let i = 0; i < fundWillSelected.value.length; i++) {
      tempFundMainList = tempFundMainList.filter(
        (ele) => ele.fundCode !== fundWillSelected.value[i].fundCode
      );
    }
    fundMainList.value = tempFundMainList;
    let tempFundList = fundList.value;
    for (let j = 0; j < fundWillSelected.value.length; j++) {
      tempFundList = tempFundList.filter(
        (ele) => ele.fundCode !== fundWillSelected.value[j].fundCode
      );
    }
    fundList.value = tempFundList;
  }
  fundWillUnSelected.value = fundWillSelected.value;
  fundWillSelected.value = [];
};

/**
 * 已選取→未選取基金
 */
const unSelectFund = () => {
  //找有無重複的 且 fundWillUnSelected必須有值
  // const tempArr = fundWillUnSelected.value;
  if (fundWillUnSelected.value) {
    fundMainList.value = [...fundMainList.value, ...fundWillUnSelected.value];
    fundList.value = [...fundList.value, ...fundWillUnSelected.value];
    let tempFundSelected = fundSelected.value;
    for (let j = 0; j < fundWillUnSelected.value.length; j++) {
      tempFundSelected = tempFundSelected.filter(
        (ele) => ele !== fundWillUnSelected.value[j]
      );
    }
    fundSelected.value = tempFundSelected;
  }
  fundWillSelected.value = fundWillUnSelected.value;
  fundWillUnSelected.value = [];
};

/**
 * 關鍵字搜尋
 */
const searchItems = (item: string) => {
  if (keyWord.value.toUpperCase().includes("*")) {
    const regex = /\*/;
    return regex.test(item);
  } else {
    return item.match(keyWord.value.toUpperCase());
  }
  // 将 * 替换成 .+
  // const regex = new RegExp(keyword.replace(/\*/g, ".+"), "i");
  // 将 * 替换成 .*
  // const regex = new RegExp(
  //   keyWord.value.toUpperCase().replace(/\*/g, ".*"),
  //   "i"
  // );
  // 过滤符合条件的数据
  // const results = items.filter((item) => regex.test(item));
  // return results;
  // 先判斷keywords有無*→有*走有*的搜尋，無則一般搜尋
  //                   ↓→先篩選出有*的資料，再分別做*前後的篩檢（可能要分兩種資料，賦予id），兩者之間有共通的資料則為搜尋出的資料
};

const search = () => {
  fundWillSelected.value = [];
  if (!keyWord.value) {
    fundMainList.value = fundList.value;
  }
  const tempFund = fundList.value.map((ele) => {
    return { ...ele, fundFullName: ele.fundFullName.toUpperCase() };
  });
  const regex = /\*/;
  console.log(regex);
  const result = tempFund.filter((ele) =>
    // ele.fundFullName.match(keyWord.value.toUpperCase())
    // regex.test(ele.fundFullName)
    searchItems(ele.fundFullName)
  );
  fundMainList.value = [...result];
};

/**
 * 儲存已選擇基金
 */
const saveFund = () => {
  const req = {
    insuranceYearId: insuranceYearId,
    fundMainList: fundSelected.value,
  };
  isClicked.value = true;
  fundSelected.value.length > 0 &&
    editInsuranceFund(req)
      .then((res) => {
        if (res?.status === 200 && res.data) {
          const { returnCode, returnDesc } = res.data.header;
          if (returnCode === MsgCodeType.SUCCESS) {
            toast.add({
              severity: "success",
              summary: COMMON_WORD.SAVE_SUCCESS,
              detail: returnDesc,
              life: 3000,
            });
            getUnSelectedFund();
            getSelectedFund();
            goBack();
          } else {
            toast.add({
              severity: "error",
              summary: COMMON_WORD.ERROR,
              detail: returnDesc,
              life: 3000,
            });
          }
        }
      })
      .catch((err) => {
        console.log(err);
      });
};

const goBack = () => {
  router.push({
    name: "insuranceSetting-edit",
    params: { insuranceId: insuranceId },
  });
  activeIndexStore.changeActiveIndex(InsuranceTabIndexType.INSURANCE_PREM_YEAR);
};
</script>

<style lang="scss" scoped>
.border-top-gray {
  border-top: 1px solid #e5e5e5;
}
</style>
                                                                                                                                                                                                                                                                                                                src/views/pages/insurance/InsurancePremYearSettingView.vue                                          0100777 0000000 0000000 00000120354 14665752120 021351  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <div class="grid p-fluid">
      <div class="col-12">
        <div class="grid formgrid">
          <div class="col-12 mb-3 lg:col-6 t-form-group">
            <label class="t-label col-12 lg:col-3" for="">投保險種名稱</label>
            <PrimeInputText
              disabled
              v-model="insuranceBasicData.fullName"
              class="t-inputText"
              type="text"
              placeholder=""
            />
          </div>
          <div class="col-12 mb-3 lg:col-6 t-form-group">
            <label class="t-label col-12 lg:col-3" for="">投保險種代碼</label>
            <PrimeInputText
              disabled
              v-model="insuranceBasicData.insuranceId"
              class="t-inputText"
              type="text"
              placeholder=""
            />
          </div>
        </div>
        <div class="btn-containermb-4">
          <PrimeButton
            :label="COMMON_WORD.ADD"
            class="mr-2 my-2 p-button-sm p-button-info w-auto"
            icon="pi pi-plus"
            @click="goToEdit(true, 'INSERT')"
          />
        </div>
        <PrimeDataTable
          :lazy="true"
          :showGridlines="true"
          :value="insurance.insurancePremYearList"
          :paginator="true"
          class="p-datatable-customers"
          :rows="searchData.pageDataCount"
          :totalRecords="dataCount"
          dataKey="id"
          :sortOrder="searchData.sort"
          paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
          :rowsPerPageOptions="[10, 50, 100]"
          currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
          responsiveLayout="scroll"
          @page="onTablePageChange($event)"
        >
          <template #header>
            <div class="">
              <i class="pi pi-table" />
              <span class="mx-2">險種 查詢結果</span>
            </div>
          </template>
          <template #empty> {{ COMMON_WORD.EMPTY }} </template>
          <template #loading> {{ COMMON_WORD.LOADING }} </template>
          <PrimeColumn header="動作" style="min-width: 380px">
            <template #body="{ data }">
              <div class="text-center flex">
                <PrimeButton
                  :label="COMMON_WORD.EDIT"
                  icon="pi pi-pencil"
                  class="p-button-outlined mr-2 p-button-sm"
                  @click="goToEdit(true, 'UPDATE', data)"
                >
                </PrimeButton>
                <PrimeButton
                  label="基金對應"
                  class="mr-2 p-button-sm"
                  @click="goToEditFund(data)"
                />
                <PrimeButton
                  label="文件對應"
                  class="mr-2 p-button-sm"
                  @click="goToEditDoc(data)"
                />
                <PrimeButton
                  label="文件複製"
                  class="mr-2 p-button-sm"
                  @click="copyDocEdit(data)"
                />
              </div>
            </template>
          </PrimeColumn>
          <PrimeColumn field="insuranceYearId" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('insuranceYearId')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>險種代碼</span>
                <span
                  v-if="sortMode.insuranceYearId === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.insuranceYearId === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                slotProps.data.insuranceYearId
              }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="insuranceName" style="min-width: 300px">
            <template #header>
              <div
                @click="sortModeFunction('insuranceName')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>險種名稱</span>
                <span
                  v-if="sortMode.insuranceName === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.insuranceName === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                slotProps.data.insuranceName
              }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="currencyName" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('currency')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>幣別</span>
                <span
                  v-if="sortMode.currency === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.currency === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                slotProps.data.currencyName
              }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="premTypeName" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('premType')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>繳費年期單位</span>
                <span
                  v-if="sortMode.premType === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.premType === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                slotProps.data.premTypeName
              }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="paymentYear" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('paymentYear')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>繳費年期</span>
                <span
                  v-if="sortMode.paymentYear === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.paymentYear === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                slotProps.data.paymentYear
              }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="plYearType" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('plYearType')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>保障年期單位</span>
                <span
                  v-if="sortMode.plYearType === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.plYearType === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                slotProps.data.plYearTypeName
              }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="plYear" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('plYear')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>保障年期</span>
                <span
                  v-if="sortMode.plYear === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.plYear === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{ slotProps.data.plYear }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="isReNew" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('isReNew')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>是否續保</span>
                <span
                  v-if="sortMode.isReNew === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.isReNew === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span>{{
                yesOrNoList.find(
                  (item) => item.menuValue === slotProps.data.isReNew
                )?.menuText ?? slotProps.data.isReNew
              }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="startDate" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('startDate')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>開賣日</span>
                <span
                  v-if="sortMode.startDate === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.startDate === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{ slotProps.data.startDate }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="endDate" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('endDate')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>停售日</span>
                <span
                  v-if="sortMode.endDate === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.endDate === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{ slotProps.data.endDate }}</span>
            </template>
          </PrimeColumn>
        </PrimeDataTable>
      </div>
      <PrimeDialog
        header="商品年期維護"
        class="pb-1"
        v-model:visible="isModal"
        :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
        :style="{ width: '50vw' }"
        :modal="true"
        :draggable="false"
      >
        <Form :validation-schema="insuranceSettingSchema" @submit="updateData">
          <div
            class="grid formgrid p-fluid mt-4 overflow-y-auto"
            style="margin-bottom: 7rem"
          >
            <div class="col-12 t-form-group my-2">
              <label class="t-label col-12 lg:col-3" for="">投保險種代碼</label>
              <PrimeInputText
                disabled
                v-model="insuranceBasicData.insuranceId"
                class="t-inputText"
                type="text"
                placeholder=""
              />
            </div>
            <div class="col-12 t-form-group my-2">
              <label class="t-label col-12 lg:col-3" for="">投保險種名稱</label>
              <PrimeInputText
                disabled
                v-model="insuranceBasicData.fullName"
                class="t-inputText"
                type="text"
                placeholder=""
              />
            </div>
            <div class="col-12 t-form-group my-2">
              <Field
                name="insuranceYearId"
                rules="alpha_num"
                v-slot="{ field, errorMessage }"
                v-model="insuranceEdit.insuranceYearId"
              >
                <label class="t-label col-12 lg:col-3" for="">險種代碼</label>
                <div class="col-12 lg:col-9 p-0">
                  <PrimeInputText
                    v-bind="field"
                    type="text"
                    :class="{
                      'p-invalid': errorMessage,
                      'lg:mt-3': errorMessage,
                    }"
                    :disabled="insuranceEdit.action === 'UPDATE'"
                    v-input-to-uppercase
                  />
                  <small class="p-error">{{ errorMessage }}</small>
                </div>
              </Field>
            </div>
            <div class="col-12 t-form-group my-2">
              <Field
                name="insuranceName"
                v-slot="{ field, errorMessage }"
                v-model="insuranceEdit.insuranceName"
              >
                <label class="t-label col-12 lg:col-3" for="">險種名稱</label>
                <div class="col-12 lg:col-9 p-0">
                  <PrimeInputText
                    v-bind="field"
                    type="text"
                    :class="{
                      'p-invalid': errorMessage,
                      'lg:mt-3': errorMessage,
                    }"
                    :disabled="insuranceEdit.action === 'UPDATE'"
                  />
                  <small class="p-error">{{ errorMessage }}</small>
                </div>
              </Field>
            </div>
            <div class="col-12 t-form-group my-2">
              <label class="t-label col-12 lg:col-3" for="">幣別</label>
              <PrimeDropdown
                class="t-dropdown lg:col-6"
                disabled
                v-model="insuranceEdit.currency"
                :options="currency"
                optionLabel="menuText"
                optionValue="menuValue"
                :filter="true"
                placeholder="請選擇幣別"
              />
            </div>
            <div class="col-12 t-form-group my-2">
              <Field
                name="premType"
                v-slot="{ field, errorMessage, handleChange }"
                v-model="insuranceEdit.premType"
              >
                <label class="t-label col-12 lg:col-3" for=""
                  >繳費年期單位</label
                >
                <div class="col-12 lg:col-9 p-0">
                  <PrimeDropdown
                    @update:modelValue="handleChange"
                    :model-value="field.value"
                    class="t-dropdown lg:col-8"
                    :class="{
                      'p-invalid': errorMessage,
                      'lg:mt-3': errorMessage,
                    }"
                    :options="perYearUnit"
                    optionLabel="menuText"
                    optionValue="menuValue"
                    :filter="true"
                    placeholder="請選擇繳費年期單位"
                  />
                  <small class="p-error">{{ errorMessage }}</small>
                </div>
              </Field>
            </div>
            <div class="col-12 t-form-group my-2">
              <Field
                name="paymentYear"
                v-slot="{ field, errorMessage }"
                v-model="insuranceEdit.paymentYear"
              >
                <label class="t-label col-12 lg:col-3" for="">繳費年期</label>
                <div class="col-12 lg:col-6 p-0">
                  <input
                    v-bind="field"
                    type="text"
                    :class="{
                      'p-invalid': errorMessage,
                      'lg:mt-3': errorMessage,
                    }"
                    class="p-inputtext p-component"
                    v-input-number-only
                  />
                  <small class="p-error">{{ errorMessage }}</small>
                </div>
              </Field>
            </div>
            <div class="col-12 t-form-group my-2">
              <Field
                name="plYearType"
                v-slot="{ field, errorMessage, handleChange }"
                v-model="insuranceEdit.plYearType"
              >
                <label class="t-label col-12 lg:col-3" for=""
                  >保障年期單位</label
                >
                <div class="col-12 lg:col-9 p-0">
                  <PrimeDropdown
                    @update:modelValue="handleChange"
                    :model-value="field.value"
                    class="t-dropdown lg:col-8"
                    :class="{
                      'p-invalid': errorMessage,
                      'lg:mt-3': errorMessage,
                    }"
                    :options="plYearType"
                    optionLabel="menuText"
                    optionValue="menuValue"
                    :filter="true"
                    placeholder="請選擇保障年期單位"
                  />
                  <small class="p-error">{{ errorMessage }}</small>
                </div>
              </Field>
            </div>
            <div class="col-12 t-form-group my-2">
              <Field
                name="plYear"
                v-slot="{ field, errorMessage }"
                v-model="insuranceEdit.plYear"
              >
                <label class="t-label col-12 lg:col-3" for="">保障年期</label>
                <div class="col-12 lg:col-6 p-0">
                  <input
                    v-bind="field"
                    type="text"
                    :class="{
                      'p-invalid': errorMessage,
                      'lg:mt-3': errorMessage,
                    }"
                    class="p-inputtext p-component"
                    v-input-number-only
                  />
                  <small class="p-error">{{ errorMessage }}</small>
                </div>
              </Field>
            </div>
            <div class="col-12 t-form-group my-2">
              <label class="t-label col-12 lg:col-3" for="">是否續保</label>
              <PrimeDropdown
                class="t-dropdown lg:col-6"
                v-model="insuranceEdit.isReNew"
                :options="yesOrNoList"
                optionLabel="menuText"
                optionValue="menuValue"
                :filter="true"
                placeholder="請選擇"
              />
            </div>
            <div class="col-12 t-form-group my-2">
              <Field
                name="startDate"
                v-slot="{ field, errorMessage }"
                v-model="insuranceEdit.startDate"
              >
                <label class="t-label col-12 lg:col-3" for="">開賣日</label>
                <div class="col-12 lg:col-9 p-0">
                  <PrimeCalendar
                    v-bind="field"
                    :model-value="insuranceEdit.startDate"
                    dateFormat="yy/mm/dd"
                    class="t-dropdown lg:col-8"
                    inputId="開賣日"
                    :showIcon="true"
                    :manualInput="false"
                    autocomplete="off"
                    :class="{
                      'p-invalid': errorMessage,
                      'lg:mt-3': errorMessage,
                    }"
                  />
                  <small class="p-error">{{ errorMessage }}</small>
                </div>
              </Field>
            </div>
            <div class="col-12 t-form-group my-2">
              <Field
                name="endDate"
                v-slot="{ field, errorMessage }"
                v-model="insuranceEdit.endDate"
              >
                <label class="t-label col-12 lg:col-3" for="">停售日</label>
                <div class="col-12 lg:col-9 p-0">
                  <PrimeCalendar
                    v-bind="field"
                    :model-value="insuranceEdit.endDate"
                    dateFormat="yy/mm/dd"
                    class="t-dropdown lg:col-8"
                    inputId="停售日"
                    :showIcon="true"
                    :manualInput="false"
                    autocomplete="off"
                    :class="{
                      'p-invalid': errorMessage,
                      'lg:mt-3': errorMessage,
                    }"
                  />
                  <small class="p-error">{{ errorMessage }}</small>
                </div>
              </Field>
            </div>
          </div>
          <div class="p-dialog-footer -mx-4 mt-4 absolute w-full bottom-0">
            <PrimeButton
              :label="COMMON_WORD.ENTER"
              class="p-button-sm"
              icon="pi pi-check"
              type="submit"
            />
            <PrimeButton
              :label="COMMON_WORD.CANCEL"
              @click="isModal = false"
              icon="pi pi-times"
              class="p-button-outlined p-button-sm"
            />
          </div>
        </Form>
      </PrimeDialog>
      <PrimeDialog
        header="險種文件複製"
        v-model:visible="isCopyModal"
        :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
        :style="{ width: '50vw' }"
        :modal="true"
        :draggable="false"
      >
        <div class="grid formgrid p-fluid my-4">
          <div class="col-12 t-form-group my-2">
            <label class="t-label col-12 lg:col-3" for="">險種名稱</label>
            <PrimeInputText
              disabled
              v-model="copyDocReq.insuranceYearIdAndName"
              class="t-inputText"
              type="text"
              placeholder=""
            />
          </div>
          <div class="col-12 t-form-group my-2">
            <label class="t-label col-12 lg:col-3" for="">目標險種</label>
            <PrimeDropdown
              class="t-dropdown lg:col-9"
              v-model="copyDocReq.targetInsuranceYearId"
              :options="InsurancePremYearList"
              optionLabel="insuranceFullName"
              optionValue="insuranceYearId"
              :filter="true"
              placeholder="請選擇目標險種"
            />
          </div>
        </div>
        <template #footer>
          <PrimeButton
            :label="COMMON_WORD.ENTER"
            class="p-button-sm"
            icon="pi pi-check"
            @click="copyDocData"
          />
          <PrimeButton
            :label="COMMON_WORD.CANCEL"
            icon="pi pi-times"
            @click="isCopyModal = false"
            class="p-button-outlined p-button-sm"
          />
        </template>
      </PrimeDialog>
      <!-- 提示是否覆蓋之彈窗 -->
      <PrimeDialog
        header="訊息"
        v-model:visible="isMsgModal"
        :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
        :style="{ width: '50vw' }"
        :modal="true"
        :class="'msg-modal'"
      >
        <div class="text-center">
          <span
            class="pi pi-exclamation-circle text-primary"
            style="font-size: 4rem"
          />
          <h4 class="m-4">{{ msg }}</h4>
        </div>

        <template #footer>
          <PrimeButton
            :label="COMMON_WORD.NO"
            icon="pi pi-times"
            class="p-button-outlined"
            @click="isMsgModal = false"
          />
          <PrimeButton
            :label="COMMON_WORD.YES"
            icon="pi pi-check"
            @click="copyHandle"
          />
        </template>
      </PrimeDialog>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref, computed, watch } from "vue";
import { useRouter } from "vue-router";
import { useRoute } from "vue-router";
import { Field, Form } from "vee-validate";
import * as yup from "yup";
import {
  queryProductInsuranceSetting,
  editProductExpirationDate,
  copyInsuranceDocMapping,
} from "@/api/product-service";
import {
  getSystemParamList,
  getInsurancePremYearList,
} from "@/api/shared-settings-service";
import { useToast } from "primevue/usetoast";
import { formatDate } from "@/utils/date-time-helper";
import { SysCodeType } from "@/enums/sys-code-type";
import { MsgCodeType } from "@/enums/msg-code-type";
import * as COMMON_WORD from "@/constants/common-word";
import { NUMBER_AND_ENGLISH_ONLY_REGEX } from "@/constants";
import type { InsurancePremYearModel } from "@/models/insurance-prem-year-model";
import { useProductDropdownStore } from "@/stores/productDropdown";
import type { SystemMenuModel } from "@/models/system-menu-model";

const route = useRoute();
const toast = useToast();
const productDropdownStore = useProductDropdownStore();

/**
 * 取得錯誤訊息
 */
const insuranceSettingSchema = yup.object({
  insuranceYearId: yup
    .string()
    .matches(
      NUMBER_AND_ENGLISH_ONLY_REGEX,
      COMMON_WORD.VALIDATE_CAPITAL_OR_NUMBER
    )
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .max(6, COMMON_WORD.VALIDATE_MAX_LENGTH(6))
    .label("insuranceYearId"),
  insuranceName: yup
    .string()
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .max(50, COMMON_WORD.VALIDATE_MAX_LENGTH(50))
    .label("insuranceName"),
  premType: yup
    .string()
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .label("premType"),
  paymentYear: yup
    .number()
    .typeError(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .max(999, COMMON_WORD.VALIDATE_MAX_LENGTH(3))
    .label("paymentYear"),
  plYearType: yup
    .string()
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .label("plYearType"),
  plYear: yup
    .number()
    .typeError(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .max(999, COMMON_WORD.VALIDATE_MAX_LENGTH(3))
    .label("plYear"),
  startDate: yup
    .date()
    .typeError(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .label("startDate"),
  endDate: yup
    .string()
    .typeError(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .label("endDate"),
});

const router = useRouter();
const insuranceId = ref<string>("");
if (typeof route.params.insuranceId === "string") {
  insuranceId.value = route.params.insuranceId;
}

/**
 * 取得商品資訊store
 */
const insuranceBasicData = computed(() => {
  return productDropdownStore.insuranceBasicData;
});

/**
 * 險種顯示
 */
const insurance = ref<{
  fullName: string;
  insuranceId: string;
  currency: string;
  insurancePremYearList: object[];
}>({
  fullName: "",
  insuranceId: "",
  currency: "",
  insurancePremYearList: [],
});

interface InsuranceData {
  action: string;
  insuranceId: string;
  insuranceYearId: string;
  insuranceName: string;
  currency: string;
  currencyName?: string;
  premType: string;
  premTypeName?: string;
  premYear?: number;
  paymentYear: number | string;
  plYearType: string;
  plYear: number | string;
  isReNew: string;
  startDate: string | Date;
  endDate: string | Date;
}

const insuranceEdit = ref<InsuranceData>({
  action: "INSERT",
  insuranceId: insuranceBasicData.value.insuranceId,
  insuranceYearId: "",
  insuranceName: "",
  currency: insuranceBasicData.value.currency,
  premType: "",
  paymentYear: "",
  plYearType: "",
  plYear: "",
  isReNew: "N",
  startDate: "",
  endDate: new Date("2099-12-31 00:00:00 +0800"),
});

/**
 * 新增編輯彈窗
 */
const isModal = ref<boolean>(false);

/**
 * 文件複製彈窗
 */
const isCopyModal = ref<boolean>(false);

/**
 * DropDown是否
 */
const yesOrNoList = ref<SystemMenuModel[]>([]);

/**
 * DropDown匯率
 */
const currency = ref<object[]>([]);

/**
 * DropDown繳費年期單位
 */
const perYearUnit = ref<object[]>([]);

/**
 * DropDown繳費年期單位
 */
const plYearType = ref<object[]>([]);

/**
 * DropDown目標險種
 */
const InsurancePremYearList = ref<Array<InsurancePremYearModel>>([]);

/**
 * 搜尋條件
 */
const searchData = ref({
  page: 1,
  pageDataCount: 10,
  sort: 0,
  sortColumn: "",
  insuranceId: insuranceId,
});

const dataCount = ref<number>(0);

/**
 * DataTable排序
 */
const sortMode = ref({
  insuranceYearId: null,
  insuranceName: null,
  currency: null,
  currencyName: null,
  premType: null,
  premTypeName: null,
  paymentYear: null,
  plYearType: null,
  plYear: null,
  isReNew: null,
  startDate: null,
  endDate: null,
});

const sortModeFunction = (field: string) => {
  if (sortMode.value[field] === "up") {
    sortMode.value[field] = "down";
    searchData.value.sort = 1;
    searchData.value.sortColumn = field;
  } else {
    sortMode.value[field] = "up";
    searchData.value.sort = 0;
    searchData.value.sortColumn = field;
  }
  getData();
};

/**
 * F2502B005：查詢商品險種設定
 */
const getData = (): void => {
  const req = searchData.value;
  queryProductInsuranceSetting(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        insurance.value = { ...insurance.value, ...res.data.body } ?? {};
        dataCount.value = res.data.body.dataCount ?? 0;
      }
    })
    .catch((err) => {
      console.log(err);
    });
};
getData();

watch(insuranceBasicData, () => {
  searchData.value.insuranceId = insuranceBasicData.value.insuranceId;
  getData();
});

/**
 * 取得是否dropdown
 * F0000B003：查詢系統下拉參數檔列表 API
 * codeNo:'R07'
 */
const getYesOrNoist = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R07,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      yesOrNoList.value = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
    }
  });
};
getYesOrNoist();

/**
 * 取得幣別dropdown
 * F0000B003：查詢系統下拉參數檔列表 API
 * codeNo:'R33'
 */
const getCurrencyList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R33,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      currency.value = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
    }
  });
};
getCurrencyList();

/**
 * 取得繳費年期單位dropdown
 * F0000B003：查詢系統下拉參數檔列表 API
 * codeNo:'R56'
 */
const getPerYearList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R56,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      perYearUnit.value = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
    }
  });
};
getPerYearList();

/**
 * 取得繳費年期單位dropdown
 * F0000B003：查詢系統下拉參數檔列表 API
 * codeNo:'R59'
 */
const getPlYearTypeList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R59,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      plYearType.value = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
    }
  });
};
getPlYearTypeList();

/**
 * 取得目標險種dropdown
 * F0000B018：查詢險種主檔列表 API
 */
const dropdownGetInsurancePremYearList = async () => {
  getInsurancePremYearList({
    type: "ALL",
    mainInsuranceId: "",
    insuranceId: "",
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      InsurancePremYearList.value =
        response.data.body?.insurancePremYearList.map(function (item) {
          return {
            ...item,
            insuranceFullName:
              item.insuranceYearId + " " + item.insuranceYearName,
          };
        }) ?? [];
      copyDocReq.value.targetInsuranceYearId =
        InsurancePremYearList.value[0]?.insuranceYearId ?? "";
    }
  });
};
dropdownGetInsurancePremYearList();

/**
 * F2502B006：編輯商品年期維護
 */
const updateData = (): void => {
  let tempData: InsuranceData = { ...insuranceEdit.value };
  const tempStart = formatDate(insuranceEdit.value.startDate);
  const tempEnd = formatDate(insuranceEdit.value.endDate);
  tempData = {
    ...insuranceEdit.value,
    startDate: tempStart,
    endDate: tempEnd,
  };
  const req: InsuranceData = {
    ...tempData,
  };
  editProductExpirationDate(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        const { returnCode, returnDesc } = res.data.header;
        if (returnCode === MsgCodeType.SUCCESS) {
          toast.add({
            severity: "success",
            summary: COMMON_WORD.UPDATE_SUCCESS,
            detail: returnDesc,
            life: 3000,
          });
          getData();
          productDropdownStore.dropdownGetInsurancePremYearList(
            "IN",
            "",
            insuranceBasicData.value.insuranceId
          );
          isModal.value = false;
        } else {
          toast.add({
            severity: "error",
            summary: COMMON_WORD.ERROR,
            detail: returnDesc,
            life: 3000,
          });
        }
      }
    })
    .catch((err) => {
      console.log(err);
    });
};

const copyDocReq = ref({
  insuranceYearId: "",
  insuranceYearIdAndName: "",
  targetInsuranceYearId: "",
  overwriteCheck: "N",
});

const copyDocEdit = (data: {
  insuranceYearId: string;
  insuranceName: string;
}): void => {
  isCopyModal.value = true;
  copyDocReq.value.insuranceYearId = data.insuranceYearId;
  copyDocReq.value.insuranceYearIdAndName =
    data.insuranceYearId + " " + data.insuranceName;
};

const isMsgModal = ref(false);
const msg = ref("");

const copyHandle = (): void => {
  copyDocReq.value.overwriteCheck = "Y";
  copyDocData();
};

/**
 * F2502B011：複製文件對應設定
 */
const copyDocData = (): void => {
  const req = copyDocReq.value;
  copyInsuranceDocMapping(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        const { returnCode, returnDesc } = res.data.header;
        if (returnCode === MsgCodeType.COPY_DOC_OVERRIDE_CHECK) {
          isMsgModal.value = true;
          msg.value = returnDesc;
        } else {
          if (returnCode === MsgCodeType.SUCCESS) {
            toast.add({
              severity: "success",
              summary: COMMON_WORD.COPY_SUCCESS,
              detail: returnDesc,
              life: 3000,
            });
            isMsgModal.value = false;
            isCopyModal.value = false;
            copyDocReq.value.overwriteCheck = "N";
          } else {
            toast.add({
              severity: "error",
              summary: COMMON_WORD.ERROR,
              detail: returnDesc,
              life: 3000,
            });
          }
        }
      }
    })
    .catch((err) => {
      console.log(err);
    });
};

interface Event {
  rows: number;
  page: number;
}
const onTablePageChange = ($event: Event): void => {
  searchData.value.pageDataCount = $event.rows;
  searchData.value.page = $event.page + 1;
  getData();
};

/**
 * 新增&編輯
 */
const goToEdit = (type: boolean, isNew: string, data?: InsuranceData) => {
  isModal.value = type;
  if (isNew === "UPDATE" && data) {
    if (
      typeof data.startDate === "string" &&
      typeof data.endDate === "string"
    ) {
      const tempStart = changeDateStyle(data.startDate) + " 00:00:00 +0800";
      const tempEnd = changeDateStyle(data.endDate) + " 00:00:00 +0800";
      const tempData = {
        ...data,
        startDate: new Date(tempStart),
        endDate: new Date(tempEnd),
      };
      insuranceEdit.value = {
        ...tempData,
        action: "UPDATE",
        insuranceId: insuranceBasicData.value.insuranceId,
      };
    }
  } else {
    insuranceEdit.value = {
      action: "INSERT",
      insuranceId: insuranceBasicData.value.insuranceId,
      insuranceYearId: "",
      insuranceName: "",
      currency: insuranceBasicData.value.currency,
      premType: "",
      paymentYear: "",
      plYearType: "",
      plYear: "",
      isReNew: "N",
      startDate: "",
      endDate: new Date("2099-12-31 00:00:00 +0800"),
    };
  }
};

const goToEditFund = (data: InsuranceData) => {
  router.push({
    name: "insuranceSetting-edit-fund",
    params: {
      insuranceId: insurance.value.insuranceId,
      premYear: data.premYear,
      insuranceYearId: data.insuranceYearId,
      insuranceName: data.insuranceName,
    },
  });
};

const goToEditDoc = (data: InsuranceData) => {
  router.push({
    name: "insuranceSetting-edit-doc",
    params: {
      insuranceYearId: data.insuranceYearId,
      insuranceName: data.insuranceName,
    },
  });
};

const changeDateStyle = (date: string): string => {
  // 'yyyy-mm-dd'
  return date.replace("/", "-");
};
</script>
                                                                                                                                                                                                                                                                                    src/views/pages/insurance/InsurancePurposeSettingView.vue                                           0100777 0000000 0000000 00000037123 14665752120 021263  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <SearchGroup @get-list="doQuery"></SearchGroup>
    <div class="btn-containermb-4">
      <PrimeButton
        :label="COMMON_WORD.ADD"
        class="mr-2 my-2 p-button-sm p-button-info w-auto"
        icon="pi pi-plus"
        @click="goToEdit('add')"
      />
    </div>
    <PrimeDataTable
      :lazy="true"
      :showGridlines="true"
      :value="insurancePurposeList"
      :paginator="true"
      class="p-datatable-customers"
      :rows="searchData.pageDataCount"
      :totalRecords="dataTotalCount"
      dataKey="channelId"
      :sortOrder="searchData.sort"
      paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
      :rowsPerPageOptions="[10, 50, 100]"
      currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
      responsiveLayout="scroll"
      :headerClass="'special-header'"
      @page="onTablePageChange($event)"
    >
      <template #header>
        <div class="">
          <i class="pi pi-table" />
          <span class="mx-2">投保目的設定 資料列表</span>
        </div>
      </template>
      <template #empty> {{ COMMON_WORD.EMPTY }} </template>
      <template #loading> {{ COMMON_WORD.LOADING }} </template>
      <PrimeColumn header="動作" style="width: 200px">
        <template #body="{ data }">
          <div class="text-center flex">
            <PrimeButton
              :label="COMMON_WORD.EDIT"
              icon="pi pi-pencil"
              class="p-button-outlined mr-2 p-button-sm"
              @click="goToEdit('edit', data)"
            >
            </PrimeButton>
            <PrimeButton
              :label="COMMON_WORD.DELETE"
              icon="pi pi-trash"
              class="mr-2 p-button-sm"
              @click="deleteConfirm(data)"
            />
          </div>
        </template>
      </PrimeColumn>
      <PrimeColumn field="channelName" style="width: 150px">
        <template #header>
          <div
            class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
          >
            <span>通路別</span>
          </div>
        </template>
        <template #body="slotProps">
          <span class="customer-badge">{{ slotProps.data.channelName }}</span>
        </template>
      </PrimeColumn>
      <PrimeColumn field="purposeAllName" style="min-width: 150px">
        <template #header>
          <div
            class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
          >
            <span>投保目的</span>
          </div>
        </template>
        <template #body="slotProps">
          <span class="customer-badge">{{
            slotProps.data.purposeAllName
          }}</span>
        </template>
      </PrimeColumn>
    </PrimeDataTable>

    <!-- 新增/編輯視窗 -->
    <PrimeDialog
      header="投保目的設定維護"
      v-model:visible="isEditModal"
      :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
      :style="{ width: '50vw' }"
      :modal="true"
      :draggable="false"
    >
      <div
        class="grid formgrid p-fluid mt-4 overflow-y-auto"
        style="margin-bottom: 8rem"
      >
        <div class="col-12 t-form-group my-2">
          <label class="t-label col-12 lg:col-2 text-left">險種名稱</label>
          <PrimeInputText
            v-model="insuranceFullName"
            class="t-inputText"
            type="text"
            disabled
          />
        </div>
        <div class="col-12 t-form-group my-2">
          <label class="t-label col-12 lg:col-2 text-left">通路別</label>
          <PrimeMultiSelect
            class="t-dropdown col-12 lg:col-10 p-0"
            v-model="selectedChannelIdList"
            :options="saleChannelList"
            optionLabel="channelName"
            optionValue="channelId"
            display="chip"
          />
        </div>
        <div class="col-12 t-form-group my-2">
          <label class="t-label col-12 lg:col-2 text-left">投保目的</label>
          <div
            v-for="category of categories"
            :key="category.menuValue"
            class="field-checkbox"
          >
            <PrimeCheckbox
              :inputId="category.menuValue"
              name="category"
              :value="category.menuValue"
              v-model="selectedPurposeList"
            />
            <label
              class="t-label white-space-nowrap"
              :for="category.menuValue"
              >{{ category.menuText }}</label
            >
          </div>
        </div>
        <div class="col-12 mb-1 lg:col-12 t-form-group">
          <small v-if="!isValidated" class="p-error col-12 lg:col-3">
            {{ errorMsg }}
          </small>
        </div>
      </div>
      <template #footer>
        <PrimeButton
          :label="COMMON_WORD.ENTER"
          icon="pi pi-check"
          @click="goEditInsurancePurpose"
        />
        <PrimeButton
          :label="COMMON_WORD.CANCEL"
          icon="pi pi-times"
          class="p-button-outlined"
          @click="isEditModal = false"
        />
      </template>
    </PrimeDialog>
    <!-- 刪除彈窗 -->
    <DeleteModal
      :isDeleteModal="isDeleteModal"
      :reqData="{
        insuranceYearId: searchData.insuranceYearId,
        channelId: delChannelId,
      }"
      :deleteDataFun="deleteInsurancePurpose"
      @changeIsDeleteVal="changeIsDeleteVal"
      @getList="queryInsurancePurposeData"
    ></DeleteModal>
    <!-- 確認覆蓋彈窗 -->
    <PrimeDialog
      header="訊息"
      v-model:visible="isOverrideModal"
      :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
      :style="{ width: '50vw' }"
      :modal="true"
      :class="'msg-modal'"
    >
      <div class="text-center">
        <span
          class="pi pi-exclamation-circle text-primary"
          style="font-size: 4rem"
        />
        <h4 class="m-4">{{ overrideMsg }}</h4>
      </div>
      <template #footer>
        <PrimeButton
          :label="COMMON_WORD.NO"
          icon="pi pi-times"
          class="p-button-outlined"
          @click="isOverrideModal = false"
        />
        <PrimeButton
          :label="COMMON_WORD.YES"
          icon="pi pi-check"
          @click="confirmOverride"
        />
      </template>
    </PrimeDialog>
  </div>
</template>
<script setup lang="ts">
import * as COMMON_WORD from "@/constants/common-word";
import {
  queryInsurancePurpose,
  editInsurancePurpose,
  deleteInsurancePurpose,
} from "@/api/product-service";
import { getSystemParamList } from "@/api/shared-settings-service";
import type { InsurancePurposeModel } from "@/models/insurance-purpose-model";
import { computed, reactive, ref, watch } from "vue";
import { SysCodeType } from "@/enums/sys-code-type";
import type { SystemMenuModel } from "@/models/system-menu-model";
import type { PurposeModel } from "@/models/purpose-model";
import { MsgCodeType } from "@/enums/msg-code-type";
import { useToast } from "primevue/usetoast";
import { useRoute } from "vue-router";
import type { ChannelIdModel } from "@/models/channel-id-model";
import { getMesgContent } from "@/utils/msg-content-helper";
import SearchGroup from "@/components/SearchGroup.vue";
import { useProductDropdownStore } from "@/stores/productDropdown";

const route = useRoute();
const toast = useToast();
const productDropdownStore = useProductDropdownStore();

const insuranceId = ref<string>("");
if (typeof route.params.insuranceId === "string") {
  insuranceId.value = route.params.insuranceId;
}

const insuranceFullName = ref("");

/*
 ** 從查詢頁傳來 insuranceId
 */
const prop = defineProps({
  action: {
    type: String,
    default: "",
  },
});

/**
 * 險種顯示
 */
const insurance = ref<{
  insuranceId: string;
  insuranceName: string;
}>({
  insuranceId: insuranceId.value,
  insuranceName: "",
});

const searchData = ref({
  action: prop.action,
  page: 1,
  pageDataCount: 10,
  sort: 1,
  insuranceId: "",
  insuranceYearId: "",
  channelId: "",
});

const overwriteCheck = ref("N");
const selectedChannelIdList = ref<Array<string>>([]);
const selectedPurposeList = ref<Array<string>>([]);

const insuranceBasicData = computed(() => {
  return productDropdownStore.insuranceBasicData;
});

const InsurancePremYearList = computed(() => {
  return productDropdownStore.insurancePremYearList;
});

/**
 * 取得通路別dropdown
 * F0000B011：查詢通路別列表 API
 */
const saleChannelList = computed(() => {
  return productDropdownStore.saleChannelList;
});

const getInsuranceFullName = () => {
  const result = InsurancePremYearList.value.filter(function (item) {
    return item.insuranceYearId === searchData.value.insuranceYearId;
  });
  insuranceFullName.value = result[0]?.insuranceFullName;
};

searchData.value.insuranceId = insuranceBasicData.value.insuranceId;
insurance.value.insuranceId = insuranceBasicData.value?.insuranceId;
insurance.value.insuranceName = insuranceBasicData.value?.fullName;

//如果store中的商品基本資訊有所變化，則該頁籤的相關資料也須變更，且重新呼叫一次查詢DataTable的API
watch(insuranceBasicData, () => {
  searchData.value.insuranceId = insuranceBasicData.value.insuranceId ?? "";
  insurance.value.insuranceId = insuranceBasicData.value?.insuranceId;
  insurance.value.insuranceName = insuranceBasicData.value?.fullName;
  queryInsurancePurposeData();
});

/**
 * 取得新增/編輯 checkBox 資料
 * F0000B003：查詢系統下拉參數檔列表 API
 */
const categories = ref<Array<SystemMenuModel>>([]);
const getCategories = () => {
  getSystemParamList({
    codeNo: SysCodeType.Purpose,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      categories.value = response.data.body?.sysCodeList[0]?.sysMenuList;
    }
  });
};
getCategories();

const insurancePurposeList = ref<Array<InsurancePurposeModel>>([]);
const dataTotalCount = ref(0);
const queryInsurancePurposeData = () => {
  const val = searchData.value;
  const req = {
    page: val.page,
    pageDataCount: val.pageDataCount,
    sort: val.sort,
    sortColumn: "",
    insuranceId: val.insuranceId,
    insuranceYearId: val.insuranceYearId,
    channelId: val.channelId ? val.channelId : undefined,
  };
  queryInsurancePurpose({
    ...req,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      insurancePurposeList.value =
        response.data.body.insurancePurposeList ?? [];
      console.log("insurancePurposeList.value:", insurancePurposeList.value);
      dataTotalCount.value = response.data.body.dataCount ?? 0;
      getInsuranceFullName();
    }
  });
};

const isEditModal = ref(false);
const goToEdit = (type: string, data?: InsurancePurposeModel): void => {
  overwriteCheck.value = "N";
  selectedChannelIdList.value = [];
  selectedPurposeList.value = [];
  errorMsg.value = "";
  if (type === "edit" && data?.channelId) {
    selectedChannelIdList.value.push(data?.channelId);
    Object.assign(
      selectedPurposeList.value,
      data?.purposeList.map((a) => a.purpose)
    );
  }
  isEditModal.value = true;
};

const isValidated = ref(true);
const errorMsg = ref("");
const validateForm = () => {
  // 重置
  errorMsg.value = "";
  isValidated.value = true;
  // 檢核編輯資料
  if (selectedChannelIdList.value.length === 0) {
    errorMsg.value = getMesgContent(MsgCodeType.CHANNEL_IS_REQUIRED);
  }
  if (selectedPurposeList.value.length === 0) {
    errorMsg.value = getMesgContent(MsgCodeType.PURPOSE_IS_REQUIRED);
  }

  if (errorMsg.value.length > 0) {
    isValidated.value = false;
  }
  return isValidated.value;
};

const goEditInsurancePurpose = () => {
  if (validateForm()) {
    editInsurancePurpose({
      overwriteCheck: overwriteCheck.value,
      insuranceYearId: searchData.value.insuranceYearId,
      channelIdList: getChannelIdList(selectedChannelIdList.value),
      purposeList: getPurposeList(selectedPurposeList.value),
    }).then((response) => {
      if (response?.status === 200 && response.data) {
        const { returnCode, returnDesc } = response.data.header;
        if (returnCode === MsgCodeType.SUCCESS) {
          isEditModal.value = false;
          queryInsurancePurposeData();
          toast.add({
            severity: "success",
            summary: COMMON_WORD.UPDATE_SUCCESS,
            detail: returnDesc,
            life: 3000,
          });
        } else if (returnCode === MsgCodeType.PURPOSE_EXIST_OVERRIDE_CHECK) {
          showConfirmOverrideDialog(returnDesc);
        } else {
          toast.add({
            severity: "error",
            summary: COMMON_WORD.ERROR,
            detail: returnDesc,
            life: 3000,
          });
        }
      } else {
        console.log(response);
      }
    });
  }
};

const isOverrideModal = ref(false);
const overrideMsg = ref("");
const showConfirmOverrideDialog = (returnDesc: string) => {
  isOverrideModal.value = true;
  overrideMsg.value = returnDesc;
};

const confirmOverride = () => {
  overwriteCheck.value = "Y";
  goEditInsurancePurpose();
  isOverrideModal.value = false;
  overwriteCheck.value = "N";
};

const getChannelIdList = (selectedchannelIdList: Array<string>) => {
  const channelIdList = ref<Array<ChannelIdModel>>([]);
  selectedchannelIdList.forEach((element) => {
    const channelIdGenObj = {
      channelId: "",
      channelName: "",
      onShelfDate: new Date(),
      onShelfTime: new Date(),
      offShelfDate: new Date(),
      offShelfTime: new Date(),
      isPolicyOff: false,
      isVerify: false,
      dateErrMsg: "",
    };
    const channelIdObj: ChannelIdModel = reactive(channelIdGenObj);
    channelIdObj.channelId = element;
    channelIdList.value.push(channelIdObj);
  });
  return channelIdList.value;
};

const getPurposeList = (selectedPurposeList: Array<string>) => {
  const purposeList = ref<Array<PurposeModel>>([]);
  selectedPurposeList.forEach((element) => {
    const purposeGenObj = {
      purpose: "",
    };
    const purposeObj: PurposeModel = reactive(purposeGenObj);
    purposeObj.purpose = element;
    purposeList.value.push(purposeObj);
  });
  return purposeList.value;
};

const isDeleteModal = ref(false);
const delChannelId = ref("");
const deleteConfirm = (data: { channelId: string }) => {
  delChannelId.value = data.channelId;
  isDeleteModal.value = true;
};

const changeIsDeleteVal = (value: boolean) => {
  isDeleteModal.value = value;
};

/**
 * 換頁
 */
const onTablePageChange = ($event: { rows: number; page: number }) => {
  searchData.value.pageDataCount = $event.rows;
  searchData.value.page = $event.page + 1;
  queryInsurancePurposeData();
};

// emit(子傳父)時使用的function
const doQuery = ({
  insuranceYearId,
  channelId,
}: {
  insuranceYearId: string;
  channelId: string;
}): void => {
  searchData.value.insuranceYearId = insuranceYearId;
  searchData.value.channelId = channelId;

  //呼叫查詢Datatable資料的function
  queryInsurancePurposeData();
};

//如果store內的險種名稱dropdown有值，所執行的function(設定預設險種&查詢資料)
watch(InsurancePremYearList, () => {
  if (InsurancePremYearList.value.length > 0) {
    searchData.value.insuranceYearId =
      InsurancePremYearList.value[0].insuranceYearId ?? "";
    //呼叫查詢Datatable資料的function
    queryInsurancePurposeData();
  }
});
</script>
                                                                                                                                                                                                                                                                                                                                                                                                                                             src/views/pages/insurance/InsuranceRewardSettingView.vue                                            0100777 0000000 0000000 00000045256 14665752120 021060  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <SearchGroup @get-list="doQuery"></SearchGroup>
    <div class="btn-containermb-4">
      <PrimeButton
        :label="COMMON_WORD.ADD"
        class="mr-2 my-2 p-button-sm p-button-info w-auto"
        icon="pi pi-plus"
        @click="goToEdit('add')"
      />
    </div>
    <PrimeDataTable
      :lazy="true"
      :showGridlines="true"
      :value="insuranceRewardList"
      :paginator="true"
      class="p-datatable-customers"
      :rows="searchData.pageDataCount"
      :totalRecords="dataTotalCount"
      dataKey="channelId"
      :sortOrder="searchData.sort"
      paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
      :rowsPerPageOptions="[10, 50, 100]"
      currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
      responsiveLayout="scroll"
      :headerClass="'special-header'"
      @page="onTablePageChange($event)"
    >
      <template #header>
        <div class="">
          <i class="pi pi-table" />
          <span class="mx-2">保證期間&年金給付方式設定 資料列表</span>
        </div>
      </template>
      <template #empty> {{ COMMON_WORD.EMPTY }} </template>
      <template #loading> {{ COMMON_WORD.LOADING }} </template>
      <PrimeColumn header="動作" style="width: 200px">
        <template #body="{ data }">
          <div class="text-center flex">
            <PrimeButton
              :label="COMMON_WORD.EDIT"
              icon="pi pi-pencil"
              class="p-button-outlined mr-2 p-button-sm"
              @click="goToEdit('edit', data)"
            >
            </PrimeButton>
            <PrimeButton
              :label="COMMON_WORD.DELETE"
              icon="pi pi-trash"
              class="mr-2 p-button-sm"
              @click="deleteConfirm(data)"
            />
          </div>
        </template>
      </PrimeColumn>
      <PrimeColumn field="channelName" style="min-width: 150px">
        <template #header>
          <div
            class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
          >
            <span>通路別</span>
          </div>
        </template>
        <template #body="slotProps">
          <span class="customer-badge">{{ slotProps.data.channelName }}</span>
        </template>
      </PrimeColumn>
      <PrimeColumn field="fRewardKindList" style="min-width: 150px">
        <template #header>
          <div
            class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
          >
            <span>{{ getHeaderName("F") }}</span>
          </div>
        </template>
        <template #body="slotProps">
          <span class="customer-badge">{{
            getFColumnValue(slotProps.data.fRewardKindList)
          }}</span>
        </template>
      </PrimeColumn>
      <PrimeColumn field="rRewardKindList" style="min-width: 150px">
        <template #header>
          <div
            class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
          >
            <span>{{ getHeaderName("R") }}</span>
          </div>
        </template>
        <template #body="slotProps">
          <span class="customer-badge">{{
            getRColumnValue(slotProps.data.rRewardKindList)
          }}</span>
        </template>
      </PrimeColumn>
    </PrimeDataTable>

    <!-- 新增/編輯視窗 -->
    <PrimeDialog
      header="回饋分享金給付設定維護"
      v-model:visible="isEditModal"
      :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
      :style="{ width: '50vw' }"
      :modal="true"
      :draggable="false"
    >
      <div class="grid formgrid">
        <div class="col-12 mb-3 lg:col-12 t-form-group">
          <label class="t-label col-12 lg:col-3">險種名稱</label>
          <PrimeInputText
            v-model="insuranceFullName"
            class="t-inputText col-12 lg:col-9 pt-3 pb-3"
            type="text"
            disabled
          />
        </div>
      </div>
      <div class="grid formgrid">
        <div class="col-12 mb-3 lg:col-12 t-form-group">
          <label class="t-label col-12 lg:col-3">通路別</label>
          <PrimeMultiSelect
            class="t-dropdown col-12 lg:col-9 my-2"
            v-model="selectedChannelIdList"
            :options="saleChannelList"
            optionLabel="channelName"
            optionValue="channelId"
            display="chip"
          />
        </div>
      </div>
      <div class="grid formgrid">
        <div class="col-12 mb-1 lg:col-12 t-form-group">
          <label class="t-label col-12 lg:col-3 mb-3">{{
            getHeaderName("F")
          }}</label>
          <div
            v-for="category of categories"
            :key="category.menuValue"
            class="field-checkbox"
          >
            <PrimeCheckbox
              :inputId="category.menuValue"
              name="category"
              :value="category.menuValue"
              v-model="selectedFRewardKindList"
            />
            <label :for="category.menuValue">{{ category.menuText }}</label>
          </div>
        </div>
      </div>
      <div class="grid formgrid">
        <div class="col-12 mb-1 lg:col-12 t-form-group">
          <label class="t-label col-12 lg:col-3 mb-3">{{
            getHeaderName("R")
          }}</label>
          <div
            v-for="category of categories"
            :key="category.menuValue"
            class="field-checkbox"
          >
            <PrimeCheckbox
              :inputId="category.menuValue"
              name="category"
              :value="category.menuValue"
              v-model="selectedRRewardKindList"
            />
            <label :for="category.menuValue">{{ category.menuText }}</label>
          </div>
        </div>
      </div>
      <div class="col-12 mb-1 lg:col-12 t-form-group">
        <small v-if="!isValidated" class="p-error col-12 lg:col-3">
          {{ errorMsg }}
        </small>
      </div>
      <template #footer>
        <PrimeButton
          :label="COMMON_WORD.ENTER"
          icon="pi pi-check"
          @click="goEditInsuranceReward"
        />
        <PrimeButton
          :label="COMMON_WORD.CANCEL"
          icon="pi pi-times"
          class="p-button-text"
          @click="isEditModal = false"
        />
      </template>
    </PrimeDialog>
    <!-- 刪除彈窗 -->
    <DeleteModal
      :isDeleteModal="isDeleteModal"
      :reqData="{
        insuranceYearId: searchData.insuranceYearId,
        channelId: delChannelId,
      }"
      :deleteDataFun="deleteInsuranceReward"
      @changeIsDeleteVal="changeIsDeleteVal"
      @getList="queryInsuranceRewardData"
    ></DeleteModal>
    <!-- 確認覆蓋彈窗 -->
    <PrimeDialog
      header="訊息"
      v-model:visible="isOverrideModal"
      :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
      :style="{ width: '50vw' }"
      :modal="true"
      :class="'msg-modal'"
    >
      <div class="text-center">
        <span
          class="pi pi-exclamation-circle text-primary"
          style="font-size: 4rem"
        />
        <h4 class="m-4">{{ overrideMsg }}</h4>
      </div>
      <template #footer>
        <PrimeButton
          :label="COMMON_WORD.NO"
          icon="pi pi-times"
          class="p-button-outlined"
          @click="isOverrideModal = false"
        />
        <PrimeButton
          :label="COMMON_WORD.YES"
          icon="pi pi-check"
          @click="confirmOverride"
        />
      </template>
    </PrimeDialog>
  </div>
</template>
<script setup lang="ts">
import * as COMMON_WORD from "@/constants/common-word";
import {
  queryInsuranceReward,
  editInsuranceReward,
  deleteInsuranceReward,
} from "@/api/product-service";
import { getSystemParamList } from "@/api/shared-settings-service";
import type { InsuranceRewardModel } from "@/models/insurance-reward-model";
import { computed, reactive, ref, watch } from "vue";
import { SysCodeType } from "@/enums/sys-code-type";
import type { SystemMenuModel } from "@/models/system-menu-model";
import type { FRewardKindModel } from "@/models/f-reward-kind-model";
import type { RRewardKindModel } from "@/models/r-reward-kind-model";
import { MsgCodeType } from "@/enums/msg-code-type";
import { useToast } from "primevue/usetoast";
import { useRoute } from "vue-router";
import type { ChannelIdModel } from "@/models/channel-id-model";
import { getMesgContent } from "@/utils/msg-content-helper";
import SearchGroup from "@/components/SearchGroup.vue";
import { useProductDropdownStore } from "@/stores/productDropdown";

const route = useRoute();
const toast = useToast();
const productDropdownStore = useProductDropdownStore();

const insuranceId = ref<string>("");
if (typeof route.params.insuranceId === "string") {
  insuranceId.value = route.params.insuranceId;
}

const insuranceFullName = ref("");

/*
 ** 從查詢頁傳來 insuranceId
 */
const prop = defineProps({
  action: {
    type: String,
    default: "",
  },
});

/**
 * 險種顯示
 */
const insurance = ref<{
  insuranceId: string;
  insuranceName: string;
}>({
  insuranceId: insuranceId.value,
  insuranceName: "",
});

const searchData = ref({
  action: prop.action,
  page: 1,
  pageDataCount: 10,
  sort: 1,
  insuranceId: "",
  insuranceYearId: "",
  channelId: "",
});

const overwriteCheck = ref("N");
const selectedChannelIdList = ref<Array<string>>([]);
const selectedFRewardKindList = ref<Array<string>>([]);
const selectedRRewardKindList = ref<Array<string>>([]);

const insuranceBasicData = computed(() => {
  return productDropdownStore.insuranceBasicData;
});

const InsurancePremYearList = computed(() => {
  return productDropdownStore.insurancePremYearList;
});

/**
 * 取得通路別dropdown
 * F0000B011：查詢通路別列表 API
 */
const saleChannelList = computed(() => {
  return productDropdownStore.saleChannelList;
});

const getInsuranceFullName = () => {
  const result = InsurancePremYearList.value.filter(function (item) {
    return item.insuranceYearId === searchData.value.insuranceYearId;
  });
  insuranceFullName.value = result[0]?.insuranceFullName;
};

searchData.value.insuranceId = insuranceBasicData.value.insuranceId;
insurance.value.insuranceId = insuranceBasicData.value?.insuranceId;
insurance.value.insuranceName = insuranceBasicData.value?.fullName;

//如果store中的商品基本資訊有所變化，則該頁籤的相關資料也須變更，且重新呼叫一次查詢DataTable的API
watch(insuranceBasicData, () => {
  searchData.value.insuranceId = insuranceBasicData.value.insuranceId ?? "";
  insurance.value.insuranceId = insuranceBasicData.value?.insuranceId;
  insurance.value.insuranceName = insuranceBasicData.value?.fullName;
  queryInsuranceRewardData();
});

/**
 * 取得表頭文字資料
 * F0000B003：查詢系統下拉參數檔列表 API
 */
const sysMenuHeaderList = ref<Array<SystemMenuModel>>([]);
const getSysHeaderList = () => {
  getSystemParamList({
    codeNo: SysCodeType.R120,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      sysMenuHeaderList.value = response.data.body?.sysCodeList[0]?.sysMenuList;
    }
  });
};
getSysHeaderList();

/**
 * 取得新增/編輯 checkBox 資料
 * F0000B003：查詢系統下拉參數檔列表 API
 */
const categories = ref<Array<SystemMenuModel>>([]);
const getCategories = () => {
  getSystemParamList({
    codeNo: SysCodeType.R121,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      categories.value = response.data.body?.sysCodeList[0]?.sysMenuList;
    }
  });
};
getCategories();

const getHeaderName = (menuValue: string) => {
  return sysMenuHeaderList.value.find(
    (element) => element.menuValue === menuValue
  )?.menuText;
};

const getFColumnValue = (rewardKindList: Array<FRewardKindModel>) => {
  return rewardKindList.map((a) => a.fRewardKindAllName).join("、");
};

const getRColumnValue = (rewardKindList: Array<RRewardKindModel>) => {
  return rewardKindList.map((a) => a.rRewardKindAllName).join("、");
};

const insuranceRewardList = ref<Array<InsuranceRewardModel>>([]);
const dataTotalCount = ref(0);
const queryInsuranceRewardData = () => {
  const val = searchData.value;
  const req = {
    page: val.page,
    pageDataCount: val.pageDataCount,
    sort: val.sort,
    sortColumn: "",
    insuranceId: val.insuranceId,
    insuranceYearId: val.insuranceYearId,
    channelId: val.channelId ? val.channelId : undefined,
  };
  queryInsuranceReward({
    ...req,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      insuranceRewardList.value = response.data.body.insuranceRewardList ?? [];
      dataTotalCount.value = response.data.body.dataCount ?? 0;
      getInsuranceFullName();
    }
  });
};

const isEditModal = ref(false);
const goToEdit = (type: string, data?: InsuranceRewardModel): void => {
  overwriteCheck.value = "N";
  selectedChannelIdList.value = [];
  selectedFRewardKindList.value = [];
  selectedRRewardKindList.value = [];
  if (type === "edit" && data?.channelId) {
    selectedChannelIdList.value.push(data?.channelId);
    Object.assign(
      selectedFRewardKindList.value,
      data?.fRewardKindList.map((a) => a.fRewardKind)
    );
    Object.assign(
      selectedRRewardKindList.value,
      data?.rRewardKindList.map((a) => a.rRewardKind)
    );
  }
  isEditModal.value = true;
};

const isValidated = ref(true);
const errorMsg = ref("");
const validateForm = () => {
  // 重置
  errorMsg.value = "";
  isValidated.value = true;
  // 檢核編輯資料
  if (selectedChannelIdList.value.length === 0) {
    errorMsg.value = getMesgContent(MsgCodeType.CHANNEL_IS_REQUIRED);
  }
  if (selectedFRewardKindList.value.length === 0) {
    errorMsg.value = getMesgContent(MsgCodeType.F_CATEGORY_IS_REQUIRED);
  }
  if (selectedRRewardKindList.value.length === 0) {
    errorMsg.value = getMesgContent(MsgCodeType.R_CATEGORY_IS_REQUIRED);
  }

  if (errorMsg.value.length > 0) {
    isValidated.value = false;
  }
  return isValidated.value;
};

const goEditInsuranceReward = () => {
  if (validateForm()) {
    isEditModal.value = false;
    editInsuranceReward({
      overwriteCheck: overwriteCheck.value,
      insuranceYearId: searchData.value.insuranceYearId,
      channelIdList: getChannelIdList(selectedChannelIdList.value),
      fRewardKindList: getFRewardKindList(selectedFRewardKindList.value),
      rRewardKindList: getRRewardKindList(selectedRRewardKindList.value),
    }).then((response) => {
      if (response?.status === 200 && response.data) {
        const { returnCode, returnDesc } = response.data.header;
        if (returnCode === MsgCodeType.SUCCESS) {
          isEditModal.value = false;
          queryInsuranceRewardData();
          toast.add({
            severity: "success",
            summary: COMMON_WORD.UPDATE_SUCCESS,
            detail: returnDesc,
            life: 3000,
          });
        } else if (returnCode === MsgCodeType.REWARD_EXIST_OVERRIDE_CHECK) {
          showConfirmOverrideDialog(returnDesc);
        } else {
          toast.add({
            severity: "error",
            summary: COMMON_WORD.ERROR,
            detail: returnDesc,
            life: 3000,
          });
        }
      } else {
        console.log(response);
      }
    });
  }
};

const isOverrideModal = ref(false);
const overrideMsg = ref("");
const showConfirmOverrideDialog = (returnDesc: string) => {
  isOverrideModal.value = true;
  overrideMsg.value = returnDesc;
};

const confirmOverride = () => {
  overwriteCheck.value = "Y";
  goEditInsuranceReward();
  isOverrideModal.value = false;
  overwriteCheck.value = "N";
};

const getChannelIdList = (selectedchannelIdList: Array<string>) => {
  const channelIdList = ref<Array<ChannelIdModel>>([]);
  selectedchannelIdList.forEach((element) => {
    const channelIdGenObj = {
      channelId: "",
      channelName: "",
      onShelfDate: new Date(),
      onShelfTime: new Date(),
      offShelfDate: new Date(),
      offShelfTime: new Date(),
      isPolicyOff: false,
      isVerify: false,
      dateErrMsg: "",
    };
    const channelIdObj: ChannelIdModel = reactive(channelIdGenObj);
    channelIdObj.channelId = element;
    channelIdList.value.push(channelIdObj);
  });
  return channelIdList.value;
};

const getFRewardKindList = (selectedFRewardKindList: Array<string>) => {
  const fRewardKindList = ref<Array<FRewardKindModel>>([]);
  selectedFRewardKindList.forEach((element) => {
    const fRewardKindGenObj = {
      fRewardKind: "",
      fRewardKindAllName: "",
    };
    const fRewardKindObj: FRewardKindModel = reactive(fRewardKindGenObj);
    fRewardKindObj.fRewardKind = element;
    fRewardKindList.value.push(fRewardKindObj);
  });
  return fRewardKindList.value;
};

const getRRewardKindList = (selectedFRewardKindList: Array<string>) => {
  const rRewardKindList = ref<Array<RRewardKindModel>>([]);
  selectedFRewardKindList.forEach((element) => {
    const rRewardKindGenObj = {
      rRewardKind: "",
      rRewardKindAllName: "",
    };
    const rRewardKindObj: RRewardKindModel = reactive(rRewardKindGenObj);
    rRewardKindObj.rRewardKind = element;
    rRewardKindList.value.push(rRewardKindObj);
  });
  return rRewardKindList.value;
};

const isDeleteModal = ref(false);
const delChannelId = ref("");
const deleteConfirm = (data: { channelId: string }) => {
  delChannelId.value = data.channelId;
  isDeleteModal.value = true;
};

const changeIsDeleteVal = (value: boolean) => {
  isDeleteModal.value = value;
};

/**
 * 換頁
 */
const onTablePageChange = ($event: { rows: number; page: number }) => {
  searchData.value.pageDataCount = $event.rows;
  searchData.value.page = $event.page + 1;
  queryInsuranceRewardData();
};

// emit(子傳父)時使用的function
const doQuery = ({
  insuranceYearId,
  channelId,
}: {
  insuranceYearId: string;
  channelId: string;
}): void => {
  searchData.value.insuranceYearId = insuranceYearId;
  searchData.value.channelId = channelId;

  //呼叫查詢Datatable資料的function
  queryInsuranceRewardData();
};

//如果store內的險種名稱dropdown有值，所執行的function(設定預設險種&查詢資料)
watch(InsurancePremYearList, () => {
  if (InsurancePremYearList.value.length > 0) {
    searchData.value.insuranceYearId =
      InsurancePremYearList.value[0].insuranceYearId ?? "";
    //呼叫查詢Datatable資料的function
    queryInsuranceRewardData();
  }
});
</script>
                                                                                                                                                                                                                                                                                                                                                  src/views/pages/insurance/InsuranceSettingEditView.vue                                              0100777 0000000 0000000 00000040254 14665752120 020512  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <div class="grid p-fluid">
      <div class="col-12">
        <div class="card">
          <PrimePanel>
            <PrimeTabView
              :activeIndex="activeIndex"
              @tab-change="showWarning($event)"
              ref="tabViewRefs"
            >
              <PrimeTabPanel class="p-panel-header">
                <template #header>
                  <div class="left-header">
                    <span>商品基本訊息</span>
                  </div>
                </template>
                <InsuranceSettingInfo
                  :action="action"
                  @emitData="acceptData"
                  @emitIsChangeTags="emitIsChangeTags"
                  ref="InsuranceSettingInfoRef"
                />
              </PrimeTabPanel>
              <PrimeTabPanel class="p-panel-header" :disabled="isTagsDisabled">
                <template #header>
                  <div class="left-header">
                    <span>檢核條件設定</span>
                  </div>
                </template>
                <InsuranceUnderWritingSetting />
              </PrimeTabPanel>
              <PrimeTabPanel class="p-panel-header" :disabled="isTagsDisabled">
                <template #header>
                  <div class="left-header">
                    <span>商品險種設定</span>
                  </div>
                </template>
                <InsurancePremYearSetting />
              </PrimeTabPanel>
              <PrimeTabPanel class="p-panel-header" :disabled="isTagsDisabled">
                <template #header>
                  <div class="left-header">
                    <span>繳別繳法設定</span>
                  </div>
                </template>
                <InsurancePaymentSettingView :action="action" />
              </PrimeTabPanel>
              <PrimeTabPanel class="p-panel-header" :disabled="isTagsDisabled">
                <template #header>
                  <div class="left-header">
                    <span>主約對應附約</span>
                  </div>
                </template>
                <InsuranceMainAdditionalView
                  :action="action"
                  ref="insuranceMainAdditionalSettingRef"
                  :insuranceInfo="productEdit"
                />
              </PrimeTabPanel>
              <PrimeTabPanel class="p-panel-header" :disabled="isTagsDisabled">
                <template #header>
                  <div class="left-header">
                    <span>年齡限制設定</span>
                  </div>
                </template>
                <InsuranceAgeLimitSetting />
              </PrimeTabPanel>
              <PrimeTabPanel class="p-panel-header" :disabled="isTagsDisabled">
                <template #header>
                  <div class="left-header">
                    <span>保額限制設定</span>
                  </div>
                </template>
                <InsuranceAmtView :action="action" />
              </PrimeTabPanel>
              <PrimeTabPanel class="p-panel-header" :disabled="isTagsDisabled">
                <template #header>
                  <div class="left-header">
                    <span>職業等級設定</span>
                  </div>
                </template>
                <InsuranceClassSetting />
              </PrimeTabPanel>
              <PrimeTabPanel class="p-panel-header" :disabled="isTagsDisabled">
                <template #header>
                  <div class="left-header">
                    <span>投保目的設定</span>
                  </div>
                </template>
                <InsurancePurposeSetting :action="action" />
              </PrimeTabPanel>
              <!-- 利變型商品顯示[回饋分享金給付設定]頁籤 -->
              <PrimeTabPanel
                v-if="changeTags['isInterestRateChg'] === 'Y'"
                class="p-panel-header"
                :disabled="isTagsDisabled"
              >
                <template #header>
                  <div class="left-header">
                    <span>回饋分享金給付設定</span>
                  </div>
                </template>
                <InsuranceRewardSettingView :action="action" />
              </PrimeTabPanel>
              <!-- 投資型險種性質顯示[投資型保費]頁籤 -->

              <PrimeTabPanel
                v-if="
                  changeTags['insuranceSubCategory'] === 'L2' ||
                  changeTags['insuranceSubCategory'] === 'Y2'
                "
                class="p-panel-header"
              >
                <template #header>
                  <div class="left-header">
                    <span>投資型保費</span>
                  </div>
                </template>
                <InsuranceInvestLimitView :action="action" />
              </PrimeTabPanel>
              <!-- 上下架日期設定 -->
              <PrimeTabPanel class="p-panel-header" :disabled="isTagsDisabled">
                <template #header>
                  <div class="left-header">
                    <span>{{ InsuranceDateSettingLabel }}</span>
                  </div>
                </template>
                <InsuranceDateSettingView
                  :action="action"
                  @acceptDateSettingData="acceptDateSettingData"
                  ref="insuranceDateSettingRef"
                />
              </PrimeTabPanel>
            </PrimeTabView>
          </PrimePanel>
          <div class="btn-container text-center mb-4">
            <Router-link
              :to="{ name: 'insuranceSetting' }"
              @click="activeIndexStore.changeActiveIndex(0)"
            >
              <PrimeButton
                label="回上一頁"
                class="p-button-outlined w-2 mr-2 my-2 p-button-sm"
                icon="pi pi-arrow-left"
              />
            </Router-link>
            <PrimeButton
              v-if="isShowSaveBtn"
              label="儲存"
              icon="pi pi-check"
              class="w-2 mr-2 my-2 p-button-sm p-button-info"
              @click="saveData()"
            />
          </div>
        </div>
      </div>
    </div>
    <PrimeDialog
      header="訊息"
      v-model:visible="isWarningModal"
      :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
      :style="{ width: '50vw' }"
      :modal="true"
      :class="'msg-modal'"
      :closable="false"
    >
      <h4 class="text-center m-4">{{ msg }}</h4>
      <template #footer>
        <PrimeButton
          label="取消"
          icon="pi pi-times"
          @click="cancelData()"
          class="p-button-text"
        />
        <PrimeButton
          label="確定"
          icon="pi pi-check"
          @click="saveData(true)"
          autofocus
        />
      </template>
    </PrimeDialog>
  </div>
</template>
<script setup lang="ts">
import { ref } from "vue";
import { useRoute, useRouter } from "vue-router";
import InsuranceSettingInfo from "./InsuranceSettingInfoView.vue";
import InsuranceUnderWritingSetting from "./InsuranceUnderWritingSettingView.vue";
import InsurancePremYearSetting from "./InsurancePremYearSettingView.vue";
import InsuranceDateSettingView from "./InsuranceDateSettingView.vue";
import InsurancePaymentSettingView from "./InsurancePaymentSettingView.vue";
import InsuranceRewardSettingView from "./InsuranceRewardSettingView.vue";
import InsuranceMainAdditionalView from "./InsuranceMainAdditionalView.vue";
import InsuranceAgeLimitSetting from "./InsuranceAgeLimitSettingView.vue";
import InsuranceClassSetting from "./InsuranceClassSettingView.vue";
import InsuranceAmtView from "./InsuranceAmtView.vue";
import InsuranceInvestLimitView from "./InsuranceInvestLimitView.vue";
import InsurancePurposeSetting from "./InsurancePurposeSettingView.vue";
import type { SaveProductDataReq } from "@/api/models/req/save-product-data-req";
import type { EditInsuranceCloseDateReq } from "@/api/models/req/edit-insurance-close-date-req";
import { useActiveIndexStore } from "@/stores/activeIndex";
import { useProductDropdownStore } from "@/stores/productDropdown";
import { saveProdData } from "@/api/product-service";
import { useToast } from "primevue/usetoast";
import { MsgCodeType } from "@/enums/msg-code-type";
import { InsuranceTabIndexType } from "@/enums/insurance-tab-index-type";
// import { useI18n } from "vue-i18n";

// const { t } = useI18n();
const InsuranceDateSettingLabel = "上下架日期設定";
const insuranceDateSettingRef = ref();
const insuranceMainAdditionalSettingRef = ref();
const InsuranceSettingInfoRef = ref();
const tabViewRefs = ref();
const route = useRoute();
const router = useRouter();
const toast = useToast();

const activeIndexStore = useActiveIndexStore();
const productDropdownStore = useProductDropdownStore();

const action = ref("");
const activeIndex = ref(InsuranceTabIndexType.INSURANCE_SETTING); // 0 商品基本訊息; 4 主約對應附約; 11 上下架日期設定
activeIndex.value = activeIndexStore.activeIndex;

const isShowSaveBtn = ref(true);

const isChangeTags = ref(true);

const isTagsDisabled = ref(false);

const productEdit = ref({});
const changeTags = ref({});
let insuranceCloseDateEdit: EditInsuranceCloseDateReq = {
  insuranceYearId: "",
  channelIdList: [],
};

const emitIsChangeTags = (data: boolean) => {
  isChangeTags.value = data;
};

let channelAndPremYearIsRead = false;
/**
 * 帶資料
 */
const acceptData = (e: ProxyConstructor) => {
  if (e) {
    productEdit.value = e;
    isShowWaring.value = true;
    if (isChangeTags.value) {
      changeTags.value = JSON.parse(JSON.stringify(productEdit.value));
    }
    // 有險種資料後才call這三個API
    action.value === "UPDATE" &&
      !channelAndPremYearIsRead &&
      productDropdownStore.dropdownGetInsurancePremYearList(
        "IN",
        "",
        productEdit.value["insuranceId"]
      );
    action.value === "UPDATE" &&
      !channelAndPremYearIsRead &&
      productDropdownStore.doGetSaleChannelList("ALL");
    action.value === "UPDATE" &&
      !channelAndPremYearIsRead &&
      productDropdownStore.doQueryProdBasicData(
        productEdit.value["insuranceId"]
      );
    channelAndPremYearIsRead = true;
  }
};

// 暫時用不到
const acceptDateSettingData = (data: EditInsuranceCloseDateReq) => {
  if (data) {
    data.channelIdList.forEach((item) => {
      item.isPolicyOff = item.isPolicyOff ? "Y" : "N";
    });
    insuranceCloseDateEdit = data;
    isShowWaring.value = true;
  }
  console.log("-----6ytyr------", insuranceCloseDateEdit);
};

/**
 * 取消
 */
const cancelData = async () => {
  isWarningModal.value = false;
  activeIndex.value = InsuranceTabIndexType.INSURANCE_SETTING;
  if (
    activeIndex.value === InsuranceTabIndexType.INSURANCE_SETTING &&
    !isShowSaveBtn.value
  ) {
    isShowSaveBtn.value = true;
  }

  if (
    insuranceDateSettingRef.value &&
    panelLabel.value === InsuranceDateSettingLabel
  ) {
    console.log(
      "insuranceDateSettingRef-",
      insuranceDateSettingRef?.value.getInsuranceCloseData()
    );

    // insuranceDateSettingRef.value.clearClick();
  }
};

// 檢查 商品基本訊息 是否異動
const checkInsuranceData = async () => {
  const InsuranceData = productEdit.value as SaveProductDataReq;
  InsuranceData.action = "CHECK";
  saveProdData(InsuranceData).then((response) => {
    if (response?.status === 200 && response.data) {
      const { returnCode, returnDesc } = response.data.header;
      if (returnCode === MsgCodeType.TRANSACTION_STORAGE) {
        isWarningModal.value = true;
        msg.value = returnDesc;
      } else if (returnCode !== "0000") {
        toast.add({
          severity: "error",
          summary: "錯誤",
          detail: returnDesc,
          life: 3000,
        });
      }
    }
  });
};

/**
 * 儲存
 * @param isCheckInsuranceData 是否是檢核資料後儲存
 */
const saveData = async (isCheckInsuranceData = false) => {
  const req = { ...productEdit.value };
  const InsuranceData = productEdit.value as SaveProductDataReq;
  InsuranceData.action = action.value;
  if (
    activeIndex.value === InsuranceTabIndexType.INSURANCE_SETTING ||
    isCheckInsuranceData
  ) {
    // 浮窗開啟，在執行儲存時關閉
    if (isWarningModal.value) {
      isWarningModal.value = false;
    }
    const isValidate = InsuranceSettingInfoRef?.value.addDataSend();
    if (isValidate) {
      /**
       * F2502B004：編輯商品基本資訊
       */
      saveProdData(InsuranceData).then((response) => {
        if (response?.status === 200 && response.data) {
          const { returnCode, returnDesc } = response.data.header;
          if (returnCode === "0000") {
            toast.add({
              severity: "success",
              summary: "更新成功",
              detail: returnDesc,
              life: 3000,
            });
            localStorage.setItem("InsuranceMain", JSON.stringify(req));
            isChangeTags.value = true;
            if (isChangeTags.value) {
              changeTags.value = JSON.parse(JSON.stringify(productEdit.value));
            }

            // 新增完取回新增後的資料(若不重取，當action=check時做資料庫比對異動會有錯誤，因此在重取回資料)
            if (isTagsDisabled.value && action.value === "INSERT") {
              isTagsDisabled.value = false;
              InsuranceSettingInfoRef?.value.insertGetDate(
                InsuranceData.insuranceId
              );
            }

            // 解決上下架日期頁籤在check浮窗更新資料後activeIndex位置不對問題
            if (panelLabel.value === InsuranceDateSettingLabel) {
              activeIndex.value = tabViewRefs.value.tabs.length - 1;
            }

            action.value = "UPDATE";
            router.push({
              name: "insuranceSetting-edit",
              params: { insuranceId: productEdit.value["insuranceId"] },
            });
            productDropdownStore.doQueryProdBasicData(
              productEdit.value["insuranceId"]
            );
            productDropdownStore.dropdownGetInsurancePremYearList(
              "IN",
              "",
              productEdit.value["insuranceId"]
            );
          } else {
            toast.add({
              severity: "error",
              summary: "錯誤",
              detail: returnDesc,
              life: 3000,
            });
          }
          console.log(response.data);
        }
      });
    }
  } else if (panelLabel.value === InsuranceDateSettingLabel) {
    // 上下架日期設定
    insuranceDateSettingRef?.value.onSubmit();
  } else if (
    activeIndex.value === InsuranceTabIndexType.INSURANCE_MAIN_ADDITIONAL
  ) {
    // 主約對應附約 - 儲存按鈕
    insuranceMainAdditionalSettingRef?.value.saveData(action.value);
  }
};

const isWarningModal = ref(false);
const msg = ref("");
const isShowWaring = ref(false);
const panelLabel = ref("");
const showWarning = (e: {
  index: number;
  originalEvent: { target: { innerText: string } };
}) => {
  // 拿當下頁籤的text (title)
  panelLabel.value = e.originalEvent.target.innerText;

  // 儲存btn是否顯示
  isShowSaveBtn.value =
    e.index === InsuranceTabIndexType.INSURANCE_SETTING ||
    e.index === InsuranceTabIndexType.INSURANCE_MAIN_ADDITIONAL ||
    panelLabel.value === InsuranceDateSettingLabel
      ? true
      : false;

  activeIndex.value = e.index ?? InsuranceTabIndexType.INSURANCE_SETTING;
  // 商品基本訊息 頁外
  if (activeIndex.value > InsuranceTabIndexType.INSURANCE_SETTING) {
    checkInsuranceData();
  }
};

// Now you can access params like:
console.log("query--", route.name);
if (route.name === "insuranceSetting-add") {
  action.value = "INSERT";
  isTagsDisabled.value = true;
} else if (route.name === "insuranceSetting-edit") {
  action.value = "UPDATE";
  isTagsDisabled.value = false;
}
</script>
<style lang="scss" scoped>
.border-top-gray {
  border-top: 0.0625rem solid #e5e5e5;
}
</style>
                                                                                                                                                                                                                                                                                                                                                    src/views/pages/insurance/InsuranceSettingInfoView.vue                                              0100777 0000000 0000000 00000136413 14665752120 020523  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group align-items-baseline">
        <label class="t-label col-12 lg:col-3">投保險種代碼</label>
        <div class="col-12 lg:col-8 p-0">
          <PrimeInputText
            v-model="infoFormData.insuranceId"
            placeholder="請輸入投保險種代碼"
            type="text"
            @input="emitData2(infoFormData)"
            :disabled="insuranceId !== undefined"
            :class="{
              'p-invalid':
                !isValidate.insuranceIdRequired ||
                !isValidate.insuranceIdMax ||
                !isValidate.insuranceIdFormat,
            }"
          />
          <small v-if="!isValidate.insuranceIdRequired" class="p-error"
            >此欄位為必填</small
          >
          <small v-else-if="!isValidate.insuranceIdMax" class="p-error"
            >此欄位最大輸入8個字元</small
          >
          <small v-else-if="!isValidate.insuranceIdFormat" class="p-error"
            >此欄位只能輸入英數字</small
          >
        </div>
        <!-- 投保險種代碼為必填或格式錯誤(長度8，限輸入英數字) -->
      </div>

      <div class="col-12 mb-4 lg:col-6 t-form-group align-items-baseline">
        <label class="t-label col-12 lg:col-3">險種種類</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.mainRider"
          :options="mainRiderList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="
            mainRiderGearing(infoFormData.mainRider);
            emitData2(infoFormData);
            getInsuranceProdCategoryList();
          "
          :disabled="insuranceId !== undefined"
        />
      </div>
    </div>

    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group align-items-baseline">
        <label class="t-label col-12 lg:col-3">投保險種名稱</label>
        <div class="col-12 lg:col-8 p-0">
          <PrimeInputText
            v-model="infoFormData.fullName"
            placeholder="請輸入投保險種名稱"
            type="text"
            @input="emitData2(infoFormData)"
            :disabled="insuranceId !== undefined"
            :class="{
              'p-invalid':
                !isValidate.fullNameRequired || !isValidate.fullNameMax,
            }"
          />
          <small v-if="!isValidate.fullNameRequired" class="p-error"
            >此欄位為必填</small
          >
          <small v-else-if="!isValidate.fullNameMax" class="p-error"
            >此欄位最大輸入50個字元</small
          >
        </div>
      </div>
      <div class="col-12 mb-4 lg:col-6 t-form-group align-items-baseline">
        <label class="t-label col-12 lg:col-3">險種分類</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.productCategoryId"
          :options="insuranceProdCategoryList"
          optionLabel="insuranceProdCategoryName"
          optionValue="insuranceProdCategoryId"
          :filter="true"
          @change="emitData2(infoFormData)"
          :disabled="insuranceId !== undefined"
        />
      </div>
    </div>

    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group align-items-baseline">
        <label class="t-label col-12 lg:col-3">投保險種簡稱</label>
        <div class="col-12 lg:col-8 p-0">
          <PrimeInputText
            type="text"
            placeholder="請輸入投保險種簡稱"
            v-model="infoFormData.shortName"
            :class="{
              'p-invalid':
                !isValidate.shortNameRequired ||
                !isValidate.shortNameMax ||
                !isValidate.shortNameFormat,
            }"
            @input="emitData2(infoFormData)"
            :disabled="insuranceId !== undefined"
          />
          <small v-if="!isValidate.shortNameRequired" class="p-error"
            >此欄位為必填</small
          >
          <small v-else-if="!isValidate.shortNameMax" class="p-error"
            >此欄位最大輸入8個字元</small
          >
          <small v-else-if="!isValidate.shortNameFormat" class="p-error"
            >此欄位只能輸入英數字</small
          >
        </div>
      </div>
      <div class="col-12 mb-4 lg:col-6 t-form-group align-items-baseline">
        <label class="t-label col-12 lg:col-3">可否加附約</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.riderYN"
          :options="riderYNList"
          optionLabel="menuText"
          optionValue="menuValue"
          :disabled="infoFormData.mainRider === '2'"
          @change="emitData2(infoFormData)"
        />
      </div>
    </div>

    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-12 t-form-group align-items-baseline">
        <label class="t-label mr-2" style="width: 13.25%">商品銷售資格</label>
        <div class="w-full">
          <PrimeMultiSelect
            v-model="salesAllowNoSelect"
            :options="salesAllowNoList"
            optionLabel="menuText"
            optionValue="menuValue"
            placeholder="請選擇商品銷售資格"
            display="chip"
            :class="{
              'p-invalid': !isValidate.salesAllowNo,
            }"
            @change="
              toSalesAllowNoList();
              emitData2(infoFormData);
            "
          />
          <small v-if="!isValidate.salesAllowNo" class="p-error">
            此欄位為必填
          </small>
        </div>
      </div>
    </div>

    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">幣別</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.currency"
          :options="currencyList"
          optionLabel="menuText"
          optionValue="menuValue"
          placeholder="請選擇幣別"
          @change="emitData2(infoFormData)"
        />
      </div>
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">核保主分類</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.insuranceMainCategory"
          :options="insuranceMainCategoryList"
          optionLabel="menuText"
          optionValue="menuValue"
          placeholder="請選擇核保主分類"
          @change="
            emitIsChangeTags();
            emitData2(infoFormData);
          "
        >
          <!-- <template #option="slotProps">
            <div
              class="country-item"
              v-if="
                infoFormData.mainRider == '1' &&
                slotProps.option.menuValue == 'I'
              "
            >
              <div>{{ slotProps.option.menuText }}</div>
            </div>
          </template> -->
        </PrimeDropdown>
      </div>
    </div>

    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group" />
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">核保子分類</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.insuranceSubCategory"
          :options="optionInsuranceSubCategoryList"
          optionLabel="menuText"
          optionValue="menuValue"
          placeholder="請選擇核保子分類"
          @change="
            emitIsChangeTags();
            emitData2(infoFormData);
          "
        >
        </PrimeDropdown>
      </div>
    </div>

    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">保障期間</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.plTerm"
          :options="pLTermList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
        />
      </div>
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">利變型商品</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.isInterestRateChg"
          :options="yesOrNoMenuList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="
            emitIsChangeTags();
            emitData2(infoFormData);
          "
        />
      </div>
    </div>

    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">是否需審閱</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.isPolicyReview"
          :options="yesOrNoMenuList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
        />
      </div>
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">是否有喪葬給付註記</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.isFuneralBenefit"
          :options="yesOrNoMenuList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
        />
      </div>
    </div>

    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">是否需填寫高齡評估表</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.isEldRecord"
          :options="yesOrNoMenuList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
        />
      </div>
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">費率可能調整註記</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.isRateAdjust"
          :options="yesOrNoMenuList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
        />
      </div>
    </div>
    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">是否需填寫高齡錄音編號</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.isEldRecordNo"
          :options="yesOrNoMenuList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
        />
      </div>
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">是否需高齡關懷電訪</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.isEldRecordTel"
          :options="yesOrNoMenuList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
        />
      </div>
    </div>

    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">可承保性別</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.sex"
          :options="sexList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
        />
      </div>
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">是否為重大傷病給付</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.isDisplayHealth"
          :options="yesOrNoMenuList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
        />
      </div>
    </div>

    <!-- <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group lg:pl-0">
        <label class="t-label col-12 lg:col-3 lg:px-0 lg:mr-2"
          >是否需台新人壽投資型保險指定交易計價日批註條款</label
        >
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9 lg:-ml-1"
          v-model="infoFormData.transactionPricingForm"
          :options="yesOrNoMenuList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
        />
      </div>
      <div class="col-12 mb-4 lg:col-6 t-form-group lg:pl-0">
        <label class="t-label col-12 lg:col-3 lg:px-0 lg:mr-2"
          >是否需台新人壽投資型保險自動調整基本保額批註條款</label
        >
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9 lg:-ml-1"
          v-model="infoFormData.autoadjustInsuredForm"
          :options="yesOrNoMenuList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
        />
      </div>
    </div> -->

    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">是否適用定期險轉換</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.insuranceChgLA"
          :options="yesOrNoMenuList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
        />
      </div>
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3"
          >保經代通路是否適用保單置換</label
        >
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.insuranceChgBR"
          :options="yesOrNoMenuList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
        />
      </div>
    </div>

    <h5 class="p-title">受益人設控定義</h5>
    <div class="grid formgrid mb-5">
      <div class="col-12 lg:col-12">
        <PrimeDataTable
          :lazy="true"
          :showGridlines="true"
          :value="infoFormData.benefitControlList"
          class="p-datatable-customers"
          paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
          currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
          responsiveLayout="scroll"
        >
          <template #empty> 無資料 </template>
          <PrimeColumn field="benefitNoName" header="項目" style="width: 200px">
            <template #body="slotProps">
              <span> {{ slotProps.data.benefitNoName }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn
            field="stagingProportion"
            header="分期給付比例"
            style="min-width: 200px"
          >
            <template #body="slotProps">
              <PrimeDropdown
                v-if="
                  slotProps.data.benefitNo == 'D' ||
                  slotProps.data.benefitNo == 'H'
                "
                class="t-dropdown col-12 lg:col-9"
                v-model="slotProps.data.stagingProportion"
                :options="stagingProportionList"
                optionLabel="menuText"
                optionValue="menuValue"
                @change="emitData2(infoFormData)"
              />
            </template>
          </PrimeColumn>
          <PrimeColumn
            field="isRequired"
            header="是否必填"
            style="min-width: 200px"
          >
            <template #body="slotProps">
              <PrimeDropdown
                class="t-dropdown col-12 lg:col-9"
                v-model="slotProps.data.isRequired"
                :options="isRequiredList"
                optionLabel="menuText"
                optionValue="menuValue"
                @change="emitData2(infoFormData)"
                placeholder="可以不填"
              />
            </template>
          </PrimeColumn>
        </PrimeDataTable>
      </div>
    </div>

    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group align-items-baseline">
        <label class="t-label col-12 lg:col-3">核心單位</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.as400Unit"
          :options="aS400UnitList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="emitData2(infoFormData)"
          :disabled="
            infoFormData.eappUnit === '4' || infoFormData.eappUnit === '5'
          "
        />
      </div>

      <div class="col-12 mb-4 lg:col-6 t-form-group align-items-baseline">
        <label class="t-label col-12 lg:col-3">核心換算單位</label>
        <div class="col-12 lg:col-8 p-0">
          <input
            type="number"
            placeholder="請輸入核心換算單位"
            style="width: 100%"
            class="p-inputtext p-component p-filled t-inputText"
            v-model="infoFormData.as400ConverUnit"
            :class="{
              'p-invalid':
                !isValidate.as400ConverUnitRequired ||
                !isValidate.as400ConverUnitMax,
            }"
            @input="emitData2(infoFormData)"
            onkeyup="value=value.replace(/[^0-9]/g,'')"
          />
          <small v-if="!isValidate.as400ConverUnitRequired" class="p-error"
            >此欄位為必填</small
          >
          <small v-else-if="!isValidate.as400ConverUnitMax" class="p-error"
            >此欄位限輸入一位數字0-9</small
          >
        </div>
      </div>
    </div>

    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group align-items-baseline">
        <label class="t-label col-12 lg:col-3">Eapp單位</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          v-model="infoFormData.eappUnit"
          :options="eappUnitList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="
            emitData2(infoFormData);
            eappUnitGearing(infoFormData.eappUnit);
          "
        />
      </div>
      <div class="col-12 mb-4 lg:col-6 t-form-group align-items-baseline">
        <label class="t-label col-12 lg:col-3">Eapp換算單位</label>
        <div class="col-12 lg:col-8 p-0">
          <input
            type="number"
            placeholder="請輸入Eapp換算單位"
            style="width: 100%"
            class="p-inputtext p-component p-filled t-inputText"
            v-model="infoFormData.eappConverUnit"
            :class="{
              'p-invalid':
                !isValidate.eappConverUnitRequired ||
                !isValidate.eappConverUnitMax,
            }"
            @input="emitData2(infoFormData)"
            onkeyup="value=value.replace(/[^0-9]/g,'')"
          />
          <small v-if="!isValidate.eappConverUnitRequired" class="p-error"
            >此欄位為必填</small
          >
          <small v-else-if="!isValidate.eappConverUnitMax" class="p-error"
            >此欄位限輸入一位數字0-9</small
          >
        </div>
      </div>
    </div>

    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group align-items-baseline">
        <label class="t-label col-12 lg:col-3">小數位數</label>
        <div class="col-12 lg:col-9 p-0">
          <input
            type="number"
            placeholder="請輸入小數位數"
            style="width: 100%"
            class="p-inputtext p-component p-filled t-inputText"
            v-model="infoFormData.digits"
            :class="{
              'p-invalid': !isValidate.digitsRequired || !isValidate.digitsMax,
            }"
            @input="emitData2(infoFormData)"
            onkeyup="value=value.replace(/[^0-9]/g,'')"
          />
          <small v-if="!isValidate.digitsRequired" class="p-error"
            >此欄位為必填</small
          >
          <small v-else-if="!isValidate.digitsMax" class="p-error"
            >此欄位限輸入一位數字0-9</small
          >
        </div>
      </div>
      <div class="col-12 mb-4 lg:col-6 t-form-group align-items-baseline">
        <label class="t-label col-12 lg:col-3">第一期保險單位欄位</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-8"
          placeholder="請選擇第一期保險單位欄位"
          v-model="infoFormData.eappUnit1"
          :options="eappUnitList"
          optionLabel="menuText"
          optionValue="menuValue"
          @change="
            emitData2(infoFormData);
            eappUnitGearing(infoFormData.eappUnit1);
          "
        />
      </div>
    </div>
    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">是否適用FATCA</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-9"
          :options="isFATCAOptionList"
          optionLabel="menuText"
          optionValue="menuValue"
          v-model="infoFormData.isFATCA"
          @change="emitData2(infoFormData)"
        />
      </div>
      <div class="col-12 mb-4 lg:col-6 t-form-group">
        <label class="t-label col-12 lg:col-3">職業所屬限額類別</label>
        <PrimeDropdown
          class="t-dropdown col-12 lg:col-8"
          placeholder="請選擇職業所屬限額類別"
          :options="ClassSpecTypeList"
          optionLabel="menuText"
          optionValue="menuValue"
          v-model="infoFormData.classSpecType"
          @change="emitData2(infoFormData)"
        />
      </div>
    </div>
    <div class="grid formgrid">
      <div class="col-12 mb-4 lg:col-6 t-form-group align-items-baseline">
        <label class="t-label col-12 lg:col-3"
          >最小變動單位數<span class="text-xs ml-2">0(不限制)</span></label
        >
        <div class="col-12 lg:col-9 p-0">
          <input
            type="number"
            placeholder="請輸入最小變動單位數"
            style="width: 100%"
            class="p-inputtext p-component p-filled t-inputText"
            v-model="infoFormData.minChgUnitNum"
            :class="{
              'p-invalid':
                !isValidate.minChgUnitNumRequired ||
                !isValidate.minChgUnitNumInteger ||
                !isValidate.minChgUnitNumMax,
            }"
            @input="emitData2(infoFormData)"
            onkeyup="value=value.replace(/[^0-9]/g,'')"
          />
          <small v-if="!isValidate.minChgUnitNumRequired" class="p-error"
            >此欄位為必填</small
          >
          <small v-if="!isValidate.minChgUnitNumInteger" class="p-error"
            >此欄位必為正整數</small
          >
          <small v-else-if="!isValidate.minChgUnitNumMax" class="p-error"
            >此欄位限輸入數字0-999</small
          >
        </div>
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { computed, reactive, ref, watch } from "vue";
import { useRoute } from "vue-router";
import type { BenefitControlModel } from "@/models/benefit-control-model";
import type { SalesAllowNoModel } from "@/models/sales-allow-no-model";
import type { SystemMenuModel } from "@/models/system-menu-model";
import type { SaveProductDataReq } from "@/api/models/req/save-product-data-req";

import {
  getInsuranceProductCategoryList,
  getSystemParamList,
  queryProdBasicData,
} from "@/api/product-service";
import { NUMBER_AND_ENGLISH_ONLY_REGEX } from "@/constants";
import { SysCodeType } from "@/enums/sys-code-type";
import type { InsuranceProductionCategoryModel } from "@/models/insurance-production-category-model";

const route = useRoute();

/*
 ** 從查詢頁傳來 insuranceId
 */
let insuranceId = route.params.insuranceId as string;

const prop = defineProps({
  action: {
    type: String,
    default: "",
  },
});

const emit = defineEmits(["emitData", "emitIsChangeTags"]);
const infoFormData = ref({
  action: prop.action,
  productCategoryId: "",
  insuranceProdCategoryName: "",
  insuranceId: "",
  fullName: "",
  shortName: "",
  mainRider: "",
  benefitControlList: [] as BenefitControlModel[],
  riderYN: "",
  salesAllowNoList: [] as SalesAllowNoModel[],
  insuranceMainCategory: "",
  insuranceSubCategory: "",
  currency: "",
  plTerm: "",
  isPolicyReview: "",
  isFuneralBenefit: "",
  isEldRecord: "",
  isEldRecordNo: "",
  isEldRecordTel: "",
  isRateAdjust: "",
  isInterestRateChg: "",
  sex: "",
  isDisplayHealth: "",
  // transactionPricingForm: "",
  // autoadjustInsuredForm: "",
  insuranceChgLA: "",
  insuranceChgBR: "",
  as400Unit: "1",
  as400ConverUnit: 1,
  eappUnit: "1",
  eappConverUnit: 1,
  digits: 2,
  eappUnit1: "",
  isFATCA: "Y",
  classSpecType: "",
  minChgUnitNum: 0,
});

//驗證控制
const isValidate = ref({
  //insuranceId: true,
  insuranceIdRequired: true,
  insuranceIdMax: true,
  insuranceIdFormat: true,
  mainRider: true,
  //fullName: true,
  fullNameRequired: true,
  fullNameMax: true,
  productCategoryId: true,
  //shortName: true,
  shortNameRequired: true,
  shortNameMax: true,
  shortNameFormat: true,
  salesAllowNo: true,
  currency: true,
  // insuranceMainCategory: true,
  //as400ConverUnit: true,
  as400ConverUnitRequired: true,
  as400ConverUnitMax: true,
  //eappConverUnit: true,
  eappConverUnitRequired: true,
  eappConverUnitMax: true,
  //digits: true,
  digitsRequired: true,
  digitsMax: true,
  minChgUnitNumRequired: true,
  minChgUnitNumInteger: true,
  minChgUnitNumMax: true,
});

const addDataSend = () => {
  const regex = new RegExp(NUMBER_AND_ENGLISH_ONLY_REGEX);
  /*投保險種代碼 */
  //必填
  if (infoFormData.value.insuranceId.toString().length === 0) {
    isValidate.value.insuranceIdRequired = false;
  } else {
    isValidate.value.insuranceIdRequired = true;
  }
  //長度8
  if (infoFormData.value.insuranceId.toString().length > 8) {
    isValidate.value.insuranceIdMax = false;
  } else {
    isValidate.value.insuranceIdMax = true;
  }
  //限輸入英數字
  if (!regex.test(infoFormData.value.insuranceId.toString())) {
    isValidate.value.insuranceIdFormat = false;
  } else {
    isValidate.value.insuranceIdFormat = true;
  }

  if (
    infoFormData.value?.mainRider.toString().length === 0 ||
    infoFormData.value?.mainRider.toString().length > 50
  ) {
    isValidate.value.mainRider = false;
  } else {
    isValidate.value.mainRider = true;
  }

  /*投保險種名稱*/
  //必填
  if (infoFormData.value.fullName.toString().length === 0) {
    isValidate.value.fullNameRequired = false;
  } else {
    isValidate.value.fullNameRequired = true;
  }
  //長度50
  if (infoFormData.value.fullName.toString().length > 50) {
    isValidate.value.fullNameMax = false;
  } else {
    isValidate.value.fullNameMax = true;
  }

  if (infoFormData.value.productCategoryId.toString().length === 0) {
    isValidate.value.productCategoryId = false;
  } else {
    isValidate.value.productCategoryId = true;
  }

  /*投保險種代碼 */
  //必填
  if (infoFormData.value.shortName.toString().length === 0) {
    isValidate.value.shortNameRequired = false;
  } else {
    isValidate.value.shortNameRequired = true;
  }
  //長度8
  if (infoFormData.value.shortName.toString().length > 8) {
    isValidate.value.shortNameMax = false;
  } else {
    isValidate.value.shortNameMax = true;
  }
  //限輸入英數字
  if (!regex.test(infoFormData.value.shortName.toString())) {
    isValidate.value.shortNameFormat = false;
  } else {
    isValidate.value.shortNameFormat = true;
  }

  if (infoFormData.value.salesAllowNoList.length === 0) {
    isValidate.value.salesAllowNo = false;
  } else {
    isValidate.value.salesAllowNo = true;
  }

  if (infoFormData.value.currency.toString().length === 0) {
    isValidate.value.currency = false;
  } else {
    isValidate.value.currency = true;
  }

  // if (!infoFormData.value.insuranceMainCategory) {
  //   isValidate.value.insuranceMainCategory = false;
  // } else {
  //   isValidate.value.insuranceMainCategory = true;
  // }

  /*核心換算單位 */
  //必填
  if (
    !infoFormData.value.as400ConverUnit &&
    infoFormData.value.as400ConverUnit !== 0
  ) {
    isValidate.value.as400ConverUnitRequired = false;
  } else {
    isValidate.value.as400ConverUnitRequired = true;
  }
  //限輸入一位數字0-9
  if (
    (!infoFormData.value.as400ConverUnit &&
      infoFormData.value.as400ConverUnit !== 0) ||
    infoFormData.value.as400ConverUnit < 0 ||
    infoFormData.value.as400ConverUnit > 9
  ) {
    isValidate.value.as400ConverUnitMax = false;
  } else {
    isValidate.value.as400ConverUnitMax = true;
  }

  /*Eapp換算單位 */
  //必填
  if (
    !infoFormData.value.eappConverUnit &&
    infoFormData.value.eappConverUnit !== 0
  ) {
    isValidate.value.eappConverUnitRequired = false;
  } else {
    isValidate.value.eappConverUnitRequired = true;
  }
  //限輸入一位數字0-9
  if (
    (!infoFormData.value.eappConverUnit &&
      infoFormData.value.eappConverUnit !== 0) ||
    infoFormData.value.eappConverUnit < 0 ||
    infoFormData.value.eappConverUnit > 9
  ) {
    isValidate.value.eappConverUnitMax = false;
  } else {
    isValidate.value.eappConverUnitMax = true;
  }

  /*小數位數 */
  //必填
  if (!infoFormData.value.digits && infoFormData.value.digits !== 0) {
    isValidate.value.digitsRequired = false;
  } else {
    isValidate.value.digitsRequired = true;
  }
  //限輸入一位數字0-9
  if (
    (!infoFormData.value.digits && infoFormData.value.digits !== 0) ||
    infoFormData.value.digits < 0 ||
    infoFormData.value.digits > 9
  ) {
    isValidate.value.digitsMax = false;
  } else {
    isValidate.value.digitsMax = true;
  }

  /*最小變動單位數 */
  //必填
  if (
    !infoFormData.value.minChgUnitNum &&
    infoFormData.value.minChgUnitNum !== 0
  ) {
    isValidate.value.minChgUnitNumRequired = false;
  } else {
    isValidate.value.minChgUnitNumRequired = true;
  }
  //限正整數
  if (
    infoFormData.value.minChgUnitNum &&
    !/^\d+$/.test(infoFormData.value.minChgUnitNum.toString())
  ) {
    isValidate.value.minChgUnitNumInteger = false;
  } else {
    isValidate.value.minChgUnitNumInteger = true;
  }
  if (
    infoFormData.value.minChgUnitNum < 0 ||
    infoFormData.value.minChgUnitNum > 999
  ) {
    //限輸入數字0-999
    isValidate.value.minChgUnitNumMax = false;
  } else {
    isValidate.value.minChgUnitNumMax = true;
  }

  //如果都不是空值才可以送出表單
  if (
    //isValidate.value.insuranceId &&
    isValidate.value.insuranceIdRequired &&
    isValidate.value.insuranceIdMax &&
    isValidate.value.insuranceIdFormat &&
    isValidate.value.mainRider &&
    //isValidate.value.fullName &&
    isValidate.value.fullNameRequired &&
    isValidate.value.fullNameMax &&
    isValidate.value.productCategoryId &&
    //isValidate.value.shortName
    isValidate.value.shortNameRequired &&
    isValidate.value.shortNameMax &&
    isValidate.value.shortNameFormat &&
    //isValidate.value.as400ConverUnit &&
    isValidate.value.as400ConverUnitRequired &&
    isValidate.value.as400ConverUnitMax &&
    //isValidate.value.eappConverUnit &&
    isValidate.value.eappConverUnitRequired &&
    isValidate.value.eappConverUnitMax &&
    //isValidate.value.digits
    isValidate.value.digitsRequired &&
    isValidate.value.digitsMax &&
    //isValidate.value.minChgUnitNum
    isValidate.value.minChgUnitNumRequired &&
    isValidate.value.minChgUnitNumInteger &&
    isValidate.value.minChgUnitNumMax
  ) {
    return true;
  }
  return false;
};

const emitData2 = (data: SaveProductDataReq) => {
  addDataSend();
  data.insuranceProdCategoryName =
    getInsuranceProdCategory()?.insuranceProdCategoryName ?? "";
  emit("emitData", data);
};

const insuranceProdCategoryList = ref<Array<InsuranceProductionCategoryModel>>(
  []
);

const emitIsChangeTags = () => {
  emit("emitIsChangeTags", false);
};

/**
 * F0000B016：查詢險種分類檔列表 API
 */
const getInsuranceProdCategoryList = async () => {
  const mainRider = infoFormData.value.mainRider || "1";
  getInsuranceProductCategoryList({
    mainRiderCategory: mainRider,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      insuranceProdCategoryList.value =
        response.data.body?.insuranceProdCategoryList;
    }
    // 新建資料預設帶第一筆資料
    if (infoFormData.value.action === "INSERT")
      infoFormData.value.productCategoryId =
        insuranceProdCategoryList.value[0].insuranceProdCategoryId;
  });
};

watch(
  () => infoFormData.value.mainRider,
  () => {
    getInsuranceProdCategoryList();
  }
);

const getInsuranceProdCategory = () => {
  return (
    insuranceProdCategoryList.value.find(
      (item) =>
        item.insuranceProdCategoryId === infoFormData.value.productCategoryId
    ) ?? null
  );
};

const mainRiderList = ref<Array<SystemMenuModel>>([]);
/**
 * F0000B003：查詢系統下拉參數檔列表(險種種類) API
 */
const getMainRiderList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R37,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      mainRiderList.value = response.data.body?.sysCodeList[0]?.sysMenuList;
      // 新建資料預設帶第一筆資料
      if (!insuranceId)
        infoFormData.value.mainRider =
          response.data.body?.sysCodeList[0]?.sysMenuList[0]?.menuValue;
    }
  });
};
getMainRiderList();

const riderYNList = ref<Array<SystemMenuModel>>([]);
/**
 * F0000B003：查詢系統下拉參數檔列表(可否加附約) API
 */
const getRiderYNList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R42,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      riderYNList.value = response.data.body?.sysCodeList[0]?.sysMenuList;
      // 新建資料預設帶第一筆資料
      if (!insuranceId)
        infoFormData.value.riderYN =
          response.data.body?.sysCodeList[0]?.sysMenuList[0]?.menuValue;
    }
  });
};
getRiderYNList();

const salesAllowNoList = ref<Array<SystemMenuModel>>([]);
/**
 * F0000B003：查詢系統下拉參數檔列表(商品銷售資格) API
 */
const getSalesAllowNoList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R22,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      salesAllowNoList.value = response.data.body?.sysCodeList[0]?.sysMenuList;
    }
  });
};
getSalesAllowNoList();

const currencyList = ref<Array<SystemMenuModel>>([]);
/**
 * F0000B003：查詢系統下拉參數檔列表(幣別) API
 */
const getCurrencyList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R33,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      currencyList.value =
        response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      // 新建資料預設帶第一筆
      if (!insuranceId)
        infoFormData.value.currency = currencyList.value[0]?.menuValue;
    }
  });
};
getCurrencyList();

const yesOrNoMenuList = ref<Array<SystemMenuModel>>([]);
/**
 * F0000B003：查詢系統下拉參數檔列表(是否為利變型/是否需審閱/是否為重大傷病給付/是否有喪葬給付註記/是否需高齡錄音/費率可能調整註記) API
 */
const getInterestRateChgList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R251,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      yesOrNoMenuList.value = response.data.body?.sysCodeList[0]?.sysMenuList;
      // 新建資料預設帶"否"
      if (infoFormData.value.action === "INSERT") {
        const defaultValue = yesOrNoMenuList.value[1].menuValue;
        infoFormData.value.isInterestRateChg = defaultValue;
        infoFormData.value.isPolicyReview = defaultValue;
        infoFormData.value.isDisplayHealth = defaultValue;
        infoFormData.value.isFuneralBenefit = defaultValue;
        infoFormData.value.isEldRecord = defaultValue;
        infoFormData.value.isEldRecordNo = defaultValue;
        infoFormData.value.isEldRecordTel = defaultValue;
        infoFormData.value.isRateAdjust = defaultValue;
        // infoFormData.value.transactionPricingForm = defaultValue;
        // infoFormData.value.autoadjustInsuredForm = defaultValue;
        infoFormData.value.insuranceChgLA = defaultValue;
        infoFormData.value.insuranceChgBR = defaultValue;
      }
    }
  });
};
getInterestRateChgList();

const insuranceMainCategoryList = ref<Array<SystemMenuModel>>([]);
/**
 * F0000B003：查詢系統下拉參數檔列表(核保主分類) API
 */
const getInsuranceMainCategoryList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.InsuranceMainCategory,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      insuranceMainCategoryList.value =
        response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      // 新建資料預設帶第一筆
      if (!insuranceId)
        infoFormData.value.insuranceMainCategory =
          insuranceMainCategoryList.value[0]?.menuValue;
    }
  });
};
getInsuranceMainCategoryList();

const insuranceSubCategoryList = ref<Array<SystemMenuModel>>([]);
/**
 * F0000B003：查詢系統下拉參數檔列表(核保子分類) API
 */
const getInsuranceSubCategoryList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.InsuranceSubCategory,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      insuranceSubCategoryList.value =
        response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      // 新建資料預設帶第一筆
      if (!insuranceId)
        infoFormData.value.insuranceSubCategory =
          insuranceSubCategoryList.value[0]?.menuValue;
    }
  });
};
getInsuranceSubCategoryList();

/**
 * 核保子分類下拉選單 computed
 * 險種種類=主約(1)，才有核保子分類=投資型(L2&Y2)
 * 險種種類=附約(2)，才有核保子分類=豁免型(L7&L8&H8&H9)
 */
const optionInsuranceSubCategoryList = computed(() => {
  if (insuranceSubCategoryList.value && infoFormData.value.mainRider === "1") {
    return insuranceSubCategoryList.value.filter(
      (item) =>
        item.menuValue !== "L7" &&
        item.menuValue !== "L8" &&
        item.menuValue !== "H8" &&
        item.menuValue !== "H9" &&
        item.menuValue[0] == infoFormData.value.insuranceMainCategory
    );
  } else {
    return insuranceSubCategoryList.value.filter(
      (item) =>
        item.menuValue !== "L2" &&
        item.menuValue !== "Y2" &&
        item.menuValue[0] == infoFormData.value.insuranceMainCategory
    );
  }
});

const pLTermList = ref<Array<SystemMenuModel>>([]);
/**
 * F0000B003：查詢系統下拉參數檔列表(保障期間) API
 */
const getPLTermList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R41,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      pLTermList.value = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      // 新建資料預設帶第一筆
      if (!insuranceId)
        infoFormData.value.plTerm = pLTermList.value[0]?.menuValue;
    }
  });
};
getPLTermList();

/**
 * F0000B003：查詢系統下拉參數檔列表(可承保性別) API
 */
const sexList = ref<Array<SystemMenuModel>>([]);
const getSexList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R45,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      sexList.value = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      // 新建資料預設帶第一筆
      if (!insuranceId) infoFormData.value.sex = sexList.value[0]?.menuValue;
    }
  });
};
getSexList();

/**
 * F0000B003：查詢系統下拉參數檔列表(受益人設控定義) API
 */
const getBenefitNoList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R21,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      for (const s in response.data.body?.sysCodeList[0]?.sysMenuList) {
        const data = response.data.body?.sysCodeList[0]?.sysMenuList[s];
        const benefitControl: BenefitControlModel = {
          benefitNo: data.menuValue,
          benefitNoName: data.menuText,
          // 受益人設控定義 之 身故受益人(一般)(D)、完全失能受益人項目(H)，需填寫分期給付比例欄位(stagingProportion)
          // 預設帶第一筆資料
          stagingProportion: "1",
          isRequired: "",
        };
        // 非受益人設控定義 之 身故受益人(一般)(D)、完全失能受益人項目(H)，不需填寫分期給付比例欄位(stagingProportion)
        if (
          benefitControl.benefitNo !== "D" &&
          benefitControl.benefitNo !== "H"
        ) {
          benefitControl.stagingProportion = "";
        }
        infoFormData.value.benefitControlList.push(benefitControl);
      }
    }
  });
};
getBenefitNoList();

/**
 * F0000B003：查詢系統下拉參數檔列表(分期給付比例) API
 */
const stagingProportionList = reactive([]);
const getStagingProportionList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R255,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      Object.assign(
        stagingProportionList,
        response.data.body?.sysCodeList[0]?.sysMenuList
      );
    }
  });
};
getStagingProportionList();

/**
 * F0000B003：查詢系統下拉參數檔列表(是否必填) API
 */
const isRequiredList = reactive([]);
const getIsRequiredList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R24,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      Object.assign(
        isRequiredList,
        response.data.body?.sysCodeList[0]?.sysMenuList
      );
    }
  });
};
getIsRequiredList();

/**
 * F0000B003：查詢系統下拉參數檔列表(核心單位) API
 */
const aS400UnitList = ref<Array<SystemMenuModel>>([]);

const getAS400UnitList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R104,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      aS400UnitList.value = response.data.body?.sysCodeList[0]?.sysMenuList;
    }
  });
};
getAS400UnitList();

/**
 * F0000B003：查詢系統下拉參數檔列表(Eapp單位) API
 */
const eappUnitList = ref<Array<SystemMenuModel>>([]);

const getEappUnitList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R105,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      eappUnitList.value = response.data.body?.sysCodeList[0]?.sysMenuList;
    }
  });
};
getEappUnitList();

const isFATCAOptionList = ref([
  {
    menuText: "適用",
    menuValue: "Y",
  },
  {
    menuText: "不適用",
    menuValue: "N",
  },
]);

/**
 * F0000B003：查詢系統下拉參數檔列表(職業所屬限額類別) API
 */
const ClassSpecTypeList = ref<Array<SystemMenuModel>>([]);

const getClassSpecTypeList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.ClassSpecType,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      ClassSpecTypeList.value = response.data.body?.sysCodeList[0]?.sysMenuList;
      // 新建資料預設帶第一筆資料
      if (!insuranceId)
        infoFormData.value.classSpecType =
          response.data.body?.sysCodeList[0]?.sysMenuList[0]?.menuValue;
    }
  });
};
getClassSpecTypeList();

const salesAllowNoSelect = ref<Array<string>>([]);

const getData = async () => {
  // 從新增頁進來，無 insuranceId，不需要打API
  if (!insuranceId) return;
  /**
   * F2502B003：查詢商品基本資訊 API
   */
  queryProdBasicData({
    insuranceId: insuranceId,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      const temp = response.data.body ?? infoFormData;

      const finalSalesAllowNoList: string[] = [];
      temp.salesAllowNoList &&
        temp.salesAllowNoList.forEach((element) => {
          finalSalesAllowNoList.push(element.salesAllowNo);
        });

      let finalBenefitList: BenefitControlModel[] = [];
      infoFormData.value?.benefitControlList &&
        infoFormData.value?.benefitControlList.forEach((element) => {
          const result = temp.benefitControlList.filter(
            (item) => item.benefitNo === element.benefitNo
          );
          if (result.length > 0) {
            result[0] = { ...result[0], benefitNoName: element.benefitNoName };
            finalBenefitList = [...finalBenefitList, ...result];
          } else {
            finalBenefitList = [...finalBenefitList, element];
          }
        });

      temp.benefitControlList = finalBenefitList;
      infoFormData.value = { ...infoFormData.value, ...temp };
      // if (temp.plCodeSub === null) {
      //   infoFormData.value = {
      //     ...infoFormData.value,
      //     ...temp,
      //     plCodeSub: plCodeSubList.value[0].menuValue,
      //   };
      // } else {
      //   infoFormData.value = { ...infoFormData.value, ...temp };
      // }
      salesAllowNoSelect.value = finalSalesAllowNoList;
      mainRiderGearing(infoFormData.value.mainRider);
      emitData2(infoFormData.value);
    }
  });
};
getData();

/**
 * 險種種類=副約，可否加附約為空
 */
const mainRiderGearing = (mainRider: string) => {
  const isMainRider = mainRider == "1";
  if (!isMainRider) {
    infoFormData.value.riderYN = " "; //因後端空值時，會強制給一個空白，導致資料檢核錯，所以在此也補一個空白(勿刪)
  }
};

/**
 * 若「Eapp單位」(eappunit)為單位(4)或計畫(5)，則「核心單位」(as400Unit)欄位值同步調整為單位(3)或計畫(4)，且設定為不可修改 (disable)
 */
const eappUnitGearing = (eappunit: string) => {
  if (eappunit === "4") {
    infoFormData.value.as400Unit = "3";
  } else if (eappunit === "5") {
    infoFormData.value.as400Unit = "4";
  }
};

const toSalesAllowNoList = () => {
  const salesAllowNoList: SalesAllowNoModel[] = [];
  salesAllowNoSelect.value.forEach((element) => {
    salesAllowNoList.push({ salesAllowNo: element });
  });
  infoFormData.value.salesAllowNoList = salesAllowNoList;
};

const insertGetDate = (val: string) => {
  insuranceId = val;
  getData();
};

defineExpose({ addDataSend, insertGetDate });
</script>
<style lang="scss" scoped>
.border-top-gray {
  border-top: 1px solid #e5e5e5;
}
</style>
                                                                                                                                                                                                                                                     src/views/pages/insurance/InsuranceSettingView.vue                                                  0100777 0000000 0000000 00000075034 14665752120 017710  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <PrimeToast />
  <div class="grid p-fluid">
    <div class="col-12">
      <div class="card">
        <Form :validation-schema="searchSchema" @submit="search()">
          <PrimePanel>
            <template #header>
              <div class="left-header">
                <span class="pi pi-search"></span>
                <span>商品主檔 查詢</span>
              </div>
            </template>
            <div class="grid formgrid">
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3">險種分類</label>
                <PrimeDropdown
                  class="t-dropdown col-12 lg:col-9"
                  v-model="formData.productCategoryId"
                  :options="insuranceProdCategoryListAddAll"
                  optionLabel="insuranceProdCategoryName"
                  optionValue="insuranceProdCategoryId"
                  :filter="true"
                  placeholder="全部"
                />
              </div>
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3">幣別</label>
                <PrimeDropdown
                  class="t-dropdown col-12 lg:col-9"
                  v-model="formData.currency"
                  :options="currencyList"
                  optionLabel="menuText"
                  optionValue="menuValue"
                  :filter="true"
                  placeholder="全部"
                />
              </div>
            </div>

            <div class="grid formgrid">
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <Field
                  name="name"
                  v-slot="{ field, errorMessage }"
                  v-model="formData.name"
                >
                  <label class="t-label col-12 lg:col-3">投保險種</label>
                  <div class="col-12 lg:col-9 p-0">
                    <PrimeInputText
                      v-bind="field"
                      class="t-inputText"
                      type="text"
                      placeholder="請輸入投保險種"
                    />
                    <small id="docNo" class="p-error">{{ errorMessage }}</small>
                  </div>
                </Field>
              </div>
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3">險種種類</label>
                <PrimeDropdown
                  class="t-dropdown col-12 lg:col-9"
                  v-model="formData.mainRider"
                  :options="mainRiderList"
                  optionLabel="menuText"
                  optionValue="menuValue"
                  :filter="true"
                  placeholder="全部"
                />
              </div>
            </div>
          </PrimePanel>
          <div class="btn-container text-center mb-4">
            <PrimeButton
              :label="COMMON_WORD.CLEAR"
              class="p-button-outlined w-auto mr-2 my-2 p-button-sm"
              icon="pi pi-sync"
              @click="clear()"
            />
            <PrimeButton
              :label="COMMON_WORD.QUERY"
              icon="pi pi-search"
              class="w-auto mr-2 my-2 p-button-sm p-button-info"
              type="submit"
            />
          </div>
          <div class="btn-containermb-4">
            <router-link :to="{ name: 'insuranceSetting-add' }">
              <PrimeButton
                :label="COMMON_WORD.ADD"
                class="w-auto mr-2 my-2 p-button-sm p-button-info"
                icon="pi pi-plus"
              />
            </router-link>
          </div>
        </Form>
        <PrimeDataTable
          :lazy="true"
          :showGridlines="true"
          :value="insuranceMainList"
          :paginator="true"
          class="p-datatable-customers"
          :rows="formData.pageDataCount"
          :totalRecords="dataCount"
          dataKey="id"
          :sortOrder="formData.sort"
          paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
          :rowsPerPageOptions="[10, 50, 100]"
          currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
          responsiveLayout="scroll"
          @page="onTablePageChange($event)"
        >
          <template #header>
            <div class="">
              <i class="pi pi-table" />
              <span class="mx-2">商品主檔維護 查詢結果</span>
            </div>
          </template>
          <template #empty> {{ COMMON_WORD.EMPTY }} </template>
          <template #loading> {{ COMMON_WORD.LOADING }} </template>
          <PrimeColumn header="動作" style="width: 260px">
            <template #body="{ data }">
              <div class="text-center flex">
                <PrimeButton
                  :label="COMMON_WORD.EDIT"
                  icon="pi pi-pencil"
                  class="p-button-outlined mr-2 p-button-sm"
                  @click="goToEdit(data)"
                >
                </PrimeButton>
                <PrimeButton
                  :label="COMMON_WORD.DELETE"
                  icon="pi pi-trash"
                  class="mr-2 p-button-sm"
                  @click="confirmDelete(data)"
                />
                <PrimeButton
                  label="複製"
                  icon="pi pi-pencil"
                  class="mr-2 p-button-sm"
                  @click="copyQueryInsurance(data.insuranceId)"
                />
              </div>
            </template>
          </PrimeColumn>
          <PrimeColumn field="fieldNames" header="險種分類">
            <template #body="slotProps">
              <span
                :class="
                  'customer-badge InPrCaName-' +
                  slotProps.data.insuranceProdCategoryName
                "
                >{{ slotProps.data.insuranceProdCategoryName }}</span
              >
            </template>
          </PrimeColumn>
          <PrimeColumn field="fieldNames" header="幣別">
            <template #body="slotProps">
              <span
                :class="'customer-badge CuName-' + slotProps.data.currencyName"
                >{{ slotProps.data.currencyName }}</span
              >
            </template>
          </PrimeColumn>
          <PrimeColumn field="fieldNames" header="投保險種代碼">
            <template #body="slotProps">
              <span
                :class="
                  'customer-badge insuranceId-' + slotProps.data.insuranceId
                "
                >{{ slotProps.data.insuranceId }}</span
              >
            </template>
          </PrimeColumn>
          <PrimeColumn field="fieldNames" header="投保險種簡稱">
            <template #body="slotProps">
              <span
                :class="'customer-badge shortName-' + slotProps.data.shortName"
                >{{ slotProps.data.shortName }}</span
              >
            </template>
          </PrimeColumn>
          <PrimeColumn field="fieldNames" header="投保險種名稱">
            <template #body="slotProps">
              <span
                :class="'customer-badge fullName-' + slotProps.data.fullName"
                >{{ slotProps.data.fullName }}</span
              >
            </template>
          </PrimeColumn>
          <PrimeColumn field="fieldNames" header="險種種類">
            <template #body="slotProps">
              <span
                :class="
                  'customer-badge MaRiName-' + slotProps.data.mainRiderName
                "
                >{{ slotProps.data.mainRiderName }}</span
              >
            </template>
          </PrimeColumn>
        </PrimeDataTable>
      </div>
    </div>
  </div>
  <PrimeDialog
    header="商品險種複製"
    v-model:visible="isCopyModal"
    :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
    :style="{ width: '75vw' }"
    :modal="true"
    :draggable="false"
  >
    <div class="grid formgrid p-fluid mt-4" style="margin-bottom: 7rem">
      <div class="col-12 t-form-group my-2">
        <div class="col-12 t-form-group lg:col-5 flex-column">
          <div class="col-12 t-form-group mb-3">
            <label class="t-label col-12 lg:col-3" for="">險種分類</label>
            <PrimeDropdown
              class="lg:col-9 col-12"
              v-model="copyInsuranceReq.productCategoryId"
              :options="insuranceProdCategoryList"
              optionLabel="insuranceProdCategoryName"
              optionValue="insuranceProdCategoryId"
              :filter="true"
              disabled
            />
          </div>
          <div class="col-12 t-form-group mb-3">
            <label class="t-label col-12 lg:col-3" for="">投保險種代碼</label>
            <div class="col-12 lg:col-9 p-0">
              <PrimeInputText
                disabled
                v-model="copyInsuranceReq.orgInsuranceId"
                class="t-inputText"
                type="text"
              />
            </div>
          </div>
          <div class="col-12 t-form-group mb-3">
            <label class="t-label col-12 lg:col-3" for="">投保險種名稱</label>
            <div class="col-12 lg:col-9 p-0">
              <PrimeInputText
                disabled
                v-model="copyInsuranceReq.insuranceName"
                class="t-inputText"
                type="text"
              />
            </div>
          </div>
          <div class="col-12 t-form-group mb-3">
            <label class="t-label col-12 lg:col-3" for="">投保險種簡稱</label>
            <div class="col-12 lg:col-9 p-0">
              <PrimeInputText
                disabled
                v-model="copyInsuranceReq.insuranceShortName"
                class="t-inputText"
                type="text"
              />
            </div>
          </div>
        </div>
        <div class="col-12 lg:col-2 flex justify-content-center">
          <PrimeButton
            class="mt-3 lg:m-0 p-button-text"
            icon="pi pi-arrow-down lg:-rotate-90 text-2xl"
            disabled
          />
        </div>
        <div class="col-12 t-form-group lg:col-5 flex-column">
          <div class="col-12 t-form-group mb-3">
            <label class="t-label col-12 lg:col-3" for="">險種分類</label>
            <PrimeDropdown
              class="col-12 lg:col-9"
              v-model="copyInsuranceReq.newProductCategoryId"
              :options="insuranceProdCategoryListCopy"
              optionLabel="insuranceProdCategoryName"
              optionValue="insuranceProdCategoryId"
              :filter="true"
            />
          </div>
          <div class="col-12 t-form-group mb-3">
            <label class="t-label col-12 lg:col-3" for="">投保險種代碼</label>
            <div class="col-12 lg:col-9 p-0">
              <PrimeInputText
                v-model="copyInsuranceReq.newInsuranceId"
                class="t-inputText"
                type="text"
                @input="isIdKeyup = true"
                v-input-to-uppercase
              />
              <small
                v-if="isIdKeyup && !copyInsuranceReq.newInsuranceId"
                id="newInsuranceId"
                class="p-error"
                >{{ COMMON_WORD.VALIDATE_IS_REQUIRED }}</small
              >
              <small
                v-if="
                  isIdKeyup &&
                  copyInsuranceReq.newInsuranceId?.length > 0 &&
                  !NUMBER_AND_ENGLISH_ONLY_REGEX.test(
                    copyInsuranceReq.newInsuranceId
                  )
                "
                id="newInsuranceId"
                class="p-error"
                >{{ COMMON_WORD.VALIDATE_ENGLISH_OR_NUMBER }}</small
              >
              <small
                v-if="isIdKeyup && copyInsuranceReq.newInsuranceId?.length > 8"
                id="newInsuranceId"
                class="p-error"
                >{{ COMMON_WORD.VALIDATE_MAX_LENGTH(8) }}</small
              >
            </div>
          </div>
          <div class="col-12 t-form-group mb-3">
            <label class="t-label col-12 lg:col-3" for="">投保險種名稱</label>
            <div class="col-12 lg:col-9 p-0">
              <PrimeInputText
                v-model="copyInsuranceReq.newInsuranceName"
                class="t-inputText"
                type="text"
                @input="isNameKeyup = true"
              />
              <small
                v-if="isNameKeyup && !copyInsuranceReq.newInsuranceName"
                id="newInsuranceName"
                class="p-error"
                >{{ COMMON_WORD.VALIDATE_IS_REQUIRED }}</small
              >
              <small
                v-if="
                  isNameKeyup && copyInsuranceReq.newInsuranceName?.length > 50
                "
                id="newInsuranceName"
                class="p-error"
                >{{ COMMON_WORD.VALIDATE_MAX_LENGTH(50) }}</small
              >
            </div>
          </div>
          <div class="col-12 t-form-group mb-3">
            <label class="t-label col-12 lg:col-3" for="">投保險種簡稱</label>
            <div class="col-12 lg:col-9 p-0">
              <PrimeInputText
                v-model="copyInsuranceReq.newInsuranceShortName"
                class="t-inputText"
                type="text"
                @input="isSNameKeyup = true"
              />
              <small
                v-if="isSNameKeyup && !copyInsuranceReq.newInsuranceShortName"
                id="newInsuranceShortName"
                class="p-error"
                >{{ COMMON_WORD.VALIDATE_IS_REQUIRED }}</small
              >
              <small
                v-if="
                  isSNameKeyup &&
                  copyInsuranceReq.newInsuranceShortName?.length > 50
                "
                id="newInsuranceShortName"
                class="p-error"
                >{{ COMMON_WORD.VALIDATE_MAX_LENGTH(50) }}</small
              >
            </div>
          </div>
        </div>
      </div>
      <div
        class="col-12 t-form-group mb-2 pt-3 border-dashed border-300 border-none border-top-2"
        v-for="item in copyInsuranceReq.insurancePremYearList"
        :key="item.orgInsuranceYearId"
      >
        <div class="col-12 t-form-group lg:col-5 flex-column">
          <div class="col-12 t-form-group mb-3">
            <label class="t-label col-12 lg:col-3" for="">險種代碼</label>
            <div class="col-12 lg:col-9 p-0">
              <PrimeInputText
                disabled
                v-model="item.orgInsuranceYearId"
                class="t-inputText"
                type="text"
              />
            </div>
          </div>
          <div class="col-12 t-form-group mb-3">
            <label class="t-label col-12 lg:col-3" for="">險種名稱</label>
            <div class="col-12 lg:col-9 p-0">
              <PrimeInputText
                disabled
                v-model="item.insuranceYearName"
                class="t-inputText"
                type="text"
              />
            </div>
          </div>
        </div>
        <div class="col-12 lg:col-2 flex justify-content-center">
          <PrimeButton
            class="mt-3 lg:m-0 p-button-text"
            icon="pi pi-arrow-down lg:-rotate-90 text-2xl"
            disabled
          />
        </div>
        <div class="col-12 t-form-group lg:col-5 flex-column">
          <div class="col-12 t-form-group mb-3">
            <label class="t-label col-12 lg:col-3" for="">險種代碼</label>
            <div class="col-12 lg:col-9 p-0">
              <PrimeInputText
                v-model="item.newInsuranceYearId"
                class="t-inputText"
                type="text"
                v-input-to-uppercase
                @input="item.isYearIdKeyup = true"
              />
              <small
                v-if="item.isYearIdKeyup && !item.newInsuranceYearId"
                id="newInsuranceYearId"
                class="p-error"
                >{{ COMMON_WORD.VALIDATE_IS_REQUIRED }}</small
              >
              <small
                v-if="
                  item.isYearIdKeyup &&
                  item.newInsuranceYearId?.length > 0 &&
                  !NUMBER_AND_ENGLISH_ONLY_REGEX.test(item.newInsuranceYearId)
                "
                id="newInsuranceYearId"
                class="p-error"
                >{{ COMMON_WORD.VALIDATE_ENGLISH_OR_NUMBER }}</small
              >
              <small
                v-if="item.isYearIdKeyup && item.newInsuranceYearId?.length > 8"
                id="newInsuranceYearId"
                class="p-error"
                >{{ COMMON_WORD.VALIDATE_MAX_LENGTH(8) }}</small
              >
            </div>
          </div>
          <div class="col-12 t-form-group mb-3">
            <label class="t-label col-12 lg:col-3" for="">險種名稱</label>
            <div class="col-12 lg:col-9 p-0">
              <PrimeInputText
                v-model="item.newInsuranceYearName"
                class="t-inputText"
                type="text"
                @input="item.isYearNameKeyup = true"
              />
              <small
                v-if="item.isYearNameKeyup && !item.newInsuranceYearName"
                id="newInsuranceYearName"
                class="p-error"
                >{{ COMMON_WORD.VALIDATE_IS_REQUIRED }}</small
              >
              <small
                v-if="
                  item.isYearNameKeyup && item.newInsuranceYearName?.length > 50
                "
                id="newInsuranceYearName"
                class="p-error"
                >{{ COMMON_WORD.VALIDATE_MAX_LENGTH(50) }}</small
              >
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="p-dialog-footer -mx-4 mt-4 absolute w-full bottom-0">
      <PrimeButton
        :label="COMMON_WORD.ENTER"
        class="p-button-sm"
        icon="pi pi-check"
        @click="copyInsurance()"
      />
      <PrimeButton
        :label="COMMON_WORD.CANCEL"
        icon="pi pi-times"
        @click="isCopyModal = false"
        class="p-button-outlined p-button-sm"
      />
    </div>
    <!-- </Form> -->
  </PrimeDialog>
  <!-- 提示是否覆蓋之彈窗 -->
  <PrimeDialog
    header="訊息"
    v-model:visible="isMsgModal"
    :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
    :style="{ width: '50vw' }"
    :modal="true"
    :class="'msg-modal'"
  >
    <div class="text-center">
      <span
        class="pi pi-exclamation-circle text-primary"
        style="font-size: 4rem"
      />
      <h4 class="m-4">{{ msg }}</h4>
    </div>

    <template #footer>
      <PrimeButton
        :label="COMMON_WORD.NO"
        icon="pi pi-times"
        class="p-button-outlined"
        @click="isMsgModal = false"
      />
      <PrimeButton
        :label="COMMON_WORD.YES"
        icon="pi pi-check"
        @click="copyHandle"
      />
    </template>
  </PrimeDialog>
  <!-- 刪除彈窗 -->
  <DeleteModal
    :isDeleteModal="isDeleteModal"
    :reqData="deleteReq"
    :deleteDataFun="deleteInsuranceMain"
    @changeIsDeleteVal="changeIsDeleteVal"
    @getList="getData"
  ></DeleteModal>
</template>
<script setup lang="ts">
import { reactive, ref } from "vue";
import { RouterLink, useRouter } from "vue-router";
import { useToast } from "primevue/usetoast";
import * as COMMON_WORD from "@/constants/common-word";
import {
  getSystemParamList,
  getInsuranceProductCategoryList,
  getProductData,
  deleteInsuranceMain,
  copyInsuranceMain,
  copyQueryInsuranceMain,
} from "@/api/product-service";
import type { InsuranceMainModel } from "@/models/insurance-main-model";
import { Field, Form } from "vee-validate";
import * as yup from "yup";
import { MsgCodeType } from "@/enums/msg-code-type";
import { NUMBER_AND_ENGLISH_ONLY_REGEX } from "@/constants";

const router = useRouter();
const toast = useToast();

const searchSchema = yup.object({
  name: yup.string().max(50, COMMON_WORD.VALIDATE_MAX_LENGTH(50)),
});

const isDeleteModal = ref(false);
const deleteReq = ref<{ insuranceId: string }>({ insuranceId: "" });

/**
 * 險種分類列表
 */
const insuranceProdCategoryList = reactive([
  { insuranceProdCategoryId: "", insuranceProdCategoryName: "" },
]);
/**
 * 險種分類列表+全部
 */
const insuranceProdCategoryListAddAll = ref([
  { insuranceProdCategoryId: "", insuranceProdCategoryName: "" },
]);
/**
 * 幣別列表
 */
const currencyList = reactive([{ menuValue: "", menuText: "" }]);
/**
 * 險種種類列表
 */
const mainRiderList = reactive([{ menuValue: "", menuText: "" }]);
const insuranceMainList = ref<Array<InsuranceMainModel>>([]);
/**
 * 搜尋條件
 */
const formData = reactive({
  page: 1,
  pageDataCount: 10,
  sort: 1,
  sortColumn: "",
  productCategoryId: "",
  currency: "",
  name: "",
  mainRider: "",
  menuId: "SALES_INFO",
  checkRuleId: "",
  checkRuleName: "",
  ruleId: "",
  ruleName: "",
  fieldId: "",
  fieldName: "",
  errMsgCode: "",
  content: "",
});

const dataCount = ref(0);

/**
 * F0000B016：查詢險種分類檔列表 API
 */
const getInsuranceProdCategoryList = () => {
  const mainRider = formData.mainRider || "";
  getInsuranceProductCategoryList({
    mainRiderCategory: mainRider,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      Object.assign(
        insuranceProdCategoryList,
        response.data.body?.insuranceProdCategoryList
      );
      insuranceProdCategoryListAddAll.value = [
        {
          insuranceProdCategoryId: "",
          insuranceProdCategoryName: "全部",
        },
        ...insuranceProdCategoryList,
      ];
    }
  });
};
getInsuranceProdCategoryList();

/**
 * F0000B003：查詢系統下拉參數檔列表(幣別) API
 */
const getSysCurrencyList = () => {
  getSystemParamList({
    codeNo: "R33",
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      Object.assign(
        currencyList,
        response.data.body?.sysCodeList[0]?.sysMenuList
      );
      currencyList.unshift({
        menuValue: "",
        menuText: "全部",
      });
    }
  });
};
getSysCurrencyList();

/**
 * F0000B003：查詢系統下拉參數檔列表(險種種類) API
 */
const getSysMainRiderList = () => {
  getSystemParamList({
    codeNo: "R37",
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      Object.assign(
        mainRiderList,
        response.data.body?.sysCodeList[0]?.sysMenuList
      );
      mainRiderList.unshift({
        menuValue: "",
        menuText: "全部",
      });
    }
  });
};
getSysMainRiderList();

/**
 * F2502B001：查詢投保險種檔資料 API
 */
const getData = () => {
  getProductData({
    ...formData,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      insuranceMainList.value = response.data.body?.insuranceMainList;
      dataCount.value = response.data.body?.dataCount ?? 0;
    }
  });
};
getData();

const confirmDelete = (data: InsuranceMainModel) => {
  deleteReq.value.insuranceId = data.insuranceId;
  isDeleteModal.value = true;
};

/**
 * 換頁
 */
const onTablePageChange = ($event: { rows: number; page: number }) => {
  console.log("$event-", $event);
  formData.pageDataCount = $event.rows;
  formData.page = $event.page + 1;
  getData();
  console.log("formData.page", formData.page);
};

/**
 * 清空條件
 */
const clear = () => {
  formData.productCategoryId = "";
  formData.currency = "";
  formData.name = "";
  formData.mainRider = "";
  getData();
};

/**
 * 搜尋
 */
const search = () => {
  getData();
};

/**
 * 修改跳頁
 */
const goToEdit = (data: InsuranceMainModel) => {
  console.log(data);
  router.push({
    name: "insuranceSetting-edit",
    params: {
      insuranceId: data.insuranceId,
    },
  });
  localStorage.setItem("InsuranceMain", JSON.stringify(data));
  console.log(router);
};

const changeIsDeleteVal = (value: boolean) => {
  isDeleteModal.value = value;
};

/**
 * 複製對應險種分類列表
 */
const insuranceProdCategoryListCopy = ref([
  { insuranceProdCategoryId: "", insuranceProdCategoryName: "" },
]);

/**
 * 複製險種資料預設值
 */
const copyInsuranceDefault = () => {
  return {
    action: "CHECK",
    orgInsuranceId: "",
    newInsuranceId: "",
    insuranceName: "",
    insuranceShortName: "",
    productCategoryId: "",
    newInsuranceName: "",
    newInsuranceShortName: "",
    newProductCategoryId:
      insuranceProdCategoryListCopy.value?.[0]?.insuranceProdCategoryId ?? "",
    insurancePremYearList: [
      {
        orgInsuranceYearId: "",
        insuranceYearName: "",
        newInsuranceYearId: "",
        newInsuranceYearName: "",
        isYearIdKeyup: false,
        isYearNameKeyup: false,
      },
    ],
  };
};

/**
 * 欲複製險種資料
 */
const copyInsuranceReq = ref({
  ...copyInsuranceDefault(),
});
const isCopyModal = ref(false);

const isIdKeyup = ref(false);
const isNameKeyup = ref(false);
const isSNameKeyup = ref(false);

/**
 * 取得錯誤訊息
 */
const insuranceYearCopyValid = () => {
  let insuranceIdValid = false;
  let insuranceNameValid = false;
  let insuranceShortNameValid = false;
  let insuranceYearIdValid = false;
  let insuranceYearNameValid = false;
  isIdKeyup.value = true;
  isNameKeyup.value = true;
  isSNameKeyup.value = true;
  copyInsuranceReq.value.insurancePremYearList =
    copyInsuranceReq.value.insurancePremYearList.map((item) => {
      return {
        ...item,
        isYearIdKeyup: true,
        isYearNameKeyup: true,
      };
    });
  if (!copyInsuranceReq.value.newInsuranceId) {
    insuranceIdValid = false;
  } else if (
    copyInsuranceReq.value.newInsuranceId?.length > 0 &&
    !NUMBER_AND_ENGLISH_ONLY_REGEX.test(copyInsuranceReq.value.newInsuranceId)
  ) {
    insuranceIdValid = false;
  } else if (copyInsuranceReq.value.newInsuranceId?.length > 8) {
    insuranceIdValid = false;
  } else {
    insuranceIdValid = true;
  }
  if (!copyInsuranceReq.value.newInsuranceName) {
    insuranceNameValid = false;
  } else if (copyInsuranceReq.value.newInsuranceName?.length > 50) {
    insuranceNameValid = false;
  } else {
    insuranceNameValid = true;
  }
  if (!copyInsuranceReq.value.newInsuranceShortName) {
    insuranceShortNameValid = false;
  } else if (copyInsuranceReq.value.newInsuranceName?.length > 50) {
    insuranceShortNameValid = false;
  } else {
    insuranceShortNameValid = true;
  }
  for (const item of copyInsuranceReq.value.insurancePremYearList) {
    if (!item.newInsuranceYearId) {
      insuranceYearIdValid = false;
    } else if (
      item.newInsuranceYearId?.length > 0 &&
      !NUMBER_AND_ENGLISH_ONLY_REGEX.test(item.newInsuranceYearId)
    ) {
      insuranceYearIdValid = false;
    } else if (item.newInsuranceYearId?.length > 8) {
      insuranceYearIdValid = false;
    } else {
      insuranceYearIdValid = true;
    }
    if (!insuranceYearIdValid) break;
    if (!item.newInsuranceYearName) {
      insuranceYearNameValid = false;
    } else if (item.newInsuranceYearId?.length > 50) {
      insuranceYearNameValid = false;
    } else {
      insuranceYearNameValid = true;
    }
    if (!insuranceYearNameValid) break;
  }
  if (
    insuranceIdValid &&
    insuranceNameValid &&
    insuranceShortNameValid &&
    insuranceYearIdValid &&
    insuranceYearNameValid
  ) {
    return true;
  } else {
    return false;
  }
};

/**
 * 複製查詢
 */
const copyQueryInsurance = (insuranceId: string): void => {
  isCopyModal.value = true;
  copyQueryInsuranceMain({
    insuranceId: insuranceId,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      copyInsuranceReq.value = {
        ...copyInsuranceDefault(),
        ...response.data?.body,
        orgInsuranceId: response.data?.body?.insuranceId,
        insurancePremYearList: response.data?.body?.insurancePremYearList.map(
          (item) => {
            return {
              ...item,
              orgInsuranceYearId: item.insuranceYearId,
              newInsuranceYearId: "",
              newInsuranceYearName: "",
              isYearIdKeyup: false,
              isYearNameKeyup: false,
            };
          }
        ),
      };
      const mainRider = response.data?.body?.mainRider ?? "";
      getInsuranceProductCategoryList({
        mainRiderCategory: mainRider,
      }).then((response) => {
        if (response?.status === 200 && response.data) {
          insuranceProdCategoryListCopy.value =
            response.data.body?.insuranceProdCategoryList ?? [];
          copyInsuranceReq.value.newProductCategoryId =
            insuranceProdCategoryListCopy.value?.[0]?.insuranceProdCategoryId ??
            "";
        }
      });
    }
  });
};

const isMsgModal = ref(false);
const msg = ref("");

const copyHandle = (): void => {
  copyInsuranceReq.value.action = "INSERT";
  isMsgModal.value = false;
  copyInsurance();
};

/**
 * 執行複製
 */
const copyInsurance = (): void => {
  insuranceYearCopyValid() &&
    copyInsuranceMain(copyInsuranceReq.value)
      .then((res) => {
        if (res?.status === 200 && res.data) {
          const { returnCode, returnDesc } = res.data.header;
          if (returnCode === MsgCodeType.SUCCESS) {
            if (copyInsuranceReq.value.action === "CHECK") {
              isMsgModal.value = true;
              msg.value = "請問是否要進行複製？";
            }
            if (copyInsuranceReq.value.action === "INSERT") {
              toast.add({
                severity: "success",
                summary: COMMON_WORD.UPDATE_SUCCESS,
                detail: returnDesc,
                life: 3000,
              });
              getData();
              isCopyModal.value = false;
              copyInsuranceReq.value.action = "CHECK";
            }
          } else {
            toast.add({
              severity: "error",
              summary: COMMON_WORD.ERROR,
              detail: returnDesc,
              life: 3000,
            });
          }
        }
      })
      .catch((err) => {
        console.log(err);
      });
};
</script>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    src/views/pages/insurance/InsuranceUnderWritingSettingView.vue                                      0100777 0000000 0000000 00000063151 14665752120 022247  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <div class="grid p-fluid">
      <div class="col-12">
        <div class="grid formgrid">
          <div class="col-12 mb-3 lg:col-6 t-form-group">
            <label class="t-label col-12 lg:col-3" for="">投保險種名稱</label>
            <PrimeInputText
              disabled
              v-model="insuranceBasicData.fullName"
              class="t-inputText"
              type="text"
            />
          </div>
          <div class="col-12 mb-3 lg:col-6 t-form-group">
            <label class="t-label col-12 lg:col-3" for="">投保險種代碼</label>
            <PrimeInputText
              disabled
              v-model="insuranceBasicData.insuranceId"
              class="t-inputText"
              type="text"
            />
          </div>
        </div>
        <div>
          <PrimeButton
            :label="COMMON_WORD.ADD"
            class="mr-2 my-2 p-button-sm p-button-info w-auto"
            icon="pi pi-plus"
            @click="goToEdit(false)"
          />
        </div>
        <PrimeDataTable
          :lazy="true"
          :showGridlines="true"
          :value="insurance.insuranceUnderwritingList"
          :paginator="true"
          :rows="searchData.pageDataCount"
          :totalRecords="dataCount"
          dataKey="seqNo"
          :sortOrder="searchData.sort"
          paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
          :rowsPerPageOptions="[10, 50, 100]"
          currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
          responsiveLayout="scroll"
          @page="onTablePageChange($event)"
        >
          <template #header>
            <div style="position: relative">
              <i class="pi pi-table" />
              <span class="mx-2">核保條件 查詢結果</span>
            </div>
          </template>
          <template #empty> {{ COMMON_WORD.EMPTY }} </template>
          <template #loading> {{ COMMON_WORD.LOADING }} </template>
          <PrimeColumn header="動作" style="width: 200px; min-width: 200px">
            <template #body="{ data }">
              <div class="text-center flex">
                <PrimeButton
                  :label="COMMON_WORD.EDIT"
                  icon="pi pi-pencil"
                  class="p-button-outlined mr-2 p-button-sm"
                  @click="goToEdit(true, data)"
                >
                </PrimeButton>
                <PrimeButton
                  :label="COMMON_WORD.DELETE"
                  class="mr-2 p-button-sm"
                  @click="deleteData(data)"
                />
              </div>
            </template>
          </PrimeColumn>
          <PrimeColumn field="rlhp" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('rlhp')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>保險對象</span>
                <span
                  v-if="sortMode.rlhp === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.rlhp === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                rlhpList.find((item) => item.menuValue === slotProps.data.rlhp)
                  ?.menuText
              }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="classNo" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('classNo')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>職業等級</span>
                <span
                  v-if="sortMode.classNo === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.classNo === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                classList.find(
                  (item) => item.menuValue === slotProps.data.classNo
                )?.menuText
              }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="minAgeType" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('minAgeType')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>年齡類別(最低)</span>
                <span
                  v-if="sortMode.minAgeType === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.minAgeType === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                ageTypeList.find(
                  (item) => item.menuValue === slotProps.data.minAgeType
                )?.menuText
              }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="minAge" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('minAge')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>最低年齡</span>
                <span
                  v-if="sortMode.minAge === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.minAge === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{ slotProps.data.minAge }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="maxAgeType" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('maxAgeType')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>年齡類別(最高)</span>
                <span
                  v-if="sortMode.maxAgeType === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.maxAgeType === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                ageTypeList.find(
                  (item) => item.menuValue === slotProps.data.maxAgeType
                )?.menuText
              }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="maxAge" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('maxAge')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>最高年齡</span>
                <span
                  v-if="sortMode.maxAge === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.maxAge === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{ slotProps.data.maxAge }}</span>
            </template>
          </PrimeColumn>
          <PrimeColumn field="maxAmt" style="min-width: 150px">
            <template #header>
              <div
                @click="sortModeFunction('maxAmt')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>保額最高單位數</span>
                <span
                  v-if="sortMode.maxAmt === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.maxAmt === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>
            <template #body="slotProps">
              <span class="customer-badge">{{
                slotProps.data.maxAmt.toLocaleString()
              }}</span>
            </template>
          </PrimeColumn>
        </PrimeDataTable>
      </div>
      <PrimeDialog
        header="核保條件維護"
        v-model:visible="isModal"
        :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
        :style="{ width: '50vw' }"
        :modal="true"
        :draggable="false"
      >
        <Form :validation-schema="classSettingSchema" @submit="updateData">
          <div
            class="grid formgrid p-fluid mt-4 overflow-y-auto"
            style="margin-bottom: 8rem"
          >
            <div class="col-12 t-form-group my-2">
              <label class="t-label col-12 lg:col-2 text-left"
                >投保險種代碼</label
              >
              <PrimeInputText
                disabled
                v-model="insurance.insuranceId"
                class="t-inputText"
                type="text"
                placeholder=""
              />
            </div>
            <div class="col-12 t-form-group my-2">
              <label class="t-label col-12 lg:col-2 text-left"
                >投保險種名稱</label
              >
              <PrimeInputText
                disabled
                v-model="insurance.insuranceName"
                class="t-inputText"
                type="text"
                placeholder=""
              />
            </div>
            <div class="col-12 t-form-group my-2">
              <label class="t-label col-12 lg:col-2 text-left">保險對象</label>
              <div class="col-12 lg:col-7 p-0">
                <PrimeDropdown
                  v-model="insuranceEdit.rlhp"
                  class="t-dropdown"
                  :options="rlhpList"
                  optionLabel="menuText"
                  optionValue="menuValue"
                  placeholder="不限制"
                />
              </div>
            </div>
            <div class="col-12 t-form-group my-2">
              <label class="t-label col-12 lg:col-2 text-left">職業等級</label>
              <div class="col-12 lg:col-7 p-0">
                <PrimeDropdown
                  v-model="insuranceEdit.classNo"
                  class="t-dropdown"
                  :options="classList"
                  optionLabel="menuText"
                  optionValue="menuValue"
                  placeholder="不限制"
                />
              </div>
            </div>
            <div class="col-12 t-form-group my-2">
              <label class="t-label col-12 lg:col-2 text-left"
                >最低年齡類別</label
              >
              <div class="col-12 lg:col-7 p-0">
                <PrimeDropdown
                  v-model="insuranceEdit.minAgeType"
                  class="t-dropdown"
                  :options="ageTypeList"
                  optionLabel="menuText"
                  optionValue="menuValue"
                />
              </div>
            </div>
            <div class="col-12 t-form-group my-2">
              <Field
                name="minAge"
                v-slot="{ field, errorMessage }"
                v-model="insuranceEdit.minAge"
              >
                <label class="t-label col-12 lg:col-2 text-left"
                  >最低年齡</label
                >
                <div class="col-12 lg:col-7 p-0">
                  <PrimeInputText
                    v-bind="field"
                    type="text"
                    :class="{
                      'p-invalid': errorMessage,
                      'lg:mt-3': errorMessage,
                    }"
                  />
                  <small class="p-error">{{ errorMessage }}</small>
                </div>
              </Field>
            </div>
            <div class="col-12 t-form-group my-2">
              <label class="t-label col-12 lg:col-2 text-left"
                >最高年齡類別</label
              >
              <div class="col-12 lg:col-7 p-0">
                <PrimeDropdown
                  v-model="insuranceEdit.maxAgeType"
                  class="t-dropdown"
                  :options="ageTypeList"
                  optionLabel="menuText"
                  optionValue="menuValue"
                />
              </div>
            </div>
            <div class="col-12 t-form-group my-2">
              <Field
                name="maxAge"
                v-slot="{ field, errorMessage }"
                v-model="insuranceEdit.maxAge"
              >
                <label class="t-label col-12 lg:col-2 text-left"
                  >最高年齡</label
                >
                <div class="col-12 lg:col-7 p-0">
                  <PrimeInputText
                    v-bind="field"
                    type="text"
                    :class="{
                      'p-invalid': errorMessage,
                      'lg:mt-3': errorMessage,
                    }"
                  />
                  <small class="p-error">{{ errorMessage }}</small>
                </div>
              </Field>
            </div>
            <div class="col-12 t-form-group my-2">
              <Field
                name="maxAmt"
                v-slot="{ field, errorMessage }"
                v-model="insuranceEdit.maxAmt"
              >
                <label class="t-label col-12 lg:col-2 text-left"
                  >保額上限</label
                >
                <div class="col-12 lg:col-7 p-0">
                  <PrimeInputText
                    v-bind="field"
                    type="text"
                    :class="{
                      'p-invalid': errorMessage,
                      'lg:mt-3': errorMessage,
                    }"
                  />
                  <small class="p-error">{{ errorMessage }}</small>
                </div>
              </Field>
            </div>
          </div>
          <div class="p-dialog-footer -mx-4 mt-4 absolute w-full bottom-0">
            <PrimeButton
              :label="COMMON_WORD.ENTER"
              class="p-button-sm"
              icon="pi pi-check"
              type="submit"
            />
            <PrimeButton
              :label="COMMON_WORD.CANCEL"
              @click="isModal = false"
              icon="pi pi-times"
              class="p-button-outlined p-button-sm"
            />
          </div>
        </Form>
      </PrimeDialog>
      <!-- 刪除彈窗 -->
      <DeleteModal
        :isDeleteModal="isMsgModal"
        :reqData="delReq"
        :deleteDataFun="deleteInsuranceUnderwriting"
        @changeIsDeleteVal="changeIsDeleteVal"
        @getList="queryClassData"
      ></DeleteModal>
    </div>
  </div>
</template>
<script setup lang="ts">
import { computed, ref, watch } from "vue";
import { useRoute } from "vue-router";
import { Field, Form } from "vee-validate";
import * as yup from "yup";
import {
  editInsuranceUnderwriting,
  queryInsuranceUnderwriting,
  deleteInsuranceUnderwriting,
} from "@/api/product-service";
import { getSystemParamList } from "@/api/shared-settings-service";
import { useToast } from "primevue/usetoast";
import { SysCodeType } from "@/enums/sys-code-type";
import { MsgCodeType } from "@/enums/msg-code-type";
import * as COMMON_WORD from "@/constants/common-word";
import type { SystemMenuModel } from "@/models/system-menu-model";
import { useProductDropdownStore } from "@/stores/productDropdown";
import { MAX_NUMBER_ONLY_AND_LENGTH_REGEX } from "@/constants";
import type { EditInsuranceUnderwritingReq } from "@/api/models/req/edit-insurance-underwriting-req";
import type { InsuranceUnderwritingModel } from "@/models/insurance-underwriting-model";

const route = useRoute();
const toast = useToast();
const productDropdownStore = useProductDropdownStore();

/**
 * 欄位檢核
 */
const classSettingSchema = yup.object({
  minAge: yup
    .number()
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .typeError(COMMON_WORD.VALIDATE_NUMBER)
    .min(0, COMMON_WORD.VALIDATE_NUMBER_RANGE(0, 999))
    .max(999, COMMON_WORD.VALIDATE_NUMBER_RANGE(0, 999)),
  maxAge: yup
    .number()
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .typeError(COMMON_WORD.VALIDATE_NUMBER)
    .min(0, COMMON_WORD.VALIDATE_NUMBER_RANGE(0, 999))
    .max(999, COMMON_WORD.VALIDATE_NUMBER_RANGE(0, 999)),
  maxAmt: yup
    .string()
    .matches(
      MAX_NUMBER_ONLY_AND_LENGTH_REGEX(12, 2),
      COMMON_WORD.VALIDATE_NUMBER_ONLY_AND_LENGTH(12, 2)
    )
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED),
});

const insuranceId = ref<string>("");
if (typeof route.params.insuranceId === "string") {
  insuranceId.value = route.params.insuranceId;
}

/**
 * 險種顯示
 */
const insurance = ref<{
  insuranceId: string;
  insuranceName: string;
  insuranceUnderwritingList: object[];
}>({
  insuranceId: insuranceId.value,
  insuranceName: "",
  insuranceUnderwritingList: [],
});

/**
 * 新增編輯彈窗
 */
const isModal = ref<boolean>(false);

/**
 * 年齡類別 dropDown
 */
const ageTypeList = ref<SystemMenuModel[]>([]);
/**
 * 保險對象 dropDown
 */
const rlhpList = ref<SystemMenuModel[]>([]);
/**
 * 職業等級 dropDown
 */
const classList = ref<SystemMenuModel[]>([]);

/**
 * 搜尋條件
 */
const searchData = ref({
  page: 1,
  pageDataCount: 10,
  sort: 0,
  sortColumn: "",
  insuranceId: insuranceId,
  insuranceYearId: "",
  channelId: "",
});

const dataCount = ref<number>(0);

/**
 * F2502B003：查詢商品基本資訊 API
 */
const insuranceBasicData = computed(() => {
  return productDropdownStore.insuranceBasicData;
});

searchData.value.insuranceId = insuranceBasicData.value.insuranceId;
insurance.value.insuranceId = insuranceBasicData.value?.insuranceId;
insurance.value.insuranceName = insuranceBasicData.value?.fullName;

//如果store中的商品基本資訊有所變化，則該頁籤的相關資料也須變更，且重新呼叫一次查詢DataTable的API
watch(insuranceBasicData, () => {
  searchData.value.insuranceId = insuranceBasicData.value.insuranceId ?? "";
  insurance.value.insuranceId = insuranceBasicData.value?.insuranceId;
  insurance.value.insuranceName = insuranceBasicData.value?.fullName;
  queryClassData();
});

/**
 * dataTable 排序
 */
const sortMode = ref({
  channelID: null,
  rlhp: null,
  classNo: null,
  minAgeType: null,
  minAge: null,
  maxAgeType: null,
  maxAge: null,
  maxAmt: null,
});

const sortModeFunction = (field: string) => {
  if (sortMode.value[field] === "up") {
    sortMode.value[field] = "down";
    searchData.value.sort = 1;
    searchData.value.sortColumn = field;
  } else {
    sortMode.value[field] = "up";
    searchData.value.sort = 0;
    searchData.value.sortColumn = field;
  }
  queryClassData();
};

/**
 * F2502B025：查詢職業等級設定
 */
const queryClassData = (): void => {
  const req = searchData.value;
  queryInsuranceUnderwriting(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        insurance.value.insuranceUnderwritingList =
          res.data.body.insuranceUnderwritingList ?? [];
        dataCount.value = res.data.body.dataCount ?? 0;
      }
    })
    .catch((err) => {
      console.log(err);
    });
};

const insuranceEditDefault = () => {
  return {
    action: "INSERT",
    seqNo: -1,
    insuranceId: insurance.value.insuranceId ?? "",
    channelID: "ALL",
    sex: "A",
    rlhp: rlhpList.value?.[0]?.menuValue ?? "",
    classNo: classList.value?.[0]?.menuValue ?? "",
    minAgeType: ageTypeList.value?.[0]?.menuValue ?? "",
    minAge: undefined,
    maxAgeType: ageTypeList.value?.[0]?.menuValue ?? "",
    maxAge: undefined,
    maxAmt: undefined,
  };
};

const insuranceEdit = ref<EditInsuranceUnderwritingReq>({
  ...insuranceEditDefault(),
});

/**
 * 取得年齡類別 dropdown
 * F0000B003：查詢系統下拉參數檔列表 API
 * codeNo:'R58'
 */
const getAgeTypeList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R58,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      ageTypeList.value = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
    }
  });
};
getAgeTypeList();

/**
 * 取得保險對象 dropdown
 * F0000B003：查詢系統下拉參數檔列表 API
 * codeNo:'R57'
 */
const getRLHPList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R57,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      rlhpList.value = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      rlhpList.value = [
        {
          menuValue: "",
          menuText: "不限制",
        },
        ...rlhpList.value,
      ];
    }
  });
};
getRLHPList();

/**
 * 取得職業等級 dropdown
 * F0000B003：查詢系統下拉參數檔列表 API
 * codeNo:'R11'
 */
const getClassList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R11,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      classList.value = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      classList.value = [
        {
          menuValue: "",
          menuText: "不限制",
        },
        ...classList.value,
      ];
    }
  });
};
getClassList();

/**
 * F2502B020：編輯年齡限制設定
 */
const updateData = (): void => {
  const req = {
    ...insuranceEdit.value,
  };
  editInsuranceUnderwriting(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        const { returnCode, returnDesc } = res.data.header;
        if (returnCode === MsgCodeType.SUCCESS) {
          toast.add({
            severity: "success",
            summary: COMMON_WORD.UPDATE_SUCCESS,
            detail: returnDesc,
            life: 3000,
          });
          queryClassData();
          isModal.value = false;
        } else {
          toast.add({
            severity: "error",
            summary: COMMON_WORD.ERROR,
            detail: returnDesc,
            life: 3000,
          });
        }
      }
    })
    .catch((err) => {
      console.log(err);
    });
};

const isMsgModal = ref(false);
const delReq = ref({});
const deleteData = (data: { seqNo: number }) => {
  isMsgModal.value = true;
  delReq.value = { seqNo: data.seqNo };
};
const changeIsDeleteVal = (value: boolean) => {
  isMsgModal.value = value;
};

interface Event {
  rows: number;
  page: number;
}
const onTablePageChange = ($event: Event): void => {
  searchData.value.pageDataCount = $event.rows;
  searchData.value.page = $event.page + 1;
  queryClassData();
};

/**
 * 顯示編輯彈窗
 */
const goToEdit = (isEdit: boolean, data?: InsuranceUnderwritingModel) => {
  isModal.value = true;
  if (isEdit && data) {
    insuranceEdit.value = {
      ...data,
      action: "UPDATE",
      insuranceId: insurance.value.insuranceId,
      channelID: "ALL",
      sex: "A",
    };
  } else {
    // 新增資料帶預設值
    insuranceEdit.value = {
      ...insuranceEditDefault(),
    };
  }
};
</script>
                                                                                                                                                                                                                                                                                                                                                                                                                       src/views/pages/insurance/QuestionSettingEditView.vue                                               0100777 0000000 0000000 00000114107 14665752120 020371  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div class="grid p-fluid">
    <PrimeToast />
    <div class="col-12">
      <div class="card">
        <!-- 查詢欄位 -->
        <PrimePanel>
          <template #header>
            <div class="left-header">
              <span class="pi pi-search pr-2"></span>
              <span>問卷設定</span>
            </div>
          </template>

          <!-- 要保書代號 & 要保書名稱 & 問卷類型 -->
          <div class="grid formgrid">
            <div class="col-12 mb-3 lg:col-4 t-form-group">
              <label class="t-label col-12 lg:col-3">要保書代號</label>
              <PrimeInputText
                v-model="formData.contractNo"
                class="t-inputText"
                type="text"
                disabled
              />
            </div>

            <div class="col-12 mb-3 lg:col-4 t-form-group">
              <label class="t-label col-12 lg:col-3">要保書名稱</label>
              <PrimeInputText
                v-model="formData.contractName"
                class="t-inputText"
                type="text"
                disabled
              />
            </div>

            <div class="col-12 mb-3 lg:col-4 t-form-group">
              <label class="t-label col-12 lg:col-3">問卷類型</label>
              <PrimeInputText
                v-model="formData.disclosureTypeName"
                class="t-inputText"
                type="text"
                disabled
              />
            </div>
          </div>
        </PrimePanel>

        <!-- 按鈕 - 新增-->
        <div class="btn-containermb-4 mt-4">
          <PrimeButton
            :label="COMMON_WORD.ADD"
            class="mr-2 my-2 p-button-sm p-button-info w-auto"
            icon="pi pi-plus"
            @click="addData"
          />
        </div>

        <!-- 資料列表 -->
        <PrimeDataTable
          :lazy="true"
          :showGridlines="true"
          :paginator="true"
          :value="jobDisclosureQuestionList"
          class="p-datatable-customers"
          :rows="formData.pageDataCount"
          :totalRecords="dataCount"
          dataKey="id"
          :sortOrder="formData.sort"
          paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
          :rowsPerPageOptions="[10, 50, 100]"
          currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
          responsiveLayout="scroll"
          @page="onTablePageChange($event)"
        >
          <template #header>
            <div class="">
              <i class="pi pi-table" />
              <span class="mx-2">問卷題目設定</span>
            </div>
          </template>
          <template #empty> {{ COMMON_WORD.EMPTY }} </template>
          <template #loading> {{ COMMON_WORD.LOADING }} </template>

          <PrimeColumn header="動作" style="width: 180px">
            <template #body="{ data }">
              <div class="text-center flex">
                <PrimeButton
                  :class="{
                    'w-6': data.channelId === 'ALL',
                    'mx-6': data.channelId === 'ALL',
                  }"
                  :label="COMMON_WORD.EDIT"
                  icon="pi pi-pencil"
                  class="mr-2 p-button-sm p-button-outlined"
                  @click="goToEdit(data)"
                />
                <PrimeButton
                  :class="{
                    hidden: data.channelId === 'ALL',
                  }"
                  :label="COMMON_WORD.DELETE"
                  icon="pi pi-trash"
                  class="mr-2 p-button-sm"
                  @click="deleteData(data)"
                />
              </div>
            </template>
          </PrimeColumn>

          <!-- 問卷ID -->
          <PrimeColumn field="questionId" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('questionId')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>問卷ID</span>
                <span
                  v-if="sortMode.questionId === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.questionId === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.questionId }} </span>
            </template>
          </PrimeColumn>

          <!-- 父階層ID -->
          <PrimeColumn field="questionParentId" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('questionParentId')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>父階層ID</span>
                <span
                  v-if="sortMode.questionParentId === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.questionParentId === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.questionParentId }} </span>
            </template>
          </PrimeColumn>

          <!-- 題目內容 -->
          <PrimeColumn field="questionContent" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('questionContent')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>題目內容</span>
                <span
                  v-if="sortMode.questionContent === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.questionContent === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.questionContent }} </span>
            </template>
          </PrimeColumn>

          <!-- 答案類型 -->
          <PrimeColumn field="answerTypeName" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('answerTypeName')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>答案類型</span>
                <span
                  v-if="sortMode.answerTypeName === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.answerTypeName === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.answerTypeName }} </span>
            </template>
          </PrimeColumn>

          <!-- 階層 -->
          <PrimeColumn field="questionLevel" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('questionLevel')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>階層</span>
                <span
                  v-if="sortMode.questionLevel === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.questionLevel === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.questionLevel }} </span>
            </template>
          </PrimeColumn>

          <!-- 順序 -->
          <PrimeColumn field="questionLevelOrder" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('questionLevelOrder')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>順序</span>
                <span
                  v-if="sortMode.questionLevelOrder === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.questionLevelOrder === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.questionLevelOrder }} </span>
            </template>
          </PrimeColumn>
        </PrimeDataTable>

        <!-- 新增彈窗 (問卷題目設定維護) -->
        <PrimeDialog
          header="問卷題目設定維護"
          v-model:visible="isAddModal"
          :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
          style="width: 55vw; padding-bottom: 72px"
          :modal="true"
          :draggable="false"
        >
          <Form :validation-schema="schema" @submit="addDataSend">
            <div class="grid formgrid">
              <!-- 要保書 -->
              <Field
                v-slot="{ field, errorMessage, handleChange }"
                v-model="addFormData.contractNo"
                name="contractNo"
              >
                <div
                  class="col-12 mb-3 mt-3 t-form-group align-items-baseline"
                  :class="{
                    'input-mb-0': errorMessage,
                  }"
                >
                  <label style="width: 18%" class="t-label text-right pr-3"
                    >要保書</label
                  >
                  <div class="w-full">
                    <PrimeDropdown
                      style="width: 100%"
                      :options="contractMainList"
                      optionLabel="contractName"
                      optionValue="contractNo"
                      placeholder="請選擇要保書"
                      @change="doGetJobDisclosureList"
                      disabled
                      @update:modelValue="handleChange"
                      :model-value="field.value"
                      :class="{ 'p-invalid': errorMessage }"
                    />
                    <small class="p-error">
                      {{ errorMessage }}
                    </small>
                  </div>
                </div>
              </Field>

              <!-- 問卷類型 -->
              <Field
                v-slot="{ field, errorMessage, handleChange }"
                v-model="addFormData.disclosureType"
                name="disclosureType"
              >
                <div
                  class="col-12 mb-3 mt-3 t-form-group align-items-baseline"
                  :class="{
                    'input-mb-0': errorMessage,
                  }"
                >
                  <label style="width: 18%" class="t-label text-right pr-3"
                    >問卷類型</label
                  >
                  <div class="w-full">
                    <PrimeDropdown
                      style="width: 100%"
                      :options="disclosureTypeList"
                      optionLabel="menuName"
                      optionValue="id"
                      placeholder="請選擇問卷類型"
                      @change="doGetJobDisclosureList"
                      disabled
                      @update:modelValue="handleChange"
                      :model-value="field.value"
                      :class="{ 'p-invalid': errorMessage }"
                    />
                    <small class="p-error">
                      {{ errorMessage }}
                    </small>
                  </div>
                </div>
              </Field>

              <!-- 題目ID -->
              <Field
                v-slot="{ field, errorMessage }"
                v-model="addFormData.questionId"
                name="questionId"
              >
                <div
                  class="col-12 mb-3 mt-3 t-form-group align-items-baseline"
                  :class="{
                    'input-mb-0': errorMessage,
                  }"
                >
                  <label style="width: 18%" class="t-label text-right pr-3"
                    >題目ID</label
                  >
                  <div class="w-full">
                    <PrimeInputText
                      style="width: 100%"
                      class="t-inputText"
                      type="text"
                      v-bind="field"
                      :class="{ 'p-invalid': errorMessage }"
                      :disabled="addFormData.action === 'UPDATE'"
                    />
                    <small class="p-error">
                      {{ errorMessage }}
                    </small>
                  </div>
                </div>
              </Field>

              <!-- 題目內容 -->
              <Field
                v-slot="{ field, errorMessage }"
                v-model="addFormData.questionContent"
                name="questionContent"
              >
                <div
                  class="col-12 mb-3 mt-3 t-form-group align-items-start"
                  :class="{
                    'input-mb-0': errorMessage,
                  }"
                >
                  <label style="width: 18%" class="t-label text-right pr-3"
                    >題目內容</label
                  >
                  <div class="w-full">
                    <PrimeTextarea
                      style="width: 100%"
                      rows="5"
                      cols="30"
                      v-bind="field"
                      :class="{ 'p-invalid': errorMessage }"
                    />
                    <small class="p-error">
                      {{ errorMessage }}
                    </small>
                  </div>
                </div>
              </Field>

              <!-- 題目內容後綴 -->
              <Field
                v-slot="{ field, errorMessage }"
                v-model="addFormData.questionContentSuffix"
                name="questionContentSuffix"
              >
                <div
                  class="col-12 mb-3 mt-3 t-form-group align-items-baseline"
                  :class="{
                    'input-mb-0': errorMessage,
                  }"
                >
                  <label style="width: 18%" class="t-label text-right pr-3"
                    >題目內容後綴</label
                  >
                  <div class="w-full">
                    <PrimeInputText
                      style="width: 100%"
                      class="t-inputText"
                      type="text"
                      v-bind="field"
                      :class="{ 'p-invalid': errorMessage }"
                    />
                    <small class="p-error">
                      {{ errorMessage }}
                    </small>
                  </div>
                </div>
              </Field>

              <!-- 階層 -->
              <div class="col-12 mb-3 mt-3 t-form-group align-items-baseline">
                <label style="width: 18%" class="t-label text-right pr-3"
                  >階層</label
                >
                <PrimeDropdown
                  style="width: 100%"
                  v-model="addFormData.questionLevel"
                  :options="questionLevelList"
                  placeholder="請選擇階層"
                  @change="doGetJobDisclosureList"
                />
              </div>

              <!-- 父階層 -->
              <div class="col-12 mb-3 mt-3 t-form-group align-items-baseline">
                <label style="width: 18%" class="t-label text-right pr-3"
                  >父階層</label
                >
                <PrimeDropdown
                  style="width: 100%"
                  v-model="addFormData.questionParentId"
                  :options="jobDisclosureList"
                  optionLabel="questionParentId"
                  optionValue="questionParentId"
                  placeholder="請選擇父階層"
                />
              </div>

              <!-- 題目順序 -->
              <Field
                v-slot="{ field, errorMessage }"
                v-model="addFormData.questionLevelOrder"
                name="questionLevelOrder"
              >
                <div
                  class="col-12 mb-3 mt-3 t-form-group align-items-baseline"
                  :class="{
                    'input-mb-0': errorMessage,
                  }"
                >
                  <label style="width: 18%" class="t-label text-right pr-3"
                    >題目順序</label
                  >
                  <div class="w-full">
                    <input
                      style="width: 100%"
                      class="p-inputtext p-component p-filled t-inputText"
                      v-model="addFormData.questionLevelOrder"
                      v-input-number-only
                      v-bind="field"
                      :class="{ 'p-invalid': errorMessage }"
                    />
                    <small class="p-error">
                      {{ errorMessage }}
                    </small>
                  </div>
                </div>
              </Field>

              <!-- 答案類型 -->
              <Field
                v-slot="{ field, errorMessage, handleChange }"
                v-model="addFormData.answerType"
                name="answerType"
              >
                <div
                  class="col-12 mb-3 mt-3 t-form-group align-items-baseline"
                  :class="{
                    'input-mb-0': errorMessage,
                  }"
                >
                  <label style="width: 18%" class="t-label text-right pr-3"
                    >答案類型</label
                  >
                  <div class="w-full">
                    <PrimeDropdown
                      style="width: 100%"
                      :options="answerTypeList"
                      optionLabel="menuText"
                      optionValue="menuValue"
                      placeholder="請選擇答案類型"
                      @update:modelValue="handleChange"
                      :model-value="field.value"
                      :class="{ 'p-invalid': errorMessage }"
                    />
                    <small class="p-error">
                      {{ errorMessage }}
                    </small>
                  </div>
                </div>
              </Field>

              <!-- 答案內容 -->
              <Field
                v-slot="{ field, errorMessage }"
                v-model="addFormData.answerContent"
                name="answerContent"
              >
                <div
                  class="col-12 mb-3 mt-3 t-form-group align-items-start"
                  :class="{
                    'input-mb-0': errorMessage,
                  }"
                >
                  <label style="width: 18%" class="t-label text-right pr-3"
                    >答案內容</label
                  >
                  <div class="w-full">
                    <PrimeTextarea
                      style="width: 100%"
                      rows="5"
                      cols="30"
                      v-bind="field"
                      :class="{ 'p-invalid': errorMessage }"
                    />
                    <small class="p-error">
                      {{ errorMessage }}
                    </small>
                  </div>
                </div>
              </Field>

              <!-- 必填 -->
              <div class="col-12 mb-3 mt-3 t-form-group align-items-baseline">
                <label style="width: 18%" class="t-label text-right pr-3"
                  >必填</label
                >
                <PrimeDropdown
                  style="width: 100%"
                  v-model="addFormData.answerRequired"
                  :options="yesOrNoList"
                  optionLabel="menuText"
                  optionValue="menuValue"
                  placeholder="請選擇必填"
                />
              </div>

              <!-- 受影響變更為必填條件 -->
              <Field
                v-slot="{ field, errorMessage }"
                v-model="addFormData.answerRequiredEffect"
                name="answerRequiredEffect"
              >
                <div
                  class="col-12 mb-3 mt-3 t-form-group align-items-start"
                  :class="{
                    'input-mb-0': errorMessage,
                  }"
                >
                  <label style="width: 18%" class="t-label text-right pr-3"
                    >受影響變更<br class="hidden xl:block" />為必填條件</label
                  >
                  <div class="w-full">
                    <PrimeTextarea
                      style="width: 100%"
                      rows="5"
                      cols="30"
                      v-bind="field"
                      :class="{ 'p-invalid': errorMessage }"
                    />
                    <small class="p-error">
                      {{ errorMessage }}
                    </small>
                  </div>
                </div>
              </Field>

              <!-- 需填寫疾病告知說明的條件對應 -->
              <Field
                v-slot="{ field, errorMessage }"
                v-model="addFormData.diseaseRequiredCond"
                name="diseaseRequiredCond"
              >
                <div
                  class="col-12 mb-3 mt-3 t-form-group align-items-start"
                  :class="{
                    'input-mb-0': errorMessage,
                  }"
                >
                  <label style="width: 18%" class="t-label text-right pr-3"
                    >需填寫疾病告知說明的條件對應</label
                  >
                  <div class="w-full">
                    <PrimeInputText
                      style="width: 100%"
                      class="t-inputText"
                      type="text"
                      v-bind="field"
                      :class="{ 'p-invalid': errorMessage }"
                    />
                    <small class="p-error">
                      {{ errorMessage }}
                    </small>
                  </div>
                </div>
              </Field>

              <!-- 疾病告知說明題號 -->
              <Field
                v-slot="{ field, errorMessage }"
                v-model="addFormData.questionNo"
                name="questionNo"
              >
                <div class="col-12 mb-4 mt-3 t-form-group align-items-start">
                  <label style="width: 18%" class="t-label text-right pr-3"
                    >疾病告知<br class="hidden xl:block" />說明題號</label
                  >
                  <div class="w-full">
                    <PrimeInputText
                      style="width: 100%"
                      class="t-inputText"
                      type="text"
                      v-bind="field"
                      :class="{ 'p-invalid': errorMessage }"
                    />
                    <small class="p-error">
                      {{ errorMessage }}
                    </small>
                  </div>
                </div>
              </Field>
            </div>
            <div class="p-dialog-footer -mx-4 mt-4 absolute w-full bottom-0">
              <PrimeButton
                :label="COMMON_WORD.ENTER"
                class="p-button-sm"
                icon="pi pi-check"
                type="submit"
              />
              <PrimeButton
                :label="COMMON_WORD.CANCEL"
                class="p-button-outlined p-button-sm"
                icon="pi pi-times"
                @click="addDataClose"
              />
            </div>
          </Form>
        </PrimeDialog>

        <!-- 刪除彈窗 -->
        <DeleteModal
          :msg="msg"
          :isDeleteModal="isDeletModal"
          :reqData="reqData"
          :deleteDataFun="deleteJobDisclosureQuestion"
          @changeIsDeleteVal="changeIsDeleteVal"
          @getList="doQueryJobDisclosureQuestion"
        ></DeleteModal>

        <!-- 按鈕 - 回上頁 -->
        <div class="btn-container text-center mb-4">
          <PrimeButton
            :label="COMMON_WORD.GO_BACK"
            class="p-button-outlined mr-2 my-2 p-button-sm w-auto"
            icon="pi pi-arrow-left"
            @click="goBack"
          />
        </div>
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref } from "vue";
import {
  getMenuDefinitionList,
  getJobDisclosureList,
  getSystemParamList,
  getContractMainList,
} from "@/api/shared-settings-service";
import { useRouter } from "vue-router";
import { useToast } from "primevue/usetoast";
import {
  queryJobDisclosureQuestion,
  deleteJobDisclosureQuestion,
  editJobDisclosureQuestion,
} from "@/api/question-setting-service";
import * as COMMON_WORD from "@/constants/common-word";
import { SysCodeType } from "@/enums/sys-code-type";
import { MsgCodeType } from "@/enums/msg-code-type";
import type { EditJobDisclosureQuestionReq } from "@/api/models/req/edit-job-disclosure-question-req";
import { Form, Field } from "vee-validate";
import type { ContractMainOnlyValueModel } from "@/models/contract-main-only-value-model";

const isAddModal = ref(false);
const dataCount = ref<number>(0);
const router = useRouter();
const toast = useToast();
const isDeletModal = ref<boolean>(false);
const msg = ref<string>("");
const questionLevelList = [1, 2, 3, 4];

/**
 * 搜尋條件
 */
const formData = ref<{
  contractNo: string;
  contractName: string;
  disclosureType: string;
  disclosureTypeName: string;
  sort: number;
  sortColumn: string;
  page: number;
  pageDataCount: number;
}>({
  contractNo: "",
  contractName: "",
  disclosureType: "",
  disclosureTypeName: "",
  page: 1,
  pageDataCount: 10,
  sort: 1,
  sortColumn: "seqNo",
});

/**
 *新增資料
 */
const addFormData = ref<{
  action: string;
  seqNo: number | undefined;
  contractNo: string;
  disclosureType: string;
  questionId: string;
  questionContent: string;
  questionContentSuffix?: string;
  questionLevel: number;
  questionParentId?: string;
  questionLevelOrder: number;
  answerType: string;
  answerContent?: string;
  answerRequired: string;
  answerRequiredEffect?: string;
  diseaseRequiredCond?: string;
  questionNo?: string;
}>({
  action: "INSERT",
  seqNo: undefined,
  contractNo: "",
  disclosureType: "",
  questionId: "",
  questionContent: "",
  questionContentSuffix: "",
  questionLevel: 1,
  questionParentId: "",
  questionLevelOrder: 1,
  answerType: "",
  answerContent: "",
  answerRequired: "N",
  answerRequiredEffect: "",
  diseaseRequiredCond: "",
  questionNo: "",
});

/**
 * vee-velidate 驗證
 */
const schema = {
  contractNo: (value: string) => {
    if (!value) {
      return COMMON_WORD.VALIDATE_IS_REQUIRED;
    } else {
      return true;
    }
  },
  disclosureType: (value: string) => {
    if (!value) {
      return COMMON_WORD.VALIDATE_IS_REQUIRED;
    } else {
      return true;
    }
  },
  questionId: (value: string) => {
    if (!value) {
      return COMMON_WORD.VALIDATE_IS_REQUIRED;
    } else if (value.length > 50) {
      return COMMON_WORD.VALIDATE_MAX_LENGTH(50);
    } else {
      return true;
    }
  },
  questionContent: (value: string) => {
    if (!value) {
      return COMMON_WORD.VALIDATE_IS_REQUIRED;
    } else {
      return true;
    }
  },
  questionContentSuffix: (value: string) => {
    if (value?.length > 300) {
      return COMMON_WORD.VALIDATE_MAX_LENGTH(300);
    } else {
      return true;
    }
  },
  questionLevelOrder: (value: number) => {
    if (!value) {
      return COMMON_WORD.VALIDATE_IS_REQUIRED;
    } else if (value < 1 || value > 99) {
      return COMMON_WORD.VALIDATE_NUMBER_RANGE(1, 99);
    } else {
      return true;
    }
  },
  answerType: (value: string) => {
    if (!value) {
      return COMMON_WORD.VALIDATE_IS_REQUIRED;
    } else {
      return true;
    }
  },
  answerContent: (value: string) => {
    if (value?.length > 1000) {
      return COMMON_WORD.VALIDATE_MAX_LENGTH(1000);
    } else {
      return true;
    }
  },
  answerRequiredEffect: (value: string) => {
    if (value?.length > 1000) {
      return COMMON_WORD.VALIDATE_MAX_LENGTH(1000);
    } else {
      return true;
    }
  },
  diseaseRequiredCond: (value: string) => {
    if (value?.length > 100) {
      return COMMON_WORD.VALIDATE_MAX_LENGTH(100);
    } else {
      return true;
    }
  },
  questionNo: (value: string) => {
    if (value?.length > 100) {
      return COMMON_WORD.VALIDATE_MAX_LENGTH(100);
    } else {
      return true;
    }
  },
};

/**
 * 資料列表排序
 */
const sortMode = ref({
  questionId: null,
  questionParentId: null,
  questionContent: null,
  answerTypeName: null,
  questionLevel: null,
  questionLevelOrder: null,
});

const sortModeFunction = (field: string) => {
  if (sortMode.value[field] === "up") {
    sortMode.value[field] = "down";
    formData.value.sort = 1;
    formData.value.sortColumn = field;
  } else {
    sortMode.value[field] = "up";
    formData.value.sort = 0;
    formData.value.sortColumn = field;
  }
  doQueryJobDisclosureQuestion();
};

/**
 * 換頁
 */
const onTablePageChange = ($event: object) => {
  //console.log("$event", $event);
  formData.value.pageDataCount = $event["rows"];
  formData.value.page = $event["page"] + 1;
  doQueryJobDisclosureQuestion();
};

/**
 * 清除
 */
const clearAddFormData = () => {
  addFormData.value.action = "INSERT";
  addFormData.value.seqNo = undefined;
  addFormData.value.questionId = "";
  addFormData.value.questionContent = "";
  addFormData.value.questionContentSuffix = "";
  addFormData.value.questionLevel = 1;
  addFormData.value.questionParentId = "";
  addFormData.value.questionLevelOrder = 1;
  addFormData.value.answerType = "";
  addFormData.value.answerContent = "";
  addFormData.value.answerRequired = "N";
  addFormData.value.answerRequiredEffect = "";
  addFormData.value.diseaseRequiredCond = "";
  addFormData.value.questionNo = "";
};

/*
 ** 新增
 */
const addData = () => {
  clearAddFormData();
  addFormData.value = {
    ...addFormData.value,
    action: "INSERT",
    seqNo: undefined,
    contractNo: formData.value.contractNo,
    disclosureType: formData.value.disclosureType,
  };
  doGetJobDisclosureList();
  isAddModal.value = true;
};

const addDataSend = () => {
  isAddModal.value = false;
  doEditJobDisclosureQuestion();
};

const addDataClose = () => {
  isAddModal.value = false;
  clearAddFormData();
};

/*
 ** 編輯
 */
const goToEdit = (data: EditJobDisclosureQuestionReq) => {
  addFormData.value = {
    ...addFormData.value,
    ...data,
    action: "UPDATE",
    seqNo: data.seqNo,
    contractNo: formData.value.contractNo,
    disclosureType: formData.value.disclosureType,
  };
  doGetJobDisclosureList();
  isAddModal.value = true;
};

/**
 * 刪除
 */
const reqData = ref<{ seqNo: number | undefined }>({ seqNo: undefined });

const deleteData = (data: { seqNo: number | undefined }) => {
  isDeletModal.value = true;
  msg.value = "此動作將連帶子階層做刪除，請確認是否刪除此筆資料";
  reqData.value = {
    seqNo: data.seqNo,
  };
};

const changeIsDeleteVal = (value: boolean) => {
  isDeletModal.value = value;
};

/**
 * 回上頁
 */
const goBack = () => {
  router.push("/insurance/questionSetting");
  //router.back();
};

/**
 * F2504B002：查詢問卷題目設定 API
 */
const jobDisclosureQuestionList = ref<object[]>([]);
const doQueryJobDisclosureQuestion = async () => {
  queryJobDisclosureQuestion({
    ...formData.value,
    contractNo: router.currentRoute.value.params.contractNo,
    disclosureType: router.currentRoute.value.params.disclosureType,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      jobDisclosureQuestionList.value =
        response.data.body?.jobDisclosureQuestionList ?? [];
      dataCount.value = response.data.body?.dataCount ?? 0;
      //console.log("查詢問卷題目設定", jobDisclosureQuestionList.value);
      formData.value.contractNo = response.data.body["contractNo"];
      formData.value.contractName = response.data.body["contractName"];
      formData.value.disclosureTypeName =
        response.data.body["disclosureTypeName"];
      formData.value.disclosureType = response.data.body["disclosureType"];
    }
  });
};
doQueryJobDisclosureQuestion();

/**
 * F0000B013：查詢要保書主檔列表 API (下拉選單：要保書)
 */
const contractMainList = ref<ContractMainOnlyValueModel[]>([]);
const doGetContractMainList = async () => {
  getContractMainList({ type: "ALL" }).then((response) => {
    if (response?.status === 200 && response.data) {
      contractMainList.value = response.data.body?.contractMainList ?? [];
      contractMainList.value.unshift({
        channelId: "",
        contractNo: "ALL",
        contractName: "全要保書",
      });
    }
  });
};
doGetContractMainList();

/**
 * F0000B001：查詢功能頁定義主檔列表 API (下拉選單：問卷類型)
 */
const disclosureTypeList = ref<{ id: string; menuName: string }[]>([]);
const doGetMenuDefinitionList = async () => {
  getMenuDefinitionList({
    parentId: "JOB_DISCLOSURE",
    sortColumn: "LevelOrder",
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      disclosureTypeList.value = response.data.body.menuDefinitionList ?? [];
    }
  });
};
doGetMenuDefinitionList();

/**
 * F0000B021：查詢詢問事項列表 API (下拉選單：父階層)
 */
const jobDisclosureList = ref<{ questionParentId: string }[]>([]);
const doGetJobDisclosureList = async () => {
  getJobDisclosureList({
    channelId: "ALL",
    disclosureType: addFormData.value.disclosureType,
    questionLevel: addFormData.value.questionLevel,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      jobDisclosureList.value = response.data.body.questionParentList ?? [];
    }
  });
};

/**
 * F0000B003：查詢系統下拉參數檔列表 API
 * 下拉選單：題目順序
 * codeNo:'AnswerType'(問卷答案類型)
 */
const answerTypeList = ref<{ menuValue: string; menuText: string }[]>([]);
const doGetAnswerTypeList = async () => {
  getSystemParamList({ codeNo: SysCodeType.AnswerType }).then((response) => {
    if (response?.status === 200 && response.data) {
      answerTypeList.value =
        response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
    }
  });
};
doGetAnswerTypeList();

/**
 * F0000B003：查詢系統下拉參數檔列表 API
 * 下拉選單：必填
 * codeNo:'R251'(是否(bit))
 */
const yesOrNoList = ref<{ menuValue: string; menuText: string }[]>([]);
const doGetYesOrNoList = async () => {
  getSystemParamList({ codeNo: SysCodeType.R251 }).then((response) => {
    if (response?.status === 200 && response.data) {
      yesOrNoList.value = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
    }
  });
};
doGetYesOrNoList();

/**
 * F2504B003：編輯問卷題目設定 API
 */
const doEditJobDisclosureQuestion = async () => {
  const req = addFormData.value;
  editJobDisclosureQuestion(req).then((response) => {
    if (response?.status === 200 && response.data) {
      const { returnCode, returnDesc } = response.data.header;
      if (returnCode === MsgCodeType.SUCCESS) {
        toast.add({
          severity: "success",
          summary: COMMON_WORD.UPDATE_SUCCESS,
          detail: returnDesc,
          life: 3000,
        });
        doQueryJobDisclosureQuestion();
      } else {
        toast.add({
          severity: "error",
          summary: COMMON_WORD.ERROR,
          detail: returnDesc,
          life: 3000,
        });
      }
    } else {
      console.log(response);
    }
  });
};
</script>
<style scoped lang="scss">
.input-mb-0 {
  margin-bottom: 0 !important;
}
</style>
                                                                                                                                                                                                                                                                                                                                                                                                                                                         src/views/pages/insurance/QuestionSettingView.vue                                                   0100777 0000000 0000000 00000031773 14665752120 017572  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div class="grid p-fluid">
    <PrimeToast />
    <div class="col-12">
      <div class="card">
        <!-- 查詢欄位 -->
        <PrimePanel>
          <template #header>
            <div class="left-header">
              <span class="pi pi-search pr-2"></span>
              <span>問卷設定 查詢</span>
            </div>
          </template>
          <!-- 要保書名稱 & 問卷類型 -->
          <div class="grid formgrid">
            <div class="col-12 mb-3 lg:col-6 t-form-group">
              <label class="t-label col-12 lg:col-3">要保書名稱</label>
              <PrimeDropdown
                class="t-dropdown col-12 lg:col-9"
                v-model="formData.contractNo"
                :options="contractMainList"
                optionLabel="contractName"
                optionValue="contractNo"
                placeholder="全部"
              />
            </div>
            <div class="col-12 mb-3 lg:col-6 t-form-group">
              <label class="t-label col-12 lg:col-3">問卷類型</label>
              <PrimeDropdown
                class="t-dropdown col-12 lg:col-9"
                v-model="formData.disclosureType"
                :options="disclosureTypeList"
                optionLabel="menuName"
                optionValue="id"
              />
            </div>
          </div>
        </PrimePanel>

        <!-- 按鈕 - 清除 & 查詢-->
        <div class="btn-container text-center mb-4">
          <PrimeButton
            :label="COMMON_WORD.CLEAR"
            class="p-button-outlined mr-2 my-2 p-button-sm w-auto"
            icon="pi pi-sync"
            @click="doClearAndQuery"
          />
          <PrimeButton
            :label="COMMON_WORD.QUERY"
            icon="pi pi-search"
            class="mr-2 my-2 p-button-sm p-button-info w-auto"
            @click="doQueryJobDisclosure"
          />
        </div>

        <!-- 資料列表 -->
        <PrimeDataTable
          :lazy="true"
          :showGridlines="true"
          :paginator="true"
          :value="jobDisclosureList"
          class="p-datatable-customers"
          :rows="formData.pageDataCount"
          :totalRecords="dataCount"
          dataKey="id"
          :sortOrder="formData.sort"
          paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
          :rowsPerPageOptions="[10, 50, 100]"
          currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
          responsiveLayout="scroll"
          @page="onTablePageChange($event)"
        >
          <template #header>
            <div class="">
              <i class="pi pi-table" />
              <span class="mx-2">問卷設定 查詢結果</span>
            </div>
          </template>
          <template #empty> {{ COMMON_WORD.EMPTY }} </template>
          <template #loading> {{ COMMON_WORD.LOADING }} </template>

          <PrimeColumn header="動作" style="width: 180px">
            <template #body="{ data }">
              <div class="text-center flex">
                <PrimeButton
                  :class="{
                    'w-6': data.contractNo === 'ALL',
                    'mx-6': data.contractNo === 'ALL',
                  }"
                  :label="COMMON_WORD.EDIT"
                  icon="pi pi-pencil"
                  class="mr-2 p-button-sm p-button-outlined"
                  @click="goToEdit(data)"
                />
                <PrimeButton
                  :class="{
                    hidden: data.contractNo === 'ALL',
                  }"
                  :label="COMMON_WORD.DELETE"
                  icon="pi pi-trash"
                  class="mr-2 p-button-sm"
                  @click="deleteData(data)"
                />
              </div>
            </template>
          </PrimeColumn>

          <!-- 要保書代號 -->
          <PrimeColumn field="contractNo" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('contractNo')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>要保書代號</span>
                <span
                  v-if="sortMode.contractNo === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.contractNo === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.contractNo }} </span>
            </template>
          </PrimeColumn>

          <!-- 要保書名稱 -->
          <PrimeColumn field="contractName" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('contractName')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>要保書名稱</span>
                <span
                  v-if="sortMode.contractName === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.contractName === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.contractName }} </span>
            </template>
          </PrimeColumn>

          <!-- 問卷類型 -->
          <PrimeColumn field="disclosureTypeName" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('disclosureTypeName')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>問卷類型</span>
                <span
                  v-if="sortMode.disclosureTypeName === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.disclosureTypeName === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.disclosureTypeName }} </span>
            </template>
          </PrimeColumn>

          <!-- 已設定 -->
          <PrimeColumn field="isSetting" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('isSetting')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>已設定</span>
                <span
                  v-if="sortMode.isSetting === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.isSetting === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.isSetting }} </span>
            </template>
          </PrimeColumn>
        </PrimeDataTable>

        <!-- 刪除彈窗 -->
        <DeleteModal
          :isDeleteModal="isDeletModal"
          :reqData="reqData"
          :deleteDataFun="deleteJobDisclosure"
          @changeIsDeleteVal="changeIsDeleteVal"
          @getList="doQueryJobDisclosure"
        ></DeleteModal>
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref } from "vue";
import {
  getMenuDefinitionList,
  getContractMainList,
} from "@/api/shared-settings-service";
import * as COMMON_WORD from "@/constants/common-word";
import {
  queryJobDisclosure,
  deleteJobDisclosure,
} from "@/api/question-setting-service";
import { useRouter } from "vue-router";
import type { ContractMainOnlyValueModel } from "@/models/contract-main-only-value-model";

const dataCount = ref<number>(0);
const isDeletModal = ref<boolean>(false);
const msg = ref<string>("");
const router = useRouter();

/**
 * 搜尋條件
 */
const formData = ref<{
  contractNo?: string;
  disclosureType: string;
  page: number;
  pageDataCount: number;
  sort: number;
  sortColumn: string;
}>({
  contractNo: "",
  disclosureType: "",
  page: 1,
  pageDataCount: 10,
  sort: 0,
  sortColumn: "",
});

/**
 * 資料列表排序
 */
const sortMode = ref({
  contractNo: null,
  contractName: null,
  disclosureTypeName: null,
  isSetting: null,
});

const sortModeFunction = (field: string) => {
  if (sortMode.value[field] === "up") {
    sortMode.value[field] = "down";
    formData.value.sort = 1;
    formData.value.sortColumn = field;
  } else {
    sortMode.value[field] = "up";
    formData.value.sort = 0;
    formData.value.sortColumn = field;
  }
  doQueryJobDisclosure();
};

/**
 * 清除
 */
const clearFormData = () => {
  formData.value.contractNo = "";
  formData.value.disclosureType = disclosureTypeList.value[0].id;
};

/**
 * 清除 + 查詢
 */
const doClearAndQuery = () => {
  clearFormData();
  doQueryJobDisclosure();
};

/**
 * 換頁
 */
const onTablePageChange = ($event: object) => {
  //console.log("$event", $event);
  formData.value.pageDataCount = $event["rows"];
  formData.value.page = $event["page"] + 1;
  doQueryJobDisclosure();
};

/**
 * 編輯
 */
const goToEdit = (data: { contractNo: string; disclosureType: string }) => {
  const contractNo = data.contractNo;
  const disclosureType = data.disclosureType;
  router.push(
    `/insurance/questionSetting/edit/${contractNo}&${disclosureType}`
  );
};

/**
 * 刪除
 */
const reqData = ref<{ contractNo: string; disclosureType: string }>({
  contractNo: "",
  disclosureType: "",
});

const deleteData = (data: { contractNo: string; disclosureType: string }) => {
  //console.log("刪除data", data);
  isDeletModal.value = true;
  msg.value = COMMON_WORD.CONFIRM_DELETION;
  reqData.value = {
    contractNo: data.contractNo,
    disclosureType: data.disclosureType,
  };
};

const changeIsDeleteVal = (value: boolean) => {
  isDeletModal.value = value;
};

/**
 * F0000B013：查詢要保書主檔列表 API
 */
const contractMainList = ref<ContractMainOnlyValueModel[]>([]);
const doGetContractMainList = async () => {
  getContractMainList({ type: "ALL" }).then((response) => {
    if (response?.status === 200 && response.data) {
      contractMainList.value = response.data.body?.contractMainList ?? [];
      contractMainList.value.unshift({
        channelId: "",
        contractNo: "ALL",
        contractName: "全要保書",
      });
      //console.log("要保書主檔列表contractMainList", contractMainList.value);
    }
  });
};
doGetContractMainList();

/**
 * F0000B001：查詢功能頁定義主檔列表 API (下拉選單：問卷類型)
 */
const disclosureTypeList = ref<{ id: string; menuName: string }[]>([]);
const doGetMenuDefinitionList = async () => {
  getMenuDefinitionList({
    parentId: "JOB_DISCLOSURE",
    sortColumn: "LevelOrder",
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      disclosureTypeList.value = response.data.body?.menuDefinitionList ?? [];
      formData.value.disclosureType =
        response.data.body?.menuDefinitionList[0]?.id;
      doQueryJobDisclosure();
    }
  });
};
doGetMenuDefinitionList();

/**
 * F2504B001：查詢問卷設定 API
 */
const jobDisclosureList = ref<object[]>([]);
const doQueryJobDisclosure = async () => {
  queryJobDisclosure({
    ...formData.value,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      jobDisclosureList.value = response.data.body?.jobDisclosureList ?? [];
      dataCount.value = response.data.body?.dataCount ?? 0;
      //console.log("查詢問卷設定", jobDisclosureList.value);
    }
  });
};
</script>
     src/views/pages/LoginView.vue                                                                       0100777 0000000 0000000 00000010503 14666224722 013475  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div class="grid p-fluid">
    <div class="col-12">
      <div class="card col-12 sm:col-4 lg:col-4">
        <PrimePanel header="登入">
          <Form :validation-schema="loginSchema" @submit="login">
            <div class="field">
              <Field
                name="account"
                v-slot="{ field, errorMessage }"
                v-model="viewData.account"
              >
                <label class="t-label col-12 lg:col-2">帳號</label>
                <div class="col-12 lg:col-10 p-0">
                  <PrimeInputText
                    v-bind="field"
                    type="account"
                    :class="{ 'p-invalid': errorMessage }"
                  />
                  <small class="p-error">{{ errorMessage }}</small>
                </div>
              </Field>
            </div>
            <div class="field">
              <Field
                name="password"
                v-slot="{ field, errorMessage }"
                v-model="viewData.password"
              >
                <label class="t-label col-12 lg:col-2">密碼</label>
                <div class="col-12 lg:col-10 p-0">
                  <PrimeInputText
                    v-bind="field"
                    type="password"
                    :class="{ 'p-invalid': errorMessage }"
                  />
                  <small class="p-error">{{ errorMessage }}</small>
                </div>
              </Field>
            </div>
            <div class="field">
              <span class="col-12 lg:col-1">
                <PrimeButton
                  class="mr-2 my-2 p-button-sm p-button-info w-auto"
                  type="submit"
                  >登入</PrimeButton
                >
              </span>
              <span class="col-12 lg:col-1">
                <PrimeInlineMessage v-if="errMsg">{{
                  errMsg
                }}</PrimeInlineMessage>
              </span>
            </div>
          </Form>
        </PrimePanel>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import * as COMMON_WORD from "@/constants/common-word";
import { Field, Form } from "vee-validate";
import * as yup from "yup";
import { reactive, ref } from "vue";
import { getLogin } from "@/api/login-service";
import { STORAGE_KEY } from "@/constants";
import { useStorage } from "@vueuse/core";
import { useRouter } from "vue-router";
import { useMsgContentStore } from "@/stores/msgContent";
import { useApplicationStore } from "@/stores/application";
import { getMesgContent } from "@/utils/msg-content-helper";
import { MsgCodeType } from "@/enums/msg-code-type";

const msgContentStore = useMsgContentStore();
const token = useStorage(STORAGE_KEY.token, "", sessionStorage);
const userName = useStorage(STORAGE_KEY.userName, "", sessionStorage);
const router = useRouter();
const applicationStore = useApplicationStore();

const emit = defineEmits(["getFunctionCodeList"]);

const errMsg = ref<string>("");

const viewData = reactive<{
  account: string;
  password: string;
}>({
  account: "",
  password: "",
});

/**
 * 欄位檢核
 */
const loginSchema = yup.object({
  account: yup
    .string()
    .max(20, COMMON_WORD.VALIDATE_MAX_LENGTH(20))
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED),
  password: yup
    .string()
    .max(40, COMMON_WORD.VALIDATE_MAX_LENGTH(40))
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED),
});

const login = () => {
  errMsg.value = "";

  if (viewData.account.length === 0 || viewData.password.length === 0) {
    errMsg.value = getMesgContent(MsgCodeType.ACCOUNT_PASSWORD_NOT_EMPTY);
    return;
  }

  getLogin({
    ...viewData,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      applicationStore.resetTokenAlert();
      if (response.data.header.returnCode === MsgCodeType.SUCCESS) {
        token.value = response.data.body.token;
        userName.value = response.data.body.userName;
        // 初始化錯誤訊息列表資料
        msgContentStore.initMsgContentList();
        router.push({
          name: "home",
        });
        emit("getFunctionCodeList", response.data.body.functionCodeList);
      } else {
        errMsg.value = response.data.header.returnDesc;
      }
    }
  });
};
</script>
                                                                                                                                                                                             src/views/pages/msg/                                                                                0040777 0000000 0000000 00000000000 14665752120 011635  5                                                                                                    ustar 00                                                                                                                                                                                                                                                       src/views/pages/msg/MsgClassSettingEditView.vue                                                     0100777 0000000 0000000 00000023400 14665752120 017070  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <div class="grid p-fluid">
      <div class="col-12">
        <div class="card">
          <Form :validation-schema="schema" @submit="saveMsgSystem">
            <PrimePanel>
              <template #header>
                <div class="left-header">
                  <span class="pi pi-search"></span>
                  <span> 訊息分類維護 新增/編輯</span>
                </div>
              </template>
              <div class="col-12 my-2 lg:col-11 t-form-group">
                <label class="t-label col-12 lg:col-2" for="">系統別</label>
                <PrimeDropdown
                  :disabled="Boolean(seqNo)"
                  class="t-dropdown lg:col-6"
                  v-model="msgClass.systemId"
                  :options="dropdownMsgSystemList"
                  optionLabel="name"
                  optionValue="id"
                  :filter="true"
                  placeholder="全部"
                />
              </div>
              <div class="col-12 my-2 lg:col-11 t-form-group">
                <label class="t-label col-12 lg:col-2">訊息分類代碼</label>
                <PrimeDropdown
                  :disabled="Boolean(seqNo)"
                  class="t-dropdown lg:col-10"
                  v-model="msgClass.class1Id"
                  :options="dropdownMsgClassList"
                  optionLabel="menuFullName"
                  optionValue="menuValue"
                  :filter="true"
                />
              </div>
              <Field
                name="class2Id"
                v-slot="{ field, errorMessage }"
                v-model="msgClass.class2Id"
              >
                <div class="col-12 my-2 lg:col-11 t-form-group">
                  <label class="t-label col-12 lg:col-2" for=""
                    >訊息次分類代碼</label
                  >
                  <div class="col-12 lg:col-6 p-0">
                    <PrimeInputText
                      :disabled="Boolean(seqNo)"
                      v-bind="field"
                      :class="{
                        'p-invalid': errorMessage,
                        'lg:mt-3': errorMessage,
                      }"
                      type="text"
                    />
                    <small id="class2Id" class="p-error">{{
                      errorMessage
                    }}</small>
                  </div>
                </div>
              </Field>
              <Field
                name="class2Name"
                v-slot="{ field, errorMessage }"
                v-model="msgClass.class2Name"
              >
                <div class="col-12 my-2 lg:col-11 t-form-group">
                  <label class="t-label col-12 lg:col-2" for=""
                    >訊息次分類名稱</label
                  >
                  <div class="col-12 lg:col-10 p-0">
                    <PrimeInputText
                      v-bind="field"
                      :class="{
                        'p-invalid': errorMessage,
                        'lg:mt-3': errorMessage,
                      }"
                      type="text"
                    />
                    <small id="class2Name" class="p-error">{{
                      errorMessage
                    }}</small>
                  </div>
                </div>
              </Field>
              <Field
                v-slot="{ field, errorMessage }"
                v-model="msgClass.classDesc"
                name="classDesc"
              >
                <div
                  class="col-12 my-2 lg:col-11 t-form-group align-items-start"
                >
                  <label class="t-label col-12 lg:col-2">訊息說明</label>
                  <div class="w-full">
                    <PrimeTextarea
                      rows="10"
                      cols="30"
                      :class="{
                        'p-invalid': errorMessage,
                      }"
                      v-bind="field"
                    />
                    <small id="classDesc" class="p-error">{{
                      errorMessage
                    }}</small>
                  </div>
                </div>
              </Field>
            </PrimePanel>
            <div class="btn-container text-center mb-4">
              <PrimeButton
                :label="COMMON_WORD.GO_BACK"
                class="p-button-outlined mr-2 my-2 p-button-sm w-auto"
                icon="pi pi-arrow-left"
                @click="goBack"
              />
              <PrimeButton
                :label="COMMON_WORD.SAVE"
                icon="pi pi-check"
                class="mr-2 my-2 p-button-sm p-button-info w-auto"
                type="submit"
              />
            </div>
          </Form>
        </div>
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref, watch } from "vue";
import { useRoute } from "vue-router";
import { useRouter } from "vue-router";
import { useToast } from "primevue/usetoast";
import { Field, Form } from "vee-validate";
import * as yup from "yup";
import { NUMBER_AND_ENGLISH_ONLY_REGEX } from "@/constants";
import * as COMMON_WORD from "@/constants/common-word";
import {
  queryMsgClassMain,
  addMsgClassMain,
  editMsgClassMain,
} from "@/api/msg-class-setting-service";
import {
  getMsgSystemList,
  getSystemParamList,
} from "@/api/shared-settings-service";
import type { MsgSystemModel } from "@/models/msg-system-model-dropdown";
import type { SystemMenuModel } from "@/models/system-menu-model";
import { MsgCodeType } from "@/enums/msg-code-type";
import { SysCodeType } from "@/enums/sys-code-type";
import { useToastStore } from "@/stores/toast";

const route = useRoute();
const router = useRouter();
const toast = useToast();
const toastStore = useToastStore();

/**
 * 取得錯誤訊息
 */
const schema = yup.object({
  class2Id: yup
    .string()
    .matches(
      NUMBER_AND_ENGLISH_ONLY_REGEX,
      COMMON_WORD.VALIDATE_ENGLISH_OR_NUMBER
    )
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .max(20, COMMON_WORD.VALIDATE_MAX_LENGTH(20)),
  class2Name: yup
    .string()
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .max(100, COMMON_WORD.VALIDATE_MAX_LENGTH(100)),
  classDesc: yup
    .string()
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .max(500, COMMON_WORD.VALIDATE_MAX_LENGTH(500)),
});

const seqNo =
  typeof route.params.seqNo === "string" ? Number(route.params.seqNo) : null;

const msgClass = ref({
  seqNo: Infinity,
  systemId: "",
  class1Id: "",
  className: "",
  class2Id: "",
  class2Name: "",
  classDesc: "",
});

const dropdownMsgSystemList = ref<Array<MsgSystemModel>>([]);

/**
 * F0000B022：查詢訊息系統別主檔列表
 */
const dropdownGetMsgSystemList = (): void => {
  getMsgSystemList()
    .then((res) => {
      if (res?.status === 200 && res.data) {
        dropdownMsgSystemList.value = res.data.body?.msgSystemList;
        msgClass.value.systemId = dropdownMsgSystemList.value[0].id;
      }
    })
    .catch((err) => {
      console.log(err);
    });
};
dropdownGetMsgSystemList();

const dropdownMsgClassList = ref<Array<SystemMenuModel>>([]);
/**
 * 取得訊息分類代碼dropdown
 * F0000B003：查詢系統下拉參數檔列表 API
 * codeNo:'R245'
 */
const getMsgClassList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R245,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      const MsgClassListAddFullName =
        response.data.body?.sysCodeList[0]?.sysMenuList.map((ele) => {
          return { ...ele, menuFullName: ele.menuValue + "-" + ele.menuText };
        }) ?? [];
      dropdownMsgClassList.value = MsgClassListAddFullName;
      msgClass.value.class1Id = dropdownMsgClassList.value[0].menuValue;
    }
  });
};
getMsgClassList();

/**
 * 如果訊息分類代碼有變動，訊息分類名稱也要跟著變動且加入request(msgClass)
 */
watch(
  () => msgClass.value.class1Id,
  (newVal) => {
    const result = dropdownMsgClassList.value.find(
      (item) => item.menuValue === newVal
    );
    if (result) {
      msgClass.value.className = result.menuText;
    }
  }
);

/**
 * F2A01B002：查詢訊息系統別資料
 */
const getQueryMsgSystem = (): void => {
  const req = typeof seqNo === "number" ? { seqNo: seqNo } : null;
  req &&
    queryMsgClassMain(req)
      .then((res) => {
        if (res?.status === 200 && res.data) {
          msgClass.value = res.data.body ?? {};
        }
      })
      .catch((err) => {
        console.log(err);
      });
};
seqNo && getQueryMsgSystem();

/**
 * 儲存訊息分類－F2A02B003：新增訊息分類資料＆F2A02B004：修改訊息分類資料
 */
const saveMsgSystem = () => {
  const req = msgClass.value;
  const saveFunction = seqNo ? editMsgClassMain : addMsgClassMain;
  saveFunction(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        const { returnCode, returnDesc } = res.data.header;
        if (returnCode === MsgCodeType.SUCCESS) {
          toastStore.showToast(
            "success",
            COMMON_WORD.UPDATE_SUCCESS,
            returnDesc
          );
          goBack();
        } else {
          toast.add({
            severity: "error",
            summary: COMMON_WORD.ERROR,
            detail: returnDesc,
            life: 3000,
          });
        }
      }
    })
    .catch((err) => {
      console.log(err);
    });
};

const goBack = () => {
  router.push({
    name: "msgClassSetting",
  });
};
</script>

<style lang="scss" scoped>
.border-top-gray {
  border-top: 1px solid #e5e5e5;
}
</style>
                                                                                                                                                                                                                                                                src/views/pages/msg/MsgClassSettingView.vue                                                         0100777 0000000 0000000 00000040337 14665752120 016272  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <div class="grid p-fluid">
      <div class="col-12">
        <div class="card">
          <PrimePanel>
            <template #header>
              <div class="left-header">
                <span class="pi pi-search mr-2"></span>
                <span>訊息分類檔維護 {{ COMMON_WORD.QUERY }}</span>
              </div>
            </template>
            <div class="grid formgrid">
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3" for="">系統別</label>
                <PrimeDropdown
                  class="t-dropdown lg:col-9"
                  v-model="searchData.systemId"
                  :options="dropdownMsgSystemList"
                  optionLabel="name"
                  optionValue="id"
                  :filter="true"
                  placeholder="全部"
                />
              </div>
              <div class="col-12 mb-3 lg:col-6 t-form-group"></div>
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3" for=""
                  >訊息分類名稱</label
                >
                <PrimeInputText v-model="searchData.className" type="text" />
              </div>
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3" for=""
                  >訊息分類代碼</label
                >
                <PrimeInputText v-model="searchData.class1Id" type="text" />
              </div>
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3" for=""
                  >訊息次分類名稱</label
                >
                <PrimeInputText v-model="searchData.class2Name" type="text" />
              </div>
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3" for=""
                  >訊息次分類代碼</label
                >
                <PrimeInputText v-model="searchData.class2Id" type="text" />
              </div>
            </div>
          </PrimePanel>
          <div class="btn-container text-center mb-4">
            <PrimeButton
              :label="COMMON_WORD.CLEAR"
              class="p-button-outlined mr-2 my-2 p-button-sm w-auto"
              icon="pi pi-sync"
              @click="clear()"
            />
            <PrimeButton
              :label="COMMON_WORD.QUERY"
              icon="pi pi-search"
              class="mr-2 my-2 p-button-sm p-button-info w-auto"
              @click="getQueryMsgClassMainList"
            />
          </div>

          <div class="btn-containermb-4">
            <PrimeButton
              :label="COMMON_WORD.ADD"
              class="mr-2 my-2 p-button-sm p-button-info w-auto"
              icon="pi pi-plus"
              @click="goToEdit('add')"
            />
          </div>
          <PrimeDataTable
            :lazy="true"
            :showGridlines="true"
            :value="msgClassMainList"
            :paginator="true"
            class="p-datatable-customers"
            :rows="searchData.pageDataCount"
            :totalRecords="dataCount"
            dataKey="id"
            :sortOrder="searchData.sort"
            paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
            :rowsPerPageOptions="[10, 50, 100]"
            currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
            responsiveLayout="scroll"
            @page="onTablePageChange($event)"
          >
            <template #header>
              <div class="">
                <i class="pi pi-table" />
                <span class="mx-2">訊息分類檔維護 資料列表</span>
              </div>
            </template>
            <template #empty> {{ COMMON_WORD.EMPTY }} </template>
            <template #loading> {{ COMMON_WORD.LOADING }} </template>
            <PrimeColumn header="動作" style="width: 180px; min-width: 180px">
              <template #body="{ data }">
                <div class="text-center flex">
                  <PrimeButton
                    :label="COMMON_WORD.EDIT"
                    icon="pi pi-pencil"
                    class="p-button-outlined mr-2 p-button-sm"
                    @click="goToEdit('edit', data)"
                  >
                  </PrimeButton>
                  <PrimeButton
                    :label="COMMON_WORD.DELETE"
                    icon="pi pi-trash"
                    class="mr-2 p-button-sm"
                    @click="deleteData(data)"
                  />
                </div>
              </template>
            </PrimeColumn>
            <PrimeColumn field="systemId" style="min-width: 100px">
              <template #header>
                <div
                  @click="sortModeFunction('systemId')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>系統別</span>
                  <span
                    v-if="sortMode.systemId === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.systemId === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge">{{
                  slotProps.data.systemName
                }}</span>
              </template>
            </PrimeColumn>
            <PrimeColumn field="class1Id" style="min-width: 100px">
              <template #header>
                <div
                  @click="sortModeFunction('class1Id')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>訊息分類代碼</span>
                  <span
                    v-if="sortMode.class1Id === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.class1Id === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge">{{
                  slotProps.data.class1Id
                }}</span>
              </template>
            </PrimeColumn>
            <PrimeColumn field="className" style="min-width: 100px">
              <template #header>
                <div
                  @click="sortModeFunction('className')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>訊息分類名稱</span>
                  <span
                    v-if="sortMode.className === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.className === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge">{{
                  slotProps.data.className
                }}</span>
              </template>
            </PrimeColumn>
            <PrimeColumn field="class2Id" style="min-width: 100px">
              <template #header>
                <div
                  @click="sortModeFunction('class2Id')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>訊息次分類代碼</span>
                  <span
                    v-if="sortMode.class2Id === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.class2Id === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge">{{
                  slotProps.data.class2Id
                }}</span>
              </template>
            </PrimeColumn>
            <PrimeColumn field="class2Name" style="min-width: 100px">
              <template #header>
                <div
                  @click="sortModeFunction('class2Name')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>訊息次分類名稱</span>
                  <span
                    v-if="sortMode.class2Name === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.class2Name === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge">{{
                  slotProps.data.class2Name
                }}</span>
              </template>
            </PrimeColumn>
            <PrimeColumn field="classDesc" style="min-width: 100px">
              <template #header>
                <div
                  @click="sortModeFunction('classDesc')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>訊息說明</span>
                  <span
                    v-if="sortMode.classDesc === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.classDesc === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge">{{
                  slotProps.data.classDesc
                }}</span>
              </template>
            </PrimeColumn>
          </PrimeDataTable>
        </div>
      </div>
    </div>
    <!-- 刪除彈窗 -->
    <DeleteModal
      :isDeleteModal="isMsgModal"
      :reqData="deleteReq"
      :deleteDataFun="deleteMsgClassMain"
      @changeIsDeleteVal="changeIsDeleteVal"
      @getList="getQueryMsgClassMainList"
    ></DeleteModal>
  </div>
</template>
<script setup lang="ts">
import { ref, onMounted } from "vue";
import { useRouter } from "vue-router";
import { useToast } from "primevue/usetoast";
import {
  queryMsgClassMainList,
  deleteMsgClassMain,
} from "@/api/msg-class-setting-service";
import { getMsgSystemList } from "@/api/shared-settings-service";
import type { MsgSystemModel } from "@/models/msg-system-model-dropdown";
import type { MsgClassMainModel } from "@/models/msg-class-main-model";
import * as COMMON_WORD from "@/constants/common-word";
import { useToastStore } from "@/stores/toast";

const router = useRouter();
const toast = useToast();
const toastStore = useToastStore();

onMounted(() =>
  setTimeout(() => {
    toastStore.toastStatus &&
      toast.add({
        severity: toastStore.severity,
        summary: toastStore.summary,
        detail: toastStore.detail,
        life: 3000,
      });
    toastStore.toastStatus = false;
  }, 50)
);

// 搜尋條件
const searchData = ref<{
  page: number;
  pageDataCount: number;
  sort: number;
  sortColumn: string;
  systemId: string;
  class1Id: string;
  className: string;
  class2Id: string;
  class2Name: string;
}>({
  page: 1,
  pageDataCount: 10,
  sort: 0,
  sortColumn: "",
  systemId: "",
  class1Id: "",
  className: "",
  class2Id: "",
  class2Name: "",
});

const dropdownMsgSystemList = ref<Array<MsgSystemModel>>([]);

/**
 * F0000B022：查詢訊息系統別主檔列表
 */
const dropdownGetMsgSystemList = (): void => {
  getMsgSystemList()
    .then((res) => {
      if (res?.status === 200 && res.data) {
        const responseMsgSystemList = res.data.body?.msgSystemList;
        dropdownMsgSystemList.value =
          [
            {
              seqNo: -1,
              id: "",
              name: "全部",
            },
            ...responseMsgSystemList,
          ] ?? [];
      }
    })
    .catch((err) => {
      console.log(err);
    });
};
dropdownGetMsgSystemList();

/**
 * 訊息系統別列表
 */
const msgClassMainList = ref<Array<MsgClassMainModel>>([]);

const dataCount = ref<number>(0);

// DataTable排序
const sortMode = ref({
  systemId: null,
  class1Id: null,
  className: null,
  class2Id: null,
  class2Name: null,
  classDesc: null,
});

const sortModeFunction = (field: string) => {
  if (sortMode.value[field] === "up") {
    sortMode.value[field] = "down";
    searchData.value.sort = 1;
    searchData.value.sortColumn = field;
  } else {
    sortMode.value[field] = "up";
    searchData.value.sort = 0;
    searchData.value.sortColumn = field;
  }
  getQueryMsgClassMainList();
};

/**
 * F2A01B001：查詢訊息系統別列表資料
 */
const getQueryMsgClassMainList = (): void => {
  const req = searchData.value;
  queryMsgClassMainList(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        msgClassMainList.value = res.data.body?.msgClassMainList ?? [];
        dataCount.value = res.data.body?.dataCount ?? 0;
      }
    })
    .catch((err) => {
      console.log(err);
    });
};
getQueryMsgClassMainList();

const isMsgModal = ref(false);
const msg = ref("");
const deleteReq = ref();

const deleteData = (data: { seqNo: number }) => {
  isMsgModal.value = true;
  msg.value = COMMON_WORD.CONFIRM_DELETION;
  deleteReq.value = { seqNo: data.seqNo };
};

interface Event {
  rows: number;
  page: number;
}
const onTablePageChange = ($event: Event): void => {
  searchData.value.pageDataCount = $event.rows;
  searchData.value.page = $event.page + 1;
  getQueryMsgClassMainList();
};

const goToEdit = (type: string, data?: { seqNo: number }): void => {
  type === "edit" && data
    ? router.push({
        name: "msgClassSetting-edit",
        params: {
          seqNo: data.seqNo,
        },
      })
    : router.push({
        name: "msgClassSetting-add",
      });
};

const clear = () => {
  searchData.value.systemId = "";
  searchData.value.class1Id = "";
  searchData.value.className = "";
  searchData.value.class2Id = "";
  searchData.value.class2Name = "";
  getQueryMsgClassMainList();
};

const changeIsDeleteVal = (value: boolean) => {
  isMsgModal.value = value;
};
</script>
                                                                                                                                                                                                                                                                                                 src/views/pages/msg/MsgContentSettingEditView.vue                                                   0100777 0000000 0000000 00000041133 14665752120 017440  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <div class="grid p-fluid">
      <div class="col-12">
        <div class="card">
          <Form :validation-schema="schema" @submit="saveMsgSystem">
            <PrimePanel>
              <template #header>
                <div class="left-header">
                  <span class="pi pi-search"></span>
                  <span> 訊息主檔 新增/編輯</span>
                </div>
              </template>
              <div class="grid formgrid">
                <div class="grid formgrid lg:col-11">
                  <div class="col-12 my-2 lg:col-6 t-form-group">
                    <label class="t-label col-12 lg:col-4" for="">系統別</label>
                    <PrimeDropdown
                      :disabled="Boolean(seqNo)"
                      class="t-dropdown lg:col-8"
                      v-model="msgContent.systemId"
                      :options="dropdownMsgSystemList"
                      optionLabel="name"
                      optionValue="id"
                      :filter="true"
                      placeholder="全部"
                    />
                  </div>
                  <div class="col-12 my-2 lg:col-6 t-form-group">
                    <label class="t-label col-12 lg:col-4" for=""
                      >通路別代碼</label
                    >
                    <PrimeDropdown
                      :disabled="Boolean(seqNo)"
                      class="t-dropdown lg:col-8"
                      v-model="msgContent.channelId"
                      :options="saleChannelListAddAll"
                      optionLabel="channelName"
                      optionValue="channelId"
                      :filter="true"
                      placeholder="全部"
                    />
                  </div>
                  <div class="col-12 my-2 lg:col-12 t-form-group">
                    <label class="t-label col-12 lg:col-2">訊息分類代碼</label>
                    <PrimeDropdown
                      :disabled="Boolean(seqNo)"
                      class="t-dropdown lg:col-10"
                      v-model="msgContent.class1Id"
                      :options="dropdownMsgClassList"
                      optionLabel="menuFullName"
                      optionValue="menuValue"
                      :filter="true"
                    />
                  </div>
                  <div class="col-12 my-2 lg:col-12 t-form-group">
                    <Field
                      name="class2Id"
                      v-slot="{ field, errorMessage, handleChange }"
                      v-model="msgContent.class2Id"
                    >
                      <label class="t-label col-12 lg:col-2" for=""
                        >訊息次分類代碼</label
                      >
                      <div class="col-12 lg:col-9 p-0">
                        <PrimeDropdown
                          :disabled="Boolean(seqNo)"
                          @update:modelValue="handleChange"
                          :model-value="field.value"
                          class="t-dropdown lg:col-10"
                          :class="{
                            'p-invalid': errorMessage,
                            'lg:mt-3': errorMessage,
                          }"
                          :options="dropdownMsgClassMainList"
                          optionLabel="class2FullName"
                          optionValue="class2Id"
                          :filter="true"
                        />
                        <small class="p-error">{{ errorMessage }}</small>
                      </div>
                    </Field>
                  </div>
                  <Field
                    name="msgCode"
                    v-slot="{ field, errorMessage }"
                    v-model="msgContent.msgCode"
                  >
                    <div class="col-12 my-2 lg:col-12 t-form-group">
                      <label class="t-label col-12 lg:col-2">訊息代碼</label>
                      <div class="col-12 lg:col-4 p-0">
                        <PrimeInputText
                          :disabled="Boolean(seqNo)"
                          v-bind="field"
                          :class="{
                            'p-invalid': errorMessage,
                            'lg:mt-3': errorMessage,
                          }"
                          type="text"
                        />
                        <small id="msgCode" class="p-error">{{
                          errorMessage
                        }}</small>
                      </div>
                    </div>
                  </Field>
                  <Field
                    v-slot="{ field, errorMessage }"
                    v-model="msgContent.content"
                    name="content"
                  >
                    <div
                      class="col-12 my-2 lg:col-12 t-form-group align-items-start"
                    >
                      <label class="t-label col-12 lg:col-2">訊息內容</label>
                      <div class="col-12 lg:col-10 p-0">
                        <PrimeInputText
                          v-bind="field"
                          :class="{
                            'p-invalid': errorMessage,
                            'lg:mt-3': errorMessage,
                          }"
                          type="text"
                        />
                        <small id="content" class="p-error">{{
                          errorMessage
                        }}</small>
                      </div>
                    </div>
                  </Field>
                  <Field
                    v-slot="{ field, errorMessage }"
                    v-model="msgContent.desc"
                    name="desc"
                  >
                    <div
                      class="col-12 my-2 lg:col-12 t-form-group align-items-start"
                    >
                      <label class="t-label col-12 lg:col-2">備註</label>
                      <div class="w-full">
                        <PrimeTextarea
                          rows="10"
                          cols="30"
                          :class="{
                            'p-invalid': errorMessage,
                          }"
                          v-bind="field"
                        />
                        <small id="desc" class="p-error">{{
                          errorMessage
                        }}</small>
                      </div>
                    </div>
                  </Field>
                  <Field
                    name="parameterQty"
                    v-slot="{ field, errorMessage }"
                    v-model="msgContent.parameterQty"
                  >
                    <div class="col-12 my-2 lg:col-12 t-form-group">
                      <label class="t-label col-12 lg:col-2">參數數量</label>
                      <div class="col-12 lg:col-4 p-0">
                        <PrimeInputText
                          v-bind="field"
                          :class="{
                            'p-invalid': errorMessage,
                            'lg:mt-3': errorMessage,
                          }"
                        />
                        <small id="parameterQty" class="p-error">{{
                          errorMessage
                        }}</small>
                      </div>
                    </div>
                  </Field>
                </div>
              </div>
            </PrimePanel>
            <div class="btn-container text-center mb-4">
              <PrimeButton
                :label="COMMON_WORD.GO_BACK"
                class="p-button-outlined mr-2 my-2 p-button-sm w-auto"
                icon="pi pi-arrow-left"
                @click="goBack"
              />
              <PrimeButton
                :label="COMMON_WORD.SAVE"
                icon="pi pi-check"
                class="mr-2 my-2 p-button-sm p-button-info w-auto"
                type="submit"
              />
            </div>
          </Form>
        </div>
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref, watch } from "vue";
import { useRoute } from "vue-router";
import { useRouter } from "vue-router";
import { useToast } from "primevue/usetoast";
import { Field, Form } from "vee-validate";
import { CANNOT_CONTAIN_CHINESE_REGEX, NUMBER_ONLY_REGEX } from "@/constants";
import * as COMMON_WORD from "@/constants/common-word";
import {
  queryMsgContentMain,
  addMsgContentMain,
  editMsgContentMain,
} from "@/api/msg-content-setting-service";
import {
  getMsgSystemList,
  getSystemParamList,
  getSaleChannelList,
  getMsgClassMainList,
} from "@/api/shared-settings-service";
import type { MsgSystemModel } from "@/models/msg-system-model-dropdown";
import type { SystemMenuModel } from "@/models/system-menu-model";
import type { MsgClassMainModel } from "@/models/msg-class-main-model-dropdown";
import { MsgCodeType } from "@/enums/msg-code-type";
import { SysCodeType } from "@/enums/sys-code-type";
import { useToastStore } from "@/stores/toast";

const route = useRoute();
const router = useRouter();
const toast = useToast();
const toastStore = useToastStore();

/**
 * 取得錯誤訊息
 */
const schema = {
  class2Id: (value: string) => {
    if (!value) {
      return COMMON_WORD.VALIDATE_IS_REQUIRED;
    } else {
      return true;
    }
  },
  msgCode: (value: string) => {
    if (!value) {
      return COMMON_WORD.VALIDATE_IS_REQUIRED;
    } else if (value.length > 20) {
      return COMMON_WORD.VALIDATE_MAX_LENGTH(20);
    } else if (!CANNOT_CONTAIN_CHINESE_REGEX.test(value)) {
      return COMMON_WORD.VALIDATE_CANNOT_WRITE_CHINESE;
    } else {
      return true;
    }
  },
  content: (value: string) => {
    if (!value) {
      return COMMON_WORD.VALIDATE_IS_REQUIRED;
    } else if (value.length > 1000) {
      return COMMON_WORD.VALIDATE_MAX_LENGTH(1000);
    } else {
      return true;
    }
  },
  desc: (value: string) => {
    if (value.length > 1000) {
      return COMMON_WORD.VALIDATE_MAX_LENGTH(1000);
    } else {
      return true;
    }
  },
  parameterQty: (value: string | number) => {
    if (value !== 0 && !value) {
      return COMMON_WORD.VALIDATE_IS_REQUIRED;
    } else if (typeof value === "string" && !NUMBER_ONLY_REGEX.test(value)) {
      return COMMON_WORD.VALIDATE_NUMBER;
    } else if (Number(value) > 99) {
      return COMMON_WORD.VALIDATE_NUMBER_RANGE(0, 99);
    } else if (Number(value) < 0) {
      return COMMON_WORD.VALIDATE_NUMBER_RANGE(0, 99);
    } else {
      return true;
    }
  },
};

const seqNo =
  typeof route.params.seqNo === "string" ? Number(route.params.seqNo) : null;

const msgContent = ref({
  seqNo: Infinity,
  systemId: "",
  class1Id: "",
  class2Id: "",
  channelId: "",
  msgCode: "",
  content: "",
  desc: "",
  parameterQty: 0,
});

const dropdownMsgSystemList = ref<Array<MsgSystemModel>>([]);

/**
 * F0000B022：查詢訊息系統別主檔列表
 */

const dropdownGetMsgSystemList = async (): Promise<void> => {
  try {
    const res = await getMsgSystemList();
    if (res?.status === 200 && res.data) {
      dropdownMsgSystemList.value = res.data.body?.msgSystemList;
      msgContent.value.systemId = dropdownMsgSystemList.value[0].id;
      await dropdownGetMsgClassMainList();
      seqNo && (await getQueryMsgSystem());
    }
  } catch (err) {
    console.log(err);
    throw err;
  }
};

/**
 * 取得通路別dropdown
 * F0000B011：查詢通路別列表 API
 */

const saleChannelListAddAll = ref<{ channelId: string; channelName: string }[]>(
  []
);
const saleChannelList = ref<{ channelId: string; channelName: string }[]>([]);
const doGetSaleChannelList = async () => {
  getSaleChannelList({ type: "ALL" }).then((response) => {
    if (response?.status === 200 && response.data) {
      saleChannelList.value = response.data.body?.saleChannelList ?? [];
      saleChannelListAddAll.value = [
        {
          channelId: "ALL",
          channelName: "全通路",
        },
        ...saleChannelList.value,
      ];
      msgContent.value.channelId = saleChannelListAddAll.value[0].channelId;
    }
  });
};
doGetSaleChannelList();

const dropdownMsgClassList = ref<Array<SystemMenuModel>>([]);
/**
 * 取得訊息分類代碼dropdown
 * F0000B003：查詢系統下拉參數檔列表 API
 * codeNo:'R245'
 */
const getMsgClassList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R245,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      const MsgClassListAddFullName =
        response.data.body?.sysCodeList[0]?.sysMenuList.map((ele) => {
          return { ...ele, menuFullName: ele.menuValue + "-" + ele.menuText };
        }) ?? [];
      dropdownMsgClassList.value = MsgClassListAddFullName;
      msgContent.value.class1Id = dropdownMsgClassList.value[0].menuValue;
    }
  });
};

getMsgClassList();

const rawDropdownMsgClassMainList = ref<Array<MsgClassMainModel>>([]);
const dropdownMsgClassMainList = ref<Array<MsgClassMainModel>>([]);

/**
 * 取得訊息次分類代碼dropdown
 * F0000B023：查詢訊息分類檔列表
 */
const dropdownGetMsgClassMainList = async (): Promise<void> => {
  try {
    const res = await getMsgClassMainList({
      systemId: msgContent.value.systemId,
    });
    if (res?.status === 200 && res.data) {
      const MsgClassListAddFullName =
        res.data.body.msgClassMainList.map((ele) => {
          return {
            ...ele,
            class2FullName: ele.class2Id + "-" + ele.class2Name,
          };
        }) ?? [];
      rawDropdownMsgClassMainList.value = MsgClassListAddFullName;
      dropdownMsgClassMainList.value = MsgClassListAddFullName;
      msgContent.value.class2Id =
        dropdownMsgClassMainList.value[0]?.class2Id ?? "";
    }
  } catch (err) {
    console.log(err);
    throw err;
  }
};

/**
 * F2A01B002：查詢訊息系統別資料
 */
const getQueryMsgSystem = async (): Promise<void> => {
  const req = typeof seqNo === "number" ? { seqNo: seqNo } : null;
  try {
    req &&
      queryMsgContentMain(req).then((res) => {
        if (res?.status === 200 && res.data) {
          msgContent.value = res.data.body ?? {};
        }
      });
  } catch (err) {
    console.log(err);
    throw err;
  }
};

/**
 * class1Id變動，篩出訊息次分類代碼相關資料的function
 */
const class1IdClass2IdHandler = () => {
  dropdownMsgClassMainList.value = rawDropdownMsgClassMainList.value.filter(
    (item) => item.class1Id === msgContent.value.class1Id
  );
  msgContent.value.class2Id = dropdownMsgClassMainList.value[0]?.class2Id ?? "";
};

// 系統別API回傳資料後再查F2A01B002
(async () => {
  await dropdownGetMsgSystemList();
  class1IdClass2IdHandler();
})();

// 如果系統別代碼有變動，訊息次分類代碼也要跟著變動且加入request(msgContent)
watch(
  () => msgContent.value.systemId,
  () => {
    msgContent.value.class2Id = "";
    (async () => {
      await dropdownGetMsgClassMainList();
      class1IdClass2IdHandler();
    })();
  }
);

// class1Id有變動，訊息次分類代碼的資料也要跟著變化且加入request(msgContent)
watch(
  () => msgContent.value.class1Id,
  () => {
    msgContent.value.class2Id = "";
    class1IdClass2IdHandler();
  }
);

/**
 * 儲存訊息主檔－F2A03B003：新增訊息主檔資料＆F2A03B004：修改訊息主檔資料
 */
const saveMsgSystem = () => {
  msgContent.value.parameterQty = Number(msgContent.value.parameterQty);
  const req = msgContent.value;
  const saveFunction = seqNo ? editMsgContentMain : addMsgContentMain;
  saveFunction(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        const { returnCode, returnDesc } = res.data.header;
        if (returnCode === MsgCodeType.SUCCESS) {
          toastStore.showToast(
            "success",
            COMMON_WORD.UPDATE_SUCCESS,
            returnDesc
          );
          goBack();
        } else {
          toast.add({
            severity: "error",
            summary: COMMON_WORD.ERROR,
            detail: returnDesc,
            life: 3000,
          });
        }
      }
    })
    .catch((err) => {
      console.log(err);
    });
};

const goBack = () => {
  router.push({
    name: "msgContentSetting",
  });
};
</script>

<style lang="scss" scoped>
.border-top-gray {
  border-top: 1px solid #e5e5e5;
}
</style>
                                                                                                                                                                                                                                                                                                                                                                                                                                     src/views/pages/msg/MsgContentSettingView.vue                                                       0100777 0000000 0000000 00000052560 14665752120 016640  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <div class="grid p-fluid">
      <div class="col-12">
        <div class="card">
          <PrimePanel>
            <template #header>
              <div class="left-header">
                <span class="pi pi-search mr-2"></span>
                <span>訊息主檔 {{ COMMON_WORD.QUERY }}</span>
              </div>
            </template>
            <div class="grid formgrid">
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3" for="">系統別</label>
                <PrimeDropdown
                  class="t-dropdown lg:col-9"
                  v-model="searchData.systemId"
                  :options="dropdownMsgSystemList"
                  optionLabel="name"
                  optionValue="id"
                  :filter="true"
                  placeholder="全部"
                />
              </div>
              <div class="col-12 mb-3 lg:col-6 t-form-group"></div>
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3" for=""
                  >訊息分類代碼</label
                >
                <PrimeDropdown
                  class="t-dropdown lg:col-9"
                  v-model="searchData.class1Id"
                  :options="dropdownMsgClassList"
                  optionLabel="menuFullName"
                  optionValue="menuValue"
                  :filter="true"
                  placeholder="全部"
                />
              </div>
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3" for="">通路別代碼</label>
                <PrimeDropdown
                  class="t-dropdown lg:col-9"
                  v-model="searchData.channelId"
                  :options="saleChannelListAddAll"
                  optionLabel="channelName"
                  optionValue="channelId"
                  :filter="true"
                  placeholder="全部"
                />
              </div>
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3" for=""
                  >訊息次分類代碼</label
                >
                <PrimeDropdown
                  class="t-dropdown lg:col-9"
                  v-model="searchData.class2Id"
                  :options="dropdownMsgClassMainList"
                  optionLabel="class2FullName"
                  optionValue="class2Id"
                  :filter="true"
                  placeholder="全部"
                />
              </div>
              <div class="col-12 mb-3 lg:col-6 t-form-group"></div>
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3" for="">訊息代號</label>
                <PrimeInputText v-model="searchData.msgCode" type="text" />
              </div>
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3" for="">訊息內容</label>
                <PrimeInputText v-model="searchData.content" type="text" />
              </div>
            </div>
          </PrimePanel>
          <div class="btn-container text-center mb-4">
            <PrimeButton
              :label="COMMON_WORD.CLEAR"
              class="p-button-outlined mr-2 my-2 p-button-sm w-auto"
              icon="pi pi-sync"
              @click="clear()"
            />
            <PrimeButton
              :label="COMMON_WORD.QUERY"
              icon="pi pi-search"
              class="mr-2 my-2 p-button-sm p-button-info w-auto"
              @click="getQueryMsgClassMainList"
            />
          </div>

          <div class="btn-containermb-4">
            <PrimeButton
              :label="COMMON_WORD.ADD"
              class="mr-2 my-2 p-button-sm p-button-info w-auto"
              icon="pi pi-plus"
              @click="goToEdit('add')"
            />
          </div>
          <PrimeDataTable
            :lazy="true"
            :showGridlines="true"
            :value="msgContentMainList"
            :paginator="true"
            class="p-datatable-customers"
            :rows="searchData.pageDataCount"
            :totalRecords="dataCount"
            dataKey="id"
            :sortOrder="searchData.sort"
            paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
            :rowsPerPageOptions="[10, 50, 100]"
            currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
            responsiveLayout="scroll"
            @page="onTablePageChange($event)"
          >
            <template #header>
              <div class="">
                <i class="pi pi-table" />
                <span class="mx-2">訊息主檔 資料列表</span>
              </div>
            </template>
            <template #empty> {{ COMMON_WORD.EMPTY }} </template>
            <template #loading> {{ COMMON_WORD.LOADING }} </template>
            <PrimeColumn header="動作" style="width: 180px; min-width: 180px">
              <template #body="{ data }">
                <div class="text-center flex">
                  <PrimeButton
                    :label="COMMON_WORD.EDIT"
                    icon="pi pi-pencil"
                    class="p-button-outlined mr-2 p-button-sm"
                    @click="goToEdit('edit', data)"
                  >
                  </PrimeButton>
                  <PrimeButton
                    :label="COMMON_WORD.DELETE"
                    icon="pi pi-trash"
                    class="mr-2 p-button-sm"
                    @click="deleteData(data)"
                  />
                </div>
              </template>
            </PrimeColumn>
            <PrimeColumn field="systemId" style="min-width: 100px">
              <template #header>
                <div
                  @click="sortModeFunction('systemId')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>系統別</span>
                  <span
                    v-if="sortMode.systemId === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.systemId === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge">{{
                  slotProps.data.systemName
                }}</span>
              </template>
            </PrimeColumn>
            <PrimeColumn field="class1Id" style="min-width: 100px">
              <template #header>
                <div
                  @click="sortModeFunction('class1Id')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>訊息分類代碼</span>
                  <span
                    v-if="sortMode.class1Id === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.class1Id === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge"
                  >{{ slotProps.data.class1Id }}-{{
                    slotProps.data.className
                  }}</span
                >
              </template>
            </PrimeColumn>
            <PrimeColumn field="class2Id" style="min-width: 100px">
              <template #header>
                <div
                  @click="sortModeFunction('class2Id')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>訊息次分類代碼</span>
                  <span
                    v-if="sortMode.class2Id === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.class2Id === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge"
                  >{{ slotProps.data.class2Id }}-{{
                    slotProps.data.class2Name
                  }}</span
                >
              </template>
            </PrimeColumn>
            <PrimeColumn field="channelId" style="min-width: 100px">
              <template #header>
                <div
                  @click="sortModeFunction('channelId')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>通路別代碼</span>
                  <span
                    v-if="sortMode.channelId === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.channelId === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge">{{
                  slotProps.data.channelName
                }}</span>
              </template>
            </PrimeColumn>
            <PrimeColumn field="msgCode" style="min-width: 100px">
              <template #header>
                <div
                  @click="sortModeFunction('msgCode')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>訊息代碼</span>
                  <span
                    v-if="sortMode.msgCode === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.msgCode === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge">{{ slotProps.data.msgCode }}</span>
              </template>
            </PrimeColumn>
            <PrimeColumn field="content" style="min-width: 100px">
              <template #header>
                <div
                  @click="sortModeFunction('content')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>訊息內容</span>
                  <span
                    v-if="sortMode.content === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.content === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge">{{ slotProps.data.content }}</span>
              </template>
            </PrimeColumn>
            <PrimeColumn field="parameterQty" style="min-width: 100px">
              <template #header>
                <div
                  @click="sortModeFunction('parameterQty')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>參數</span>
                  <span
                    v-if="sortMode.parameterQty === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.parameterQty === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge">{{
                  slotProps.data.parameterQty
                }}</span>
              </template>
            </PrimeColumn>
          </PrimeDataTable>
        </div>
      </div>
    </div>
    <!-- 刪除彈窗 -->
    <DeleteModal
      :isDeleteModal="isMsgModal"
      :reqData="deleteReq"
      :deleteDataFun="deleteMsgContentMain"
      @changeIsDeleteVal="changeIsDeleteVal"
      @getList="getQueryMsgClassMainList"
    ></DeleteModal>
  </div>
</template>
<script setup lang="ts">
import { ref, onMounted } from "vue";
import { useRouter } from "vue-router";
import { useToast } from "primevue/usetoast";
import {
  queryMsgContentMainList,
  deleteMsgContentMain,
} from "@/api/msg-content-setting-service";
import {
  getMsgSystemList,
  getSystemParamList,
  getSaleChannelList,
  getMsgClassMainList,
} from "@/api/shared-settings-service";
import type { MsgSystemModel } from "@/models/msg-system-model-dropdown";
import type { MsgClassMainModel } from "@/models/msg-class-main-model-dropdown";
import type { MsgContentMainModel } from "@/models/msg-content-main-model";
import type { SystemMenuModel } from "@/models/system-menu-model";
import * as COMMON_WORD from "@/constants/common-word";
import { SysCodeType } from "@/enums/sys-code-type";
import { useToastStore } from "@/stores/toast";

const router = useRouter();
const toast = useToast();
const toastStore = useToastStore();

onMounted(() =>
  setTimeout(() => {
    toastStore.toastStatus &&
      toast.add({
        severity: toastStore.severity,
        summary: toastStore.summary,
        detail: toastStore.detail,
        life: 3000,
      });
    toastStore.toastStatus = false;
  }, 50)
);

// 搜尋條件
const searchData = ref<{
  page: number;
  pageDataCount: number;
  sort: number;
  sortColumn: string;
  systemId: string;
  class1Id: string;
  class2Id: string;
  channelId: string;
  msgCode: string;
  content: string;
}>({
  page: 1,
  pageDataCount: 10,
  sort: 0,
  sortColumn: "",
  systemId: "",
  class1Id: "",
  class2Id: "",
  channelId: "",
  msgCode: "",
  content: "",
});

const dropdownMsgSystemList = ref<Array<MsgSystemModel>>([]);

/**
 * F0000B022：查詢訊息系統別主檔列表
 */
const dropdownGetMsgSystemList = (): void => {
  getMsgSystemList()
    .then((res) => {
      if (res?.status === 200 && res.data) {
        const responseMsgSystemList = res.data.body?.msgSystemList;
        dropdownMsgSystemList.value =
          [
            {
              seqNo: -1,
              id: "",
              name: "全部",
            },
            ...responseMsgSystemList,
          ] ?? [];
      }
    })
    .catch((err) => {
      console.log(err);
    });
};
dropdownGetMsgSystemList();

const dropdownMsgClassList = ref<Array<SystemMenuModel>>([]);
/**
 * 取得訊息分類代碼dropdown
 * F0000B003：查詢系統下拉參數檔列表 API
 * codeNo:'R245'
 */
const getMsgClassList = async () => {
  getSystemParamList({
    codeNo: SysCodeType.R245,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      const MsgClassListAddFullName =
        response.data.body?.sysCodeList[0]?.sysMenuList.map((ele) => {
          return { ...ele, menuFullName: ele.menuValue + "-" + ele.menuText };
        }) ?? [];
      dropdownMsgClassList.value = [
        {
          menuFullName: "全部",
          menuText: "全部",
          menuValue: "",
        },
        ...MsgClassListAddFullName,
      ];
    }
  });
};
getMsgClassList();

/**
 * 取得通路別dropdown
 * F0000B011：查詢通路別列表 API
 */
const saleChannelListAddAll = ref<{ channelId: string; channelName: string }[]>(
  []
);
const saleChannelList = ref<{ channelId: string; channelName: string }[]>([]);
const doGetSaleChannelList = async () => {
  getSaleChannelList({ type: "ALL" }).then((response) => {
    if (response?.status === 200 && response.data) {
      saleChannelList.value = response.data.body?.saleChannelList ?? [];
      saleChannelListAddAll.value = [
        {
          channelId: "",
          channelName: "全部",
        },
        {
          channelId: "ALL",
          channelName: "全通路",
        },
        ...saleChannelList.value,
      ];
    }
  });
};
doGetSaleChannelList();

const dropdownMsgClassMainList = ref<Array<MsgClassMainModel>>([]);
/**
 * 取得訊息次分類代碼dropdown
 * F0000B023：查詢訊息分類檔列表
 */
const dropdownGetMsgClassMainList = (): void => {
  getMsgClassMainList({})
    .then((res) => {
      if (res?.status === 200 && res.data) {
        const MsgClassListAddFullName =
          res.data.body?.msgClassMainList.map((ele) => {
            return {
              ...ele,
              class2FullName: ele.class2Id + "-" + ele.class2Name,
            };
          }) ?? [];
        dropdownMsgClassMainList.value =
          [
            {
              seqNo: Infinity,
              class1Id: "",
              className: "",
              class2Id: "",
              class2Name: "全部",
              class2FullName: "全部",
            },
            ...MsgClassListAddFullName,
          ] ?? [];
      }
    })
    .catch((err) => {
      console.log(err);
    });
};
dropdownGetMsgClassMainList();

/**
 * 訊息主檔列表
 */
const msgContentMainList = ref<Array<MsgContentMainModel>>([]);

const dataCount = ref<number>(0);

// DataTable排序
const sortMode = ref({
  systemId: null,
  class1Id: null,
  class2Id: null,
  channelId: null,
  msgCode: null,
  content: null,
  parameterQty: null,
});

const sortModeFunction = (field: string) => {
  if (sortMode.value[field] === "up") {
    sortMode.value[field] = "down";
    searchData.value.sort = 1;
    searchData.value.sortColumn = field;
  } else {
    sortMode.value[field] = "up";
    searchData.value.sort = 0;
    searchData.value.sortColumn = field;
  }
  getQueryMsgClassMainList();
};

/**
 * F2A03B001：查詢訊息主檔列表資料
 */
const getQueryMsgClassMainList = (): void => {
  const req = searchData.value;
  queryMsgContentMainList(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        msgContentMainList.value = res.data.body?.msgContentMainList ?? [];
        dataCount.value = res.data.body?.dataCount ?? 0;
      }
    })
    .catch((err) => {
      console.log(err);
    });
};
getQueryMsgClassMainList();

const isMsgModal = ref(false);
const msg = ref("");
const deleteReq = ref();

const deleteData = (data: { seqNo: number }) => {
  isMsgModal.value = true;
  msg.value = COMMON_WORD.CONFIRM_DELETION;
  deleteReq.value = { seqNo: data.seqNo };
};

interface Event {
  rows: number;
  page: number;
}
const onTablePageChange = ($event: Event): void => {
  searchData.value.pageDataCount = $event.rows;
  searchData.value.page = $event.page + 1;
  getQueryMsgClassMainList();
};

const goToEdit = (type: string, data?: { seqNo: number }): void => {
  type === "edit" && data
    ? router.push({
        name: "msgContentSetting-edit",
        params: {
          seqNo: data.seqNo,
        },
      })
    : router.push({
        name: "msgContentSetting-add",
      });
};

const clear = () => {
  searchData.value.systemId = "";
  searchData.value.class1Id = "";
  searchData.value.channelId = "";
  searchData.value.class2Id = "";
  searchData.value.msgCode = "";
  searchData.value.content = "";
  getQueryMsgClassMainList();
};

const changeIsDeleteVal = (value: boolean) => {
  isMsgModal.value = value;
};
</script>
                                                                                                                                                src/views/pages/msg/MsgSystemSettingEditView.vue                                                    0100777 0000000 0000000 00000013711 14665752120 017313  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <div class="grid p-fluid">
      <div class="col-12">
        <div class="card">
          <Form :validation-schema="schema" @submit="saveMsgSystem">
            <PrimePanel>
              <template #header>
                <div class="left-header">
                  <span class="pi pi-search"></span>
                  <span> 系統別主檔維護 新增/編輯</span>
                </div>
              </template>
              <div class="grid formgrid justify-content-center">
                <div class="col-12 my-2 lg:mr-6 lg:col-7 t-form-group">
                  <Field
                    name="systemId"
                    v-slot="{ field, errorMessage }"
                    v-model="msgSystem.systemId"
                  >
                    <label class="t-label col-12 lg:col-2" for=""
                      >系統代號</label
                    >
                    <div class="col-12 lg:col-10">
                      <PrimeInputText
                        :disabled="Boolean(seqNo)"
                        v-bind="field"
                        :class="{
                          'p-invalid': errorMessage,
                          'lg:mt-3': errorMessage,
                        }"
                        type="text"
                      />
                      <small id="systemId" class="p-error">{{
                        errorMessage
                      }}</small>
                    </div>
                  </Field>
                </div>
              </div>
              <div class="grid formgrid justify-content-center">
                <div class="col-12 my-2 lg:mr-6 lg:col-7 t-form-group">
                  <Field
                    name="systemName"
                    v-slot="{ field, errorMessage }"
                    v-model="msgSystem.systemName"
                  >
                    <label class="t-label col-12 lg:col-2" for=""
                      >系統名稱</label
                    >
                    <div class="col-12 lg:col-10">
                      <PrimeInputText
                        v-bind="field"
                        :class="{
                          'p-invalid': errorMessage,
                          'lg:mt-3': errorMessage,
                        }"
                        type="text"
                      />
                      <small id="systemName" class="p-error">{{
                        errorMessage
                      }}</small>
                    </div>
                  </Field>
                </div>
              </div>
            </PrimePanel>
            <div class="btn-container text-center mb-4">
              <PrimeButton
                :label="COMMON_WORD.GO_BACK"
                class="p-button-outlined mr-2 my-2 p-button-sm w-auto"
                icon="pi pi-arrow-left"
                @click="goBack"
              />
              <PrimeButton
                :label="COMMON_WORD.SAVE"
                icon="pi pi-check"
                class="mr-2 my-2 p-button-sm p-button-info w-auto"
                type="submit"
              />
            </div>
          </Form>
        </div>
      </div>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref } from "vue";
import { useRoute } from "vue-router";
import { useRouter } from "vue-router";
import { useToast } from "primevue/usetoast";
import { Field, Form } from "vee-validate";
import * as yup from "yup";
import * as COMMON_WORD from "@/constants/common-word";
import {
  queryMsgSystem,
  addMsgSystem,
  editMsgSystem,
} from "@/api/msg-system-setting-service";
import { MsgCodeType } from "@/enums/msg-code-type";
import { useToastStore } from "@/stores/toast";

const route = useRoute();
const router = useRouter();
const toast = useToast();
const toastStore = useToastStore();

/**
 * 取得錯誤訊息
 */
const schema = yup.object({
  systemId: yup
    .string()
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .max(20, COMMON_WORD.VALIDATE_MAX_LENGTH(20)),
  systemName: yup
    .string()
    .required(COMMON_WORD.VALIDATE_IS_REQUIRED)
    .max(100, COMMON_WORD.VALIDATE_MAX_LENGTH(100)),
});

const seqNo =
  typeof route.params.seqNo === "string" ? Number(route.params.seqNo) : null;

const msgSystem = ref({
  seqNo: Infinity,
  systemId: "",
  systemName: "",
});

/**
 * F2A01B002：查詢訊息系統別資料
 */
const getQueryMsgSystem = (): void => {
  const req = typeof seqNo === "number" ? { seqNo: seqNo } : null;
  req &&
    queryMsgSystem(req)
      .then((res) => {
        if (res?.status === 200 && res.data) {
          msgSystem.value = res.data.body ?? {
            seqNo: Infinity,
            systemId: "",
            systemName: "",
          };
        }
      })
      .catch((err) => {
        console.log(err);
      });
};
seqNo && getQueryMsgSystem();

/**
 * 儲存系統別主檔－F2A01B003：新增訊息系統別資料＆F2A01B004：修改訊息系統別資料
 */
const saveMsgSystem = () => {
  const req = msgSystem.value;
  const saveFunction = seqNo ? editMsgSystem : addMsgSystem;
  saveFunction(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        const { returnCode, returnDesc } = res.data.header;
        if (returnCode === MsgCodeType.SUCCESS) {
          toastStore.showToast(
            "success",
            COMMON_WORD.UPDATE_SUCCESS,
            returnDesc
          );
          goBack();
        } else {
          toast.add({
            severity: "error",
            summary: COMMON_WORD.ERROR,
            detail: returnDesc,
            life: 3000,
          });
        }
      }
    })
    .catch((err) => {
      console.log(err);
    });
};

const goBack = () => {
  router.push({
    name: "msgSystemSetting",
  });
};
</script>

<style lang="scss" scoped>
.border-top-gray {
  border-top: 1px solid #e5e5e5;
}
</style>
                                                       src/views/pages/msg/MsgSystemSettingView.vue                                                        0100777 0000000 0000000 00000026207 14665752120 016511  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <div class="grid p-fluid">
      <div class="col-12">
        <div class="card">
          <Form :validation-schema="schema" @submit="getQueryMsgSystemList">
            <PrimePanel>
              <template #header>
                <div class="left-header">
                  <span class="pi pi-search mr-2"></span>
                  <span>系統別主檔維護 {{ COMMON_WORD.QUERY }}</span>
                </div>
              </template>
              <div class="grid formgrid">
                <div class="col-12 mb-3 lg:col-6 t-form-group">
                  <Field
                    name="systemId"
                    v-slot="{ field, errorMessage }"
                    v-model="searchData.systemId"
                  >
                    <label class="t-label col-12 lg:col-3" for=""
                      >系統代號</label
                    >
                    <div class="col-12 lg:col-9">
                      <PrimeInputText
                        v-bind="field"
                        :class="{
                          'p-invalid': errorMessage,
                          'lg:mt-3': errorMessage,
                        }"
                        type="text"
                      />
                      <small id="systemId" class="p-error">{{
                        errorMessage
                      }}</small>
                    </div>
                  </Field>
                </div>
                <div class="col-12 mb-3 lg:col-6 t-form-group">
                  <Field
                    name="systemName"
                    v-slot="{ field, errorMessage }"
                    v-model="searchData.systemName"
                  >
                    <label class="t-label col-12 lg:col-3" for=""
                      >系統名稱</label
                    >
                    <div class="col-12 lg:col-9">
                      <PrimeInputText
                        v-bind="field"
                        :class="{
                          'p-invalid': errorMessage,
                          'lg:mt-3': errorMessage,
                        }"
                        type="text"
                      />
                      <small id="systemName" class="p-error">{{
                        errorMessage
                      }}</small>
                    </div>
                  </Field>
                </div>
              </div>
            </PrimePanel>
            <div class="btn-container text-center mb-4">
              <PrimeButton
                :label="COMMON_WORD.CLEAR"
                class="p-button-outlined mr-2 my-2 p-button-sm w-auto"
                icon="pi pi-sync"
                @click="clear()"
              />
              <PrimeButton
                :label="COMMON_WORD.QUERY"
                icon="pi pi-search"
                class="mr-2 my-2 p-button-sm p-button-info w-auto"
                type="submit"
              />
            </div>
          </Form>
          <div class="btn-containermb-4">
            <PrimeButton
              :label="COMMON_WORD.ADD"
              class="mr-2 my-2 p-button-sm p-button-info w-auto"
              icon="pi pi-plus"
              @click="goToEdit('add')"
            />
          </div>
          <PrimeDataTable
            :lazy="true"
            :showGridlines="true"
            :value="msgSystemList"
            :paginator="true"
            class="p-datatable-customers"
            :rows="searchData.pageDataCount"
            :totalRecords="dataCount"
            dataKey="id"
            :sortOrder="searchData.sort"
            paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
            :rowsPerPageOptions="[10, 50, 100]"
            currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
            responsiveLayout="scroll"
            @page="onTablePageChange($event)"
          >
            <template #header>
              <div class="">
                <i class="pi pi-table" />
                <span class="mx-2">系統別主檔維護 資料列表</span>
              </div>
            </template>
            <template #empty> {{ COMMON_WORD.EMPTY }} </template>
            <template #loading> {{ COMMON_WORD.LOADING }} </template>
            <PrimeColumn header="動作" style="width: 180px">
              <template #body="{ data }">
                <div class="text-center flex">
                  <PrimeButton
                    :label="COMMON_WORD.EDIT"
                    icon="pi pi-pencil"
                    class="p-button-outlined mr-2 p-button-sm"
                    @click="goToEdit('edit', data)"
                  >
                  </PrimeButton>
                  <PrimeButton
                    :label="COMMON_WORD.DELETE"
                    icon="pi pi-trash"
                    class="mr-2 p-button-sm"
                    @click="deleteData(data)"
                  />
                </div>
              </template>
            </PrimeColumn>
            <PrimeColumn field="systemId" style="min-width: 150px">
              <template #header>
                <div
                  @click="sortModeFunction('systemId')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>系統代號</span>
                  <span
                    v-if="sortMode.systemId === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.systemId === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <!-- 要記得修正為systemId -->
                <span class="customer-badge">{{
                  slotProps.data.systemId
                }}</span>
              </template>
            </PrimeColumn>
            <PrimeColumn field="systemName" style="min-width: 200px">
              <template #header>
                <div
                  @click="sortModeFunction('systemName')"
                  class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
                >
                  <span>系統名稱</span>
                  <span
                    v-if="sortMode.systemName === 'up'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                  ></span>
                  <span
                    v-else-if="sortMode.systemName === 'down'"
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                  ></span>
                  <span
                    v-else
                    class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                  ></span>
                </div>
              </template>
              <template #body="slotProps">
                <span class="customer-badge">{{
                  slotProps.data.systemName
                }}</span>
              </template>
            </PrimeColumn>
          </PrimeDataTable>
        </div>
      </div>
    </div>
    <!-- 刪除彈窗 -->
    <DeleteModal
      :isDeleteModal="isMsgModal"
      :reqData="deleteReq"
      :deleteDataFun="deleteMsgSystem"
      @changeIsDeleteVal="changeIsDeleteVal"
      @getList="getQueryMsgSystemList"
    ></DeleteModal>
  </div>
</template>
<script setup lang="ts">
import { ref, onMounted } from "vue";
import { useRouter } from "vue-router";
import { useToast } from "primevue/usetoast";
import { Field, Form } from "vee-validate";
import * as yup from "yup";
import {
  queryMsgSystemList,
  deleteMsgSystem,
} from "@/api/msg-system-setting-service";
import type { MsgSystemModel } from "@/models/msg-system-model";
import * as COMMON_WORD from "@/constants/common-word";
import { useToastStore } from "@/stores/toast";

const router = useRouter();
const toast = useToast();
const toastStore = useToastStore();

onMounted(() =>
  setTimeout(() => {
    toastStore.toastStatus &&
      toast.add({
        severity: toastStore.severity,
        summary: toastStore.summary,
        detail: toastStore.detail,
        life: 3000,
      });
    toastStore.toastStatus = false;
  }, 50)
);

/**
 * 取得錯誤訊息
 */
const schema = yup.object({
  systemId: yup.string().max(20, COMMON_WORD.VALIDATE_MAX_LENGTH(20)),
  systemName: yup.string().max(100, COMMON_WORD.VALIDATE_MAX_LENGTH(100)),
});

// 搜尋條件
const searchData = ref<{
  page: number;
  pageDataCount: number;
  sort: number;
  sortColumn: string;
  systemId: string;
  systemName: string;
}>({
  page: 1,
  pageDataCount: 10,
  sort: 0,
  sortColumn: "",
  systemId: "",
  systemName: "",
});

/**
 * 訊息系統別列表
 */
const msgSystemList = ref<Array<MsgSystemModel>>([]);

const dataCount = ref<number>(0);

// DataTable排序
const sortMode = ref({
  systemId: null,
  systemName: null,
});

const sortModeFunction = (field: string) => {
  if (sortMode.value[field] === "up") {
    sortMode.value[field] = "down";
    searchData.value.sort = 1;
    searchData.value.sortColumn = field;
  } else {
    sortMode.value[field] = "up";
    searchData.value.sort = 0;
    searchData.value.sortColumn = field;
  }
  getQueryMsgSystemList();
};

/**
 * F2A01B001：查詢訊息系統別列表資料
 */
const getQueryMsgSystemList = (): void => {
  const req = searchData.value;
  queryMsgSystemList(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        msgSystemList.value = res.data.body?.msgSystemList ?? [];
        dataCount.value = res.data.body?.dataCount ?? 0;
      }
    })
    .catch((err) => {
      console.log(err);
    });
};
getQueryMsgSystemList();

const isMsgModal = ref(false);
const msg = ref("");
const deleteReq = ref();

const deleteData = (data: { seqNo: number }) => {
  isMsgModal.value = true;
  msg.value = COMMON_WORD.CONFIRM_DELETION;
  deleteReq.value = { seqNo: data.seqNo };
};

interface Event {
  rows: number;
  page: number;
}
const onTablePageChange = ($event: Event): void => {
  searchData.value.pageDataCount = $event.rows;
  searchData.value.page = $event.page + 1;
  getQueryMsgSystemList();
};

const goToEdit = (type: string, data?: { seqNo: number }): void => {
  type === "edit" && data
    ? router.push({
        name: "msgSystemSetting-edit",
        params: {
          seqNo: data.seqNo,
        },
      })
    : router.push({
        name: "msgSystemSetting-add",
      });
};

const clear = () => {
  searchData.value.systemId = "";
  searchData.value.systemName = "";
  getQueryMsgSystemList();
};

const changeIsDeleteVal = (value: boolean) => {
  isMsgModal.value = value;
};
</script>
                                                                                                                                                                                                                                                                                                                                                                                         src/views/pages/system/                                                                             0040777 0000000 0000000 00000000000 14665752120 012373  5                                                                                                    ustar 00                                                                                                                                                                                                                                                       src/views/pages/system/AgentCaseJobView.vue                                                         0100777 0000000 0000000 00000060161 14665752120 016240  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div>
    <PrimeToast />
    <div class="grid p-fluid">
      <div class="col-12">
        <div class="card">
          <Form :validation-schema="searchSchema" @submit="search()">
            <PrimePanel>
              <template #header>
                <div class="left-header">
                  <span class="pi pi-search pr-2"></span>
                  <span>案件排程管理 {{ COMMON_WORD.QUERY }}</span>
                </div>
              </template>
              <div class="grid formgrid">
                <div class="col-12 mb-3 lg:col-6 t-form-group">
                  <label class="t-label col-12 lg:col-3">通路別</label>
                  <PrimeDropdown
                    class="t-dropdown col-12 lg:col-9"
                    v-model="formData.channelId"
                    :options="channelList"
                    optionLabel="channelName"
                    optionValue="channelId"
                  />
                </div>
                <div class="col-12 mb-3 lg:col-6 t-form-group">
                  <label class="t-label col-12 lg:col-3">排程名稱</label>
                  <PrimeDropdown
                    class="t-dropdown col-12 lg:col-9"
                    v-model="formData.jobId"
                    :options="jobList"
                    optionLabel="menuText"
                    optionValue="menuValue"
                    placeholder="全部"
                  />
                </div>
              </div>
              <div class="grid formgrid">
                <div class="col-12 mb-3 lg:col-6 t-form-group">
                  <label class="t-label col-12 lg:col-3">投保日期</label>
                  <Field
                    v-slot="{ field, errorMessage, handleChange }"
                    v-model="formData.applicationDateStart"
                    name="applicationDateStart"
                  >
                    <div>
                      <PrimeCalendar
                        @update:modelValue="handleChange"
                        :model-value="field.value"
                        class="t-dropdown lg:col-4 w-full"
                        :class="{ 'p-invalid': errorMessage }"
                        :showIcon="true"
                        :dateFormat="DATE_CALENDAR_FORMAT"
                      />
                      <small class="p-error"> {{ errorMessage }} </small>
                    </div>
                  </Field>
                  <span style="width: 50px; text-align: center">~</span>
                  <Field
                    v-slot="{ field, errorMessage, handleChange }"
                    v-model="formData.applicationDateEnd"
                    name="applicationDateEnd"
                  >
                    <div>
                      <PrimeCalendar
                        @update:modelValue="handleChange"
                        :model-value="field.value"
                        class="t-dropdown lg:col-4 w-full"
                        :class="{ 'p-invalid': errorMessage }"
                        :showIcon="true"
                        :dateFormat="DATE_CALENDAR_FORMAT"
                      />
                      <small class="p-error"> {{ errorMessage }} </small>
                    </div>
                  </Field>
                </div>
                <div class="col-12 mb-3 lg:col-6 t-form-group">
                  <label class="t-label col-12 lg:col-3">業務員姓名</label>
                  <Field
                    v-slot="{ field, errorMessage }"
                    v-model="formData.agentName"
                    name="agentName"
                  >
                    <div class="w-full">
                      <PrimeInputText
                        class="t-inputText"
                        :class="{ 'p-invalid': errorMessage }"
                        type="text"
                        v-bind="field"
                      />
                      <small class="p-error"> {{ errorMessage }} </small>
                    </div>
                  </Field>
                </div>
              </div>
              <div class="grid formgrid">
                <div class="col-12 mb-3 lg:col-6 t-form-group">
                  <label class="t-label col-12 lg:col-3">案件序號</label>
                  <Field
                    v-slot="{ field, errorMessage }"
                    v-model="formData.caseId"
                    name="caseId"
                  >
                    <div class="w-full">
                      <PrimeInputText
                        class="t-inputText"
                        :class="{ 'p-invalid': errorMessage }"
                        type="text"
                        v-bind="field"
                      />
                      <small class="p-error"> {{ errorMessage }} </small>
                    </div>
                  </Field>
                </div>
                <div class="col-12 mb-3 lg:col-6 t-form-group">
                  <label class="t-label col-12 lg:col-3">案件狀態</label>
                  <PrimeDropdown
                    class="t-dropdown col-12 lg:col-9"
                    v-model="formData.jobStatus"
                    :options="jobStatusList"
                    optionLabel="menuText"
                    optionValue="menuValue"
                    placeholder="全部"
                  />
                </div>
                <div class="col-12 mb-3 lg:col-6 t-form-group">
                  <label class="t-label col-12 lg:col-3">保單號碼</label>

                  <div class="w-full">
                    <PrimeInputText
                      class="t-inputText"
                      type="text"
                      v-model="formData.policyNo"
                    />
                  </div>
                </div>
              </div>
            </PrimePanel>
            <div class="btn-container text-center mb-4">
              <PrimeButton
                :label="COMMON_WORD.CLEAR"
                class="p-button-outlined mr-2 my-2 p-button-sm w-auto"
                icon="pi pi-sync"
                @click="clear()"
              />
              <PrimeButton
                :label="COMMON_WORD.QUERY"
                icon="pi pi-search"
                class="mr-2 my-2 p-button-sm p-button-info w-auto"
                type="submit"
              />
            </div>
            <div class="btn-containermb-4">
              <PrimeButton
                label="重新傳送"
                class="mr-2 my-2 p-button-sm p-button-info w-auto"
                :disabled="selectedAgentCaseJobList.length === 0"
                @click="doRestartAgentCaseJob()"
              />
              <PrimeButton
                label="系統排程管理"
                class="p-button-outlined mr-2 my-2 p-button-sm p-button-info w-auto"
                @click="goSysJob()"
              />
            </div>
            <PrimeDataTable
              v-model:selection="selectedAgentCaseJobList"
              :lazy="true"
              :showGridlines="true"
              :value="agentCaseJobList"
              :paginator="true"
              :rows="formData.pageDataCount"
              :first="currentPage()"
              :totalRecords="dataCount"
              :sortOrder="formData.sort"
              paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
              :rowsPerPageOptions="[10, 50, 100]"
              currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
              responsiveLayout="scroll"
              @page="onTablePageChange($event)"
            >
              <template #header>
                <div>
                  <i class="pi pi-table" />
                  <span class="mx-2">案件排程管理 資料列表</span>
                </div>
              </template>
              <template #empty> {{ COMMON_WORD.EMPTY }} </template>
              <template #loading> {{ COMMON_WORD.LOADING }} </template>
              <PrimeColumn style="min-width: 50px" selectionMode="multiple">
                <template #body="slotProps">
                  <PrimeCheckbox
                    v-model="selectedAgentCaseJobList"
                    :value="slotProps.data"
                  >
                  </PrimeCheckbox>
                </template>
              </PrimeColumn>
              <PrimeColumn
                header="通路別代碼"
                field="channelId"
                style="min-width: 100px"
              >
                <template #body="slotProps">
                  <!-- <span>
                    {{
                      channelList.find(
                        (item) => item.channelId === slotProps.data.channelId
                      )?.channelName
                    }}</span
                  > -->
                  <span> {{ slotProps.data.channelId }}</span>
                </template>
              </PrimeColumn>
              <PrimeColumn
                header="業務員姓名"
                field="agentName"
                style="min-width: 150px"
              >
                <template #body="slotProps">
                  <span>{{ slotProps.data.agentName }}</span>
                </template>
              </PrimeColumn>
              <PrimeColumn
                header="建檔日期"
                field="createDate"
                style="min-width: 100px"
              >
                <template #body="slotProps">
                  <span>{{ slotProps.data.createDate }}</span>
                </template>
              </PrimeColumn>
              <PrimeColumn
                header="投保日期"
                field="applicationDate"
                style="min-width: 100px"
              >
                <template #body="slotProps">
                  <span>{{ slotProps.data.applicationDate }}</span>
                </template>
              </PrimeColumn>
              <PrimeColumn
                header="保單號碼"
                field="policyNo1"
                style="min-width: 100px"
              >
                <template #body="slotProps">
                  <p class="mb-0">{{ slotProps.data.policyNo1 }}</p>
                  <p class="mb-0">{{ slotProps.data.policyNo2 }}</p>
                </template>
              </PrimeColumn>
              <PrimeColumn
                header="案件序號"
                field="caseId"
                style="min-width: 150px"
              >
                <template #body="slotProps">
                  <span>{{ slotProps.data.caseId }}</span>
                </template>
              </PrimeColumn>
              <PrimeColumn
                header="排程名稱"
                field="jobIdName"
                style="min-width: 150px"
              >
                <template #body="slotProps">
                  <span>{{ slotProps.data.jobIdName }}</span>
                </template>
              </PrimeColumn>
              <PrimeColumn
                header="案件狀態"
                field="jobStatusName"
                style="min-width: 100px"
              >
                <template #body="slotProps">
                  <span>{{ slotProps.data.jobStatusName }}</span>
                </template>
              </PrimeColumn>
              <PrimeColumn
                header="錯誤失敗原因"
                field="jobMsg"
                style="min-width: 150px; max-width: 200px"
              >
                <template #body="slotProps">
                  <p class="mb-0 single-ellipsis">
                    {{ slotProps.data.jobMsg }}
                  </p>
                  <a
                    v-if="slotProps.data.jobMsg"
                    style="cursor: pointer"
                    @click.prevent="openJobMsgModal(slotProps.data.jobMsg)"
                    >查看更多</a
                  >
                </template>
              </PrimeColumn>
              <PrimeColumn
                header="重試次數"
                field="jobErrorCount"
                style="min-width: 100px"
              >
                <template #body="slotProps">
                  <span>{{ slotProps.data.jobErrorCount }}</span>
                </template>
              </PrimeColumn>
            </PrimeDataTable>
          </Form>
        </div>
      </div>
    </div>
  </div>
  <!-- 系統排程管理彈窗 -->
  <PrimeDialog
    v-model:visible="isSysJobModal"
    :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
    :style="{ width: '90vw' }"
    :modal="true"
    :draggable="false"
  >
    <template #header>
      <div>
        <span class="p-dialog-title">系統排程管理</span>
      </div>
    </template>
    <div class="btn-containermb-4">
      <!-- <PrimeButton
        label="重新傳送"
        class="mr-2 my-2 p-button-sm p-button-info w-auto"
        :disabled="selectedSysJobList.length === 0"
        @click="doRestartSysJob()"
      /> -->
      <PrimeButton
        label="重新整理"
        class="p-button-outlined mr-2 my-2 p-button-sm p-button-info w-auto"
        @click="doQuerySysJobList()"
      />
    </div>
    <PrimeDataTable
      v-model:selection="selectedSysJobList"
      :lazy="true"
      :showGridlines="true"
      :value="sysJobList"
      dataKey="jobId"
      :sortOrder="formData.sort"
      responsiveLayout="scroll"
      class="mb-5"
    >
      <template #header>
        <div>
          <i class="pi pi-table" />
          <span class="mx-2">系統排程管理 資料列表</span>
        </div>
      </template>
      <template #empty> {{ COMMON_WORD.EMPTY }} </template>
      <template #loading> {{ COMMON_WORD.LOADING }} </template>
      <!-- <PrimeColumn style="min-width: 50px" selectionMode="multiple">
        <template #body="slotProps">
          <PrimeCheckbox v-model="selectedSysJobList" :value="slotProps.data">
          </PrimeCheckbox>
        </template>
      </PrimeColumn> -->
      <PrimeColumn header="排程代號" field="jobId" style="min-width: 150px">
        <template #body="slotProps">
          <span>{{ slotProps.data.jobId }}</span>
        </template>
      </PrimeColumn>
      <PrimeColumn header="排程名稱" field="jobName" style="min-width: 150px">
        <template #body="slotProps">
          <span>{{ slotProps.data.jobName }}</span>
        </template>
      </PrimeColumn>
      <PrimeColumn header="狀態" field="jobStatusName" style="min-width: 100px">
        <template #body="slotProps">
          <span>{{ slotProps.data.jobStatusName }}</span>
        </template>
      </PrimeColumn>
      <PrimeColumn
        header="最後執行日期"
        field="jobRunDate"
        style="min-width: 150px"
      >
        <template #body="slotProps">
          <span>{{ slotProps.data.jobRunDate }}</span>
        </template>
      </PrimeColumn>
      <PrimeColumn
        header="最後完成日期"
        field="jobFinishDate"
        style="min-width: 150px"
      >
        <template #body="slotProps">
          <span>{{ slotProps.data.jobFinishDate }}</span>
        </template>
      </PrimeColumn>
      <PrimeColumn
        header="錯誤次數"
        field="jobErrorCount"
        style="min-width: 100px"
      >
        <template #body="slotProps">
          <span>{{ slotProps.data.jobErrorCount }}</span>
        </template>
      </PrimeColumn>
      <PrimeColumn header="排程訊息" field="jobMsg" style="min-width: 150px">
        <template #body="slotProps">
          <span>{{ slotProps.data.jobMsg }}</span>
        </template>
      </PrimeColumn>
    </PrimeDataTable>
  </PrimeDialog>
  <!-- 錯誤原因彈窗 -->
  <PrimeDialog
    v-model:visible="isJobMsgModal"
    :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
    :style="{ width: '90vw' }"
    :modal="true"
    :draggable="false"
  >
    <template #header>
      <div>
        <span class="p-dialog-title">錯誤失敗原因</span>
      </div>
    </template>
    <div>
      <p class="m-4">{{ msg }}</p>
    </div>
  </PrimeDialog>
</template>

<script setup lang="ts">
import { DATE_CALENDAR_FORMAT, DATE_FORMAT } from "@/constants";
import * as COMMON_WORD from "@/constants/common-word";
import { ref } from "vue";
import { Field, Form } from "vee-validate";
import * as yup from "yup";
import type { QueryAgentCaseJobListReq } from "@/api/models/req/query-agent-case-job-list-req";
import type { AgentCaseJobModel } from "@/models/agent-case-job-model";
import {
  queryAgentCaseJobList,
  querySysJobList,
  restartAgentCaseJob,
  // restartSysJob,
} from "@/api/agnet-case-job-service";
import { getSaleChannelList } from "@/api/shared-settings-service";
import { getSystemParamList } from "@/api/product-service";
import { SysCodeType } from "@/enums/sys-code-type";
import type { SystemMenuModel } from "@/models/system-menu-model";
import { format } from "date-fns";
import { MsgCodeType } from "@/enums/msg-code-type";
import { useToast } from "primevue/usetoast";
import type { SysJobModel } from "@/models/sys-job-model";
import { getMesgContent } from "@/utils/msg-content-helper";

const toast = useToast();

/**
 * 時間格式轉換
 */
// date-fns
const get3daysBefore = format(
  new Date(new Date().setDate(new Date().getDate() - 3)),
  DATE_FORMAT
);
const get3daysAfter = format(
  new Date(new Date().setDate(new Date().getDate() + 3)),
  DATE_FORMAT
);

/**
 * 查詢條件
 */
const formData = ref<QueryAgentCaseJobListReq>({
  page: 1,
  pageDataCount: 10,
  sort: 0,
  sortColumn: "",
  channelId: "",
  jobId: "",
  applicationDateStart: get3daysBefore,
  applicationDateEnd: get3daysAfter,
  jobStatus: "",
  policyNo: "",
});

/**
 * 查詢條件檢核
 */
const searchSchema = yup.object({
  applicationDateStart: yup.string().required(COMMON_WORD.VALIDATE_IS_REQUIRED),
  applicationDateEnd: yup.string().required(COMMON_WORD.VALIDATE_IS_REQUIRED),
  agentName: yup.string().max(120, COMMON_WORD.VALIDATE_MAX_LENGTH(120)),
  caseId: yup.string().max(100, COMMON_WORD.VALIDATE_MAX_LENGTH(100)),
});

/**
 * 通路別列表(下拉選單)
 */
const channelList = ref<{ channelId: string; channelName: string }[]>([]);

/**
 * 排程名稱列表(下拉選單)
 */
const jobList = ref<SystemMenuModel[]>([]);

/**
 * 案件狀態列表(下拉選單)
 */
const jobStatusList = ref<SystemMenuModel[]>([]);

/**
 * 案件排程
 */
const agentCaseJobList = ref<Array<AgentCaseJobModel>>([]);

/**
 * 系統排程
 */
const sysJobList = ref<Array<SysJobModel>>([]);

/**
 * 已勾選的案件排程
 */
const selectedAgentCaseJobList = ref<Array<AgentCaseJobModel>>([]);

/**
 * 已勾選的系統排程
 */
const selectedSysJobList = ref<Array<SysJobModel>>([]);

/**
 * 是否開啟系統排程管理彈窗
 */
const isSysJobModal = ref(false);

/**
 * F0000B011：查詢通路別列表(下拉選單)
 */
const doGetChannelList = async () => {
  getSaleChannelList({ type: "ALL" }).then((response) => {
    if (response?.status === 200 && response.data) {
      channelList.value = response.data.body?.saleChannelList ?? [];
      // 預設第一筆
      formData.value.channelId = channelList.value[0].channelId;
    }
  });
};
doGetChannelList();

/**
 * F0000B003：查詢排程名稱列表(下拉選單)
 */
const doGetJobList = async () => {
  getSystemParamList({ codeNo: SysCodeType.R110 }).then((response) => {
    if (response?.status === 200 && response.data) {
      jobList.value = response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      jobList.value = jobList.value.map((item) => {
        if (item.menuText === "全部") {
          return {
            menuText: "全部",
            menuValue: "",
          };
        }
        return item;
      });
      formData.value.jobId = "";
    }
  });
};
doGetJobList();

/**
 * F0000B003：查詢案件狀態列表(下拉選單)
 */
const doGetJobStutsList = async () => {
  getSystemParamList({ codeNo: SysCodeType.R32 }).then((response) => {
    if (response?.status === 200 && response.data) {
      jobStatusList.value =
        response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      jobStatusList.value.unshift({
        menuText: "全部",
        menuValue: "",
      });
      formData.value.jobStatus = "";
    }
  });
};
doGetJobStutsList();

const dataCount = ref<number>(0);

const currentPage = (): number => {
  return (formData.value.page - 1) * formData.value.pageDataCount;
};

interface Event {
  rows: number;
  page: number;
}
const onTablePageChange = ($event: Event): void => {
  formData.value.pageDataCount = $event.rows;
  formData.value.page = $event.page + 1;
  currentPage();
  doQueryAgentCaseJobList();
};

const clear = () => {
  formData.value.channelId = channelList.value[0].channelId;
  formData.value.jobId = "";
  formData.value.applicationDateStart = get3daysBefore;
  formData.value.applicationDateEnd = get3daysAfter;
  formData.value.agentName = "";
  formData.value.caseId = "";
  formData.value.jobStatus = "";
  formData.value.policyNo = "";
  doQueryAgentCaseJobList();
};

const search = () => {
  formData.value.page = 1;
  currentPage();
  doQueryAgentCaseJobList();
};

/**
 * F2402B001：查詢案件排程檔列表資料
 */
const doQueryAgentCaseJobList = async () => {
  const req = formData.value;
  (req.applicationDateStart = format(
    new Date(formData.value.applicationDateStart),
    DATE_FORMAT
  )),
    (req.applicationDateEnd = format(
      new Date(formData.value.applicationDateEnd),
      DATE_FORMAT
    )),
    (req.jobStatus =
      formData.value.jobStatus === "" ? "" : formData.value.jobStatus);
  queryAgentCaseJobList(req)
    .then((res) => {
      if (res?.status === 200 && res.data) {
        agentCaseJobList.value = res.data.body?.agentCaseJobList ?? [];
        dataCount.value = res.data.body.dataCount ?? 0;
      }
    })
    .catch((err) => {
      console.log(err);
    });
  // 清空已選排程
  selectedAgentCaseJobList.value = [];
};

/**
 * F2402B002：排程重新傳送
 */
const doRestartAgentCaseJob = async () => {
  console.log(selectedAgentCaseJobList.value);
  if (hasUnFailJobStatus(selectedAgentCaseJobList.value)) {
    toast.add({
      severity: "error",
      summary: getMesgContent(MsgCodeType.UNFAIL_JOB_CAN_NOT_RESTART),
      life: 3000,
    });
    return;
  }
  restartAgentCaseJob({ agentCaseJobList: selectedAgentCaseJobList.value })
    .then((res) => {
      if (
        res?.status === 200 &&
        res.data &&
        res.data.header.returnCode === MsgCodeType.SUCCESS
      ) {
        toast.add({
          severity: "success",
          summary: COMMON_WORD.UPDATE_SUCCESS,
          life: 3000,
        });
        doQueryAgentCaseJobList();
      } else {
        toast.add({
          severity: "error",
          summary: res.data?.header.returnDesc,
          life: 3000,
        });
      }
    })
    .catch((err) => {
      console.log(err);
    });
};

const goSysJob = () => {
  doQuerySysJobList();
  // 開啟系統排程彈窗
  isSysJobModal.value = true;
};

/**
 * F2402B003：查詢系統排程檔列表資料
 */
const doQuerySysJobList = async () => {
  querySysJobList()
    .then((res) => {
      if (res?.status === 200 && res.data) {
        sysJobList.value = res.data.body?.sysJobList ?? [];
      }
    })
    .catch((err) => {
      console.log(err);
    });
  // 清空已選排程
  selectedSysJobList.value = [];
};

const msg = ref("");
const isJobMsgModal = ref(false);
const openJobMsgModal = (message: string) => {
  isJobMsgModal.value = true;
  msg.value = message;
};

/**
 * 檢查是否有非失敗(jobStatus != 3)排程
 */
const hasUnFailJobStatus = (
  jobList: Array<AgentCaseJobModel> | Array<SysJobModel>
) => {
  return (
    jobList.findIndex(
      (e: AgentCaseJobModel | SysJobModel) => e.jobStatus !== "3"
    ) > -1
  );
};
</script>
<style scoped lang="scss">
.single-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
</style>
                                                                                                                                                                                                                                                                                                                                                                                                               src/views/pages/system/EncryptionAndDecryptionView.vue                                              0100777 0000000 0000000 00000000143 14665752120 020563  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>加解密查詢 EncryptionAndDecryption</template>

<script setup lang="ts"></script>
                                                                                                                                                                                                                                                                                                                                                                                                                             src/views/pages/system/EventLogView.vue                                                             0100777 0000000 0000000 00000063441 14665752120 015502  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <div class="grid p-fluid">
    <PrimeToast />
    <div class="col-12">
      <div class="card">
        <!-- 查詢欄位 -->
        <Form :validation-schema="schema" @submit="doQueryEventLogList">
          <PrimePanel>
            <template #header>
              <div class="left-header">
                <span class="pi pi-search pr-2"></span>
                <span>LOG紀錄 查詢</span>
              </div>
            </template>
            <!-- 功能 & 操作 -->
            <div class="grid formgrid">
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3">功能</label>
                <PrimeDropdown
                  class="t-dropdown col-12 lg:col-9"
                  v-model="formData.functionCode"
                  :options="functionList"
                  optionLabel="menuText"
                  optionValue="menuValue"
                  placeholder="全部"
                />
              </div>
              <div class="col-12 mb-3 lg:col-6 t-form-group">
                <label class="t-label col-12 lg:col-3">操作</label>
                <PrimeDropdown
                  class="t-dropdown col-12 lg:col-9"
                  v-model="formData.operationCode"
                  :options="operationCodeList"
                  optionLabel="menuText"
                  optionValue="menuValue"
                  placeholder="全部"
                />
              </div>
            </div>
            <!-- API代碼  -->
            <Field
              v-slot="{ field, errorMessage }"
              v-model="formData.msgId"
              name="msgId"
            >
              <div class="grid formgrid">
                <div
                  class="col-12 mb-3 lg:col-6 t-form-group align-items-baseline"
                  :class="{
                    'input-mb-0': errorMessage,
                  }"
                >
                  <label class="t-label col-12 lg:col-3">API代碼</label>
                  <div class="w-full">
                    <PrimeInputText
                      style="width: 100%"
                      class="t-inputText"
                      type="text"
                      v-bind="field"
                      :class="{ 'p-invalid': errorMessage }"
                    />
                    <small class="p-error">
                      {{ errorMessage }}
                    </small>
                  </div>
                </div>
              </div>
            </Field>
            <!-- 執行日期  -->
            <div class="grid formgrid">
              <div
                class="col-12 mb-3 lg:col-6 t-form-group align-items-baseline"
              >
                <label class="t-label col-12 lg:col-3">執行日期</label>

                <!-- 執行日期(起)-日期 -->

                <div class="lg:mr-2">
                  <PrimeCalendar
                    class="t-dropdown lg:col-4 w-full"
                    :showIcon="true"
                    :placeholder="DATE_FORMAT"
                    :dateFormat="DATE_CALENDAR_FORMAT"
                    v-model="formData.operationStartDate"
                  />
                </div>

                <!-- 執行日期(起)-時間 -->
                <div>
                  <PrimeCalendar
                    class="t-dropdown lg:col-4 w-full"
                    :timeOnly="true"
                    :showIcon="true"
                    :icon="'pi pi-clock'"
                    hourFormat="24"
                    :placeholder="TIME_FORMAT"
                    :dateFormat="TIME_FORMAT"
                    v-model="formData.operationStartTime"
                    @focus="setOperationTime(formData, 'operationStartTime')"
                  />
                </div>
              </div>
              <div
                class="col-12 mb-3 lg:col-6 t-form-group align-items-baseline"
              >
                <label
                  class="t-label col-12 lg:col-3"
                  style="text-align: center"
                  >~</label
                >

                <!-- 執行日期(迄)-日期 -->
                <div class="lg:mr-2">
                  <PrimeCalendar
                    class="t-dropdown lg:col-4 w-full"
                    :showIcon="true"
                    :placeholder="DATE_FORMAT"
                    :dateFormat="DATE_CALENDAR_FORMAT"
                    v-model="formData.operationEndDate"
                  />
                  <!-- [ 執行日期(迄) ] - 驗證-->
                  <Field
                    v-slot="{ field, errorMessage }"
                    v-model.trim="formData.operationDateEnd"
                    name="operationDateEnd"
                  >
                    <input class="hidden" v-bind="field" />
                    <small class="p-error">
                      {{ errorMessage }}
                    </small>
                  </Field>
                </div>

                <!-- 執行日期(迄)-時間 -->
                <div>
                  <PrimeCalendar
                    class="t-dropdown lg:col-4 w-full"
                    :timeOnly="true"
                    :showIcon="true"
                    :icon="'pi pi-clock'"
                    hourFormat="24"
                    :placeholder="TIME_FORMAT"
                    :dateFormat="TIME_FORMAT"
                    v-model="formData.operationEndTime"
                    @focus="setOperationTime(formData, 'operationEndTime')"
                  />
                </div>
              </div>
            </div>
          </PrimePanel>

          <!-- 按鈕 - 清除 & 查詢-->
          <div class="btn-container text-center mb-4">
            <PrimeButton
              :label="COMMON_WORD.CLEAR"
              class="p-button-outlined mr-2 my-2 p-button-sm w-auto"
              icon="pi pi-sync"
              @click="doClearAndQuery"
            />
            <PrimeButton
              :label="COMMON_WORD.QUERY"
              icon="pi pi-search"
              class="mr-2 my-2 p-button-sm p-button-info w-auto"
              type="submit"
            />
          </div>
        </Form>

        <!-- 資料列表 -->
        <PrimeDataTable
          :lazy="true"
          :showGridlines="true"
          :paginator="true"
          :value="eventLogList"
          class="p-datatable-customers"
          :rows="formData.pageDataCount"
          :totalRecords="dataCount"
          dataKey="id"
          :sortOrder="formData.sort"
          paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
          :rowsPerPageOptions="[10, 50, 100]"
          currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
          responsiveLayout="scroll"
          @page="onTablePageChange($event)"
        >
          <template #header>
            <div class="">
              <i class="pi pi-table" />
              <span class="mx-2">LOG紀錄查詢 查詢結果</span>
            </div>
          </template>
          <template #empty> {{ COMMON_WORD.EMPTY }} </template>
          <template #loading> {{ COMMON_WORD.LOADING }} </template>
          <!-- 執行時間 -->
          <PrimeColumn field="operationDate" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('operationDate')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>執行時間</span>
                <span
                  v-if="sortMode.operationDate === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.operationDate === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.operationDate }} </span>
            </template>
          </PrimeColumn>

          <!-- 使用者姓名 -->
          <PrimeColumn field="userName" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('userName')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>使用者姓名</span>
                <span
                  v-if="sortMode.userName === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.userName === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.userName }} </span>
            </template>
          </PrimeColumn>

          <!-- IP位置 -->
          <PrimeColumn field="ipAddress" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('ipAddress')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>IP位置</span>
                <span
                  v-if="sortMode.ipAddress === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.ipAddress === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.ipAddress }} </span>
            </template>
          </PrimeColumn>

          <!-- API代碼 -->
          <PrimeColumn field="msgId" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('msgId')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>API代碼</span>
                <span
                  v-if="sortMode.msgId === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.msgId === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span
                >{{ slotProps.data.msgId }} - {{ slotProps.data.msgIdName }}
              </span>
            </template>
          </PrimeColumn>

          <!-- 功能 -->
          <PrimeColumn field="functionCode" style="min-width: 100px">
            <template #header>
              <div
                @click="sortModeFunction('functionCode')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>功能</span>
                <span
                  v-if="sortMode.functionCode === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.functionCode === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span
                >{{ slotProps.data.functionCode }} -
                {{ slotProps.data.functionCodeName }}
              </span>
            </template>
          </PrimeColumn>

          <!-- 操作 -->
          <PrimeColumn field="operationCodeName" style="min-width: 70px">
            <template #header>
              <div
                @click="sortModeFunction('operationCodeName')"
                class="cursor-pointer flex align-items-center w-full h-3rem -m-3 ml-0"
              >
                <span>操作</span>
                <span
                  v-if="sortMode.operationCodeName === 'up'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-up-alt"
                ></span>
                <span
                  v-else-if="sortMode.operationCodeName === 'down'"
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-amount-down"
                ></span>
                <span
                  v-else
                  class="ml-2 p-sortable-column-icon pi pi-fw pi-sort-alt"
                ></span>
              </div>
            </template>

            <template #body="slotProps">
              <span>{{ slotProps.data.operationCodeName }} </span>
            </template>
          </PrimeColumn>

          <!-- 動作 -->
          <PrimeColumn header="動作" style="width: 90px; min-width: 80px">
            <template #body="{ data }">
              <div class="text-center flex">
                <PrimeButton
                  label="檢視"
                  class="p-button-outlined p-button-sm"
                  @click="openDetailModal(data)"
                >
                </PrimeButton>
              </div>
            </template>
          </PrimeColumn>
        </PrimeDataTable>
      </div>
    </div>
  </div>
  <PrimeDialog
    v-model:visible="isDetailModal"
    :breakpoints="{ '960px': '75vw', '640px': '90vw' }"
    :style="{ width: '90vw' }"
    :modal="true"
    :draggable="false"
  >
    <template #header>
      <div>
        <span class="p-dialog-title">檢視</span>
      </div>
    </template>
    <div class="flex m-4">
      <PrimeCard class="col-6 m-2">
        <template #title> 上行 </template>
        <template #content>
          <pre><span v-html="detailMsg && detailMsg.reqContent"></span>
            <!-- 將\t 替換成空白符的關係，使用v-html才可顯示 -->
          </pre>
        </template>
      </PrimeCard>
      <PrimeCard class="col-6 m-2">
        <template #title> 下行 </template>
        <template #content>
          <pre><span v-html="detailMsg && detailMsg.resContent"></span>
            <!-- 將\t 替換成空白符的關係，使用v-html才可顯示 -->
          </pre>
        </template>
      </PrimeCard>
    </div>
    <!-- <div>
      <p class="m-4">{{ detailMsg }}</p>
    </div> -->
  </PrimeDialog>
</template>

<script setup lang="ts">
import { ref } from "vue";
import { getSystemParamList } from "@/api/shared-settings-service";
import { queryEventLogList } from "@/api/event-log-service";
import { DATE_CALENDAR_FORMAT, DATE_FORMAT, TIME_FORMAT } from "@/constants";
import * as COMMON_WORD from "@/constants/common-word";
import { SysCodeType } from "@/enums/sys-code-type";
import { Form, Field } from "vee-validate";
import { format } from "date-fns";
import type { SysOperationLogModel } from "@/models/sys-operation-log-model";

const dataCount = ref<number>(0);
// const operationCodeList = [
//   //「操作」下拉選單選項列表
//   { menuValue: "", menuText: "全部" },
//   { menuValue: "Q", menuText: "查詢" },
//   { menuValue: "A", menuText: "新增" },
//   { menuValue: "M", menuText: "修改" },
//   { menuValue: "R", menuText: "刪除" },
// ];

/**
 * 搜尋條件
 */
const formData = ref<{
  functionCode: string; //功能
  msgId: string; //API代碼
  operationCode: string; //操作
  operationDateStart: string; //查詢開始時間
  operationStartDate: string; //查詢開始時間-日期
  operationStartTime: string; //查詢開始時間-時間
  operationDateEnd: string; //查詢結束時間
  operationEndDate: string; //查詢結束時間-日期
  operationEndTime: string; //查詢結束時間-時間
  sort: number;
  sortColumn: string;
  page: number;
  pageDataCount: number;
}>({
  functionCode: "",
  msgId: "",
  operationCode: "",
  operationDateStart: "", //查詢開始時間
  operationStartDate: "", //查詢開始時間-日期
  operationStartTime: "", //查詢開始時間-時間
  operationDateEnd: "", //查詢結束時間
  operationEndDate: "", //查詢結束時間-日期
  operationEndTime: "", //查詢結束時間-時間
  page: 1,
  pageDataCount: 10,
  sort: 1,
  sortColumn: "",
});

/**
 * 資料列表排序
 */
const sortMode = ref({
  operationDate: null, //執行時間
  userName: null, //使用者姓名
  ipAddress: null, //IP位置
  msgId: null, //API代碼
  functionCode: null, //功能代碼
  functionCodeName: null, //功能名稱
  operationCodeName: null, //操作代碼名稱
});

const sortModeFunction = (field: string) => {
  if (sortMode.value[field] === "up") {
    sortMode.value[field] = "down";
    formData.value.sort = 1;
    formData.value.sortColumn = field;
  } else {
    sortMode.value[field] = "up";
    formData.value.sort = 0;
    formData.value.sortColumn = field;
  }
  doQueryEventLogList();
};

/**
 * 點擊「時間」，馬上帶入資料
 */
const setOperationTime = (item: object, key: string) => {
  if (!item[key]) {
    item[key] = new Date();
  }
};

/**
 * 清除
 */
const clearFormData = () => {
  formData.value.functionCode = "";
  formData.value.msgId = "";
  formData.value.operationCode = "";
  formData.value.operationDateStart = ""; //查詢開始時間
  formData.value.operationStartDate = ""; //查詢開始時間-日期
  formData.value.operationStartTime = ""; //查詢開始時間-時間
  formData.value.operationDateEnd = ""; //查詢結束時間
  formData.value.operationEndDate = ""; //查詢結束時間-日期
  formData.value.operationEndTime = ""; //查詢結束時間-時間
  formData.value.sortColumn = "";
};

/**
 * 清除 + 查詢
 */
const doClearAndQuery = () => {
  clearFormData();
  doQueryEventLogList();
};

/**
 * 換頁
 */
const onTablePageChange = ($event: object) => {
  //console.log("$event", $event);
  formData.value.pageDataCount = $event["rows"];
  formData.value.page = $event["page"] + 1;
  doQueryEventLogList();
};

/**
 * vee-velidate 驗證
 */
const schema = {
  operationDateEnd: () => {
    //「查詢開始時間(operationDateStart)」：「日期」+「時間」組字串
    if (formData.value.operationStartDate) {
      const operationDate = new Date(formData.value.operationStartDate);
      const operationTime = formData.value.operationStartTime
        ? new Date(formData.value.operationStartTime)
        : null;
      formData.value.operationDateStart = operationTime
        ? `${format(operationDate, DATE_FORMAT)} ${format(
            operationTime,
            "HH:mm"
          )}`
        : `${format(operationDate, "yyyy/MM/dd HH:mm")}`;
    }
    //「查詢結束時間(operationDateEnd)」：「日期」+「時間」組字串
    if (formData.value.operationEndDate) {
      const operationDate = new Date(formData.value.operationEndDate);
      const operationTime = formData.value.operationEndTime
        ? new Date(formData.value.operationEndTime)
        : null;
      formData.value.operationDateEnd = operationTime
        ? `${format(operationDate, DATE_FORMAT)} ${format(
            operationTime,
            "HH:mm"
          )}`
        : `${format(operationDate, "yyyy/MM/dd HH:mm")}`;
    }

    //「查詢開始日期 = 查詢結束日期 」起迄「時間」比大小
    const operationStartDateFormat =
      formData.value.operationStartDate &&
      `${format(new Date(formData.value.operationStartDate), DATE_FORMAT)} `;
    const operationEndDateFormat =
      formData.value.operationEndDate &&
      `${format(new Date(formData.value.operationEndDate), DATE_FORMAT)} `;

    if (formData.value.operationStartDate > formData.value.operationEndDate) {
      return "執行日期(迄)不得小於執行日期(起)";
    } else if (
      //查詢開始日期 = 查詢結束日期，執行時間(起)>執行時間(迄)
      operationStartDateFormat === operationEndDateFormat &&
      formData.value.operationStartTime &&
      formData.value.operationEndTime &&
      formData.value.operationStartTime > formData.value.operationEndTime
    ) {
      return "執行日期(迄)不得小於執行日期(起)";
    } else {
      return true;
    }
  },
  msgId: (value: string) => {
    if (value?.length > 50) {
      return COMMON_WORD.VALIDATE_MAX_LENGTH(50);
    } else {
      return true;
    }
  },
};

/**
 * F0000B003：查詢系統下拉參數檔列表 API
 * 後台功能清單:codeNo:'FunctionList'
 */
const operationCodeList = ref<
  { menuValue: string | boolean; menuText: string }[]
>([]);
const doGetOperationCodeList = async () => {
  getSystemParamList({ codeNo: SysCodeType.OperationCode }).then((response) => {
    if (response?.status === 200 && response.data) {
      operationCodeList.value =
        response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      //把 menuValue 轉成 boolean
      operationCodeList.value.unshift({
        menuValue: "",
        menuText: "全部",
      });
    }
  });
};
doGetOperationCodeList();

/**
 * F0000B003：查詢系統下拉參數檔列表 API
 * 後台功能清單:codeNo:'FunctionList'
 */
const functionList = ref<{ menuValue: string | boolean; menuText: string }[]>(
  []
);
const doGetFunctionList = async () => {
  getSystemParamList({ codeNo: SysCodeType.FunctionList }).then((response) => {
    if (response?.status === 200 && response.data) {
      functionList.value =
        response.data.body?.sysCodeList[0]?.sysMenuList ?? [];
      //把 menuValue 轉成 boolean
      functionList.value.unshift({
        menuValue: "",
        menuText: "全部",
      });
    }
  });
};
doGetFunctionList();

/**
 * F2401B001：查詢事件記錄檔列表資料 API
 */
const eventLogList = ref<object[] | undefined>([]);
const doQueryEventLogList = async () => {
  //「查詢開始時間(operationDateStart)」：「日期」+「時間」組字串
  if (formData.value.operationStartDate) {
    const operationDate = new Date(formData.value.operationStartDate);
    const operationTime = formData.value.operationStartTime
      ? new Date(formData.value.operationStartTime)
      : null;
    formData.value.operationDateStart = operationTime
      ? `${format(operationDate, DATE_FORMAT)} ${format(
          operationTime,
          "HH:mm"
        )}`
      : `${format(operationDate, "yyyy/MM/dd HH:mm")}`;
  }
  //「查詢結束時間(operationDateEnd)」：「日期」+「時間」組字串
  if (formData.value.operationEndDate) {
    const operationDate = new Date(formData.value.operationEndDate);
    const operationTime = formData.value.operationEndTime
      ? new Date(formData.value.operationEndTime)
      : null;
    formData.value.operationDateEnd = operationTime
      ? `${format(operationDate, DATE_FORMAT)} ${format(
          operationTime,
          "HH:mm"
        )}`
      : `${format(operationDate, "yyyy/MM/dd HH:mm")}`;
  }

  //「查詢開始日期 = 查詢結束日期，且時間都沒選 」起日時間設00:00，迄日時間設23:59
  if (
    formData.value.operationDateStart &&
    !formData.value.operationStartTime &&
    formData.value.operationDateEnd &&
    !formData.value.operationEndTime &&
    formData.value.operationDateStart === formData.value.operationDateEnd
  ) {
    formData.value.operationDateEnd = `${format(
      new Date(formData.value.operationEndDate),
      DATE_FORMAT
    )} 23:59`;
  }

  queryEventLogList({
    ...formData.value,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      eventLogList.value = response.data.body?.sysOperationLogList ?? [];
      //console.log("查詢事件記錄檔列表資料", eventLogList.value);
      dataCount.value = response.data.body?.dataCount ?? 0;
    }
  });
};
doQueryEventLogList();

const detailMsg = ref<SysOperationLogModel>();
const isDetailModal = ref(false);
const openDetailModal = (data: SysOperationLogModel) => {
  isDetailModal.value = true;
  const escapedStringReq = data.reqContent
    .replace(/\\n/g, "\n") //將 \\n 替換為換行符 \n
    .replace(/\\t/g, "\t") //將 \\t 替換為制表符 \t
    .replace(/([^\t\n])\t/g, "$1\n\t") // 在非 \t 和非 \n 字符前的 \t 前面加上換行符
    .replace(/\t/g, "&emsp;") // 將\t 替換成空白符
    .replace(/\\+/g, ""); //刪除單獨的反斜線 \
  const escapedStringRes = data.resContent
    .replace(/([^\t\n])\t/g, "$1\n\t") // 在非 \t 和非 \n 字符前的 \t 前面加上換行符
    .replace(/\t/g, "&emsp;"); // 將\t 替換成空白符;
  detailMsg.value = {
    ...data,
    reqContent: escapedStringReq,
    resContent: escapedStringRes,
  };
};
</script>
<style>
pre {
  overflow-wrap: break-word;
  white-space: pre-wrap;
}
</style>
                                                                                                                                                                                                                               src/views/sample/                                                                                   0040777 0000000 0000000 00000000000 14665752120 011231  5                                                                                                    ustar 00                                                                                                                                                                                                                                                       src/views/sample/components/                                                                        0040777 0000000 0000000 00000000000 14665752120 013416  5                                                                                                    ustar 00                                                                                                                                                                                                                                                       src/views/sample/components/PageHeader.vue                                                          0100777 0000000 0000000 00000000373 14665752120 016127  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <h1 v-if="title" class="page-header">{{ title }}</h1>
</template>

<script setup lang="ts">
defineProps<{
  title: string;
}>();
</script>

<style scoped lang="scss">
.page-header {
  text-decoration: underline;
}
</style>
                                                                                                                                                                                                                                                                     src/views/sample/IndexView.vue                                                                      0100777 0000000 0000000 00000005740 14665752120 013662  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       <template>
  <PageHeader :title="$t('Sample Index')" />
  <div>
    <label>選擇語系:</label>
    <select v-model="currentLanguage">
      <option value="en">English</option>
      <option value="zh">中文</option>
    </select>
  </div>
  <hr />
  <AdvancedTextarea v-model="comment" />
  <div>
    <label>Textarea 輸入文字</label>
    <div>
      {{ comment }}
    </div>
  </div>
  <hr />
  <div><button @click="doQuery" class="sample-button">Do Query</button></div>
  <div>
    <span>name: </span><input type="text" v-model="viewData.name" />
    <div class="sample-container">
      <div class="sample-title">Response:</div>
      <div>name: {{ viewData.name }}</div>
      <div>age: {{ viewData.age }}</div>
      <div>count: {{ viewData.count }}</div>
    </div>
  </div>
  <hr />
  <div>
    <label>自動轉大寫</label>
    <input
      type="text"
      class="sample-input"
      v-model="viewData.sampleInputUppercase"
      v-input-to-uppercase
    />
  </div>
  <div>
    <label>只能輸入英文字母</label>
    <input
      type="text"
      class="sample-input"
      v-model="viewData.sampleInputAlphabeticOnly"
      v-input-alphabetic-only
    />
  </div>
  <div>
    <label>只能輸入數字</label>
    <input
      type="text"
      class="sample-input"
      v-model="viewData.sampleInputNumberOnly"
      v-input-number-only
    />
  </div>
  <div>
    <label>PrimeVue InputText 組件</label>
    <PrimeInputText v-model="viewData.primeInputTextValue" />
    <hr />
    <div>
      {{ viewData.primeInputTextValue }}
    </div>
  </div>
</template>

<script setup lang="ts">
import { getSample } from "@/api/sample-service";
import { reactive, ref } from "vue";
import { useI18n } from "vue-i18n";
import PageHeader from "./components/PageHeader.vue";

const comment = ref<string>("");
const viewData = reactive<{
  name: string;
  age?: number;
  count?: number;
  sampleInputUppercase: string;
  sampleInputAlphabeticOnly: string;
  sampleInputNumberOnly: string;
  primeInputTextValue: string;
}>({
  name: "sample",
  sampleInputUppercase: "",
  sampleInputAlphabeticOnly: "",
  sampleInputNumberOnly: "",
  primeInputTextValue: "",
});

const { locale } = useI18n({ useScope: "global" });
const currentLanguage = locale;

const doQuery = () => {
  getSample({
    name: viewData.name,
  }).then((response) => {
    if (response?.status === 200 && response.data) {
      viewData.age = response.data.age;
      viewData.count = response.data.count;
    } else {
      viewData.age = undefined;
      viewData.count = undefined;
    }
  });
};
</script>

<style scoped lang="scss">
.sample-button {
  margin: 10px 0;
}

.sample-container {
  margin: 10px 0;
}

.sample-title {
  margin-bottom: 5px;
  font-size: larger;
  font-weight: bold;
}

.sample-input {
  display: block;
  width: 100%;
  padding: 6px 8px;
  margin-bottom: 10px;
  font-size: large;
}
</style>
                                tsconfig.app.json                                                                                   0100777 0000000 0000000 00000001401 14666224151 011305  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       {
  "extends": "@vue/tsconfig/tsconfig.web.json",
  "include": [
    "env.d.ts",
    "src/**/*",
    "src/**/*.vue",
    "src/locales/*.json",
    "src/**/*.json"
  ],
  "exclude": ["src/**/__tests__/*", "dist", "node_modules"],
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noImplicitReturns": true,
    "suppressImplicitAnyIndexErrors": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "composite": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "types": [
      "vite/client",
      "reflect-metadata",
      "@intlify/vite-plugin-vue-i18n/client"
    ],
    "lib": ["ES2016", "ES2017", "DOM", "DOM.Iterable"]
  }
}
                                                                                                                                                                                                                                                               tsconfig.config.json                                                                                0100777 0000000 0000000 00000000343 14665752120 011777  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       {
  "extends": "@vue/tsconfig/tsconfig.node.json",
  "include": ["vite.config.*", "vitest.config.*", "cypress.config.*", "playwright.config.*"],
  "compilerOptions": {
    "composite": true,
    "types": ["node"]
  }
}
                                                                                                                                                                                                                                                                                             tsconfig.json                                                                                       0100777 0000000 0000000 00000000463 14666240632 010537  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       {
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "files": [],
  "references": [
    {
      "path": "./tsconfig.config.json"
    },
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.vitest.json"
    }
  ]
}
                                                                                                                                                                                                             tsconfig.vitest.json                                                                                0100777 0000000 0000000 00000000211 14665752120 012042  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       {
  "extends": "./tsconfig.app.json",
  "exclude": [],
  "compilerOptions": {
    "composite": true,
    "types": ["node"]
  }
}
                                                                                                                                                                                                                                                                                                                                                                                       vite.config.ts                                                                                      0100777 0000000 0000000 00000004477 14665752120 010623  0                                                                                                    ustar 00                                                                                                                                                                                                                                                       import { fileURLToPath, URL } from "node:url";
// 啟用 visualizer 可分析打包後檔案大小進行分析，可再針對特定程式進行 code splitting，優化載入速度
// 產生分析結果檔案為 stats.html
// 本工具只在本地端分析使用，請勿將此功能開啟後 commit/push 至遠端 repo
// import { visualizer } from "rollup-plugin-visualizer";
import vue from "@vitejs/plugin-vue";
import vueJsx from "@vitejs/plugin-vue-jsx";
import vueI18n from "@intlify/vite-plugin-vue-i18n";
import { defineConfig, loadEnv, splitVendorChunkPlugin } from "vite";
import { dirname, resolve } from "node:path";
import crypto from "crypto";

const htmlPlugin = (title: string) => {
  return {
    name: "html-transform",
    transformIndexHtml(html: string) {
      return html.replace(/<title>(.*?)<\/title>/, `<title>${title}</title>`);
    },
  };
};

// https://vitejs.dev/config/
export default ({ mode }: { mode: string }) => {
  console.log("vite.config.ts - mode", mode);

  process.env = { ...process.env, ...loadEnv(mode, process.cwd()) };
  const htmlTitle = process.env.VITE_APP_TITLE || "";
  const currentEnv =
    mode !== "production" ? `- ${process.env.VITE_APP_MODE}` : "";
  const nonceValue = crypto.randomBytes(16).toString("base64");
  return defineConfig({
    server: {
      headers: {
        "Content-Security-Policy": `default-src 'self' ${process.env.VITE_API_URL}; style-src 'self' 'unsafe-inline'; script-src 'self' 'nonce-${nonceValue}'; img-src 'self' data:; connect-src 'self' ${process.env.VITE_API_URL} blob:; frame-src 'none'; frame-ancestors 'none';`,
      },
    },
    plugins: [
      htmlPlugin(htmlTitle + currentEnv),
      vue({
        reactivityTransform: true,
      }),
      vueJsx(),
      vueI18n({
        include: resolve(
          dirname(fileURLToPath(import.meta.url)),
          "./path/to/src/locales/**"
        ),
      }),
      splitVendorChunkPlugin(),
      // visualizer(),
    ],
    resolve: {
      alias: {
        "@": fileURLToPath(new URL("./src", import.meta.url)),
      },
    },
    css: {
      preprocessorOptions: {
        scss: {
          additionalData: `
          @import "@/assets/styles/variables";
          @import "@/assets/styles/mixins";
          `,
        },
      },
    },
  });
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
